// ==UserScript==
// @name 	Travian4 Beyond - SSE
// @version 	4.0.0.11.0038
// @author	npocmu (Black_Cat, ms99, Nux, Lux, onetmt, Velonis Petros, Richard Laffers, Szabka, Victor Garcia-aka Croc-)
// @namespace 	T4
// @description	A lot of interface enhancements and tools for Travian 4.X.
// @source 	http://userscripts.org/scripts/show/98310
// @identifier 	http://userscripts.org/scripts/show/98310.user.js
// @copyright	© npocmu 2011-2013, © Black_Cat 2010 © ms99, 2008-2010 (parts of this script © Nux, Lux, onetmt, Velonis Petros, Richard Laffers, Szabka, Victor Garcia-aka Croc-)
// @license 	Creative Commons Attribution-Noncommercial-Share Alike 3.0 Germany License
// @include 	http://*.travian*.*/*.php*
// @exclude 	http://*.travian*.*/
// @exclude 	http://*.travian*.*/hilfe.php*
// @exclude	http://*.travian*.*/log*.php*
// @exclude 	http://*.travian*.*/index.php*
// @exclude 	http://*.travian*.*/anleitung.php*
// @exclude 	http://*.travian*.*/impressum.php*
// @exclude 	http://*.travian*.*/anmelden.php*
// @exclude 	http://*.travian*.*/gutscheine.php*
// @exclude 	http://*.travian*.*/spielregeln.php*
// @exclude 	http://*.travian*.*/links.php*
// @exclude 	http://*.travian*.*/geschichte.php*
// @exclude 	http://*.travian*.*/gold.php*
// @exclude 	http://*.travian*.*/tutorial.php*
// @exclude 	http://*.travian*.*/manual.php*
// @exclude 	http://*.travian*.*/manual.php*
// @exclude 	http://*.travian*.*/ajax.php*
// @exclude 	http://*.travian*.*/ad/*
// @exclude 	http://*.travian*.*/chat/*
// @exclude 	http://forum.travian*.*
// @exclude 	http://board.travian*.*
// @exclude 	http://shop.travian*.*
// @exclude 	http://*.travian*.*/activate.php*
// @exclude 	http://*.travian*.*/support.php*
// @exclude  	http://help.travian*.*
// @exclude  	http://analytics.traviangames.com/*
// @exclude 	http://*.traviantoolbox.com/*
// @exclude 	http://*.traviandope.com/*
// @exclude 	http://*.travianteam.com/*
// @exclude 	http://travianutility.netsons.org/*
// @exclude 	*.css
// @exclude 	*.js
// ==/UserScript==

/**
 *The original script from Victor Garcia (aka Croc) is licensed under the
 *Creative Commons Attribution-NonCommercial-ShareAlike 2.5 Spain License
 *To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/2.5/es/
 *
 *The updated script from ms99 is licensed under the
 *Creative Commons Attribution-Noncommercial-Share Alike 3.0 Germany License
 *To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/de/
 *
 *An English translation of the "Creative Commons Attribution-Noncomercial-Share Alike 3.0 License"
 *can be found here http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en
/*****************************************************************************
 *Copyright © npocmu 2011-2013
 *Copyright © ms99, 2008-2010
 *Parts of this script Copyright © Nux, 2008
 *Setup page behavior Copyright © Lux, 2008
 *Big icons behavior (except default & except Setup) Copyright © onetmt, 2009
 *Until then & Residue calculations Copyright © Velonis Petros (mail: velonis.gr) , 2009
 *Parts of this script Copyright © Szabka, 2008
 *Initial script Copyright Victor Garcia (aka Croc) ©, 2007
 *Parts of this script (functions for moving a report/message displayed as a pop-up with the mouse) Copyright © Richard Laffers, 2007
 *
 *Parts of this code are provided or based on ideas and/or code written by others
 *Additional images embedded in this script provided by ms99, Nux, Lux, DMaster, Brains, fr3nchlover, CuPliz13
 *Translations to different languages are provided by users of this script
 *
 *IMPORTANT CONTRIBUTIONS TO THIS SCRIPT (listed in alphabetical order):
 *ACE, Acr111, BmW, Brains, Chu Chee Meng, CuPliz13, Dakkie, digital012, david.macej, DMaster, Dream1, EXEMOK, ezGertieY,
 *FitForTheLooneyVille, friedturnip, fr3nchlover, GotGs, Lassie, Lux, MarioCheng, matteo466, MrRyMan, napkin, Nux, onetmt,
 *phob0z, rtellezi, Rypi, Sag, samad909, someweirdnobody, Thornheart, vampiricdust, Velonis Petros, yabash, zerokmatrix, Zippo
 *
 *Please have understanding if I've forgotten somebody with a relevant contribution to this script
 *Please send a message via the userscripts.org mailing facility, for credits
 *
 *Other contributors' (nick)names may be provided in the header of (or inside) the functions
 *SPECIAL THANKS to all contributors and translators of this script !
 *
 *FUCK-OFF swarnava/piece of stinky shit ! You're only a stupid, idiot copy-paster ! We all reject you as you're nothing else than an abortion !
 *****************************************************************************/

(function () {
	if (!this.GM_getValue || (this.GM_getValue.toString && this.GM_getValue.toString().indexOf("not supported")>-1)) {
		this.GM_getValue=function (key,def) {
			return localStorage[key] || def;
		};
		this.GM_setValue=function (key,value) {
			return localStorage[key]=value;
		};
		this.GM_deleteValue=function (key) {
			return delete localStorage[key];
		};
		this.GM_addStyle=function (css)
		{
			var style=document.createElement('style');
			style.setAttribute('type','text/css');
			style.innerHTML=css;
			document.head.appendChild(style);
		}
	}
	
	var crtPage = window.location.href;
	var urlNow = window.location.pathname + window.location.search;
	window = unsafeWindow;
	var crtUrl = parseUri(crtPage);
	var TB3O = {};
	TB3O.TBStartTime = new Date().getTime();
	TB3O.TBEndTime = TB3O.TBStartTime;
	TB3O.version = '4.0.0.11.0038';
	TB3O.url = 'http://userscripts.org/scripts/source/98310.user.js';
	TB3O.shN = 'TB4-SSE';
	TB3O.sn = '';
	TB3O.BrT = "";
	TB3O.nTARbT = '';
	TB3O.nTASb = '';
	TB3O.nTAUb = '';
	TB3O.nTANb = '';
	TB3O.bIsNPCAvailable = (crtPage.indexOf(".org") === -1);
	TB3O.bIsNPCInVillage = TB3O.bIsNPCAvailable;
	TB3O.gServer;
	TB3O.fullServerName;
	TB3O.serverTime;
	TB3O.localTimeOffset = 0;
	TB3O.desiredTimeOffset = 0;
	TB3O.localGP = "";
	TB3O.nLayoutType = 2;
	TB3O.iLayoutMinWidth = 980;
	TB3O.iBiC = 0;
	TB3O.VillagesCount = 1;
	TB3O.VillagesList = null;
	TB3O.VillagesList2 = null;
	TB3O.VillagesInfo = {};
	TB3O.ActiveVillageId = undefined;
	TB3O.ActiveVillageMapId = undefined;
	TB3O.ActiveVillageInfo = undefined;
	TB3O.VillagesTrInfo = new PersistentVillageCashe("TrI");
	TB3O.UserID = '0';
	TB3O.U = ['', '', '', '', '', '', '', 1];
	TB3O.MerchantsInfo = {};
	TB3O.Overview = null;
	TB3O.pageSelector = "";
	TB3O.hOffBonus = 0;
	TB3O.ServerInfo = undefined;
	TB3O.nServerType = 0;
	TB3O.nMerchantSpeedFactor = [1, 3, 2, 5, 4, 8];
	TB3O.nMerchantCapacityFactor = [1, 3, 2, 5, 4, 8];
	TB3O.nTroopSpeedFactor = [1, 2, 2, 2, 2, 3];
	TB3O.ResInfoTotals = new ResourcesInfo();
	TB3O.Timeouts = {
		"ttf_update" : 1000,
		"min_res_freq" : 500,
		"resbar_update" : 10000,
		"reports_delete" : 500,
		"reports_search" : 200,
		"map_refresh" : 0,
		"tooltip" : 500,
		"refresh_delay" : 500,
	};
	TB3O.d2spB = [0, 0, 0, 0, 0, 0, 0, 0, 0];
	TB3O.xCrt = null;
	TB3O.yCrt = null;
	TB3O.CNc = ['#000000', '#FDF8C1', '#7DFF7D', '#FF9696', '#FFC84B', '#F096F0'];
	TB3O.DFc = ['#000000', 'white'];
	TB3O.isTtB = false;
	TB3O.lng = 'en';
	TB3O.O = [];
	var docDir,
	DOMdocDir;
	if (document.defaultView.getComputedStyle(document.body, null).getPropertyValue("direction") === 'rtl') {
		docDir = ['right', 'left'];
		DOMdocDir = ['Right', 'Left'];
	} else {
		docDir = ['left', 'right'];
		DOMdocDir = ['Left', 'Right'];
	}
	var attrInject$ = ['class', 'tbInject'];
	var avRace = ['Romans', 'Teutons', 'Gauls'];
	TB3O.MerchantsSpeed = {
		'Romans' : 16,
		'Teutons' : 12,
		'Gauls' : 24
	}
	TB3O.DefaultMerchantsCapacity = {
		'Romans' : 500,
		'Teutons' : 1000,
		'Gauls' : 750
	}
	var arAvLang = ['Server language', 'ae', 'ar', 'ba', 'bg', 'br', 'cl', 'cn', 'cz', 'de', 'dk', 'el', 'en', 'es', 'fi', 'fr', 'gr', 'hk', 'hr', 'hu', 'id', 'il', 'ir', 'it', 'jp', 'kr', 'lt', 'lv', 'mx', 'my', 'nl', 'no', 'ph', 'pl', 'pt', 'ro', 'rs', 'ru', 'si', 'sk', 'th', 'tr', 'tw', 'ua', 'vn'];
	function xTiT(aType, aName, t1) {
		this.type = aType;
		this.name = aName;
		this.t1 = t1;
		var aD = new Date();
		aD.setTime(aD.getTime());
		this.crtDate = aD;
		return this;
	}
	function xTtT(tType, necRes, tTime, aRes) {
		this.necRes = necRes;
		this.tType = tType;
		this.tTime = tTime;
		this.aRes = aRes;
		return this;
	}
	var arrTtT = new Array();
	var defaultMF = [5, 5, 4, 2, 4];
	var marketFilters;
	var wsSName;
	var wsAnalysers = [["World Analyser", "http://www.travian.ws/analyser.pl", getUrlWorldAnalyser], ["Travian-Live", "http://travian-live.com", getUrlTravianLive], ["Travian Box", "http://travianbox.com", getUrlTravianBox], ["GetterTools", "http://www.gettertools.com", getUrlGetterTools], ];
	var mapAnalysers = [["Travmap", "http://travmap.shishnet.org/", getUrlTravmap], ];
	var repSites = [["Travilog", "http://travilog.org.ua", function (site) {
				return site + "/" + TB3O.lng;
			}
		], ["T-Reports.net", "http://travian-reports.net", getUrlTravianReports], ["Travian Worlds", "http://report.travianworlds.com", function (site) {
				return site + "/intl/" + TB3O.lng;
			}
		], ["4Travian", "http://4travian.org", function (site) {
				return site;
			}
		], ["t4log", "http://www.t4log.com", function (site) {
				return site;
			}
		], ];
	var warsimLinks = ["warsim.php", "http://travian.kirilloid.ru/warsim.php"];
	var jsVoid = 'javaScript:void(0)';
	var xGIF = "a/x.gif";
	var ID_SIDE_INFO = 'side_info';
	var ID_HEADER = 'header';
	var ID_MTOP = 'mtop';
	var ID_CONTENT = 'content';
	var ID_MID = 'mid';
	var ID_MID2 = 'content';
	var gIc = {};
	var t = {};
	var NPCResources = 'npcResources';
	var NPCbacklinkName = 'npcBackLink';
	var NPCURL = '/build.php?gid=17&t=3';
	var spLnk = '';
	var bksLnk = 'build.php?gid=19';
	TB3O.TBTRT = function () {
		return TB3O.TBEndTime - TB3O.TBStartTime;
	}
	var villageTypes = [[], [3, 3, 3, 9], [3, 4, 5, 6], [4, 4, 4, 6], [4, 5, 3, 6], [5, 3, 4, 6], [1, 1, 1, 15], [4, 4, 3, 7], [3, 4, 4, 7], [4, 3, 4, 7], [3, 5, 4, 6], [4, 3, 5, 6], [5, 4, 3, 6], ];
	var oasisTypes = [[], [25, 0, 0, 0], [25, 0, 0, 0], [25, 0, 0, 25], [0, 25, 0, 0], [0, 25, 0, 0], [0, 25, 0, 25], [0, 0, 25, 0], [0, 0, 25, 0], [0, 0, 25, 25], [0, 0, 0, 25], [0, 0, 0, 25], [0, 0, 0, 50], [50, 0, 0, 0], [0, 50, 0, 0], [0, 0, 50, 0]];
	var celCost = [[6400, 6650, 5940, 1340, [500, 250, 333, 250, 222, 111]], [29700, 33250, 32000, 6700, [2000, 1000, 1333, 1000, 888, 444]]];
	var uc = new Array();
	uc[1] = [120, 100, 150, 30, 50, 40, 35, 50, 6, 1];
	uc[2] = [100, 130, 160, 70, 20, 30, 65, 35, 5, 1];
	uc[3] = [150, 160, 210, 80, 50, 70, 40, 25, 7, 1];
	uc[4] = [140, 160, 20, 40, 0, 0, 20, 10, 16, 2];
	uc[5] = [550, 440, 320, 100, 100, 120, 65, 50, 14, 3];
	uc[6] = [550, 640, 800, 180, 70, 180, 80, 105, 10, 4];
	uc[7] = [900, 360, 500, 70, 0, 60, 30, 75, 4, 3];
	uc[8] = [950, 1350, 600, 90, 0, 75, 60, 10, 3, 6];
	uc[9] = [30750, 27200, 45000, 37500, 0, 50, 40, 30, 4, 5];
	uc[10] = [4600, 4200, 5800, 4400, 3000, 0, 80, 80, 5, 1];
	uc[11] = [95, 75, 40, 40, 60, 40, 20, 5, 7, 1];
	uc[12] = [145, 70, 85, 40, 40, 10, 35, 60, 7, 1];
	uc[13] = [130, 120, 170, 70, 50, 60, 30, 30, 6, 1];
	uc[14] = [160, 100, 50, 50, 0, 0, 10, 5, 9, 1];
	uc[15] = [370, 270, 290, 75, 110, 55, 100, 40, 10, 2];
	uc[16] = [450, 515, 480, 80, 80, 150, 50, 75, 9, 3];
	uc[17] = [1000, 300, 350, 70, 0, 65, 30, 80, 4, 3];
	uc[18] = [900, 1200, 600, 60, 0, 50, 60, 10, 3, 6];
	uc[19] = [35500, 26600, 25000, 27200, 0, 40, 60, 40, 4, 4];
	uc[20] = [5800, 4400, 4600, 5200, 3000, 10, 80, 80, 5, 1];
	uc[21] = [100, 130, 55, 30, 35, 15, 40, 50, 7, 1];
	uc[22] = [140, 150, 185, 60, 45, 65, 35, 20, 6, 1];
	uc[23] = [170, 150, 20, 40, 0, 0, 20, 10, 17, 2];
	uc[24] = [350, 450, 230, 60, 75, 90, 25, 40, 19, 2];
	uc[25] = [360, 330, 280, 120, 35, 45, 115, 55, 16, 2];
	uc[26] = [500, 620, 675, 170, 65, 140, 50, 165, 13, 3];
	uc[27] = [950, 555, 330, 75, 0, 50, 30, 105, 4, 3];
	uc[28] = [960, 1450, 630, 90, 0, 70, 45, 10, 3, 6];
	uc[29] = [30750, 45400, 31000, 37500, 0, 40, 50, 50, 5, 4];
	uc[30] = [4400, 5600, 4200, 3900, 3000, 0, 80, 80, 5, 1];
	uc[31] = [0, 0, 0, 0, 0, 10, 25, 20, 0, 1];
	uc[32] = [0, 0, 0, 0, 0, 20, 35, 40, 0, 1];
	uc[33] = [0, 0, 0, 0, 0, 60, 40, 60, 0, 1];
	uc[34] = [0, 0, 0, 0, 0, 80, 66, 50, 0, 1];
	uc[35] = [0, 0, 0, 0, 0, 50, 70, 33, 0, 2];
	uc[36] = [0, 0, 0, 0, 0, 100, 80, 70, 0, 2];
	uc[37] = [0, 0, 0, 0, 0, 250, 140, 200, 0, 3];
	uc[38] = [0, 0, 0, 0, 0, 450, 380, 240, 0, 3];
	uc[39] = [0, 0, 0, 0, 0, 200, 170, 250, 0, 3];
	uc[40] = [0, 0, 0, 0, 0, 600, 440, 520, 0, 5];
	uc[41] = [0, 0, 0, 0, 0, 20, 35, 50, 0, 1];
	uc[42] = [0, 0, 0, 0, 0, 65, 30, 10, 0, 1];
	uc[43] = [0, 0, 0, 0, 0, 100, 90, 75, 0, 1];
	uc[44] = [0, 0, 0, 0, 0, 0, 10, 0, 0, 1];
	uc[45] = [0, 0, 0, 0, 0, 155, 80, 50, 0, 2];
	uc[46] = [0, 0, 0, 0, 0, 170, 140, 80, 0, 3];
	uc[47] = [0, 0, 0, 0, 0, 250, 120, 150, 0, 6];
	uc[48] = [0, 0, 0, 0, 0, 60, 45, 10, 0, 5];
	uc[49] = [0, 0, 0, 0, 0, 80, 50, 50, 0, 0];
	uc[50] = [0, 0, 0, 0, 0, 30, 40, 40, 0, 0];
	uc[98] = [20, 30, 10, 20, 0, 0, 0, 0, 0, 0];
	uc[99] = [20, 30, 10, 20, 0, 0, 0, 0, 0, 0];
	var bCost = [[0], [[0, 0, 0, 0, 0, 0], [40, 100, 50, 60, 1, 2], [65, 165, 85, 100, 1, 3], [110, 280, 140, 165, 2, 4], [185, 465, 235, 280, 2, 5], [310, 780, 390, 465, 2, 6], [520, 1300, 650, 780, 3, 8], [870, 2170, 1085, 1300, 4, 10], [1450, 3625, 1810, 2175, 4, 12], [2420, 6050, 3025, 3630, 5, 14], [4040, 10105, 5050, 6060, 6, 16], [6750, 16870, 8435, 10125, 7, 18], [11270, 28175, 14090, 16905, 9, 20], [18820, 47055, 23525, 28230, 11, 22], [31430, 78580, 39290, 47150, 13, 24], [52490, 131230, 65615, 78740, 15, 26], [87660, 219155, 109575, 131490, 18, 29], [146395, 365985, 182995, 219590, 22, 32], [244480, 611195, 305600, 366715, 27, 35], [408280, 1020695, 510350, 612420, 32, 38], [681825, 1704565, 852280, 1022740, 38, 41], [1138650, 2846620, 1423310, 1707970, 38, 44], [1901540, 4753855, 2376925, 2852315, 38, 47], [3175575, 7938935, 3969470, 4763360, 38, 50], [5303210, 13258025, 6629015, 7954815, 38, 53], [8856360, 22140900, 11070450, 13284540, 38, 56]], [[0, 0, 0, 0, 0, 0], [80, 40, 80, 50, 1, 2], [135, 65, 135, 85, 1, 3], [225, 110, 225, 140, 2, 4], [375, 185, 375, 235, 2, 5], [620, 310, 620, 390, 2, 6], [1040, 520, 1040, 650, 3, 8], [1735, 870, 1735, 1085, 4, 10], [2900, 1450, 2900, 1810, 4, 12], [4840, 2420, 4840, 3025, 5, 14], [8080, 4040, 8080, 5050, 6, 16], [13500, 6750, 13500, 8435, 7, 18], [22540, 11270, 22540, 14090, 9, 20], [37645, 18820, 37645, 23525, 11, 22], [62865, 31430, 62865, 39290, 13, 24], [104985, 52490, 104985, 65615, 15, 26], [175320, 87660, 175320, 109575, 18, 29], [292790, 146395, 292790, 182995, 22, 32], [488955, 244480, 488955, 305600, 27, 35], [816555, 408280, 816555, 510350, 32, 38], [1363650, 681825, 1363650, 852280, 38, 41], [2277295, 1138650, 2277295, 1423310, 38, 44], [3803085, 1901540, 3803085, 2376925, 38, 47], [6351150, 3175575, 6351150, 3969470, 38, 50], [10606420, 5303210, 10606420, 6629015, 38, 53], [17712720, 8856360, 17712720, 11070450, 38, 56]], [[0, 0, 0, 0, 0, 0], [100, 80, 30, 60, 1, 3], [165, 135, 50, 100, 1, 5], [280, 225, 85, 165, 2, 7], [465, 375, 140, 280, 2, 9], [780, 620, 235, 465, 2, 11], [1300, 1040, 390, 780, 3, 13], [2170, 1735, 650, 1300, 4, 15], [3625, 2900, 1085, 2175, 4, 17], [6050, 4840, 1815, 3630, 5, 19], [10105, 8080, 3030, 6060, 6, 21], [16870, 13500, 5060, 10125, 7, 24], [28175, 22540, 8455, 16905, 9, 27], [47055, 37645, 14115, 28230, 11, 30], [78580, 62865, 23575, 47150, 13, 33], [131230, 104985, 39370, 78740, 15, 36], [219155, 175320, 65745, 131490, 18, 39], [365985, 292790, 109795, 219590, 22, 42], [611195, 488955, 183360, 366715, 27, 45], [1020695, 816555, 306210, 612420, 32, 48], [1704565, 1363650, 511370, 1022740, 38, 51], [2846620, 2277295, 853985, 1707970, 38, 54], [4753855, 3803085, 1426155, 2852315, 38, 57], [7938935, 6351150, 2381680, 4763360, 38, 60], [13258025, 10606420, 3977410, 7954815, 38, 63], [22140900, 17712720, 6642270, 13284540, 38, 66]], [[0, 0, 0, 0, 0, 0], [70, 90, 70, 20, 1, 0], [115, 150, 115, 35, 1, 0], [195, 250, 195, 55, 2, 0], [325, 420, 325, 95, 2, 0], [545, 700, 545, 155, 2, 0], [910, 1170, 910, 260, 3, 1], [1520, 1950, 1520, 435, 4, 2], [2535, 3260, 2535, 725, 4, 3], [4235, 5445, 4235, 1210, 5, 4], [7070, 9095, 7070, 2020, 6, 5], [11810, 15185, 11810, 3375, 7, 6], [19725, 25360, 19725, 5635, 9, 7], [32940, 42350, 32940, 9410, 11, 8], [55005, 70720, 55005, 15715, 13, 9], [91860, 118105, 91860, 26245, 15, 10], [153405, 197240, 153405, 43830, 18, 12], [256190, 329385, 256190, 73195, 22, 14], [427835, 550075, 427835, 122240, 27, 16], [714485, 918625, 714485, 204140, 32, 18], [1193195, 1534105, 1193195, 340915, 38, 20], [1992635, 2561960, 1992635, 569325, 38, 22], [3327700, 4278470, 3327700, 950770, 38, 24], [5557255, 7145045, 5557255, 1587785, 38, 26], [9280620, 11932225, 9280620, 2651605, 38, 28], [15498630, 19926810, 15498630, 4428180, 38, 30]], [[0, 0, 0, 0, 0, 0], [520, 380, 290, 90, 1, 4], [935, 685, 520, 160, 1, 6], [1685, 1230, 940, 290, 2, 8], [3035, 2215, 1690, 525, 2, 10], [5460, 3990, 3045, 945, 2, 12]], [[0, 0, 0, 0, 0, 0], [440, 480, 320, 50, 1, 3], [790, 865, 575, 90, 1, 5], [1425, 1555, 1035, 160, 2, 7], [2565, 2800, 1865, 290, 2, 9], [4620, 5040, 3360, 525, 2, 11]], [[0, 0, 0, 0, 0, 0], [200, 450, 510, 120, 1, 6], [360, 810, 920, 215, 1, 9], [650, 1460, 1650, 390, 2, 12], [1165, 2625, 2975, 700, 2, 15], [2100, 4725, 5355, 1260, 2, 18]], [[0, 0, 0, 0, 0, 0], [500, 440, 380, 1240, 1, 3], [900, 790, 685, 2230, 1, 5], [1620, 1425, 1230, 4020, 2, 7], [2915, 2565, 2215, 7230, 2, 9], [5250, 4620, 3990, 13015, 2, 11]], [[0, 0, 0, 0, 0, 0], [1200, 1480, 870, 1600, 1, 4], [2160, 2665, 1565, 2880, 1, 6], [3890, 4795, 2820, 5185, 2, 8], [7000, 8630, 5075, 9330, 2, 10], [12595, 15535, 9135, 16795, 2, 12]], [[0, 0, 0, 0, 0, 0], [130, 160, 90, 40, 1, 1], [165, 205, 115, 50, 1, 2], [215, 260, 145, 65, 2, 3], [275, 335, 190, 85, 2, 4], [350, 430, 240, 105, 2, 5], [445, 550, 310, 135, 3, 6], [570, 705, 395, 175, 4, 7], [730, 900, 505, 225, 4, 8], [935, 1155, 650, 290, 5, 9], [1200, 1475, 830, 370, 6, 10], [1535, 1890, 1065, 470, 7, 12], [1965, 2420, 1360, 605, 9, 14], [2515, 3095, 1740, 775, 11, 16], [3220, 3960, 2230, 990, 13, 18], [4120, 5070, 2850, 1270, 15, 20], [5275, 6490, 3650, 1625, 18, 22], [6750, 8310, 4675, 2075, 22, 24], [8640, 10635, 5980, 2660, 27, 26], [11060, 13610, 7655, 3405, 32, 28], [14155, 17420, 9800, 4355, 38, 30]], [[0, 0, 0, 0, 0, 0], [80, 100, 70, 20, 1, 1], [100, 130, 90, 25, 1, 2], [130, 165, 115, 35, 2, 3], [170, 210, 145, 40, 2, 4], [215, 270, 190, 55, 2, 5], [275, 345, 240, 70, 3, 6], [350, 440, 310, 90, 4, 7], [450, 565, 395, 115, 4, 8], [575, 720, 505, 145, 5, 9], [740, 920, 645, 185, 6, 10], [945, 1180, 825, 235, 7, 12], [1210, 1510, 1060, 300, 9, 14], [1545, 1935, 1355, 385, 11, 16], [1980, 2475, 1735, 495, 13, 18], [2535, 3170, 2220, 635, 15, 20], [3245, 4055, 2840, 810, 18, 22], [4155, 5190, 3635, 1040, 22, 24], [5315, 6645, 4650, 1330, 27, 26], [6805, 8505, 5955, 1700, 32, 28], [8710, 10890, 7620, 2180, 38, 30]], [], [[0, 0, 0, 0, 0, 0], [180, 250, 500, 160, 2, 4], [230, 320, 640, 205, 3, 6], [295, 410, 820, 260, 3, 8], [375, 525, 1050, 335, 4, 10], [485, 670, 1340, 430, 5, 12], [620, 860, 1720, 550, 6, 15], [790, 1100, 2200, 705, 7, 18], [1015, 1405, 2815, 900, 9, 21], [1295, 1800, 3605, 1155, 10, 24], [1660, 2305, 4610, 1475, 12, 27], [2125, 2950, 5905, 1890, 15, 30], [2720, 3780, 7555, 2420, 18, 33], [3480, 4835, 9670, 3095, 21, 36], [4455, 6190, 12380, 3960, 26, 39], [5705, 7925, 15845, 5073, 31, 42], [7300, 10140, 20280, 6490, 37, 46], [9345, 12980, 25960, 8310, 44, 50], [11965, 16615, 33230, 10635, 53, 54], [15315, 21270, 42535, 13610, 64, 58], [19600, 27225, 54445, 17420, 77, 62]], [[0, 0, 0, 0, 0, 0], [1750, 2250, 1530, 240, 1, 1], [2240, 2880, 1960, 305, 1, 2], [2865, 3685, 2505, 395, 2, 3], [3670, 4720, 3210, 505, 2, 4], [4700, 6040, 4105, 645, 2, 5], [6015, 7730, 5255, 825, 3, 6], [7695, 9895, 6730, 1055, 4, 7], [9850, 12665, 8615, 1350, 4, 8], [12610, 16215, 11025, 1730, 5, 9], [16140, 20755, 14110, 2215, 6, 10], [20660, 26565, 18065, 2835, 7, 12], [26445, 34000, 23120, 3625, 9, 14], [33850, 43520, 29595, 4640, 11, 16], [43330, 55705, 37880, 5940, 13, 18], [55460, 71305, 48490, 7605, 15, 20], [70990, 91270, 62065, 9735, 18, 22], [90865, 116825, 79440, 12460, 22, 24], [116305, 149540, 101685, 15950, 27, 26], [148875, 191410, 130160, 20415, 32, 28], [190560, 245005, 166600, 26135, 38, 30]], [[0, 0, 0, 0, 0, 0], [70, 40, 60, 20, 2, 2], [90, 50, 75, 25, 3, 3], [115, 65, 100, 35, 3, 4], [145, 85, 125, 40, 4, 5], [190, 105, 160, 55, 5, 6], [240, 135, 205, 70, 6, 8], [310, 175, 265, 90, 7, 10], [395, 225, 340, 115, 9, 12], [505, 290, 430, 145, 10, 14], [645, 370, 555, 185, 12, 16], [825, 470, 710, 235, 15, 18], [1060, 605, 905, 300, 18, 20], [1355, 775, 1160, 385, 21, 22], [1735, 990, 1485, 495, 26, 24], [2220, 1270, 1900, 635, 31, 26], [2840, 1625, 2435, 810, 37, 29], [3635, 2075, 3115, 1040, 44, 32], [4650, 2660, 3990, 1330, 53, 35], [5955, 3405, 5105, 1700, 64, 38], [7620, 4355, 6535, 2180, 77, 41]], [[0, 0, 0, 0, 0, 0], [110, 160, 90, 70, 1, 1], [140, 205, 115, 90, 1, 2], [180, 260, 145, 115, 2, 3], [230, 335, 190, 145, 2, 4], [295, 430, 240, 190, 2, 5], [380, 550, 310, 240, 3, 6], [485, 705, 395, 310, 4, 7], [620, 900, 505, 395, 4, 8], [795, 1155, 650, 505, 5, 9], [1015, 1475, 830, 645, 6, 10], [1300, 1890, 1065, 825, 7, 12], [1660, 2420, 1360, 1060, 9, 14], [2130, 3095, 1740, 1355, 11, 16], [2725, 3960, 2230, 1735, 13, 18], [3485, 5070, 2850, 2220, 15, 20], [4460, 6490, 3650, 2840, 18, 22], [5710, 8310, 4675, 3635, 22, 24], [7310, 10635, 5980, 4650, 27, 26], [9360, 13610, 7655, 5955, 32, 28], [11980, 17420, 9800, 7620, 38, 30]], [[0, 0, 0, 0, 0, 0], [80, 70, 120, 70, 4, 4], [100, 90, 155, 90, 4, 6], [130, 115, 195, 115, 5, 8], [170, 145, 250, 145, 6, 10], [215, 190, 320, 190, 7, 12], [275, 240, 410, 240, 9, 15], [350, 310, 530, 310, 11, 18], [450, 395, 675, 395, 13, 21], [575, 505, 865, 505, 15, 24], [740, 645, 1105, 645, 19, 27], [945, 825, 1415, 825, 22, 30], [1210, 1060, 1815, 1060, 27, 33], [1545, 1355, 2320, 1355, 32, 38], [1980, 1735, 2970, 1735, 39, 41], [2535, 2220, 3805, 2220, 46, 44], [3245, 2840, 4870, 2840, 55, 48], [4155, 3635, 6230, 3635, 67, 52], [5315, 4650, 7975, 4650, 80, 56], [6805, 5955, 10210, 5955, 96, 60], [8710, 7620, 13065, 7620, 115, 64]], [[0, 0, 0, 0, 0, 0], [180, 130, 150, 80, 5, 3], [230, 165, 190, 100, 6, 5], [295, 215, 245, 130, 7, 7], [375, 275, 315, 170, 8, 9], [485, 350, 405, 215, 10, 11], [620, 445, 515, 275, 12, 13], [790, 570, 660, 350, 14, 15], [1015, 730, 845, 450, 17, 17], [1295, 935, 1080, 575, 21, 19], [1660, 1200, 1385, 740, 25, 21], [2125, 1535, 1770, 945, 30, 24], [2720, 1965, 2265, 1210, 36, 27], [3480, 2515, 2900, 1545, 43, 30], [4455, 3220, 3715, 1980, 51, 33], [5705, 4120, 4755, 2535, 62, 36], [7300, 5275, 6085, 3245, 74, 39], [9345, 6750, 7790, 4155, 89, 42], [11965, 8640, 9970, 5315, 106, 45], [15315, 11060, 12760, 6805, 128, 48], [19600, 14155, 16335, 8710, 153, 51]], [[0, 0, 0, 0, 0, 0], [210, 140, 260, 120, 1, 4], [270, 180, 335, 155, 1, 6], [345, 230, 425, 195, 2, 8], [440, 295, 545, 250, 2, 10], [565, 375, 700, 320, 2, 12], [720, 480, 895, 410, 3, 15], [925, 615, 1145, 530, 4, 18], [1180, 790, 1465, 675, 4, 21], [1515, 1010, 1875, 865, 5, 24], [1935, 1290, 2400, 1105, 6, 27], [2480, 1655, 3070, 1415, 7, 30], [3175, 2115, 3930, 1815, 9, 33], [4060, 2710, 5030, 2320, 11, 36], [5200, 3465, 6435, 2970, 13, 39], [6655, 4435, 8240, 3805, 15, 42], [8520, 5680, 10545, 4870, 18, 46], [10905, 7270, 13500, 6230, 22, 50], [13955, 9305, 17280, 7975, 27, 54], [17865, 11910, 22120, 10210, 32, 58], [22865, 15245, 28310, 13065, 38, 62]], [[0, 0, 0, 0, 0, 0], [260, 140, 220, 100, 2, 5], [335, 180, 280, 130, 3, 8], [425, 230, 360, 165, 3, 11], [545, 295, 460, 210, 4, 14], [700, 375, 590, 270, 5, 17], [895, 480, 755, 345, 6, 20], [1145, 615, 970, 440, 7, 23], [1465, 790, 1240, 565, 9, 26], [1875, 1010, 1585, 720, 10, 29], [2400, 1290, 2030, 920, 12, 32], [3070, 1655, 2595, 1180, 15, 36], [3930, 2115, 3325, 1510, 18, 40], [5030, 2710, 4255, 1935, 21, 44], [6435, 3465, 5445, 2475, 26, 48], [8240, 4435, 6970, 3170, 31, 52], [10545, 5680, 8925, 4055, 37, 56], [13500, 7270, 11425, 5190, 44, 60], [17280, 9305, 14620, 6645, 53, 64], [22120, 11910, 18715, 8505, 64, 68], [28310, 15245, 23955, 10890, 77, 72]], [[0, 0, 0, 0, 0, 0], [460, 510, 600, 320, 4, 3], [590, 655, 770, 410, 4, 5], [755, 835, 985, 525, 5, 7], [965, 1070, 1260, 670, 6, 9], [1235, 1370, 1610, 860, 7, 11], [1580, 1750, 2060, 1100, 9, 13], [2025, 2245, 2640, 1405, 11, 15], [2590, 2870, 3380, 1800, 13, 17], [3315, 3675, 4325, 2305, 15, 19], [4245, 4705, 5535, 2950, 19, 21], [5430, 6020, 7085, 3780, 22, 24], [6950, 7705, 9065, 4835, 27, 27], [8900, 9865, 11605, 6190, 32, 30], [11390, 12625, 14855, 7925, 39, 33], [14580, 16165, 19015, 10140, 46, 36], [18660, 20690, 24340, 12980, 55, 39], [23885, 26480, 31155, 16615, 67, 42], [30570, 33895, 39875, 21270, 80, 45], [39130, 43385, 51040, 27225, 96, 48], [50090, 55535, 65335, 34845, 115, 51]], [[0, 0, 0, 0, 0, 0], [220, 160, 90, 40, 5, 4], [280, 205, 115, 50, 6, 6], [360, 260, 145, 65, 7, 8], [460, 335, 190, 85, 8, 10], [590, 430, 240, 105, 10, 12], [755, 550, 310, 135, 12, 15], [970, 705, 395, 175, 14, 18], [1240, 900, 505, 225, 17, 21], [1585, 1155, 650, 290, 21, 24], [2030, 1475, 830, 370, 25, 27], [2595, 1890, 1065, 470, 30, 30], [3325, 2420, 1360, 605, 36, 33], [4255, 3095, 1740, 775, 43, 36], [5445, 3960, 2230, 990, 51, 39], [6970, 5070, 2850, 1270, 62, 42], [8925, 6490, 3650, 1625, 74, 46], [11425, 8310, 4675, 2075, 89, 50], [14620, 10635, 5980, 2660, 106, 54], [18715, 13610, 7655, 3405, 128, 58], [23955, 17420, 9800, 4355, 153, 62]], [[0, 0, 0, 0, 0, 0], [40, 50, 30, 10, 1, 0], [50, 65, 40, 15, 1, 0], [65, 80, 50, 15, 2, 0], [85, 105, 65, 20, 2, 0], [105, 135, 80, 25, 2, 0], [135, 170, 105, 35, 3, 1], [175, 220, 130, 45, 4, 2], [225, 280, 170, 55, 4, 3], [290, 360, 215, 70, 5, 4], [370, 460, 275, 90, 6, 5]], [[0, 0, 0, 0, 0, 0], [1250, 1110, 1260, 600, 6, 4], [1600, 1420, 1615, 770, 7, 6], [2050, 1820, 2065, 985, 9, 8], [2620, 2330, 2640, 1260, 10, 10], [3355, 2980, 3380, 1610, 12, 12], [4295, 3815, 4330, 2060, 15, 15], [5500, 4880, 5540, 2640, 18, 18], [7035, 6250, 7095, 3380, 21, 21], [9005, 8000, 9080, 4325, 26, 24], [11530, 10240, 11620, 5535, 31, 27], [14755, 13105, 14875, 7085, 37, 30], [18890, 16775, 19040, 9065, 45, 33], [24180, 21470, 24370, 11605, 53, 36], [30950, 27480, 31195, 14855, 64, 39], [39615, 35175, 39930, 19015, 77, 42], [50705, 45025, 51110, 24340, 92, 46], [64905, 57635, 65425, 31155, 111, 50], [83075, 73770, 83740, 39875, 133, 54], [106340, 94430, 107190, 51040, 160, 58], [136115, 120870, 137200, 65335, 192, 62]], [[0, 0, 0, 0, 0, 0], [580, 460, 350, 180, 2, 1], [740, 590, 450, 230, 3, 2], [950, 755, 575, 295, 3, 3], [1215, 965, 735, 375, 4, 4], [1555, 1235, 940, 485, 5, 5], [1995, 1580, 1205, 620, 6, 6], [2550, 2025, 1540, 790, 7, 7], [3265, 2590, 1970, 1015, 9, 8], [4180, 3315, 2520, 1295, 11, 9], [5350, 4245, 3230, 1660, 12, 10], [6845, 5430, 4130, 2125, 15, 12], [8765, 6950, 5290, 2720, 18, 14], [11220, 8900, 6770, 3480, 21, 16], [14360, 11390, 8665, 4455, 26, 18], [18380, 14580, 11090, 5705, 31, 20], [23530, 18660, 14200, 7300, 37, 22], [30115, 23885, 18175, 9345, 44, 24], [38550, 30570, 23260, 11965, 53, 26], [49340, 39130, 29775, 15315, 64, 28], [63155, 50090, 38110, 19600, 77, 30]], [[0, 0, 0, 0, 0, 0], [550, 800, 750, 250, 6, 1], [705, 1025, 960, 320, 7, 2], [900, 1310, 1230, 410, 9, 3], [1155, 1680, 1575, 525, 10, 4], [1475, 2145, 2015, 670, 12, 5], [1890, 2750, 2575, 860, 15, 6], [2420, 3520, 3300, 1100, 18, 7], [3095, 4505, 4220, 1405, 21, 8], [3965, 5765, 5405, 1800, 26, 9], [5075, 7380, 6920, 2305, 31, 10], [6495, 9445, 8855, 2950, 37, 12], [8310, 12090, 11335, 3780, 45, 14], [10640, 15475, 14505, 4835, 53, 16], [13615, 19805, 18570, 6190, 64, 18], [17430, 25355, 23770, 7925, 77, 20], [22310, 32450, 30425, 10140, 92, 22], [28560, 41540, 38940, 12980, 111, 24], [36555, 53170, 49845, 16615, 133, 26], [46790, 68055, 63805, 21270, 160, 28], [59890, 87110, 81670, 27225, 192, 30]], [[0, 0, 0, 0, 0, 0], [2880, 2740, 2580, 990, 7, 4], [3630, 3450, 3250, 1245, 9, 6], [4570, 4350, 4095, 1570, 10, 8], [5760, 5480, 5160, 1980, 12, 10], [7260, 6905, 6505, 2495, 15, 12], [9145, 8700, 8195, 3145, 18, 15], [11525, 10965, 10325, 3960, 21, 18], [14520, 13815, 13010, 4990, 26, 21], [18295, 17405, 16390, 6290, 31, 24], [23055, 21930, 20650, 7925, 37, 27], [29045, 27635, 26020, 9985, 45, 30], [36600, 34820, 32785, 12580, 53, 33], [46115, 43875, 41310, 15850, 64, 36], [58105, 55280, 52050, 19975, 77, 39], [73210, 69655, 65585, 25165, 92, 42], [92245, 87760, 82640, 31710, 111, 46], [116230, 110580, 104125, 39955, 133, 50], [146450, 139330, 131195, 50340, 160, 54], [184530, 175560, 165305, 63430, 192, 58], [232505, 221205, 208285, 79925, 230, 62]], [[0, 0, 0, 0, 0, 0], [1400, 1330, 1200, 400, 4, 3], [1790, 1700, 1535, 510, 4, 5], [2295, 2180, 1965, 655, 5, 7], [2935, 2790, 2515, 840, 6, 9], [3760, 3570, 3220, 1075, 7, 11], [4810, 4570, 4125, 1375, 9, 13], [6155, 5850, 5280, 1760, 11, 15], [7880, 7485, 6755, 2250, 13, 17], [10090, 9585, 8645, 2880, 15, 19], [12915, 12265, 11070, 3690, 19, 21], [16530, 15700, 14165, 4720, 22, 24], [21155, 20100, 18135, 6045, 27, 27], [27080, 25725, 23210, 7735, 32, 30], [34660, 32930, 29710, 9905, 39, 33], [44370, 42150, 38030, 12675, 46, 36], [56790, 53950, 48680, 16225, 55, 39], [72690, 69060, 62310, 20770, 67, 42], [93045, 88395, 79755, 26585, 80, 45], [119100, 113145, 102085, 34030, 96, 48], [152445, 144825, 130670, 43555, 115, 51]], [[0, 0, 0, 0, 0, 0], [630, 420, 780, 360, 1, 4], [805, 540, 1000, 460, 1, 6], [1030, 690, 1280, 590, 2, 8], [1320, 880, 1635, 755, 2, 10], [1690, 1125, 2095, 965, 2, 12], [2165, 1445, 2680, 1235, 3, 15], [2770, 1845, 3430, 1585, 4, 18], [3545, 2365, 4390, 2025, 4, 21], [4540, 3025, 5620, 2595, 5, 24], [5810, 3875, 7195, 3320, 6, 27], [7440, 4960, 9210, 4250, 7, 30], [9520, 6345, 11785, 5440, 9, 33], [12185, 8125, 15085, 6965, 11, 36], [15600, 10400, 19310, 8915, 13, 39], [19965, 13310, 24720, 11410, 15, 42], [25555, 17035, 31640, 14605, 18, 46], [32710, 21810, 40500, 18690, 22, 50], [41870, 27915, 51840, 23925, 27, 54], [53595, 35730, 66355, 30625, 32, 58], [68600, 45735, 84935, 39200, 38, 62]], [[0, 0, 0, 0, 0, 0], [780, 420, 660, 300, 2, 5], [1000, 540, 845, 385, 3, 8], [1280, 690, 1080, 490, 3, 11], [1635, 880, 1385, 630, 4, 14], [2095, 1125, 1770, 805, 5, 17], [2680, 1445, 2270, 1030, 6, 20], [3430, 1845, 2905, 1320, 7, 23], [4390, 2365, 3715, 1690, 9, 26], [5620, 3025, 4755, 2160, 10, 29], [7195, 3875, 6085, 2765, 12, 32], [9210, 4960, 7790, 3540, 15, 36], [11785, 6345, 9975, 4535, 18, 40], [15085, 8125, 12765, 5805, 21, 44], [19310, 10400, 16340, 7430, 26, 48], [24720, 13310, 20915, 9505, 31, 52], [31640, 17035, 26775, 12170, 37, 56], [40500, 21810, 34270, 15575, 44, 60], [51840, 27915, 43865, 19940, 53, 64], [66355, 35730, 56145, 25520, 64, 68], [84935, 45735, 71870, 32665, 77, 72]], [[0, 0, 0, 0, 0, 0], [70, 90, 170, 70, 1, 0], [90, 115, 220, 90, 1, 0], [115, 145, 280, 115, 2, 0], [145, 190, 355, 145, 2, 0], [190, 240, 455, 190, 2, 0], [240, 310, 585, 240, 3, 1], [310, 395, 750, 310, 4, 2], [395, 505, 955, 395, 4, 3], [505, 650, 1225, 505, 5, 4], [645, 830, 1570, 645, 6, 5], [825, 1065, 2005, 825, 7, 6], [1060, 1360, 2570, 1060, 9, 7], [1355, 1740, 3290, 1355, 11, 8], [1735, 2230, 4210, 1735, 13, 9], [2220, 2850, 5390, 2220, 15, 10], [2840, 3650, 6895, 2840, 18, 12], [3635, 4675, 8825, 3635, 22, 14], [4650, 5980, 11300, 4650, 27, 16], [5955, 7655, 14460, 5955, 32, 18], [7620, 9800, 18510, 7620, 38, 20]], [[0, 0, 0, 0, 0, 0], [120, 200, 0, 80, 1, 0], [155, 255, 0, 100, 1, 0], [195, 330, 0, 130, 2, 0], [250, 420, 0, 170, 2, 0], [320, 535, 0, 215, 2, 0], [410, 685, 0, 275, 3, 1], [530, 880, 0, 350, 4, 2], [675, 1125, 0, 450, 4, 3], [865, 1440, 0, 575, 5, 4], [1105, 1845, 0, 740, 6, 5], [1415, 2360, 0, 945, 7, 6], [1815, 3020, 0, 1210, 9, 7], [2320, 3870, 0, 1545, 11, 8], [2970, 4950, 0, 1980, 13, 9], [3805, 6340, 0, 2535, 15, 10], [4870, 8115, 0, 3245, 18, 12], [6230, 10385, 0, 4155, 22, 14], [7975, 13290, 0, 5315, 27, 16], [10210, 17015, 0, 6805, 32, 18], [13065, 21780, 0, 8710, 38, 20]], [[0, 0, 0, 0, 0, 0], [160, 100, 80, 60, 1, 0], [205, 130, 100, 75, 1, 0], [260, 165, 130, 100, 2, 0], [335, 210, 170, 125, 2, 0], [430, 270, 215, 160, 2, 0], [550, 345, 275, 205, 3, 1], [705, 440, 350, 265, 4, 2], [900, 565, 450, 340, 4, 3], [1155, 720, 575, 430, 5, 4], [1475, 920, 740, 555, 6, 5], [1890, 1180, 945, 710, 7, 6], [2420, 1510, 1210, 905, 9, 7], [3095, 1935, 1545, 1160, 11, 8], [3960, 2475, 1980, 1485, 13, 9], [5070, 3170, 2535, 1900, 15, 10], [6490, 4055, 3245, 2435, 18, 12], [8310, 5190, 4155, 3115, 22, 14], [10635, 6645, 5315, 3990, 27, 16], [13610, 8505, 6805, 5105, 32, 18], [17420, 10890, 8710, 6535, 38, 20]], [[0, 0, 0, 0, 0, 0], [155, 130, 125, 70, 1, 2], [200, 165, 160, 90, 1, 3], [255, 215, 205, 115, 2, 4], [325, 275, 260, 145, 2, 5], [415, 350, 335, 190, 2, 6], [535, 445, 430, 240, 3, 8], [680, 570, 550, 310, 4, 10], [875, 730, 705, 395, 4, 12], [1115, 935, 900, 505, 5, 14], [1430, 1200, 1155, 645, 6, 16], [1830, 1535, 1475, 825, 7, 18], [2340, 1965, 1890, 1060, 9, 20], [3000, 2515, 2420, 1355, 11, 22], [3840, 3220, 3095, 1735, 13, 24], [4910, 4120, 3960, 2220, 15, 26], [6290, 5275, 5070, 2840, 18, 29], [8050, 6750, 6490, 3635, 22, 32], [10300, 8640, 8310, 4650, 27, 35], [13185, 11060, 10635, 5955, 32, 38], [16880, 14155, 13610, 7620, 38, 41]], [[0, 0, 0, 0, 0, 0], [1460, 930, 1250, 1740, 5, 6], [2045, 1300, 1750, 2435, 6, 9], [2860, 1825, 2450, 3410, 7, 12], [4005, 2550, 3430, 4775, 8, 15], [5610, 3575, 4800, 6685, 10, 18], [7850, 5000, 6725, 9360, 12, 22], [10995, 7000, 9410, 13100, 14, 26], [15390, 9805, 13175, 18340, 17, 30], [21545, 13725, 18445, 25680, 21, 34], [30165, 19215, 25825, 35950, 25, 38]], [[0, 0, 0, 0, 0, 0], [80, 120, 70, 90, 1, 4], [100, 155, 90, 115, 1, 6], [130, 195, 115, 145, 2, 8], [170, 250, 145, 190, 2, 10], [215, 320, 190, 240, 2, 12], [275, 410, 240, 310, 3, 15], [350, 530, 310, 395, 4, 18], [450, 675, 395, 505, 4, 21], [575, 865, 505, 650, 5, 24], [740, 1105, 645, 830, 6, 27], [945, 1415, 825, 1065, 7, 30], [1210, 1815, 1060, 1360, 9, 33], [1545, 2320, 1355, 1740, 11, 36], [1980, 2970, 1735, 2230, 13, 39], [2535, 3805, 2220, 2850, 15, 42], [3245, 4870, 2840, 3650, 18, 46], [4155, 6230, 3635, 4675, 22, 50], [5315, 7975, 4650, 5980, 27, 54], [6805, 10210, 5955, 7655, 32, 58], [8710, 13065, 7620, 9800, 38, 62]], [[0, 0, 0, 0, 0, 0], [700, 670, 700, 240, 1, 2], [930, 890, 930, 320, 1, 3], [1240, 1185, 1240, 425, 2, 4], [1645, 1575, 1645, 565, 2, 5], [2190, 2095, 2190, 750, 2, 6], [2915, 2790, 2915, 1000, 3, 8], [3875, 3710, 3875, 1330, 4, 10], [5155, 4930, 5155, 1765, 4, 12], [6855, 6560, 6855, 2350, 5, 14], [9115, 8725, 9115, 3125, 6, 16], [12125, 11605, 12125, 4155, 7, 18], [16125, 15435, 16125, 5530, 9, 20], [21445, 20525, 21445, 7350, 11, 22], [28520, 27300, 28520, 9780, 13, 24], [37935, 36310, 37935, 13005, 15, 24], [50450, 48290, 50450, 17300, 18, 27], [67100, 64225, 67100, 23005, 22, 30], [89245, 85420, 89245, 30600, 27, 33], [118695, 113605, 118695, 40695, 32, 36], [157865, 151095, 157865, 54125, 37, 39]], [[0, 0, 0, 0, 0, 0, 0], [650, 800, 450, 200, 1, 1], [830, 1025, 575, 255, 1, 2], [1065, 1310, 735, 330, 2, 3], [1365, 1680, 945, 420, 2, 4], [1745, 2145, 1210, 535, 2, 5], [2235, 2750, 1545, 685, 3, 6], [2860, 3520, 1980, 880, 4, 7], [3660, 4505, 2535, 1125, 4, 8], [4685, 5765, 3245, 1440, 5, 9], [5995, 7380, 4150, 1845, 6, 10], [7675, 9445, 5315, 2360, 7, 12], [9825, 12090, 6800, 3020, 9, 14], [12575, 15475, 8705, 3870, 11, 16], [16095, 19805, 11140, 4950, 13, 18], [20600, 25355, 14260, 6340, 15, 20], [26365, 32450, 18255, 8115, 18, 22], [33750, 41540, 23365, 10385, 22, 24], [43200, 53170, 29910, 13290, 27, 26], [55295, 68055, 38280, 17015, 32, 28], [70780, 87110, 49000, 21780, 38, 30]], [[0, 0, 0, 0, 0, 0], [400, 500, 350, 100, 1], [510, 640, 450, 130, 1, 2], [655, 820, 575, 165, 2, 3], [840, 1050, 735, 210, 2, 4], [1075, 1340, 940, 270, 2, 5], [1375, 1720, 1205, 345, 3, 6], [1760, 2200, 1540, 440, 4, 7], [2250, 2815, 1970, 565, 4, 8], [2880, 3605, 2520, 720, 5, 9], [3690, 4610, 3230, 920, 6, 10], [4720, 5905, 4130, 1180, 7, 12], [6045, 7555, 5290, 1510, 9, 14], [7735, 9670, 6770, 1935, 11, 16], [9905, 12380, 8665, 2475, 13, 18], [12675, 15845, 11090, 3170, 15, 20], [16225, 20280, 14200, 4055, 18, 22], [20770, 25960, 18175, 5190, 22, 24], [26585, 33230, 23260, 6645, 27, 26], [34030, 42535, 29775, 8505, 32, 28], [43555, 54445, 38110, 10890, 38, 30]], [[0, 0, 0, 0, 0, 0], [66700, 69050, 72200, 13200, 0, 1], [68535, 70950, 74185, 13565, 0, 2], [70420, 72900, 76225, 13935, 0, 3], [72355, 74905, 78320, 14320, 0, 4], [74345, 76965, 80475, 14715, 0, 5], [76390, 79080, 82690, 15120, 0, 6], [78490, 81255, 84965, 15535, 0, 7], [80650, 83490, 87300, 15960, 0, 8], [82865, 85785, 89700, 16400, 0, 9], [85145, 88145, 92165, 16850, 0, 10], [87485, 90570, 94700, 17315, 0, 12], [89895, 93060, 97305, 17790, 0, 14], [92365, 95620, 99980, 18280, 0, 16], [94905, 98250, 102730, 18780, 0, 18], [97515, 100950, 105555, 19300, 0, 20], [100195, 103725, 108460, 19830, 0, 22], [102950, 106580, 111440, 20375, 0, 24], [105785, 109510, 114505, 20935, 0, 26], [108690, 112520, 117655, 21510, 0, 28], [111680, 115615, 120890, 22100, 0, 30], [114755, 118795, 124215, 22710, 0, 33], [117910, 122060, 127630, 23335, 0, 36], [121150, 125420, 131140, 23975, 0, 39], [124480, 128870, 134745, 24635, 0, 42], [127905, 132410, 138455, 25315, 0, 45], [131425, 136055, 142260, 26010, 0, 48], [135035, 139795, 146170, 26725, 0, 51], [138750, 143640, 150190, 27460, 0, 54], [142565, 147590, 154320, 28215, 0, 57], [146485, 151650, 158565, 28990, 0, 60], [150515, 155820, 162925, 29785, 0, 64], [154655, 160105, 167405, 30605, 0, 68], [158910, 164505, 172010, 31450, 0, 72], [163275, 169030, 176740, 32315, 0, 76], [167770, 173680, 181600, 33200, 0, 80], [172380, 178455, 186595, 34115, 0, 84], [177120, 183360, 191725, 35055, 0, 88], [181995, 188405, 197000, 36015, 0, 92], [186995, 193585, 202415, 37005, 0, 96], [192140, 198910, 207985, 38025, 0, 100], [197425, 204380, 213705, 39070, 0, 105], [202855, 210000, 219580, 40145, 0, 110], [208430, 215775, 225620, 41250, 0, 115], [214165, 221710, 231825, 42385, 0, 120], [220055, 227805, 238200, 43550, 0, 125], [226105, 234070, 244750, 44745, 0, 130], [232320, 240505, 251480, 45975, 0, 135], [238710, 247120, 258395, 47240, 0, 140], [245275, 253915, 265500, 48540, 0, 145], [252020, 260900, 272800, 49875, 0, 150], [258950, 268075, 280305, 51245, 0, 156], [266070, 275445, 288010, 52655, 0, 162], [273390, 283020, 295930, 54105, 0, 168], [280905, 290805, 304070, 55590, 0, 174], [288630, 298800, 312430, 57120, 0, 180], [296570, 307020, 321025, 58690, 0, 186], [304725, 315460, 329850, 60305, 0, 192], [313105, 324135, 338925, 61965, 0, 198], [321715, 333050, 348245, 63670, 0, 204], [330565, 342210, 357820, 65420, 0, 210], [339655, 351620, 367660, 67220, 0, 217], [348995, 361290, 377770, 69065, 0, 224], [358590, 371225, 388160, 70965, 0, 231], [368450, 381435, 398835, 72915, 0, 238], [378585, 391925, 409800, 74920, 0, 245], [388995, 402700, 421070, 76985, 0, 252], [399695, 413775, 432650, 79100, 0, 259], [410685, 425155, 444550, 81275, 0, 266], [421980, 436845, 456775, 83510, 0, 273], [433585, 448860, 469335, 85805, 0, 280], [445505, 461205, 482240, 88165, 0, 288], [457760, 473885, 495505, 90590, 0, 296], [470345, 486920, 509130, 93080, 0, 304], [483280, 500310, 523130, 95640, 0, 312], [496570, 514065, 537520, 98270, 0, 320], [510225, 528205, 552300, 100975, 0, 328], [524260, 542730, 567490, 103750, 0, 336], [538675, 557655, 583095, 106605, 0, 344], [553490, 572990, 599130, 109535, 0, 352], [568710, 588745, 615605, 112550, 0, 360], [584350, 604935, 632535, 115645, 0, 369], [600420, 621575, 649930, 118825, 0, 378], [616930, 638665, 667800, 122090, 0, 387], [633895, 656230, 686165, 125450, 0, 396], [651330, 674275, 705035, 128900, 0, 405], [669240, 692820, 724425, 132445, 0, 414], [687645, 711870, 744345, 136085, 0, 423], [706555, 731445, 764815, 139830, 0, 432], [725985, 751560, 785850, 143675, 0, 441], [745950, 772230, 807460, 147625, 0, 450], [766460, 793465, 829665, 151685, 0, 460], [787540, 815285, 852480, 155855, 0, 470], [809195, 837705, 875920, 160140, 0, 480], [831450, 860745, 900010, 164545, 0, 490], [854315, 884415, 924760, 169070, 0, 500], [877810, 908735, 950190, 173720, 0, 510], [901950, 933725, 976320, 178495, 0, 520], [926750, 959405, 1000000, 183405, 0, 530], [952235, 985785, 1000000, 188450, 0, 540], [1000000, 1000000, 1000000, 193630, 0, 550]], [[0, 0, 0, 0, 0, 0], [780, 420, 660, 540, 4, 5], [1000, 540, 845, 690, 4, 8], [1280, 690, 1080, 885, 5, 11], [1635, 880, 1385, 1130, 6, 14], [2095, 1125, 1770, 1450, 7, 17], [2680, 1445, 2270, 1855, 9, 20], [3430, 1845, 2905, 2375, 11, 23], [4390, 2365, 3715, 3040, 13, 26], [5620, 3025, 4755, 3890, 15, 29], [7195, 3875, 6085, 4980, 19, 31], [9210, 4960, 7790, 6375, 22, 35], [11785, 6345, 9975, 8160, 27, 39], [15085, 8125, 12765, 10445, 32, 43], [19310, 10400, 16340, 13370, 39, 47], [24720, 13310, 20915, 17115, 46, 51], [31640, 17035, 26775, 21905, 55, 55], [40500, 21810, 34270, 28040, 67, 59], [51840, 27915, 43865, 35890, 80, 63], [66355, 35730, 56145, 45940, 96, 67], [84935, 45735, 71870, 58800, 115, 71]]];
	var imP = 'data:image/gif;base64,';
	var imPNG = 'data:image/png;base64,';
	var image = {
		'addbmspacer' : imP + 'R0lGODlhEwAQAOZrAP/+/f/8+vZrAPumZP/59f/7+P/JmP+SMf57B/x0APhuAPmAIf7r3fuiWvlvAP/69f/Gkvy0ef/BivqCIv727/+rYf/Ej/3ZvP/Ci/2qZ/dyDPdxCPqRPvumYv56CP/s3f6RMvytbPulYv58DP/t3f95AfqmZ/+JIP/9/Py8iv6nWv2NLvp+F/mIL/+EFvmKMv/hxv+aQPuxeP+uZ/VrBPqtcf/Sqv/GlPyqaP/69v+oWvhxB/uyef/Aiv/48//17f61ePxzAP/p1f/27/mrcf2QMf+MJv/27v7s3f57CP+LJPqpbf/Ytv/48vdtBP/9+/dsAPhyB/3Kov/79//59P/Wsv+CFP7n1f3YvPqILv/t3Pd4F//ewf3l0/+fSPyUPvt5DP/VsP/48f2pYv6vbfhzCP2HIf+IH/+mVv717f+wa////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAGsALAAAAAATABAAAAengGtrDwYSgoeIYTZihwU3RVSIkjkzFk1rAEwuPpKdDxUYAUdeIZ2mBgcfECMXpp0wVjhKWVcorodPQisLHiKYt4hjGwgNaydnQUBVMSUJJGhGCV9rKjvEaw4KAjJSDlACDBPaHGs6UUkdwJJqZWYtXeqCWgcLGRpY8WtcYCZINEv5yDhhEKDGFgLqprAgEmDNkAEvEAIwVQDEAAqHfvBIcatHhDSCAgEAOw==',
		'addbmthispage' : imP + 'R0lGODlhFwAQAOZ/AP/69v+rQ/l8GPV+AfaEMf/RlfqKL/2qDP3Zvf/Kmv6SMvuuI/738f/x5v/kzf/m0vacBP/48v/PgPlxBfumZf/v4f717fu7i/dxCv/27//HlP/BivWRAv/GZv/59faEA/mscf/8+vmlCP16CfyMBf+1MvzHnv/BW/ZsBP/Fkf6ubf/Ytf+DFfulYvuzef26RP7n1fypZv///v/s3f7q2fqhWv/9/P57B//Sqv+zb/mAIf/fwv/69f/+/f+6ff7dwv6mWv2HIf6zLP/VsPvLqP+sYv/Oif2taf+fSfZ/JvigBvR4APicWPqpGf+LJP6/VPuWB//UpPmna//coP/frP/79/mvef7r3feNQPSMAf/juPy3gPhzCPeTSfyWQv+aQPyhL/7z6vmeDPvBl/qpbfusbviECf2qaPeiEvqmH/2pYv/AdP/o1f+uZ/6jNP+oWv+zXP/hx/zRsfuTHP7Xtf/Ylv/Lc//Ej//NoP/Ibf+/eft5DP58DPq4h/+9gv///yH5BAEAAH8ALAAAAAAXABAAAAf/gH9/PAkbgocAFRmHgkM4EYdVGgqQjBU+OIx/AG13kD0rLJWMO3pHNpo8RRshGUgqmn8NGkYCP7EJCjMafAiHMiFVO1F1YDEVHj2HcSxnTgYwIQ8PDjsreFp1JyNfPikadCFsBjojLX8efgFwawVUUxIdTwFuc2ZlkGoYNzWCHlsT0rzIY6fDiRcL0HwAwUAQkAn8EPVBIWZBiRJCmkAYYKWhoDdcbpxD5ILEgZMHlHyQ4lFQDi5BDDxglMCkiJtKBlywpEDHGQy+BFXJAUUEhwEcIGRhEubQjj0UZqAgc6iBl41YxnRZwoEAjUMqUFwJAUKAB0EOMCQhYuFPBjkEKZbc+lNFAIgQbikYOEvDRANNFkzAoKuAwiJBFlzs/IMqlg1lG1y0/RMIADs=',
		'addbookmark' : imP + 'R0lGODlhEAAQAOZ/APV+AfaRA/748/qdVfvKpvl0CvV6APunC/54AvZ8JP/7+P/t3f/9/P/49PijB/2rDv/59P3Dk/7z6v/ewP/HaPeBAvx7DP/u4P62OPzBVv+xSfidBv3o2f/Kc/eQRf/z6fyiM//cr/7q2fSPAfuwKvzQsP/FYvuLBf2uDv+xa//69fuLDv++T//9+/V1Fv+4cP25QvR2APmwJv/VkPSDAPWgAvyqDf/Kmv67RvecBf/lzf/w4v/KcfRpAf/37/iPQf/MlPaEBv/Vp//dpP/gxPipB/q0gP/YtfvJo/eiDvzLpf/isf/Nof/XsvzUtv/IbP+mRP2pEf6sE/+vF/iaVfyfUv+TJf+vGPqoGP/17P717v/VmPusbvmLNPytbv2safaCLf+9dfuZJPhvAf+jU/+mV//DXP/RhvWUAv/Xk/WBAP/38vehBvmmCf2pDvV5H//Lnf/8+fy6RP2XP//+/fafBP7AV//lz/+ybf+/U/++Uf7CWPx9CvRpBP/27v///yH5BAEAAH8ALAAAAAAQABAAAAezgH+Cg39ZO4SIiE0piY0QeAgijYgTYSBck4MKEVsZBReIDAo+C3dHQkMUYnM3RAt+cUxlZC9AIUtpT3saUFZ8BV4qVSswHTNnPCZmdnIyQT9afwwDFVgYLHl6OCRJAD8Ngy0DYwdSU1dRGz0e4IQfFm4PNg8HOX0ciToIKG1sDg51YjhJBOdEETQGDASoQcNIoi8B1CQgUAIMgBFUEnVxEUGAIAVI3iSgQ0iBEgmJ1hBoFwgAOw==',
		'adn' : imP + 'R0lGODlhEAAQAPcAAAAAADFM1jxX0SJa9Cpj6i5m6CVg9yhv/Chy/Cp3/C579yp7/E9Txkla3V5nwVFl4i+D+S2A/C2D/C+F/C2F/y+I/C+L/D6I7zCJ/zKS/zWV/DWW/zWa/zed/Die/zeg/Dii/z2r/zys/Dyv/D2u/z+w/EyH4EKS7UCe91WG6Eag9E+t+UGx/Eu7/Ey9/1C9/FW//GmN02KO/GSP/GSS/GSU/GeZ/Geb/Gee/Gqf/HqC6HyN71/D/IyNzoWH24WJ3YuO04yK2ICW3Y+Q2JWS05WR1pGR2JCT25KU3ZKW3ZWT2JKY3YOK6oiT6oiY74KX8oqd8oqe8ome9JSa4J2a6o6szpChzpauzpmvyYCq5Yui9Iqj94ql946n+Yup+Yur+Y2u/I2w/LCo27Sz07i80aaj7aqq7aqr76qt76ux8quz8quz9Ku19Ku29K229LO54LzF06zB5dfY3dPa6tra6t3c8u3t7eLh8gjKAP8JHEiw4L86SoYgSTKlYcMlSY4YKXInSJkzaNK4YdOmzRo3atCYoULkB5MmTqJo2dKlyxYtUJw00QHExxMpXLyACcMTDJgvW6Ts6CHmwYwaNm7cyIEjxw0bNGQ0GPOPgQEECyJImDAhQoQEBwY4EEgnQAIKFjKozYBBAgIBcga+IWCBg4cPIDxsqFCATEEhEDqQGEEiBAcFVgz+S9GBhYsWIjTEsKN4zoUSPGCIMBFX8b84KGC8OAHH88AsK1RcMU2wChbWsAUGBAA7',
		'alliance' : imP + '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',
		'alliancegs' : imP + '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',
		'attacks' : imP + 'R0lGODlhCgAKAOMJADleiVNHQXkAAH2n2ZmGdbzV8seymcwVFeM1Nf///////////////////////////yH5BAEKAA8ALAAAAAAKAAoAAAQr8IHy6kOijlnxsVvhWdpYEZ1wUA9hEF7oPoaqAQYdEGhLBIYdjZf79UinCAA7',
		'aup' : imP + 'R0lGODlhEAAQAPcAAAAAADFM1jxX0SJa9Cpj6i5m6CVg9yhv/Chy/Cp3/C579yp7/E9Txkla3V5nwVFl4i+D+S2A/C2D/C+F/C2F/y+I/C+L/D6I7zCJ/zKS/zWV/DWW/zWa/zed/Die/zeg/Dii/z2r/zys/Dyv/D2u/z+w/EyH4EKS7UCe91WG6Eag9E+t+UGx/Eu7/Ey9/1C9/FW//GmN02KO/GSP/GSS/GSU/GeZ/Geb/Gee/Gqf/HqC6HyN71/D/IyNzoWH24WJ3YuO04yK2ICW3Y+Q2JWS05WR1pGR2JCT25KU3ZKW3ZWT2JKY3YOK6oiT6oiY74KX8oqd8oqe8ome9JSa4J2a6o6szpChzpauzpmvyYCq5Yui9Iqj94ql946n+Yup+Yur+Y2u/I2w/LCo27Sz07i80aaj7aqq7aqr76qt76ux8quz8quz9Ku19Ku29K229LO54LzF06zB5dfY3dPa6tra6t3c8u3t7eLh8gjIAP8JHEiwoEGBWKocNHhFxYosCwfCOfECBoo4EeWYEAGDR4kLcw7aiaFBRAsXLDqkOGhFAYcQJEaQ6ABBSEEyBSps8ADigwcOFgi8GShHAAIJGDIozWCBQoIAdAQ6GHAgQYQIEyZIiLAAgQEG/8Y0kEHDxo0cOHLcuGGjxowHYnrskLLlCxgwYfKC8cJFyhMfQHQ0cQJFy5YuXbZoieKkCZMfRKiYQaPGzZo2bdi4SYPmTJkgd4oYOZJkyZTTp5MgGaKkTsSDAQEAOw==',
		'bau' : imP + 'R0lGODlhCgAQALMIACQQB3d0lM+EGH8zDtXT5MC/0kxMV4+Mr////wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAAgALAAAAAAKABAAAAQxEMmJxKDTAlzHxhrXGSJSBKR4ptSBHEbREkY9F/B97OlB4LucD8iT/II5CdI2qTEpEQA7',
		'bDel' : imP + 'R0lGODlhLQAUAPcAAAAAAHHQAJoIBZQ2LZ8xKZw+NqMDAa0NCaEVDqkfGbwFArsKB7oPCrIVC7IUDbgSDrcYEqslGq8iHb8kFrgkHKYvJKc1LLU+Lb4/MLBFM5hKQZVWT55gWaRMQqpZSaNjWrpgUqxyZqlyaqV9d8IHBcwEA80GBM8KBcMVDc8bD8YbEdQOD9MSCdURD9YREdUSEdYYEtQeFNkWE9oYEtgeFdkfFtwcFMElGtAjFd0gFt4jF90mFd4rHcIyIOAjF+ElGOEnGeIoGeIpGuIrG+AtG+MvG+QpGuQrGuUsGuYvGuYuG+MwHOcwGuc0HugxHOgyHek1Huo2H+w5H+Q1Iuk7I+w4IO46Ie89IfA/IshHKc9LK8JJOsVNO8tONsxIMdJCKeBHJelFJO1BI+9FJO5JMfBAIvFBI/FCI/NEJPFFJvRHJfdNJ/hNKPpSKfpTK8JcTclcRsxcSM1pVsN9dtB+cK6Jg7aQiM+ZktSViNWjmcOrp8S2s8i4tNanodqxqNqxqtqxrOC+ucrKyszMzM/Pz9PFw9LS0tnS0NjY2Nra2tzc3OTKxebQyujSzuPd2+Pe3enV0ODg4OLi4uTk5OXm5Obm5ufn5+ro5+jo6Onp6evr6+zs7O7t7e7v7e/v7/Hk4fHx8fPy8fPz8/T09PX19fb29vf29/n08vj4+Pn5+fr6+vz8/P39/f7+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAP8ALAAAAAAtABQAAAj/AP8J/BegoMGDCBMqXBhg4MCCriJKnEixosWLrgo+xMhx4h86eBh1jMiqIcGRrvzEkZPn1MQ+KKi40YLSVMMArXLq3LnTC5k0Y+B8yhmIAQs2bbLwXNqKVSlOBZuymkq16tQLU7CYOdMFUiMIJ9CsAWPHqtmppCwVZLWqrdu3bvlU2GHlCpYvFEpIURMmhCm4gNuOmlSwrarDiBMjPlQgRZQqVpgkKSPGAyfFmBGDklRQVSpUoEOLFn2JQ4MlUB5byfBotGvRniIV/Gyqtu3buE0NEEDEyZMmIHILtx27IKpSpJIrX858joEDQo4gUVLkDfPryzfJDmBqlKjv4MOH2r+jgEQOHzhUBDEyZIv49+A1KSpIShSo+/jz4we0oMQMGzF8sIEDOvwABAb6JXhfJokUNAoonkQo4YQRLnKDCS3IAEMHnIQyAgI05DABhSRGiAkiBYHSySYstugii1zw0IILL1jgSIt7aBCBCC/2uIkmkxhSECeaZGLkkUga2UMNK6wgQSFJRimlkZMgIiRBmFRCSSVcdullHQQ8kIAeXnaJZJldUhJJIoSYFEAkisQp55x01mnnnVYOMohJBAVgCCF6Biqonn8OauihegoiiEYO9cnQo5Ai5FBAADs=',
		'capacity' : imP + 'R0lGODlhDwAQAOZ/AKqlmopuQKyMVpqETFdGI3psSqaXe6ySVczJwpWKcqSdjuLf2aWKWWdQLJqUhYRxQ3tjQLy3qtnTzk09IlpVRod9aP38+mFLLMLBtJ2FW/f38qmOXKWKVpd7RpuOaaKGVN7c1vTz7m5bMpODXHdfN////o12QqqPWqOFRaeNV5d9TotzRYtxQmhVLoBnP62PWJl6Sop1Rf7+/f39/aKhmqiGVI9xRaSHUph+TZGAZJyFYWFTP21WOqiLXY9ySuzp5J+MVJF4SZR5SOLh3Z2AVGVOJ722pfHu525iNrCkiLSvoLe3sk1EKcS7ZVlKNF9XPpF0SH59aczIv/n595GCaXdqMW9qUIVpPGFSNI99Tp6LWnJaK2tVMmpfPquKWNTLxMvGuKSRWKuPXefm4u/s6aGLUqSPUDsvGISBb3ttQIJnN7iuYYBsN5iQe4lrPIVwTZF+TIuAXPPz8/b19WJUKKCCUaKMYpmBULCTW5mAVJ2HU2NFJpp8SVZBIZ1+TP///yH5BAEAAH8ALAAAAAAPABAAAAfsgH+CfyFSVkoIDksyQwgWglMRCR5rdDwXbRFoURh/cxUtF2xNdHsuTxVgITQlDg0rKy5VSA8EFAoSMnIyCXYnLCoHYSJnFBgzg0cjQFkiDDEEE1gAMoMWcVVpLSQtRS4kfQDIfwsjbA8PJBB5KgFbBAB/GgZ3dRspH0QMHTZXF0wavmjhAwPPCwEfOJgI4uaCk3kfYLDgIOBFihQDBqjpU0GGDj81fEDhIEaMECE4uEwA8ScDCgE9OJwQw4BFBhc7FghKYubGhwMvDpSBk6YLS0FkPOgxUcfLgBgFHIwZJOiHkRwQ3lBRoJPqn0AAOw==',
		'centermap' : imP + 'R0lGODlhEAAQAPcAAAAAAAATfwx0FRB3GRZ8Hxh9IRl+IxQu/yQ+/yBG5S9J/0NZ/0Ve/0xj/2B1/xyAJSOELCmJMzCOOTaRPzeSQTuURT+XSE6gVk+gV1alX1ukal+pZmGsaXe4fnizvIC9h5up/5LHmJvLoKXQqbjbvKLjqbj/osvT/8LgxcvlztXq2ODviHAAMs+EewoEGDDgIgOMiwIIMADRo2VBAAhESGBwKc+DeBwkWCAQJoKBDAwoqLI0KaCBCCwAeGKyxIKBEgQQATJi5AQFHwA4EQOD2oxGniwYZ/AirgDMmUKE4OA1JA+OC0Ks4HPP9doGAVZwYJJwuKeGA1QoeGKswSfUDiYwYKGCR8LGjAQMOAADs=',
		'distl' : imP + 'R0lGODlhDAAMAPcAAAAAACpIgjJWmTdkqzhstDh0uzh7wEdhklJkiFRmiUNjoUhwsFJwqFZ7t1J/vTiExTiMyTiUzTWn1FmEv0mAwEiGxEeVy0CYzlOUy1aVzFacz06x2FKh0nCWxnyey2+k0X+hzHiq1Hus1VvB317D342pz4q02Jew0pW62qOuxajwAAAhZAP8JFDiCxMCDAlVIkLAB4cELESJwcDjQAgQIGgZ+CCHCBAoMD0Jm+GegpMmTBioUWMmyZQEK/zp4AFHihAMCOCdQXDBgQAOKCgQIYEAxRYAABygKRJAAYUAAOw==',
		'distr' : imP + 'R0lGODlhDAAMANUqADh0uzh7wDhstDiExTWn1DJWmTiUzTdkqypIgjiMyVvB33CWxlacz0eVy0CYzkdhkn+hzG+k0Yq02I2pz6jT5Hiq1FJwqHus1Zew0laVzFRmiVZ7t06x2FKh0lJ/vUiGxFOUy1JkiFmEv0NjoUhwsHyey17D30mAwJW62qOuxf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAACoALAAAAAAMAAwAAAZIQJVQaFIMj0IOgUBBCjsGg8OpYiQSDWpmwAWhJJdKRPUJmM/owAnAbrsBKpFg7sFMIKXFcHM4kKhCFgUFI4AqDwgIKYYaIUhBADs=',
		'dup' : imP + 'R0lGODlhEAAQAKECAEmIQ9PT0////////yH5BAEKAAMALAAAAAAQABAAAAIsjI+pq+APHYpCxAnrPdRC/GgfV5WmNZ0nADri0wKvxGUeXIc3bUQ+ywgKFQUAOw==',
		'editbookmark' : imP + 'R0lGODlhEAAQAOZ/AP/x5P7z6v7t3/SdBv/8+fq3hv/lzv/69P/cvP/17PiYUffYS/VuCfpzBfhuAfV5HfVqAffZhf/Fkfq8jvmqcf/7+f7p2PZ/KfV2Gf+3d/K/NvVqBPeuKP738fu+j//+/fZyEP/38f/Djv+cRfngqP/38PVzE/nplfbcb/+zb/isMf/Hlv+9hPXaZvTCSPTRYfnWZfeCKvXHWf+4efq6jPffefp+HP+gS/WcEfXTav/o0/jhiPbcaf+MJ/7IkvrbofVxEP/GkvXUJP/Qpv/TrPyrVfLMJf+uZvfQPPfhZvmwevz03P7v5P7m1P/Ytf7ox/PCQvadIvzJovLLQvjNTvnaafjWUvveqvjaU/G4Hf/XtO/DHP1+EPixNf2gUfu5XP+oW//jyv/kyvzln/2xcfZxEPdvBv+SMvqdMPSYFPafF/u9jPjUX/XMLf53Af+8f/qHKvnnifvqw/SeCv7q3P+JIP/u3/+fS/nWbPnfo/vuzP7uz//Il//LnP/o1P///yH5BAEAAH8ALAAAAAAQABAAAAfYgH+CgwRBd3aDiX8fJYs6TiIsBH8Jk4IJWnxhRAgAe24jK2deAoIARwB9Fno5UzVPEmNmTYNDGSdQUSBlaRpJHBSJGWIaGxMBARMbWW0xlwYpcg4TiR4OLQ5rATdvBi8gHYkhXBFVag82aFRbQOGDB3URC3MmAVIMRhAeiQg9KBAFLAiCg8dFAxEhDhiQ8IPNhURkvsSRUQTMDB9XlqhQMshPgwUckPDIQ2IHjC5CMAj8I0DBAwoXIGCxguMCBQYKSgkiwORPhQIDBtCo8IeOJUUsMTxwlygQADs=',
		'external' : imP + 'R0lGODlhCgAKAKIFAAChAf+AALjogArGASnGAf///wAAAAAAACH5BAEAAAUALAAAAAAKAAoAAAMlWFrRvoMsNsNYAWgQBAZKVwhXxnhCQ5gCkYIXOAaFXE+3su1LAgA7',
		'globe' : imP + 'R0lGODlhDAANAPcAAAAAAAVrEwB0CgB4DQB7DQByHwplPQF+MRZlNxJwOQdcRAZYagRkTwFuTRhiUAFjditgawM/pQBHmxVHlx9UgwFApwNGqABGrQJJrwBQtQBUuwBevBJCpxREqRdFqxdWsgFrpQB1tAF4uitcgShOtCJXtjdXpDddvjhXuDtdvTxltQBcwgBrzQFuzQ1oxxxsxRV41EFdiUdemkRerVxsk1lsmkZxvgGCNiSoLDSxLgGGQQGETAGJWQyTcB6beD6NdSWkfky/LEK3RljFNWfNRWzPQ2LKU2/QVHTTan7YdQGAjQiHjw2Xgx6KnQKIoQiEohyilTazjQGJyQKD3AaS2AGG7QmY5BKe+xehxzSd6DCw+meBkHqJmHKQmHaIqnmGo06Qz0mj3kq+/nam2nbNrGfL13rU1JyisqOotKistqW6va6yuYir1pWnwY3YkIjcq4LStZDhkZPhpJ3mpJzlrqTpoqTjtpvV0p3K66rL0qHZ0KLH5qfjzabow7XwxifAP8J/McHDpk7AwfaeSMnyRAgWfAMdINkjh86RqBMaZLnnx4hReLU6VMGi5MDP/6F8RGEyBEzYqzwIJBADYwnOHJE0XJFyo0CBrq4aLGkBxMqVZQMCOBgy4sVLETo2BECBAMEELiAwaBhQwMBDzJYGBEDzZ4PFS4sUCAhAgcTNASOKdGBwgQPJFDIWDOQjQ0VJ1LMqJEmocA2Xr6cSRgQADs=',
		'imgo' : imP + 'R0lGODlhCwAPAPcAAEBAQAAm/4CAgP///wwAAAAACwAPAAAIRwAHABhIkOAAgQcTHgSwcECAhw8RSlQokSHEiAwnKsxo8SLCgRQXAhAgwKFHkiVLKkypUuWAljBRHiT5kiJLlysFjETJU2dAADs=',
		'locked' : imP + 'R0lGODlhDAAQAOZ/APvx0qmIUvnqtc2ra//Fk/+bQ/p2Cf6xZvuROvp+HP15CZ6AT/6GHfV1GPRnAP+4ePnpuP54AfGtS/nowu2dFv7Opv/aufvmqu+0DfXEXvGuQPtzAfCvE/RoAf/y6P7Gj+2ZFfeWT/XCQf+RMPTRfvS7X/nqxMOaW/zbw/iQQOeDBumLB/qlZPPFVvK+NP/JmPjmve7PNf2WP/bYkPK/We2dBf+hTv7x6PvKpfydT/TThv2rWP7y6fmNOv/DjvnqwPK2If/Qpvd5GPDAHvbdo//r2Pvfp//hx/K8Yv+1c/25dfDVR/+iUPLTb/+/humQE+mQGfCiHvyFIvrciPz35u+lEeeDCvhuAemOD/+rYP+vaPHKVPO0OPO6PPvhu/CtIvjnuPTHcu/IK/LEb/uTP/+7f//Mn/C6F/zBkvXblvjovu+lBOuUBvh3D//XtPG3Se2dLv+pXP7fwPXYmv+fSvKrF/fSg/fotPRrB/qlQP+oW/9/DfqMNcGZV//z6f///yH5BAEAAH8ALAAAAAAMABAAAAesgH+CFQUMDExHgoosGwoIPQZ7boo4VzIegjxkI0WCKQp+in83Bk6CCTaignxxp1qqfwhZfyhtBRZBLwQEaFJ6fnhcXh9KBwc7eUZyZg5Ldz9qMBMmAgBUPg4xTSQ6AwNzRGAAZQ5iWy00CwtjJGkQDw5DLl1vfSdIYTMC8GdAdVEBAkgoYedCEgcYOFQB8QQKHA0ZptDpsKYGmxUqrGCh8EVEhBANQooUKSRHIAA7',
		'mercado' : imP + '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',
		'mercadogs' : imP + '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',
		'merchant' : imP + 'R0lGODlhCgAMAPcAAAAAAAAEBQQAAAACCw4GEwARAA8TAg8WDgQZEg8cFRMLAB0WBB0aCRwgHxQ0KSYoGywhHTUvHyInKy0tISwsJC45Kys+PDo1IjM1MjgyNBxFMzNFNzlLMyJMQjZISjxbXj94aU8/L0c6MUZFM1BQTktXY1xkT0V5Y0B4d1B2a2JfQGxeQ2xlS25sXXFsWHl6anR6el+LjmKupFXRyW3NyXLTyoKAZ5GHbpSRcJyXeZ6bfJqRgJ+Xio+hi6eZjq+qjaWikbOti7GtlLiykKamsrvEp8XFoczXt9POsdjUt83Hy+LW2gwAAAhuAP/9W7HggQqBCIOEgJBBwQ2E/3L4WEJAwA6ISEQoIWKhQhKIPBp4QNGBA8R/G1LQkKGhCEIbBU7MqAGih0AjBgKUiPEhgRCIMAY4QHAA4Y8WGCQcMTEBiEAWESiQ+DfkAgMdAl2MeCGQAQMcAQEAOw==',
		'militar' : imP + 'R0lGODlhRgBDAPcAAAAAABIPCSchDiUmHjwwFTEzKRQxQjJSKzNoW1E4EEY7IF5BBllCFUxEJ0FBOU9NP1dEIFlPLVBLNV1VOU1rN2VIEmZPF21WCnFLDXFOFXdYCHRSFXJdG3lUFnxWF39ZF2BJIGhQJWhbNnFZK3xeKXttFnhlNkZHR0dPTE9bTktaXFRVRlhbT1BQUFNTU1VVVVprcGBcSGhlR2BmVGhpXmh0QH9uRnNuUXJxSHFzZHh7cGuDWnecV2qHbjGAhnSMkXewwoZbEIVcGJxeNYFoCItzCo99FYt4GJBkD5xoDZlrHJF8Cpl+BIRlLY9qLYRtNox/KYp9PZxzL5RyMpt4PapKEKRtDq91D6N0H6F3MaR5MqN+Pql9M4V/WZaADZqDC5yFDJmFF5qILqCIDK6QDKuWKLOBK76oNZSHSYqLa4GGeouPe5aQYpSRdpqae5msfKaHQqCOVrWOSKaebbqlVrWraLOqfsOLLN+dL8KmENGyC9i2BN27DMebUM+6QdamVcm1d+SxXPW/ZePBDOzDAOrGDu3JAuzJDvHNDfrVDvfcSYqLiYeahI6XlpaZjJqbmpWripWhop+tsp6yu6CfgqqmjqSmmKezjqmwnLy0ira2nLiwkKiopq6wqbW5qLS1s7i8sbu8uae7xarNmL/Av7XG08W9lNDGmsDGq8TEtsbLvs/Ou8rbvtLKpd/VqtbVuOfcr/DktcbIxMvOwszPxsrKycvNzMzOyszMzM3Pzs/UxdDRytHSztfXztTYydTdzd7eytLS0tTV1NfX19rd1NjY2Nvc2d3d3N7e3t7f39jky97g2N/h3+Hj0uHj2+Tn3uPq1/Px3OLk4OPk5OTk4+Xl5ebn5OXm5eXm5ufn5+fr4Onv4+nq6ezs6u3t7O3u7e3v7u/v7+3w5+/w7u7w7/Lz6PHy7vv76/Ly8fPz8vT28/X19Pb29PX29fX29vf39/f59Pr58Pj4+Pv7+/39+/39/f3+/f///v///wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAAP8ALAAAAABGAEMAAAj/AP8JHEiwoEGDix6RwlUsWzZO2ZAVw/Xp0cGLGDNqvPgIlzt8IOvVmzdPh0iRIPGFI2Vxo8uXCIPJAzlPns2b8lzgvDkPpDtSi2AKzfgIGb552h40mLCG2LZ0N3XuxNkTX7CgQ7P+W2S0nk1tCiwkSECgadSpaEXiwqrV5SeRON2pYhNhRARM7s6iTautxw4ebTEuyobPZl6c2jphmvVs3bptOffuhffDb+CDi9bVlFfO0TK05XLMcMQosuSpboqgInbZICpH42xqGpBj3dRwDhZEgTTvxebT8t55KkImjj13uJC1FpijwCqboAawgHrT3TpqKxY8IfXJwafvsoyF/2uH1p3fEkt6zUOuvOAlawcrAfumyle3bPLWtRnQRl68NT6kEE5w7RBjCSefrEEAA6AkgwIzxfAiSyifdFJLN4fZ1MwOPXBABhvy1PNTewNF0oMnBq2RTioccDGHLjOoQUkTOrhjDgoIzIDOOsmQ4gkmjnCjiwIKdNJOC9ahA443xnRCESncHKbJBUx8MYYRxMy0UjYEdcLIJwapkUoXFgSBhAAOzJCGAmms404OtElDIS+YrNAJOOKEAgok4bQQDjnkSHPJFElckkwun5DizTtdlBHGGJCiAU+I2YTCZTjWvOEMOAYpMEEbbpiAZgET6FAAKDa1kIMnnbCgSjZt0P/hCTnggMPNDuS0QI4zlUxhxRVWKPELN8zY0okqT0BRhpVjfIFKbFbh8k8qUCyRykFxdCEMMs+o8kgVC6DgCDCrPLIKKqrQUMAMx1Aygg7HIMOJIzMgcwIyNyABrBX8ooHMMcXYsoYYIPixxBhgjAFFD4ygMk8ncXgB6RwYBeOVPKkkIAIw8URDwwOLdOKLDieogUwqADxwDC0NMLDCMiggUwkSSfDLbxJzIIPMLFGIEYAfYRQhMRQ89PDGJlBAmrAYGGWzWTkzVBKPPM+kgEIOmHQCgw8/POKIA2t4rcEFNDxSwCNpKFGzzVYEQYMOXZwRhQF+nEGEF0zM8QYPUDD/izAYRhyECynxTIpxAZjYtAgCCFDySy4nGKDG4KDUcssNRFjQ0Qm4VHKH2r8m0YEFISjwhCKMAFGHIkaMcUQmaBQBKcKQSsyGQaSIo0Ml7MhjDCpQvWMJ47rggosaADhiCy7Lq9LABQosgssJtVByhxlJIIEBAQmY0ccfZ/iRSSur2x1HHVBI/HftXhgBSkGk+ELDCs3Y9E5wxlgywAC+4JJKAQXoxPKMV4sbRKAAkLAF56z3uQwQIAAM4MIW+mCHTMQCFqeoAyC6QIczEOBRCaOdF4oAhtsRJBufGMAKzoETdHSiOw4o3i06IQuWcMJ4pLAEKiCRQM654Q7Xu4MY/7pAAjNs4hSwwCAsXAGLVtBBEVAQgBi+AIaEJewLVioBQUJxjgcYAAblqE4uOKGJFVjCeMaTxQ0SoABV0OIBCXjADHRQixPc4od4wMId4HAKG0zhFICIQivawERYbOKJD5yilULohfZhgiC4iIYDvthCBK3CE2jERSdMcAEORAEUObhABQrACFlMDxe1cIMZzHCHENjBDq5YowW6MAEbNNEVHRwAAMQQhioirAhlkBsqBhKMbNDDEypUh03mMQsdiEkWw4gmKRSwAAugoRKOqIAFAnCAUUTzBNEcRirYoAUTiCAOpjgFG1wxBxusMxauMEUmXJEDZVlpCWGoGxs2Af9Jm6whBytYheEsoYMZqCKcwwAFBEygADdwgprcpMAohDEMcEaToqnIhB1s8IQ5wOKC8YwDCU5xwSXW4QxMWEIZ/FAHTTxyi/eIhyXc4IZe2CQdjuBeDihKC0Z0Ig1dUAMxPBGFBgwgBWrAxDcRGs1UaIINmQjBE+zwURMswASncIVWY1GHMhzhDHV4hTiO0RGCBKMw1rGNTYgRAySQYBY6w8QcjaEzZNzCEj3gwSiSkQyd3auugPVEK6AKAjScwhR2aEVJlwiLOaChFdGYlDsUQkyjoEUWoCiAA36hM1B0YAi/uAVdkeELL7HCGPGyF2BXiww3uKILmYCAKUrKRK3/LlEZwTEMJ0gxkOQUZip6WoEDdLCMRQxgLA5QQA6OYYwcEIMZxuirX1m7WmO0oY9JzK5WXRENZe6kE50ohkBwkY2L7eQToKDFLHSxjBUEQAACWAADaGAJNdQitYD9K3V1Fi9fdOGjtYXFKkjxG558ghPBGG950fIJZGDjwdOQAQgIIAI2eII0w3iwhjXcgg17eMPWIEYzagsMahwjFAVeJik4Id5/4CIcKZbHPEJBDA1fAxRqUEMniOEMZDDjwxyuBpCBbI1lvKIZ1sDGNELxW5zUY8UtJgWMp/JkIW/YIUke8oY7rOUuY6MaBKYyLh6R4H/IQg0vcIGa1+yCE7Tg/81wjrOc50znOtv5BGlmswte0AhOtCcY1TAvT6AEqEIb+tCIzlWiF41obsgixvJY8Z8XvJN3yGIajM40oHSlaXI8wxmGRoUO1vDoqbwDvMkQSDEsexNplCEPZ5iDKsDR6URzWtNukAEmpAGoSKihlOVB0EAi0mR2UEIPiEAEH2KdCnc4+9nQjvazXSBtaTsjAgyAgAws8Q1QlKIRxZjKPMJBWWI2eRZk4EMhCnEIRAwiD3PwBDqqTW9q09vZ6kgDBCAAAhBAQARqKEUkmHG/nWSjrL39LTfgsId160EPhUDEId4NB004ox33nna1n0EMZ8+C3/3udwJYEAkdXIIcU/8JxiOGQZBwr8cOeRjEugfBB3Ufgt3vFkMlnJGOjNs72ml4ght0cYOQh5wBJJ9EA3DgCXNUhyVcIggy6pEKMjR83Ye4+bqxPnE9iGETzphJSsb+grGDRBlNyIIUmrBvo4MgAToQhSSwDQEc6ELG5OZtQYphDDHsIeszl/nWB991IyziI2bHR9nHbo8uSEEKWdBCFkjQ9n4rYBKl0AEDRN4A3CKDzAYZBiW8sIdk3/zhg9D66VOfCD0sgABq4EbiF58SVKQ9C5HHvRZI4G9/0yAGCeg3BBQgBzT8giUX2cUpXs2HZBfi4ezeuh6an4gLJEAIGciBMcxOe3yI4wlOgHz/5CUveSnwHgIJ2LzlmyCHLeBADaG4SDDm0YYPECHmEedD6qOv/0SQIQEeIARB0AExIAxklxLqwAZOoHa5p3sO6AQhAHL8JgcCMAJ/YAKOcBHZYAxdEARmAgZ5MH0St3WD0HoVkAEfsAEe8AEYMAGgUBWLVw+X4ARTgHu6pwWS54BSoAVTQADDRwVyAAFw8Ad/gAMHgQpxMAU0QzNXACxjMAj7F3GHQAQVIAQesAFY+AEWYAmIt3i90AQ46IDjF3lcgIOQRwJPsG9/8D1r+AeUYBC4IAEMoAFr8ytNeAVk8AXIlmxLcH0fcIVY2AFPYAwY5w72Jg6aYAJgyAU7mION/6h7UjACfaAABAAHfUAFIyCJbmAQn6AGn6ADFRAEN2OHVoABC0AGhZAHCZABVtgBgegBJvAJaMQ5zGMLbkACIbCIkAd55KcFXDACcLAFUzABwwcBTeAEfZAGBjELaWAKdEACFYABSPAroxgEUBAFWKAEKOgBHdCNrmgDxHAPIEF79pAJfxAITUAAJMAFjKh2OMgFTjACchAAVMBBTqAATtAEffCGBZEae2AIZIAHHxBfoeME1zQMvPA5FbCC3HiFsLgLf6JohWYHfyAIckAAAkAAIyAF7ZgFXAACf0AFBCAH30MFIZCPfbCJBTEGTLAHelAEeQQAmmUDm7AKAyINlf9gBkqwkNyogt1oA8VQaLcGDppQkRf5QAEwAk1Qg1yAhoJwjoFABSEJAijJjwQBBU8gB5rACWYQBA/gNZ9gE8jQCTIABQrZjdzYASwoAqbwCptWaOFQlBZJAAUQAlNAhE0AAj3YB4IgCIHQBxGwBVRAlU7wBypJEJjQBb4ADtYgC2uQBkD1HKc2AiIQBQqZAWrZjR+QARuQB37ADeDQArYyDarQBXwpBxMgAUspB1SAAzIQAiFglF0ACTPwBCbpBCQgByhSELJQCeHwm+FADaASB27QCaSQmLuQA3eABScYiN2IARdQgrfACydAJ2kgAkrZB3JACV2QBjMgAZfACpf/8JeBsAVrABQ5IJgQcANrQAuYoAsZEQqagAxIOAencAOdsAztkANmwJzOiQEg4AAFoAF5MBK+oQBSkC0T4AQgQAmjoA26gAPvwA7m+D1o0AmLwAlqAAdyAAncEA6YAANp4Ag5cBGhIANd0AZxEAdssAa8IA/ewJ/MyY0ZAAEOoAIw8AMwQAo2oRMRgAMjIAS4SQA1gFvNcHKo0AVE+AfuZwnD0AZbQAe/EA6W0AUOMAUhEAkXAQoEJQMj0AUs4Ai1MCC8YAYfwAAVoAAoAAM5KgqTYAnd0KPy4AjgkAo40ACgIANvAA3ykBfwkAI08Jd9sAUkEAHU4AhyQAfS4AsN/8CgDRADOqARBBABN0ADshAMDUYLZEAGGjABMKADjTAJohAJoWAMKGca8gANlcAD23AJkGET0OALi/AJbfgEK0AB/1CJcjAQCtAAL0EDIjAQ8oAMOZQHhEAIaFAKPzAJkiALp6oX8iAOyqAL3nUTo8AKjOAIa9gHFFMA/1ADIlADyyEQ3dAJcABrddAIjVALTjcVUrEX7oAOo8AJjHADgbCGaDCuFwEOnlAHc7CVtZANBbcT73oT7+AO4UCsj7AIlzAKb/A9fWAD+ooR8kAOxXBgTlIMv+kO99MbNYGw4ZANwcASj/AInyAM3QANAmECIyCuE4sRIiKyK8YJnPBCpDhACidws53ACSX7CJwQCsXkDvXwslqxHgkbDIPzHTTwQomCC8OADOEgtEQ7rkb7m9kAnM72DkQbEAA7',
		'militar2' : imP + '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',
		'militar2gs' : imP + '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',
		'militargs' : imP + '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',
		'misc' : imP + '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',
		'miscgs' : imP + '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',
		'ratio' : imP + 'R0lGODlhEAAQAKEDABIdLygzRXN+jzpHNCH5BAEKAAMALAAAAAAQABAAAAI9nD8iyKgAWlIiwBvoiZsbPwSINZZHZRrLKZ6O06rumsTL7dayGvSkHvJFLB6UgShJgJKTX5IiXKoEl6qnAAA7',
		'reload' : imP + 'R0lGODlhEAAQAPcAAAAAAB82YSlGfTBTlDZgpjhqsjhwuDh3vTh+wjiHxjiOyjeXzjSo1TK12pqmv7CytLKztpKrzp2rx5G726Cyz6u40r/AwqLH4aPL46zM4qHS58rKzMrKzcvMzszMzsLH0MbM2N3e38ze683n7uDh4eDh4uLi4uHi4+Pj5OXl5ubm5+bn6Ozs7e/v7+/v8PDw8PDw8fLy8vLyiVAP8JFDhjBouBCBPKaNBgxImECVVoYBBjBcSEIhZgSHERoYkLCjKEGIgCBoqBJFy4SJBggsoSJV4kePHwXwsEOHMiUJnTRYl/HFQcGDpUhVCiB1QI7LDCgFOjTqM+FehhRYEVHDisUBGhQAGjHAZW7TDQQgUCFMJ2FMhBwgAQD9YCVSHAgdqOED4ECKBU7lwVG/yuDQgAOw==',
		'setup' : imP + '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',
		'smap' : imP + 'R0lGODlhDAAMAPcAAAB/DgAm//8AAP/YAICAgP///wwAAAAADAAMAAAIPgAJCBxIcKAAAQQKKEy4kMBBhgUgClyoMGKBAAEmWqSIUaPEih5BgmSYcMAAiSQLmEQJAMDHhi1fRixIk0BAADs=',
		'speedl' : imP + 'R0lGODlhGgAQAPcAAAAAAAICAgQEBAYGBgkJCQ0NDRAQEBISEhYWFhkZGR0dHR8fHyIiIiQkJCYmJigoKCsrKy4uLjMzMzU1NTc3Nzg4OD4+PkFBQUdHR0tLS01NTU9PT1JSUldXV1lZWV5eXmJiYmVlZWdnZ2hoaHFxcXNzc3R0dHd3d3l5eYGBgYKCgoSEhIaGhomJiYqKioyMjI2NjY+Pj5CQkJGRkZWVlZqampubm5ycnKGhoaampqioqKurq6+vr7Ozs7S0tLW1tbi4uLm5ub6+vr+/v8PDw8fHx8nJycrKyszMzM7Ozs/Pz9HR0dLS0tfX193d3d7e3uDg4OHh4eLi4uPj4+Tk5Ofn5+jo6Onp6erq6uzs7O/v7/Dw8PLy8vPz8/T09PX19fb29vj4+Pn5+fv7+/z8/P39/f7+/v///waABAAAAj/AP8JHEiwoMAzOBpgqGKwoUAiQrAM1FIAAIATDgs+iTFAgAIQN5hYgWARRsaBQDQIsFCCQgABBkQQ6ZCiy8l/QxoAcHHlH5gWBCwGMXOzzAsABnwIDMOiQAEYCSSIGUhGBoqCZDxgYCJwSQYAF4r8swGAh0AnIQBEMAjGi8AcCQqoCCPwCwMGWo4sAOCBYcMpJCxuQAJmoA4AFgocoEHGYZEGAig4eGlhRpR/XiIAeKDE4ZYZTmlwufJjREUFVv4lWTHFoRQNASIYIVjjgAAWUzOO4aEAgAkqA6eI2NzjJhcTAg7sIAhF5wcpN7NUAMCBK8ElE2AQvdkEQQq6BrncAxwYEAA7',
		'speedr' : imP + 'R0lGODlhGgAQAPcAAAAAAAICAgQEBAYGBgkJCQ0NDRAQEBISEhYWFhkZGR0dHR8fHyIiIiQkJCYmJigoKCsrKy4uLjMzMzU1NTc3Nzg4OD4+PkFBQUdHR0tLS01NTU9PT1JSUldXV1lZWV5eXmJiYmVlZWdnZ2hoaHFxcXNzc3R0dHd3d3l5eYGBgYKCgoSEhIaGhomJiYqKioyMjI2NjY+Pj5CQkJGRkZWVlZqampubm5ycnKGhoaampqioqKurq6+vr7Ozs7S0tLW1tbi4uLm5ub6+vr+/v8PDw8fHx8nJycrKyszMzM7Ozs/Pz9HR0dLS0tfX193d3d7e3uDg4OHh4eLi4uPj4+Tk5Ofn5+jo6Onp6erq6uzs7O/v7/Dw8PLy8vPz8/T09PX19fb29vj4+Pn5+fv7+/z8/P39/f7+/v///waABAAAAj/AP8J/FcFQwMcZwYqXMhw4AkAAApoGYhFCJGGGGFAhGCFyQ0QCgQMiPEE48IuKToQEWFAQAAKJSwI0ADE5EIzQSASaAHm3xUXABoMaYhCBpmBYiQkgFGgAIswAn0YAPCizMIIAEI4EcgDgI1/RS4AyLBEIBMMHo4qrOIBwIIjWhgw+CIwjIoCCXII9NKTIRkaBwpYAKBjIBgkGyCSmGLzn5IHACJ4+RdlhswADigIaFCk8ZQVSf5ZURBxxI8rXGg0nbGlsUAxLAQcqKHQSIQAGqS4FtgDsgjGAqmYAKCAx5jdUj4EhaJwxwEBJrjsNgNjQlmFTDgAqJBl9z/pDMOkBEDQJCAAOw==',
		'underline' : imP + 'R0lGODlhFwAQAIABAODg4AAAACH5BAEAAAEALAAAAAAXABAAQAIVjI+py+0Po5y02ouz3rxjAIbiSIIFADs=',
		'unlockedr' : imP + 'R0lGODlhEwAQAOZ/AP7ElPV0FfuGJv7Wtv3dw/ZxDf95Ae6rE//iyP/q2vCzHP6iUvG7Yv3jz/+BEv+6fv/9+/7z6v/hxv3Prf6WPP/lzf3hzPXXg/aDL//AiPt6Dv+4ef+DFauMWvaEMKeGUvZ+J////v+TM/+0ceycFvDHSvfis/GvEf2rZf/38PiMOffeoP28iO2pOv7k0frryPvsz/GwLPnnt/C4HPSsHu/DcP/06vihYviUSf99CPnkrv368fqAIPz04P/txO2fBP+kVOmOB/h1EvfVjLmRVPicWeydLf7Rq/7u4+6oBP+ybf+pXvdtBPvZh/yjWfp9F/qJMP/7+P/QpeuDBeqECPHLPumND6WBPPvsyf/uyKqJVPPCWPXIVO+uR/GzFs2GHZh7S/rv0vvu1P/o1P3fyf/auvC+KPPFeuumDf+AD++qCte4fPXboflzCfbdpva/Zf/17f6YQP15Cvt1Bvvip/bShf/79/+gTPHMWvuxd//x5PCwTvrtwfbJTOuXBf///yH5BAEAAH8ALAAAAAATABAAAAfRgH8QBCgUC1I2f4qLjIITPHMaGjkbeiGNjAMFTywuFnlyG3CYizhtR4wABmWXpAUUEIwJAhlRpH9McY1IUCN2tyoLjQQ8dxVjCBLKFQkpEwSMEUUxDkAiHA5pHCJKA5hkIFV8WC8+WTBiPTsAmBYYZngXF2sdbG4mYRmYDR4zJVxbwHyoUWeFjAf7PHg5oEBBhw8MGJzRgbARvxMKaNDQQmTPmyF0KjJqgEENmgMHvlwx0qJLkyXtQCT54SfIFCpWSMTokwNThBsFAggdKlSIk0AAOw==',
		'wait' : imP + 'R0lGODlhFAAUAPflAP7+/vn5+f39/ff39/j4+Pr6+vz8/Pv7+/Dw8Pb29vHx8e3t7fT09PLy8uTk5O/v7/X19efn5/Pz8+Xl5ezs7O7u7uvr6+bm5ujo6NnZ2ePj4+rq6uDg4NjY2NXV1dbW1unp6cnJydvb2+Hh4d7e3uLi4tfX19/f39ra2tDQ0NHR0cvLy8fHx76+vsjIyM7Ozt3d3crKytzc3M3NzdPT08bGxra2tr29vc/Pz7Kysri4uLOzs8zMzImJidTU1I2NjWJiYsXFxb+/v8PDw6urqwAAANLS0pKSkmtra3BwcIaGhmBgYMHBwby8vMDAwJWVlYiIiIyMjLS0tLCwsK6urm9vb56eno6OjoCAgFhYWENDQzo6OioqKmlpaWpqal1dXYWFhcTExMLCwnV1dWdnZ319fTk5OZSUlJ+fn4+Pj7W1tYKCgqKiom5ubkVFRVxcXJmZmZubm1paWnh4eHZ2dnNzc0pKSjg4OGVlZZiYmLGxsa+vrxkZGYuLizw8PHFxcaSkpIODg4GBgXt7e1FRUVNTU19fX39/f0tLS7m5uSQkJJGRkaqqqklJSTQ0NHp6eiEhIYeHh1dXV2FhYaGhoSIiIj8/P1VVVT09PaOjo4SEhKCgoDU1NW1tbQMDA3R0dKysrFtbW7q6ukZGRiAgIE5OTlBQUIqKipOTkxcXFwQEBKampmNjY0FBQbu7u1lZWS8vL1RUVCgoKK2trRAQEJaWlhEREUxMTDAwMB4eHpqamgUFBTc3NzIyMj4+PgEBARUVFTY2NhISEmhoaKmpqUhISA8PD5ycnHJychMTEwcHB0JCQgkJCRYWFnd3dywsLCMjIy0tLSsrKwwMDAsLCzMzMzs7O0RERF5eXhoaGikpKZ2dnU9PT6enp6ioqAoKCnl5ebe3t1JSUiUlJf///////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQJCgDlACwAAAAAFAAUAAAI7QDLCRw40IAAgggTDnQgQ6FCGhAErolFrhwAAhUdhvGToNwoSADIISDgUOAAToUSwPJEoAGCgwkdRABQDoqiEB18JHiggBw5AwUylkPRilAOEgoICgggAYOGAAhHsDLTIKEADhcOKDywQihBAjQJVogBKA0HhxBGaFgQoGIITUjepHCooEMHDg3CWixwwetACCGt7kHywCpOAwgNLEJCqQQDoQEUmHDxQutAFCkGkJuhJAMCCghcoQAAwQEFv+UE5MlDIIyoAS+YwHQ44QeCckNuAAjQYkHJciIKl0vBouIDDKgVUqDw22EBxA4DAgAh+QQJCgDlACwAAAAAFAAUAAAI/ADLCSxHrmBBAAYHKlyo0IMDhhDLoSAgcBEWcuUYuMAYccUXinhMASjgKEdEgRLs1CEAZIsEIJ4QKOToQAOAcnC0kBDhAQOzL+QAHDhQUCAKQ0iElFCgcACFAQ8qHCDIcUIdSQ0YAqigwIDAogIJ0OC4sMDNrwJAhCFy7ETEAhYqNCAKwEQUQWNURAwwAYOFBGBHRiCrkMBNjGAN5FAic6EAEyMEfMVYwEoPNRsGkC0A4YSPDFMJliPhYUA5ETsoSEAAgYUDcgkiIECs8ECiFgVSBAnwYYbkkxVsQCinIgaAADGYnowwvFwGDxgVbCC88Gw5uQOpQzTIHazAgAAh+QQJCgDlACwAAAAAFAAUAAAI+QDLCRxYjhw5AAYTkiPIkCCMCQ0jlhORQOCZSAsXhFgo0UWSAuWqdAGQQEsOhhwFJlgCpUCbNwg+yaqAstyFCAbKUZEjQ8QHB9GQAQiQwcjChRr+DGJxAQRBBSfQpCrS4ajADWmGPWgogFY2BwINDiyQISXBCAQGHrxQQwooiBHJDZAA4cDBE0TinJEh0cADBQ0CiC0HoEAFswMPIAzL0UCNKQwaAphgQUBYgQda7FCBgEBKAQMsTMBZ8OqFAJObLEggYcAHEOQIKGAweKCAIS4OeEgRQIQJy2oZLmCS1gONwh8aSLxasZyMsuUYHF5OEIFy6owVJowYEAAh+QQJCgDlACwAAAAAFAAUAAAI+wDJCRxIsGDBcggTJuSAQaFCcg5PDEBIJQ5EBTEeOhRRpkC5U4/IBcgSRKPCAIOuFOiTBIIgNwlMYtgAoNyONj46qNCACYqABClCCES4oM8VHiBOKGTAAU0vRTLKQUQooRuWBQ7LFXDUKgLCqQgFcACrcEKAhBAxpBjS5EJWhBX4+JmTAeKCGDd0lHhbDsSvVHaGgAVg4AHZhAUODAVbAIcoCVkBPGBQUyrCA0OcdGgQYDABBQgeGLBcrsKC0RNYLBgAIYCDCuQMDCAwVCEAHCkMcOhgAMQFASYTSljhkYQIwg5ionX4gADCCSUgEoC8PLgECNW/GjxoUGpAACH5BAkKAOUALAAAAAAUABQAAAj7AMsJLEeuYEEBBgcqXKhwxAWGEMtdGCCQChty5R58wBjxxBEC5VD1AUCgSoyIAgOkARTgCRQIqCaBHMhxwQIB5UIogfFhhQZscQQoeIGjoEAIUqSgeDBC4QINgOwUi5CwHIEVexowPDAKzwKBRgUesMBxoQMFNAFYoBGCRYSICxBlOWSiIAMUOEK8hbjgGiE6McKSM9CgrMIIBDiGLfChRoKtxrZUAIvxAI8VJCQUUAygQQ9VqiaALadAgQAAIDwwKECgQIUE5ALgcIHRMAATKAxsiGAAAQIAKMsx+FCgHIYNgxfMjNigeDkKFDAGSIyybAKKwRca3B5WYEAAIfkECQoA5QAsAAAAABQAFAAACPUAywkcWI4cOQEGE5IjyJAgBgwNI5azEECgED0LH5hYKHGDjQLlVm0CQECQCoYcBR6wMaSANysJMjkDSTCjhQPlYOi5IELFhCREADSY8WLhwgBMWshgQIHgBQd7gOBZYFSlB1cSGg4IdQiBQIMDD1CNqCHrVwALOuDgYaHjEi9RMhhMoKGDkaYRFwDpFMUD2IIGIKQkqGEAx78FYNCgSfCAtFJ4OR74YGLCAAOHCVzQxaXShIICITBA2MBBggMCHCQzRC6AhxV/BwKIAMKAAgYJvhQx+5XhgAk4HyhonYuIRIGXBTaQsJBBjcHHCVQ8PlCh9YgBAQAh+QQJCgDlACwAAAAAFAAUAAAI+gDJlRtIsKBBguQEHiz3QMHCcgkLWggw0MQKgQkyKIS4sRwFIRRrtAAQoJaKghEJHhDjwgCLGwFynBqAUqCCCgbKkbgBIgKHDWD0ABiQ4YNAgQVihCgBwUJBDCBagKNTgeNAAxmC0DQ4oEoPBgNTlhOgoCNBDhQLIighwgTYhRoeBVo1QSCBCDA6vD24IckgKydSkgNAwOzACAc2KhSwwUFOgwLcsHobUcCECw8IGNhIAMMsLb6cRhwwQAA5CBUCOJDBgUsXcgcyzDhaEICCBAzMUIPQBdKCmgUDPBDYiNTpZ4yAE9Q88EgjgQhsKH5YTkYM6gmza9/OPSAAIfkECQoA5QAsAAAAABQAFAAACPkAywksR65gQQAGBypcqJCBAoYQy1UYIJBECnLlCETAGBFBiALlVNQAIKAJh4gCDcxQcUAkARw7Aijk2GDBgXIUalCwUALBDhUABsAwUTBlBx8RBjxQ+MDCijNXKBDkKKAEDZkLGUTaJkFg0ZQJOC6MkGAgOQAJNkSYQBEiiShHiDgoaACBBQxtGY7o8YORhq/kBAQQqzApx68CECwgLLBAqDFdp5YzsABBgQgKxCYAEQRIFgdeMw4GQGzaCwwZLrjpQe4AjIsEFQbgQ4rCGy4S4NxZgLKck28XynmxBsCAnCm9V5wsR+QVRgIvGM8cqGFGb4YHDSYcGBAAIfkECQoA5QAsAAAAABQAFAAACPwAywkcWI4cOQAGE5IjyJDggAYNI5ZDkEDgBQ8LA2BYKJEBjQLlULwAIICFBoYcBQrIkOEAihkBMrQggLLcAAQgG9BQgOACghsfAAS4MGLhQgAYJiwIEIAgAgQwdKhpYFQggAoOQDIcsEPIAIEGBwogkJLggq9gyRF48GCpxBGb2OhwgNBAAgYFyhIcgYZSoghhC0LIoFdgiQEcAwfgVsRCwwFIwEAsKJABl11zOixICQFEijmdLlAu50MHAwA2KrkA0QHElyfkDGj4EHhgAD9bEJSxlACUuAUE9brQVqLckVICBIyxIVHgixMCxXRZWABjc4IKfFwfqLB7xIAAIfkECQoA5QAsAAAAABQAFAAACPcAyQkcSLBgwXIIEyYMoEChQnIOByRASEEERAMWHjoMMCFAuRIfAABIgUGjQgAYLggY4cEABxcFTAZoEDOBBggzE4QQAQCjA4EIASAYGsCAwgESSIi5waAcRITkCCA44LBcAidhIEBVWIDBU4cUqG7tQMeMsBZVEVpoIeSFBYgLsNxpdiNtuQ0tnLxY8JVcABVfFY6IuRXhADl8TlRtoOnJg8IHlkFbQkJrQgYWZlwJVMEpQh9SGqa4M4NChgpVMpUTcKED0JNkECU4cimADS8STCaMgElDOTZLBABYw0I3wggkEK74A/GAB+MOJYRIGDiww9dVyQUEACH5BAkKAOUALAAAAAAUABQAAAj3AMsJLEeuoEGDAxMqTCggwcKH5Qo4LJcAA7lyAhBAFHjgQYByCiYAIAdjw8ZyABAgEFBhggELRggkvFiOgw0F5Q4sGHBgQAATJwAIUGChoMAA1YpMwgAgoQEIGHCwaECQ5gEyRRwsPMDjxQCBRgUS8EBTYQOZYAGc+JElGAuIDVzw+FChIAUwt3A5gYggCAsjdWkCCCCibEKPRsMKgMMLxsIAOVpAAHvxQJItSkYoKKuAggMdUzQSLKdBB04OpnhYoLGhxxRyAhY4uGgYAJYlCXJ4GRAi0IOTFCRpbfLJAAArIYCTEIhCSWUOJ8sO6DDQMMSD2BMGBAAh+QQFCgDlACwAAAAAFAAUAAAI/ADLCRxYjpzBgwcJKiQogMDCh+UWkBAYAAG5cgAgXISIQBmHchAeACC3AYHCjQIBcLI1IMADAQwcFDhZ7kIQBuVaFGFBLsCBCSDIASCg4OLFAJbGldEggWEABSiMNC1I8Q+wEgsBoPCQQKDBgQd4oCQ4YKZXcg12rAHiAmIAIyZGMDBI4ccrLeEgDlgx48OCrxgLlADwsEGAr4AB5Lg0UaEBISEcUsXYo9CPEggICyTqgEmTphs36KhQzgEZFwsyNFATg5wBChMADyT3pM4AJmAKiKDSdbbCAW1GlKvxQwCAGzIgClRwQqCMPBcNOFA+uRyBD74hIjQ4cuzAgAA7',
		'ww' : imP + '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',
		'bClose' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABkAAAATCAYAAABlcqYFAAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAABMZJREFUSEu1lXtQlFUYxg+jIIXoBMw04vpH2i6sOoIkDgTeYBAFC2uhsBKScNcJqqGRSwiKEitXEa8tStSMOYOQkaloIFPCtGDo4AUQBANUZIGNm6i7sDy956yidvurvtlnzvu9531+z5z9vtm12BXoBVuryczG0oqNjBrFOtVqErOxsmTTabW1tmTiAn1gIQpYgJnGLdj4OJjRNMYM4+PswZiJ3Tea2LBxlN0zjhFjsljvEZPFrvTG6OgoxsbGJlZe/1cK91sBlrTKG0MXtejS5EB/rBD9pCHSSMmXeFBSCMO3hTCSRo//SY/6Bpq5T7pH80PFZr++qFDw+s+dQrjPUrDtq5dMhPTQRl9+NgZIw4ezcZ/0sCDnH2UoyBl5SDMjpCES93E/5zwOCVvuBZYW8OQkui+y0KfJQr8mE8P5mdBsjkXw26oJaWJjYSzIQn5s3LN9mhuiee7rI4buYNZEyPqlHmBqChmsqcKt3FTc3Z2KnrxU6PfswODeHVC8pYTJZMI4PWEuHqiJifnb/gB5uI/7u4hzO/dz6E8fx3uei8AyVnuhv/oc2tPicUsdjy5Sz854/J4ejwPR0QLMXwIexld+z18Ufs8VErpJzPXRvI58Xeo4dBKrXZ2A3tKjeNfdFSzd3wN9FafQHKdEW7wKHQlK3PlMCV2iEoPJKhxQKQXYYDDAaDROrLzmAfuVGzGQpEQ3zd8mXzv5OaclToW73xxGqIucvi5fd9w9WYL6SAXqw9eg4f1ANJNuRgSiN0qBvqhg7AsPE0Hd3d3Q6XRCPGAv9Xs/5DMKtG0w+66FB6I+bA0uE689PxfBzrPBUjzlaNifjWNSO5QtdEQF6bzbDNS+MgPXFkxDIylz5QrxHJ4O4aEZ1G+gfS4tzXMf9592dUSx9AVoYyLhN20KhXg442peOo5IrPHd7Odxcs5zKH/ZGuel1rgsnYRMX28R0N7eic7OJ+ro6KTTKZHh4y3mfqL5H+dYC/9x4hydNQXV0WHwtZn06CQHslAkm4bv59qibJ4tKufboHqBDTJWLRMBLS2taG01KyRUiRs3zDVfRRDNVdH8OfJxfylxiomn/TQCftOtwLZ5yXH90C6ULnRA2WIHVHja47yXPWqW2omAhsYmNDWZxQMyg3wEuPFRv5H6/F67xE74KjzsBeeEmwPqElXwd7Cmn5VX5Wg9sgdnfGahcpUE1YES1AZJcOnNmcgKXSkAj8Xvm99xRPa6v/YvvjETta9JUBUgQaW/BOX+L6F+ZwxenzkVbIv3XHSUHESVwhk165xQF+aEyx/I0LBJhuaPZGiLkf6rWj+R4nqUDFdVMtRHyFC33gla4mg3LMbFfdsQNv9FOsmyebhzQoNfI91Qt9ENlzYtRFOCC1qSXNCR7YLf0l1wM80FrSnmHt9riHXF1RjXZ+orH7uiPnoRrmz2FRzO4yGcz75WeGPk9FfoLdqKntIU9P6QAv2pbeg/m4z+ymQMVpFqkzB8KRFDF5Iw+EsyBn6mvXLqP1Xrz2yF/qxa+AWHeJzL+Wx3gDuKQ5fg0Fp3JCyXYouPFNtXO0GtkCMjRI70YLmo1WvlSAtyRuoaZ7G/1V/2TJ3kJ0Wir1mcw3mcy/nmf73/4bqQlzr1MfYPNcKdTI8iX3wAAAAASUVORK5CYII=',
		'bMax' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABkAAAATCAYAAABlcqYFAAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAABERJREFUSEu1lQ9MlGUcxx/UmBqRWy1iBi0NFeE4IBMGAVZjbbX+LAqbzdpoglYIlvw5SSwk/v8RiBk5To4/h5z8BwEPkAMhhAPiBO84OP6GcQdSyUToDvj2PK+DDWeDrflu3/f3Pu/v+X2+v+d533evkWdqOYxNnibGJqbE+EkTsnHzFkKIETHauIls2LCJ0BMdr3FgiWBxgSwtUf0zTwz3Z8nS4iLR35uhukvIm16HYTAYsLCw8FjE+MT9g0/ROjyFnPZRiOVjEHfexuWOCRQptChR6FDSM4WKW3dwRck0jSrVNCpUf3KRid2rpPnynjsoU0yimNax+oLOcTRqJsH45LX3Dj1WE8YnLu8e/E+TU/GZ+Oig37oURucur6SwU7uyEsYnTm97o7lfhwtNg8i8PgRR6wiy239Hrnycg+v1eu6ZrSU2N79rAnm0LofWi1qHca1vAoxPHD0/RINqAmkNfUiXqXFeNsCZCVuGOZP1vhRsbvaNUVxsGUFm8xAymgZQc/MPMD6xff19VN+8jZgrPYir6kVCjRJJUjVSr6lXmXz8ydFHbttyE8wkXTZI6/qRXKtG0lUliumLxPjkZbd3IGkbwrfiNgTltyOkoBOniroRXtLNQbVaLXQ6HXcdK1UhlgJipP2Io408nI+ovIXwUgXCirshkHRARFfD+GSLtQeC8pphfjQLL/iLYBmYC6ugAtgILsPLe7WJW4wUbnF1cI+vh1tsHbweasLxTDlsBYXYHSzBDso5klEPxidP7HbH11mN2Pp5Bp7yuYBtfkKYHc+BxclLnMno6BjGxsZo174cdJW8fVflrUKLaJNimPvn4llfIQ6lXQXjE+M9HgjIboapTyaeOXIRZl+KsD2kAJaR5RxwYEADjUbDxUeJ5ZhYE1YRZdgZXASLADG2HxPhcHotGJ9stj6A4PxfYeaXhedpwjIwHy9GVGBHcjVnolSqoFKtLWayN7Yae06X0e0uxEvHxfD5RQbGJ6b8txBOTaxOSLDzxCVYCYqxK1EK658b8EZoEtfheuQZlAB+WgN40TWwDa+A9ckiHBPSHaJ8Yu7ijcTCFuyjCZ6gFHY/VMHhfBMc8uRwKO2CvbQXdg0q2FxXY29bH6zlDyIb28v68EpdL/ZVKuAk6YKT8AacU2XYH1XL8QJzWsH4xN3nO87ENboWbilNcD0ng3OOHE7lCjjXq+HUPIhXO0Zg3zMGvnIcfBUVjWy8v3MELvTLdmnUwKNKCQ+JAgeE8gccyguW/AbG50yiuqeRPjSFc+N/I3RyBgm6GQT/NQvXe/dhNTcHC4Mezy3osW3RgK1LBhhTscjGZjRnOT+PXbNzcLs7y9UzDuMx7oqJo38ylsXzOwu7gCjwg+PBFySCfzoZ9t+ngBeRBl7kT+D9SBVJr8+mgU/vszw/LAn2IXTuN9HgfxUJ2y/OwOaz0BWRlC6tyVo/vv+b/xcAf9f/4T3A6wAAAABJRU5ErkJggg==',
		'bMin' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABkAAAATCAYAAABlcqYFAAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAABHtJREFUSEu1lXlQlGUcxx+PGM0jO8WybMILddnFpnTAtDSnpqZj0tGZnI6xEq0YrzxQIWkByxQQMQSVAIHFRUUOFS8OWUDQRZCFZV1CXOISnClvOfbT82zWTH/pH/nOfPd53t/z+32+7/udnXn7zI7Kwm3wY8Jt8FDhNmiw6DdgoOjTt7/o26+/kD/igS5nr3A6ewS9PcJ5947ounlDdN24Jq63NAq3IcOEmDXnE7q7u+np6XkoUnwx/cMFlF7qYG/5ZVLPOkg1N2OsaMVY1cbBqg4OVXeQWd1JtkWq9io5NZ3kqPWesuV9luUqmRc6XP3pF9rYd74VQ0ULRfUdKL6Y9v7H/5vJgcor/zE5bb+C4guf9+Y/NBP1JoovprwzD9PFdnad/o09RQ0kljaSVOYg5VyLjK4FY2WbjO4KRhmHUUaXLqMzSqXL+FQtXdWr2jFUtpMiY04pb2bvGYeLc6quHcUXk2d/RL61le35dewosBFTYCdOmu0ubiShtImk8haSpWGKuZXUirZ7anetKWalVtd5Ylkz8aUO15ya31lYT66lDcUXk974gKMXmvnxcDWbj1jYkltL+HErkXl2ovLr2VHYQEzRJWKLL0s5iFMqaSK2xOG6jzU18os8j5Z9qn/bKRsRJ+rYeqyWjIomFF+Mfu1djGUNrEwtY5WhnDX7zKzbX8H6jCqCsqoJzrEQcqSGsFwrYcfq2HTMxqbjNsKk1Loptw790VqCD9cQlG0hMKNSzp9nrdFMosmO4ouBnjNYlWJixOIERvon8sKyZDy+S2Ps2nTe9Atlzny/B9LsJaFoAjMZJ+c8VqYxankyX+4qQPHFI+Om821CIY9+FsuQhbsY5hfP098k4b7MwJx5i+jt7cXpdN5Xc+XDPB9wkBHLUnlGzj++OJ4F0SdRfOE2fgZLk0wMXbiHJ7/6leFfJ8rGNJ5bf9BlYrfXU19/f82dv4iRodmMDJRGK9Jwl0afxuSh+GKA5+usNpQw3C8B9yUqLgOj1h7gxZAcl0ltrRWr9f5SJi9FnMQjNIdRAQdkXAa+2JmP4ouh2rcIkiZjlhvxWJ7GGPnK46XBBDkwc+XPqOEH0cw14XjuKWJi5Ek89YcZuy6DJfHFKL4Y4TOPrfuL8QnOQRNwCK/gI3hvPYV3XAneqefQZZ1He7waTb6VicU2JpTa8DwrVWZjYpHNVdedsOCdWYl3mpmXd5vQReSh0x9l6d4yFF9MX7jhb5OIQt6OKMA3Uir2DD7JZnzl33dK3kVeNTXwirkRncWBrqYJL+vv6Gqb0FU7XHV1PjXfztScaqbJB/ONk/OSt3pfJYrvMomt6SDmUidRzX+QXNdGvNzHyv22zpvo/7yN763bjO7qwr2ni6d6uxnk7MZNapDcPyFrz969w2jZ43vtFj90XndxFE9xXSaen2/gH032j0Djp0frH4Z2xWa8A8LRbYhEG7QN3cYoNPrtaEKkQqOZFBKNlz4K7feReAWG4xWwBe2qn9D4hzLJb+O/TMV2ffiW5lrlZ/DhXX8BmUnqCVosKVcAAAAASUVORK5CYII=',
		'bOK' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAC8AAAAWCAYAAABQUsXJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAgVJREFUWEfdl0urQVEUx93Bnd4PcL/lnXlMFMmAiZGUx4SBlDLwKJFHXhERoSiSkMhAKWld/1Vnd06329U+k3PuqT/rbNZev7VaZ7WPxfKfrq+BhYyqX+usAJOBLxXjm0gEi4/HwzQCrwb+fr+TWSTgYdxuN9OJE8DH9XrVrcvlQtvtls7ns+69XuER8Agsq8PhQLFYjGw2G1mtVlY4HKbNZsN7DodDXut0Ony/2+3I5/ORw+GgwWAgHVfAn04nkpUCns/naTabUbPZJJfLRX6/n47HIwMCvtVq0X6/p0AgwIkiGdmY8BPwqJ6MVqsVgyUSCY1/vV4XwL1ej22sBYNBYcvEU/sIePSqjLrdLsOUy2WN/3w+5/VMJsMVhu3xePjb6XTScrmUiqdmFPDr9Zpk1G63GahYLGr8J5MJr6fTaW4j5VmIx+Nso9Vk4ql9BPxisSAZjcdj7t9oNKrxLxQKDFkqlahWq7GdSqX4P6FQiO8rlYpUTIVTwE+nU5JVJBJhmGQyyVXO5XLcGl6vl5AcWgq/IyHEQKth0rjdbhqNRtJxBTw2kRWmCRKw2+2iPTBRMF2wJ1oK8NlsVsRQt49sXAHf7/dJr1BRTBQ8oHr3esVfwCOg2cTwzxPwO4xGo2Ea/ThVVqtVMos08M/qfygHfUwHo0ph/PONyoivgs8if/6bV+5vVrsE+rT9pU4AAAAASUVORK5CYII=',
		'bSave' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAC4AAAAUCAMAAADFhv/OAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFAAAAIDBAMDBgMDhwMEBAQDhwUFBQUFhwUGBwEDigMDigIECgIEiwMECgMEiwMFCwQDiAQECAQEiQUEiQQECgQEiwUFCgUFCwUFiwYFiwYGiAaWqOYHiAcHiQQFDAUFjAUGDAYGDAYGjAYGDQYGjQcGjQcHDQcHjQcHjgcdAAcICQgHjQgHjggIDggIjwkIjgkIjwkJDgkJDwkJD/oJjgoJj/sLjAoKDwoKD/oKjwsKjwsKj/sLDwsLD/sLjwsLj/wLj/ysrKzMzMz8/PwMDQwMjQ0tLS2NjY2tra3NzcwMjgwMD/wNDg0Njw0ODw4ODg4uLi5OTk5ebk5ubm5+fn6Ojo6enp6+vr7Ozs7e3t7u/t7+/v4ODw4Ojw8PDw8fHx8/Pz9PT09fX19vb29/f38Pj/+Pj4+fn5+vr6/Pz8/f39/vfr7zJgAAAQB0Uk5T////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AFP3ByUAAAAYdEVYdFNvZnR3YXJlAFBhaW50Lk5FVCB2My4zNqnn4iUAAAFpSURBVDhPlZNrUwFRGIBVJGldFosuNsVqY4mEaimUS5uE3JLWPbb+/1e9i+qcaZrR8+3M88x75sycVzEF2KWQS4UcfywFy8r5kjFMlNjfeSLB8xfRcDAY4LweBrt2ADn7jsMLp4tmSNvtqJP6TRZyCYMXTub58NWxasNU7wlyaYJxLnCLuq33UZjqliCfTMYoUeFoPrtd0DEUpsRHyMdvI5SwIL9Pru+1LgpTrSLkb6MBSlBwLeo7jdOEqVk+6vdQAtdXh/u0Q6/Tapw0iamGnA+6HRQuHo+F/JyPcTtpK4mpeh7yXkdE8V7GQmpgY5u2WoyYquUg74otFA/MViuUhYddi8VsxFQ1C7n43EBhzvycWrn30j4mzIQBNfVSBvJmvYbiDnFbK5HIze06QWyqUFPKQj5lq5Vy5YedAxtFUSaSNBoMqrXKtysXc+nZjyzm/wI12UwqJeewHpl0CgE/fYlkcr4e/1q+T12HLuCJR4bvAAAAAElFTkSuQmCC',
		'cp' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABIAAAAMCAYAAABvEu28AAAAUUlEQVR42mNgIBKoqv7/z8BwB4rJADADIDQIkGzQHTQDkMVJNogU8ZFtUHb2f3CgI5IAmQZBDNgJxMXEGYLLZgi/GEtSwJv4SLAZv0Ek2IwEAD1eUhIkoQjAAAAAAElFTkSuQmCC',
		'cw' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAEsAAABkCAMAAAD5aj07AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAAkFBA8OAxkIDBoZCBwZFhQxACYTAyofAC4lGSspFCkpGiwyETEpDT0hACgnITsoKzg1JjI3MDs0MSRQBDRdEzxTGjdCKCtsBjltCjl/CUYoAEEzBUA2GFw9H00+LFtKFUdEKENJO0hFMUhFOkdUKlJLJ1RUIFVSPVtTOkJvH0x6GUZrK0x8KlZ8OlpyOGBBD21KCHxTDXZeInFfL2lmL0NESFxLTVNSRVZUT1xlRFlnVGBeTmliR2JhXmpnV213VHRoQX1gWndwVWp0YW9xbH1tY3JxYHtxZXt+a0aAF0SUBU2SG1WNJVaLLVCmDli5E1+hMWSNQGuJTnqKUnGeTX6WTXmbXWiIc3eHYX6BeHysVnu9SnXCOn6DgoRXCYZpC4BoH4plH5NmEp57E4BvPIxwNJV8Kox/ToB9YZiFFK6DAK6NKLGbIoeEX4iDWIuEaoaBcoSIdYmbaoeWcZeRbJyRZ5SSdZKSfZaseZCydJ6xd62bWaWWf6ekd6akfbWteY/CbpjQcIOahI6UhYmTlJmNgJWShZSpg52khZqljpamlp+npKCfkaekhqWjjqyihamnmqG5haO6kK62l6u2nrCyibu2iLe0lraznruylKa2paKyu6i1s7Ozpa/ckrzEjLDImLTemL/GrLzJornJrbzFtLjHvbzbqLXGybrR3ci+i8S2mMnKi8DHls3El8jDntHDntLOmcPAqcXIo8XEvcnFs8fXucrXsMjVv8rZvdnEs9PUrdjSrNnbq9DTu9vUvuDRrujivPLqu/r1vcvYzsPY2s3T19fTxNbVzdDdwdjcw8Pb+dfnzdrnx93lzdvsw93k0t3m3M/k6Mvm+c3q9NPn9NHj/NXu8tzs8dTx/Njz/t74++Hvzunpz+Hm0uPj3eLu1Obu3Ozm0+rq3Oj22fLrxP3nxvfzzPz0xf3wzfnz3P781fj43uXt4uzt6eLu8eHu/+fw4erx4+vx6ePy+O/09/Xz4/Hz6v397fX38/X6/fn79/3//AAAAAAAAK5rAZkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAAEg9JREFUWEftmXtU09eWx+8vBCtSqwGtj6sXeUgTFIU+LGBC9EIIKIpWLeID66uWtmoS0KBWsCUQHoYkkgghkKkTAdGphgZ+4Y7yCogxNA/KQ5SQMWaCCb/EmU7HG3JrF/f84oNotdO71l1r/un5wS+PlXzWd++zz9ln7/xh4p83/vDPQ038zpqYuGc03vutLn21v8bHzRMT/2Ey6Uy6iYl/bz53JjN1U+qvYl/FuufsNZp0uhGNxqRWN5+7cPz48Q+WhYcvSz1eVvYq4MtY/wlMA2p0JpNGq9VqAOr49u0b168PDw8LX78lNTXzbPNLcS9hIffu9ep0Oo1Gq1aDm1bdjKI2Jq8PX7p03vzkjes+OHZNaX0J7Res/9WYdBoA0mnUarVCrdZr9RfObd+YsjZ5/bKti8PWpqSkbPzwcuvoaOcvaC+yfjTptFqdpqdH3aNRK5oVgKZoPvMlkLUufPPWOeFrUzakbNzy9bVrra3XXoS9wPpRZ+oFDIBQqN2sZrVG0Vx2fMsH4eFL0+K3LluzJjl5zYfHMlNPfP3t+bPP015g9QLTFG21UqEQVYQCweuyM8dTly1fFYf3T+zZPGX2kuWZ7y0NX775RE5WfJwn7XnWj/d6ND2KGnFJMau4BrhKq9foFOeAqvVrluKptACSHf5TB680JmzevCVhy5bH4KkZHrDnWOO9Go2iVsw5zT/Niheq1SAgwBvHtqxLTlkbFj9t0+vLU9+Ks24OmzVr3pK5s2cvnpPBpHko82Q9Gtehok5XV9+oSk/fVosGhFZfkzo/ZcOGlDWbZq1bsmb+mtnLlqSkzF+7IWxeGPbQpYYC3+xn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',
		'ew' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAEYAAABkCAMAAAAMlLaLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABUKBR0TAi8TIiggACE3HzEmDTAuGT0rHz86HS0vNTY2KitGFjVNDzlCGTZaFD1cKTBkDj1xFUUnAEQ0CWM9B0xFGFJHAVhFGk5HKkdGM1dVNlBbMkl5Ek9/JUl8LlxuLVN3Mll0P2FECGpMH3RaCn9TCnFZG2RYIGNbLW1aK31xLnxwPEtPS1hIT1hVQUxgR1x1ZWhURmZkSml0TWR1W3RvTHxmXnhwRHFxWWhtYWtxcECAEEqPFkqaDFiQLlqtHVGzAGKHOGSpM2q+KmmNSW2XRXGJWX6QUXidV2iRfHyGbXWOcH+DfW+nSHOpTX+2o4xsGZlnEolsLY9/KoJwN618EbN1Cqd8J4t/XJJ+S4mBGImiMqeFDaGLEr6eG4uDSoKDXomBUZmORp2TWYSCb4OeZYaZbo6YfpOUbZmSYZ2RbZaTfoOrWIO8WpmoWJSqeJCybpq4e6efbaWTeKugTayhWrWoR72rVLyxX6+nbKezcbuvZ7CjfbG+ary0doHJTZ7KfpLVZZ7Zd6XCVqnCX6PCabfDY9i3ZNG/debSFMrBbcfCdsTYasfVetLEYt7ReoKPgpOVlIe3mZumiJimkJ69h52oq5u0pa2ag6OlgKWlkKe7j662nKq5mbq0gLSznbi1kaKooKS6oq23tJvOo6jPiq7Glazfi7PJmLvLpbvKrLXIur7Jt7nYoYvXwLbLx7zO1MrFic7IntTTgtjWl8HFrMjGpMrcq8LQs8fctM7cvN7WrtLYv9rXtePOgujciPbXjOLOqufVv+jWt+bpu/XqvPvyu8DHw8PSyczdwsPa1M/Z2NHayN7Yytba0MXb48be9dbnzNnnx97ly9npwt7l1Mvl/tju7NLr99n0/fHc3uroxeDl2+ft0+Xu2+nu1uDw0Oj32vLpwfzmwfnsy/Xr1PDs3f3wxfz3zf/6yvT81vr31vjz3ebq4+Ht7enu4+jr6Or04+v26uX39/Tz6vjz5PT28vH2+fT4+vr8+QAAAAAAAAAAAAAAAAAAAFb4MNMAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAAD8pJREFUWEftmG1YU2eax0dGQYwSUFAJCKLyDgKCGN4UoYqCMKIVC7MC4UUQUXBZMoIIbLcGWWgILAgDiIKOuxIZDSB0TAIpDYGN0GIIIWFC2CSESUJ2VYjS+qV7n5MEwbZz9ZqrH3tHDpJczy//+/U85/nN97+I/eYXoXz/K+an4/h3YrP05ueH/ycxr19NT08LBMgP2Ci9/cGDKw9y793+cfSPY5beoAyBgMkFY/JHue23rhy/dPT8iSi/I0d/90PUDzHv3r1+82r6m9HRHiaXDsZFUO3NV44fdziyy29/xJGwQ2FHPwR9gPnu3bu/vnkzLRjt6Lh3uwfWA4bH5FKbzx8/au+wy8/WNyriWFhY2JEPOKswS+/evFn82ysBv6Pj/t22ujoqd3x8nMfnccGjmEP2DuZ+trYREcccHMLswlZzVmJGBdNvpmdgVUdHXVtbW3X17R4eiqHfOhoScjDEfpf5rp07jxwJC7MDW8VZgflLS3s7ly/gcjvu3kesJrq6g8+TSqXj7ecPHQwNDQ+2x9rtCNmxw27HjpDgkODgFaBlzF+ac69caabSmXRqQ9v9YRqNVh/t2cDnAYefax8SGnr4YPiOYBB1MAQMua7kGDD/efz48aOXrtyiUqm11W3DI7Rh2v3ooMAOiUQ6vng++HDoQVi5A5aHhsJ6lBMcvHlZjx7zrzExhw7FxFy60tzckuEDHHApyKfau25iXCqV/ckCgQRbONgBIHizxWb4BRR7e3sDR4f5r9LQ8JDw8PCYo+ebWzIz9/sEBgb6eLdl1tGlMt6CjGu+Gb7aYuf1DAfsZotNtpsc0L8ddpmvxpSGgoWX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',
		'help' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAhVJREFUKFM1kU9Ik3Ecxl/pIBTR3XvX2sECL7mo8GAoRgw6SP8OHSSbRFb0B8WyjGpumi3N0LRZ6bSotkBFZzp1M3NaTVD36sRaDf9Mo6nv7/19GpofeG7f53n48iQp/5kILxhGp2LGnTuSLdFlTZEkKbu2b1OWVtYLdqckd6ftSRnZulV6h2eNbZ6wanf/oqY7zushQZNPYO1Yo6QlSq07rDrc48YNw+TsoqGpY1q99zbKw06Bf1onEpP8TMgbEhS7dPIbYpS3qmrH4LRBsTUHzedrZrjQImn0CxbjEs+UwDcj0HRwBjROv5CYrD8ofDJmVmpdITLL5zHV61xzC2yfNPLadOz9GnFN4h4XnGiU5FSvcrMuiFLwaIR02xqpFZKj9ZKTzYLWb4LIimRpVVLWI8hpgKxnkuO3hlHyrJ9JtcTZWwn7ayC3TTCxIJmN6TzoT6Q7JRnPJYee6mQX+1BsziD77kZIrZYcTFTnt0s6E493hXXKBiRnXXCgTpJWsczFx4mGG/Z+85GSAMY6jcwWKPJK/BGdQFRS/x3MXXDYoZN+O8iZUo9Z8Y/NGa7bB9Ws8nFyP6xT6tcJzutMLuk4JiRXejWO2UPkWbzqS9dXw8YWjnejxsJKr5pxZ4hTr+Yo7ftD5Ze/XHb/JtsS4Nz9PrW4qmdzuC26fSHDR6/K1eoBTEXtG7pU5eWNZxLH+7HN5AT/AFV8jI8kgcGCAAAAAElFTkSuQmCC',
		'hourglass' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABIAAAAMCAYAAABvEu28AAABhElEQVR42mNgQAO1JSkT98zLe3FsacGbC2vLXt/dWf/y1ZHO51dWZjzd1eX4qC9J+rqztWY4AxGAubyyeN/WHds+L1069/aG9fOPHdyxeO32JY1TVrb5V7nba9YyEAt07YLsth658qZ/481D+XPPTiiYfSazYPZZJ/fQZG8FAwMBBlJAceusvSuPPDwHM6hozllnK3evYAZSgYGVq0F579IdIIMK55zJ8ovPztTT05NhIAeYOXiZxJZPnhSSWV1jbGwtx0AuMHHxcIitmDIpIru+xsDcXJU8Qxx8HOKrJu7rXDjpVu/88s3BiRmFuromSiQZoqKiwh6e13R+xb4jPxdv6/i6YUfSzeXroqe4+TqnkWSQhat/y65z9/8u3r3/D8yg7bsjZk2a7ROuZWxsTrRBvlGpu3afvfNv4fatv9ds7/q2fVfWnb27Yhbv3hwUbmBkFE2UIckJAQEH1k54cnJDx5eLW7s+3dnb8+7F8YmvL63Oe7qty/l+ZYTiPjMzDTV0fQCbN7QD1WhwQQAAAABJRU5ErkJggg==',
		'igm' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAsAAAAICAYAAAAvOAWIAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH1QsKFws6qttDxQAAAB10RVh0Q29tbWVudABDcmVhdGVkIHdpdGggVGhlIEdJTVDvZCVuAAAAkUlEQVQY05XQTUpDQRAE4K8yz9BuPEduEH8C2Tw8haeT3CQbPZEiIeNmhLdIAvamqerqaqqDdxxwcr0mvAWv+MYHfi4I13hErXCuqmOSp9batFS11qYk26o64gzzmCXJPsl64DvskYHn1cKo995PvfdnPOBl5OjLa/PY3qEGtxm9Bh/MfwG/8Hkj4Bb3+c/rfgHKwRzhskmMfQAAAABJRU5ErkJggg==',
		'info' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAhpJREFUKFM1kd1Lk3EUxx/pQijqD/C+29qFBt7kosILQzFKijBKqSwpp6IVlClWhgjzLV2aMTOn5dRe1AUuc2K+ZeJcMVm2R1eTfC2VMt3z+31amh84FwfO93w55xui/Oezb1E39mVJv3NHqHFuOaBIQpRd27cpSyvr6bvDQrsj94SNbs0qvSPf9K0On1ppm8HUtcobt8ZLp0bR6zXyrXPU2HxqvW1cvyGY+PpD12CfVAtfzJHTJrnVruGZFTj9gqxWQUYzXKlborhFVe2DkzqltMltuFw9RZpVcvGZ5FKTpMQRoLBL43ywT26EpHpJQsk02Q9cBqWmw0tM8QIJZsHZRklKs6DHq2EbF5x5KklskJx8Iomv+kOO2Y2Sfn+UqNI1IsokR2ol51oCeOYFrhnJaavgeAPE10HsI8mx2yMoqSUfCDeusrcc9lXDqX+CBYFnUZDZKTgRvCH6seTgQ0Fc3hBKabObiHvfCa+SHAhaZ9g1Jn9KppYlhYOC5A7Yb5ZEli2TWRl0uGnqNxzOd6I3B4ixQn6/wL8imf0NtW5J2ls4ZBFE3XGTdNdhUN67/LobpkE1tnicxPZ1cgcEw9Man+Y1LB7Jtd4AR01eUo19amPHR91GFpZXY/rs8j41umA4+Bk/OY4VjMO/uGqbJc7o5ELROzWvomczuC26h7y6lAK74XrVAAm59mB1klXRx3PHBJY21+bmIH8BLUeFBNafPYwAAAAASUVORK5CYII=',
		'iv' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAMAAABhq6zVAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFADs8ADw8ADw9AD0+AD4/AEdHAEhIAElJAExMAU5OAVFRAVJSAlNTAlRUAlZWWLGzW7O2XbS4Xba99AAA+QAA/wAA/wQE/wYG/wgI/wkJ/xMT/xQU/zk5/z09/0FB/0JC/1NT+Vpa/2Ji+WhqmNPTp9vbq9zcr97etODguOLivOTkwObmyenp7/n57/n7//nwUCwAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAHlJREFUGFctzskSgjAURNFnRIIQcAw4zwxRhPv/X2dSZa/6bLpaoM91ksyyDwhr9cKnnqyQXn1Dh0GcmBru+911pEklhqe1dnOBWOZw9LAVmIBDQAmFaHj4vj2DFtPArSpPI87IWw3/6agVltMuyEUL/4Au03mh0xZ+eFQR+TbmyMoAAAAASUVORK5CYII=',
		'mapinfo' : imPNG + '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',
		'ov' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAABN0lEQVR42mNggIJPPz7/b93X/V+v3/I/Qy0fGGv3mf1v2tPx/+O3j/8ZkMHVF9f/q08w/s9UKwBUyIuG+f4r9+j/B6mBmwxSjKkQFSv16P1//+X9f4bmPZ0oEpzePP/l9WT/Kxsq/ud25IaLM9by/6/b2fKfQavPFC7IFcT7v6aqCu7eWVOn/2e244DLK3fp/WdAdreotiCq54DA0kwXLs9WK/yfgblGEC4gqSOEocHW0gAuz1ILVAsKOrgJftz/m+rr4ZoWL1jwn8GGDeHxLqBtDbvawB6CCTK7c/w3NNL4b2tl9J/dlgvF0zW7m/8zfPj24b9ijy6BYOX7r9ip9//Nl7cQ2y+/uPpfvkcbGsOoikEmgxSD1KB47t2Xd/9rdjb/V+jW+c9WJ/KfpU4IzK7e1YQwGQgAg5Lkk/5ea3oAAAAASUVORK5CYII=',
		'pa' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAEsAAABkCAMAAAD5aj07AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABYJAREMFBIRBBYQKhk3ACIMByQdAiIaDS0YACwzHjQuBDoqBjsnEzgwHyotJiEtOC1HDCNSCD9bFChhAixyBDhsBjxuGzh/CEAkBUcsAEIwAEY+E048GVY8BFA8DlU4FUEvMWU3BGM7AktCAUBFElNBBUxGL0pTOFdPKF9ENlRbJ1pTOUh9FkJiLkp7KFp0LlN+OmxLAGpKEWJRAGRTDW9cBmNUGXNJDH5OBX1HEHlWCHRWGWlPJmVXJWVbNHdnDn9mD2NkIHtrLXxqOUhMQEVPUF11QV9qemNiRmBpWG5oUXdtRXZmXXtrUnJzV2BqaW51ZXJjekaSCVSMJV+bM1CoAlKhGFOzC1+/FmGxHGWSQG+QSnWKV32FdHavSH+LiotrAYdjEoVzA4RyGphjCJR/Dp18AJt6D5p7H4JmKYNmPoxoMJN+IKx9A6N1G651HLZwAIl/WKl/X4qCF5eIApCFOZqBOaeGBq2aHLePDrOUFayLKqOPMLqcO7qhAJaCSJGMT4KDZYqdbIGTcpGFe5mRZpOSc4eiXoKqYZGqdLSbW7enQ7yjVqulYLCofpXNbcWQBMCbAcWtFM6qFNSkEdq4Cs2rMcWyOOOxBcquSNe+WeDFTImWgZGThIKApZmlhZimkJ67hqWOl6WhhKSkk6q0h6q3lreylaqusai2oaq4o6CysbS0o6Cy0LfVjrjSnq/Mo7HNpb7Io7jIqLXGubnHsK/G2qjawLHJxrzFxcfIi87Hm8fQn8fBoMbEsMXHvs7Yss3butHKodnVrd3Wtdrtufb0lOnpu/bqtvTqvP3xvPz9vcTXyc3ZwcXb2c/X2dXYztjVwMHd6sXa+dfnzdnmxtzkzN3vx93k08vl+c/s99Ts59Dq79Dj/dXp9dLt/9b0/9z3++Duzuroxevsz+Ts2Ovl0eH02u321vHpwf3zxPvyzPr4wPn5yvzx1fny3fv41ebq5ubv+ur16eH39eDy++f+/f7n4/D34PL18fH2+ff68Pb7/v3//AAAANncWdcAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAAEeBJREFUWEftmXtUk2e2hweZgsrFSkFAIGiLIN7lkmABISJt4ShIEUERJAGTYCUoRU1CQEUUoVJKJGhEnIQRgxlsdRKjeLyRAzaGEqyYEAiRXIAGCNGoQDkzZ5z9UWsJ2rXadea/mS+LtbisPPnt/e533/jDy3/d84d/Herlvznrh4GBAb0Mnk65QPBb3Pqr/gJSv66zXy5qarp8q7Z0++rV22sFUoGUL+3se/J28q+x+vWyAZlMLpM3XblcW3J89eqVK1dvL63lcvkt4j6xZOhttF9hyfrlcpkOWE2XS0p27EhYudLZeeXK5JLjR7gtQxKDwTD0FtxbWbJ+oMjkcoCJvinZkZAYv9l5tbPz5sT4hO2l/D6jeAihiadrextrAGHJ5SLFPXB8bUJi0rZEp9Ufr3COT9yWmHD8VovBKDYMGYZu3Z4GewurEwhAEgmu3FN06RXJCUDYnJK6eGX8tqQt25L/u6WpWSw2iZv4R7jmsDdYXV1SKcBEAoFQINJ3/V12Gdzu/M6FTUWrl7skxi/ffuFCSuktsaGfzxZI5WawaazvHwqFPK5IBO6SKfR62VNh14vrc9LORfvMiROlvOPg/F55lIPT3KVGcTFXKuqXd06FmbG6pG1XeXXnajhSuU6nk+ufDVxetWq1Q+KKmUeL7WKMd5Y8LOeC3+a5zCtaNVcAHygSsKfAprK6vm+7VFfX0JAWzZHBGeo79Xp+skt8UpJD6uyURR9vD9tgWLXKwcEp3snBIcHF+TI4lR37X7/AprC6pMKrDRcbblxMS02VynQ6vU6hT3FK2ro1ySnFIcFxs8tyh+TNiS7x8dscXbZsTUos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',
		'pop' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAOCAYAAAAMn20lAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAOFJREFUKFNNUEELAWEQnc2WC32/wJbyAxxwdXGS8gfsyUH8Bcqd3OVAFDflorg6bHKU4m+QtNoY84avbE07vTfvvZmP6PeVyhVOJJOczRdYocP74c6CnYKD4YSbnbb2tI/umfF2wynP4zB6KoGegvDmYBJT7UGf07ksV31fCRe+IGyJqkij+bIIAHJJ5a6UKA3ZMIBaLdIcgg2mVXH5ElhdFQBhZ61UEYTXzP9xGKjVG0zn98vBmnZd/EVhKIiuDnJAri9n8+sNrU5HFxkyFZdeCbE21FtMjT1MborJ8+ER+QOubZgWE4PrQAAAAABJRU5ErkJggg==',
		'pph' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAA8FJREFUSEudlUtsG2UQx01PPXLkyJEjR46coPQCQjjlgoJIUtITLRWkQoIEVCflWYFUAVEfJKpUoZICgUBUlAqJIkobmkdBVuq68Wu9tnfX6/V6n971n5kPOfL60USMtLI8+3l+8/jP54diu9ihkZkn+UhrX0x8DrJ9rdiv/G5/4N6Ym3vX3S1u5P2zw5MPT7x3/uL85RX7Xqao84NdrH1u4cffnbcSXy3Fhz94ZE/QF0amDywsXq8EQeh3Mnzfh240IFd05IsaspKKgqyhrNbQsBy0WmEkpZ9WVtVXjp0eeyD0ROLCubxEETssDANUdR3ZfAkFqYJyWYWqaNAUFUpFRVGuIEPvJPq0bTsCVfV67eQnl77vCx07/ulL5Ype7fxFMwgooILtrARN0+HZFkLXRmA16DHFZ+jY5Lchl1SktyXqghmBWrbbODJxZioC5X7/cPWm3Hmy1QIUzaDsZXiOg3q9TnAZDaOGgMBNhhLMNk2Uya8pClRKKp2lM9TiTvtjNak9fzjx2A506sOLy0EQRGbmek1kCxXU9BpavicC5wsScvkCfAK2PBeuZWErlcbt9Q1oqgoaJM1XodmqCDnjDnv/zOU1ARwentzPyuoWoWE6YjauWUeTAFyN2yDRyGWRhGs7oqJCsQSTkmmLpkotvU9V+n4zEnL52qrL6o/xnvWTvW5YAugxkNonoK6DkKrNFSvYTKZQNxs9y1IzLaQzNIYuIDPETsdHZ1426qSALmvYHrZzJZqZge8WvgE1A/dTdxE2faFGnapkXzabjfyypFSRKZRBaxXxu57vDo1OHyXg9DgpyeoGBmEIqVTFa0ePIXnnjgi+nb6HkJTLs2LrBtqOR6Ipgtahp3JSfDM+kjgR40Xv3r32advxhXBk2r3/gmcigdi3uLiI8fFxPHPwIJaWVyhJDZxst8llvTZ0OPFcjFfi2m/rPRXuQF1f3CgcfH3zb9iOC78ZUMsC4XvjzQlKSMPsuTk89fSBnla24zBj57r7+IsryZ6UOhycMQe/dXtTyD5HN05OUoTvxs01VOh629pKie+DbHb+Z2VnD+OjJx//ayNFizTY+gmk08fiGQTkkfHoIrfN65NnP6J29ai1ncL/BfKfwDun5q/03Kd8AZye/XbD8/zIJcCg7qe9CrtVyLC5r39JioXvZww9/vaXnyXv5vUHtXcv77iNXNlAWGcCQ6Onnvj8wpJ0/c9/TJbzXgB8RqvWjVtrW8b5S1eNnpn1LbHLeejVmUd5d+JjM1N7eYbGEi9G/hX6QP4F7nAoMfND3esAAAAASUVORK5CYII=',
		'pphall' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAA8FJREFUSEudlUtsG2UQx01PPXLkyJEjR46coPQCQjjlgoJIUtITLRWkQoIEVCflWYFUAVEfJKpUoZICgUBUlAqJIkobmkdBVuq68Wu9tnfX6/V6n971n5kPOfL60USMtLI8+3l+8/jP54diu9ihkZkn+UhrX0x8DrJ9rdiv/G5/4N6Ym3vX3S1u5P2zw5MPT7x3/uL85RX7Xqao84NdrH1u4cffnbcSXy3Fhz94ZE/QF0amDywsXq8EQeh3Mnzfh240IFd05IsaspKKgqyhrNbQsBy0WmEkpZ9WVtVXjp0eeyD0ROLCubxEETssDANUdR3ZfAkFqYJyWYWqaNAUFUpFRVGuIEPvJPq0bTsCVfV67eQnl77vCx07/ulL5Ype7fxFMwgooILtrARN0+HZFkLXRmA16DHFZ+jY5Lchl1SktyXqghmBWrbbODJxZioC5X7/cPWm3Hmy1QIUzaDsZXiOg3q9TnAZDaOGgMBNhhLMNk2Uya8pClRKKp2lM9TiTvtjNak9fzjx2A506sOLy0EQRGbmek1kCxXU9BpavicC5wsScvkCfAK2PBeuZWErlcbt9Q1oqgoaJM1XodmqCDnjDnv/zOU1ARwentzPyuoWoWE6YjauWUeTAFyN2yDRyGWRhGs7oqJCsQSTkmmLpkotvU9V+n4zEnL52qrL6o/xnvWTvW5YAugxkNonoK6DkKrNFSvYTKZQNxs9y1IzLaQzNIYuIDPETsdHZ1426qSALmvYHrZzJZqZge8WvgE1A/dTdxE2faFGnapkXzabjfyypFSRKZRBaxXxu57vDo1OHyXg9DgpyeoGBmEIqVTFa0ePIXnnjgi+nb6HkJTLs2LrBtqOR6Ipgtahp3JSfDM+kjgR40Xv3r32advxhXBk2r3/gmcigdi3uLiI8fFxPHPwIJaWVyhJDZxst8llvTZ0OPFcjFfi2m/rPRXuQF1f3CgcfH3zb9iOC78ZUMsC4XvjzQlKSMPsuTk89fSBnla24zBj57r7+IsryZ6UOhycMQe/dXtTyD5HN05OUoTvxs01VOh629pKie+DbHb+Z2VnD+OjJx//ayNFizTY+gmk08fiGQTkkfHoIrfN65NnP6J29ai1ncL/BfKfwDun5q/03Kd8AZye/XbD8/zIJcCg7qe9CrtVyLC5r39JioXvZww9/vaXnyXv5vUHtXcv77iNXNlAWGcCQ6Onnvj8wpJ0/c9/TJbzXgB8RqvWjVtrW8b5S1eNnpn1LbHLeejVmUd5d+JjM1N7eYbGEi9G/hX6QP4F7nAoMfND3esAAAAASUVORK5CYII=',
		'rap' : imPNG + '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',
		'search' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAAA0AAAAQCAYAAADNo/U5AAAABGdBTUEAALGPC/xhBQAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAASxJREFUOE9jYBiaoHlTw//Qxf7/zWcaAenA/zuO7fy/89gOHpy+yViV9t94mh4GBolj1di0vuG/0WTd//mrcsGmg0wG0QVAvuFkHbgYio2B8wL+G03U/b/9yDawBhjYeWTHfwOgOEgew4mmfYb/9ft0MCWAKg36dP+D5DE0+c/0+6/bCXTGEYjTYGDbwW1gcf+Z/piaQO7Xbtf+n704B64RpCFrQdZ/rRYt7H7ymOj937bH/r9Wkw4GTp2X/n/HwR0WKM7z6vP5r1Wv89+63fZ/+eLK/34TA/7r1huA6foVjf93HdmNrsH3v2aNzn+bFgeQJNaAQLWhx/e/do3hf7t2l/97ju0lrMG/L/S/TpXRf/t21//7Tx4krAFk3eLty/47tXgAbdhPnAagHgBQL7l6a7VQzwAAAABJRU5ErkJggg==',
		'unlockedl' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABMAAAAQCAMAAADDGrRQAAAAAXNSR0IArs4c6QAAAYBQTFRFAAAA/sSU9XQV+4Ym/ta2/d3D9nEN/3kB7qsT/+LI/+ra8LMc/qJS8bti/ePP/4ES/7p+//37/vPq/+HG/c+t/pY8/+XN/eHM9deD9oMv/8CI+3oO/7h5/4MVq4xa9oQwp4ZS9n4n///+/5Mz/7Rx7JwW8MdK9+Kz8a8R/atl//fw+Iw5996g/byI7ak6/uTR+uvI++zP8bAs+ee38Lgc9Kwe78Nw//Tq+KFi+JRJ/30I+eSu/frx+oAg/PTg/+3E7Z8E/6RU6Y4H+HUS99WMuZFU+JxZ7J0t/tGr/u7j7qgE/7Jt/6le920E+9mH/KNZ+n0X+okw//v4/9Cl64MF6oQI8cs+6Y0PpYE8++zJ/+7IqolU88JY9chU765H8bMWzYYdmHtL+u/S++7U/+jU/d/J/9q68L4o88V666YN/4AP76oK17h89duh+XMJ9t2m9r9l//Xt/phA/XkK+3UG++Kn9tKF//v3/6BM8cxa+7F3//Hk8LBO+u3B9slM65cFJqizLQAAAAF0Uk5TAEDm2GYAAAABYktHRACIBR1IAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH2AsOFwYDc4wxCQAAANVJREFUGNNjYEAA82AeUU1WQSQRpWoZK2npElsRJMFCmeIqcX3dADYWhLI0dkYQ7ZFnCRcLkmLmAtGComxwsXKVQE8wo8iXQYtLTFhYmDNFrMKWFSzGo83gZsTvqCzLnyWr7M0iBBJjFWFQDKuNNLCPMky2s2FMhZojmV4pIZEjl5uvniQlDhWTN1GLjUlUMCvTMRbgg4nFc3Bzyynw8mZYI8Q0uE1No11rClxK4WKS2ZkcHAkR7npxfj4wMUUvh3qnkNBwVaM6K5gdFmxMUODsLwQRAgAIGCOyrkYbMQAAAABJRU5ErkJggg==',
		'upgr0' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABo0ByQtFCk9CyY6FTI9Hx9FBSNCBiRBCiVMBClEDitLCSxFEitAGipIEi9MGC1SDjVKGjVeCjdYGDZJJD1TKDhlCjZgEEFdHU1PLERWKENXNVVIJl1QKVpaN0VqHFFvHVd8HkVkJEtlM010JVFnN1V5KltzPl99M21HKGNYLGxZPHVdKmhmOGF/P3hiK3lkM05ZRlZUQ1BlQlxqSV1kVVp0RF9zS2RhSGRiU2Z4SWV6UHZsR3pzTHt3Vnx8Z1eKH0+AIVqIKlqBNF2SJ2eLOWGTLGOUMmiVNmuTPmqaOW6hOXOnO3izNmWDQ2mBTmiJRmyEVm+cSHuCWHGTTHaaS3qbTHeSW3aJZHmFYXiNYnqNanuFcX6QZHekQ4RZK4VqNYNwPIV4SYV6VoK2PYiCV4iTXZSFVYmKa42PcIWVaIeddI2VcYybdIybfJWNZJSTa5iaeIavW4O7QoajZ4uheJagbpWleJqzfqKZeKGsfIbFPobRO4vIRY3UQZbUToiLh5Odg5WcjJmdgp6fipWXk5agiZWqgpyhh56nj56thpuri52zjqOnh6OukaKonKKziqS8gqW2kKSwnKa8kqyxk6y2nam7lK27nbCvj7aulLa6l6q0oq+1rK+/orO8orW7qbq9ori/qry+s7u9uKzDlKzBmrbEnK3AobnHpbzDtr7DvLzLsb3UqcPEn8TIqcTLtMHLu8vOscPUrMTUtMfVusbZssrSssnUvMvbtM3avNHKo9fYrtPaus7jv9jkv/Drtvz4ucPGwcbJwcnPwsvOyszSw83Qy87cxNHVwtLWztLcw9TazNjexNjczNXW0tXZ0trb1drb2M3iw9jlyNbh0dfr0t3h2d3q093w1ejoyeDh0OHj2eHs0+fu3OLw0+Xx2uny1Ojx3P34wvr53AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADlQ5SkAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABEdJREFUOE+NlP9fE3Ucx8+iogIVh0hLtxpzmF8CF9lO8VZDmMhGGRkWMhdrsahwFy4qGkWkFnmAmc08E9FgnUY3BAU2FpvUHG4q6scci4vZ+j8+fY4N2MN4PPL9wz3uy/Pz/vJ63+OFwXsM7B45+H/gWT5R0AfnBa9dRx/3xUp9BuEkPPrh0Lxg22kIb+RBeOn3Ud/64KTvzIEdh7j5Stfuh7A35ayvrTfyXSobafJ1F79/IRH8ka91EcLS7N8CtYubpio67uQlV3DPnThRWmhPAEeVPLjvcq80o4PbvuQZf9brkfTkpT+n7bq1XbY3ATyed+PiqdufK3GF6DH82YyFFonwq+QHU/Hkx90vqlZh0Hf6GgPh+KXrmzJPjikVSoodjnpokpCnLElJffThRxaIk47+VCbEztRkZ8l+ILOEwsXLXsNNx/6JovB4o1GSwAULFj50/7K6pLbIYD5m2SGT6pIksifTMjJwkxcR0Sh/8XqHzQrBIpWg6NOXy78NEFjhVk2RWLJULEjNwMkwj02T6IQnTOLqRuvWLdqGV9sN2Da1RleiEoi1KiXhiuWKs9Gom2i0NtTVvVlUXFmFqZ8v0WlUArXVKqdjheNJ0YOXljd80tioKSpvJ7FiXZFULBFkipWEJxGc7sCrtFobrdJSBrixArWmUCYTqDQ4NVM1oTiltGpKXqjg0N9Tn/3AffL0Qq0ORx3OpvTE69MKrVqr2ggQ6GSI9YclKrVU7p5rcPbOI9I+oVp1EK0WC0VM8ne2abaoRbwkM+rEqqMXItnyTRYwhUCOqzYAsU6jlvPruCs8Hjmp990J8T1OhKqrBpZn6mSox/+GC/8+58qpiTBAPdrWrbOYn5YskjTPTj13wKx4O4f+YpdjDGL+ATvbz6xUNCcZwvHOEhITIlMuDUhqEmIH7CAcAgaDPU1KxQWMT4QkOoavIVa3+DuPBCG2t/xrWwSBNULBxsQueQlcxLsr3rPfdJ7rvAqxrlcKXroAAkNHVmxIN8d1jv0VXg+pqF1N/hr6spNFU9+q1xX2+bm/mKeYNaK3EInWE9vQsFlkatljYx00G+ANwN/FhAAA5t3te4y5ZfTsJJSR0FsYN0XSvoDjNm8AAEwB4CQNlnoqP19oJF3RcNhFldUcMuoV7TQ1yIWAf9pSQk6Gam6q7aSOU7kmcneZQoTCmGPuoz6iKbo/AtBeYt5zvrWZbGUDU4BdS5iI+jcMtuqWj/XGHjc30UszHFp0HBzvaKU6zgcHnfbczT2sXV81NGT/YK2hiwGc/ZeOiZhbTRtA8OT+yrJaBoz0jUwAe9XmHnCTYfsATV1hB4KTCSC8fHjnyqyd/eCPEDfSTZj6wd9oPpZ20X/O+mzcUkYPVhZssA2BQV4pFIHA8LDbkejGM94z7vimprvPCQASA5xjOll2Ltlcj7GT44EAr0TQMcbSg3dh81szhFcTi8bu/wUUhzueP53uUwAAAABJRU5ErkJggg==',
		'upgr1' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAABULBykVDC4lCEwiBkMsFks2G1cnDVQuEk09J1U+K2MsBno+Ck1PLFpaN0NoHVhjHVFzKG9OEXRGCnNCG3lXCnJSG29MKGddNn5IKHlVJnJaOmR9KXltP3txN1ZTQVBRXFVMclFaZF1eeVtgWlpjfWRba2ViSGRjU250Snx4THx4WWdofn59aFVcmVtkiVlho2Nqjmx1g2p0mHN6nmBqrVuHLWiVNHKqN2iCSG2TRHqDVXOaR3mcUX+AaHuBfX+cYX63QX7EOX+Ih3iBlnuGxoM+CohGFIdcBphLD5FaA59XGIBPKYBUOpdZK5NcNoxhCY9qH5hlB5plF4RtN5FmKJplNphzOqVOCqlRC6ZYG7lYC7hbFaNcKKJnBKx2CalkJadoNaN4ObJlKbRpNbNyO4l7Q4h3U5RrQZh1SJV5Wod4aa9sQKx2TL14Q7h9UMRYCcdiFd1mDdhnEsp5O+RlCsF7RpaGPISpOIqES4yKW4iTXZGDSpWKVJKUXoeJaYuTaYuZdZiGbZWWZ5uad4KoWYK/RYinaJWlepi3dq+HR6uBWLyASLiDVbmXRKeOZ6iPcKOZaqOXdryTaqmneYXHRIzTR5DXTc6dOcmCTMeHVNeJTdiMV9uSW8iUaMOadduVZMehSteoSdOkUeiWWfCVVuaYYeOsXOe4TO+1U/G5V+OhcoCKlZmahoiSvJmlipqol52xh5iloqacgKWnhKismaS3iae1lLWrhraulLa0irm5laiuoKyttai0pau3sLa5pLi9tK2zyKvDjrPDm7jRmbjJpr3FtrrQorzHxcSrl8y2lti8pOargemxh+u5lcbFp8XMt8HTp8nYttHKo9LOtdrbrtXVu9TlvPLGqfDSvPDrtvz4ucPKzczYw83R2NTZxdjc1tfmyd3q0t7w1uDfzejnyeLr1eLyyuLx1/34wvr53Orr5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ7PC0EAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABHdJREFUOE+FlI9fE2Ucx68faGVOJ1kZ2fqlO1sght6dDrGygsxwzoDyJxiNgCx+JAZiiJsKxqgZmIwNJx1XmQTWYMJyLsNBYXVjs1Eb63gON7b6H67nbmMs6/Xq+3rd3XPPvZ/P98fz3BfhoubsaVAfLnqiRkffCNyYmYx7IsKYdY07HGMjDguk1RcHR697PJ6baB4EtMPlAiwbmpoC42P9hw+qdbwNupmbFHlqeirEAkdfPQPv/Q3vV6tqDx3StdDXYyjCsX4wHQIMbdaptikVdDAIXEMtalVNdW0tRK0zqggHAAiZ71ds26Tcrdy9NfnK+Y19ll5Lj6amWqWqVg+6opoIC4LTzqUnFEoeVCqTvlqd9vCjy9I2WCyamoyGIdc4wwoo4rcPT0ibP8/KUkBMuSffbAd258TzK23A73IygLF09wnekSupax7Z+8W5vVmboOYeZVZ3BioVzUcfX9Vrs122/VB6bxI6IICXlpfe92nnudMKpWLx4sRkaYaZ9oS9Vo1MkpKSuuaxRVuXr1o9wYPXjG3ZBxLOfpaz6NY5SWjdwJ/hsC/s9YXDGhlq670zcenXK9Oem4Tgb4YlmXkJZzubEm55AK3zQYIn4eXzqFFNndQVZM6n/QHBHw0vb86943Rnc8JtqCbAYwIJV3gDGrTkiJ3963LKJQhebCKNb7yZ19w0J1nm5rUEzcjDIyON+04Gv03ZMMkhZyiSNBmrCnLvklgjjqMgfPFZJSRVAmypT37HIR0kb0aSSpZ540FB1VdKaukgWPZUA4fktgkk2Y6a/+E28mLO0IVCQX/9eheypcAAgywszEdhhDFJb9S/VVps9YDQhfVjyDt6kqx6tXx/pcQzG2Bs5BVRen2R1fH0EPIlSVKFO3e8mCjiSxLLOFJPX1gEP1MljsYR5BeYdcHc2+dlSqLu4nW9Xgl1oNg0am+8ivxugmvatmy+m4/xX87daG7rewtl645eRbifSKjZZcyeq4llPcurpfipVgLH079HuJ8pQzskTW8VBSKS8bqy4mPHMAyS/RCM1BveYCHjzAdjHkBVBNH6DIGv40EjX28Kkivc8RwUdstMDz37SStBYDx47UyHCSbU3lZVpY5P3OfzaqSmvPTWUwSG8TF6aNo9CnccHgzRQUjC7Yns0K9qkZE0iHECE2N81hwLWOZj6Ny066VMuTXm3SzXw01rWoiLFywQH3fxYJC18yfj3bKyF3LnyzXucCDgNstJUvt2m/4VHBNDa+SE3sM6i7TajtcrK7fPu8cgl4qg1RgpyqSvynmQICCKWQSQAxznZ6z5+yvKXsvcZRKqAK0Lxl2MEzyZPhwBoQU8BRUVFeVl25foig0R0KDV7itZATkCP87EQGDNK9+xMz8nWzPyDUV1kSa99qOWPqenHsNx/KgD/lwRQZYFIzRNwwYIQN8HBlL/Ic2wLJxuwHDxWsjNgJMMG5hphaz1ZFE34PjexLIX5GuldfD/j7kW5qPqsREssd/S0zMs9J7Z2f8aAdbl5/X+F5xd/DckPzbTuvnomAAAAABJRU5ErkJggg==',
		'upgr2' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAC5KFzVMGDlXGENbHE1PLERfI1tXOlpeNUVmH0pnKE1lM051JFdtOlJ4Kld3MlZ6MlxzPV58OmtkOFZTQVtgWmNgSGNhUmxsWWZ3R2p3UnZ6Unx4WWRpb2txbWxwdX9+ZH58bHV5fHp+gV6ELWCLMmiZLmWTMWyTPGydNGuZOnWnOWSDQWSATGiGSmyKTW+HU2+KUm+aQHCNT3uCV3GXTnWcTHmWWnmAaXyWZXehSH2Bg4B0TIiTXYuLb4iYbIWTfIuecYueepWSaZSdbZ2bcpybfoWkXImlaI2oc5GhfJGucJOrepird5i1eKGrfqPDfIyNjoWLkYmNkY2ThoyQlo+UmpSbjZ2fgpeck5qdnpuepJ6eq5argZuhi5ynl5yomp22g6CeoqCmh6Sphairgamrk6G0hqCyi6K9hKS7iqm3lraulLO0lLO2mrC7lbi1nb69k6CipKKmq6WspaWpraqtrq22oKywq6u8pa2wsrG2prK7o7a/rLm7p7u9q7W6tLW6vLa2wLS6wrm+xby/yKjGh63HkrLNjrfDn7HMk7TNnLvNm7nWmrbMprjEoLnCrbvPpbrDsr3Eu7PSoLzUor3cor3aqL/Xs77gpMXNm8HbncHJpcDLrcLLs8TKvMLco8PTs8XRusTZssvWtsvUusjbs8vZu9HKo9rbrtXTvtLbtdLfvcLhncLgpMvhtc/gv9LjvPHrs/Drv//xtv35tfz4u8XHxsDEyMTJysjLyMbM1MnN0szVws/dxczR1c/V3NLXxNDVy9LexNPZy9ncz9HU1tLV29Tb0tPZ3tHU4dXa4djc4tvd69TixNrly9rozOLiwe/nxuLs1P31wP/2yP76w/v5yPr53OPl4+Hl6unt4+rs6u/v8Ory4/H06/L08gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBcQJYAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABAZJREFUOE+NlP9fE3UcxzHRrZMm2NpJLeOLFSpB2XIBRSmNDl2L0LKyb7NZsdMSjEr7JpGfzcnH/NKdzZV9+CKOjDMHXJmUGiZhNBDvS9oq/pP1vtsYNvjBz+Nxt8c+99zr/Xq/Prt3Rvz/a2LjU7G0rcTXjLTdocaCxusCm34oLLgucMPIjoILE7Hz0+C00rHGqwNNdzz3c4I7pl1bzs3gMVZYcfpsy9OLjr67D57+tK49/t1njq0zgE3bbq8bGjq9dlHFOnh6cO36+OBuz5bp4MSG4ea6luHhlmdeeP5oPL6zpa6iva1TM5AWz5UdV39fn09bDHPoW16Ot709cuqVe1YdmSHHC815ljzPl91qpMFhNUcP7jxQsqRk9Yud0xR/pCs3/ykrkhSRJNlhpS93rbjrzuwHvOng33RlX5+kKIooSZIodVfRg6vvK1laNA2kq8cBkzRUEUUlMl5Nx9vbXI/vT1PMt4Y1SAIUPkBV/cY6dUBTJ3PF3CCKmpp+SSJo9jWYEycEnafAgXxrr9g/icmqpi2KeU6u6yT7bPXHKTBWuNCjiv0Jg4mbCDdPnpvrWPVm5Ucp8PttC8OSDuos5KNLNlhqnHs8r742pfjOGfNxNammM7Iqq4oaMTBl9Y+wL304qRhrPGOQ+8UkqjetquBRNaxh3E/cms9Ogu9v/MTcKyo6mNBVNReRXrPdVsMsLlqZBI88+F4zDR6TDjUswYdpxNiZ5eXOBDj46KenRs5WQ61Ujpo28FUWl99bb1/h1cG/fNt3XfxjxNqraono4ciyJq7K1twFSFv7Afx34oMA+e3iAOv1yAAmNaGRiCpvpqlZuQi5EAbw1+1c8JBv7xc4lBtOWoNwFLFflMPWHCqLcqFaxAG4j8UCL/A8xrgqkigtKbIKZx1xWCiTiZrFoNpWAL/CAoHF+TAxPhxRQQoWdKV2VxnnUTdmU3OLkcsH4DEeCwLieZ6EyP22BlWW4UhkRd1ko3JmF2XNnZfrQijQlhGPkh5C6nlewCQwf+kcmyMsj4+HN9lw2U0UY7evAQxh3JERH+0KhQjBLhQQuNK7ly2xWQxGo9GGCXYHEPYHMEI9mBuEHKMEihLeFxAEp2lZeSlPnAwnkKBAtAYxrkF4T6ce+NgJATYFsFBGZea49957Q6bbT0gwCO7BETrE7j6f+j8KUBnzn6Obn3TbM+ebFizHQogIIAB5IPaaV+Ey7PXA7x96rDibMmXNXswAFQT32PsGq02s1DvzT/QEwQK+zcaUUlSWqRiByxCPA6+z7IFf0mbPSYKxq96HfVR5LYNDHDQSeIvd+vUMY4+0+v2Y49wQHE9Ia+hw57nJ2Zs2cY+Tw+Tb0bGxjo7o6OilS9cM6P8AlcpIworLO5cAAAAASUVORK5CYII=',
		'upgr3' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAACgAAAAnCAMAAABKdvqKAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMAUExURQAAAE1PLFVMKlpaN39aFGVdOHJZNGpjLXJqNVZTQVtgWmBZRWNgSGphTm9sR2RiU250Snh6Rnx4WX59Z3F+gHF8iX2AVniCi3iCk4V7OoZ9Q4V4Yo2BPpSFP4uFRoaHVouTWpaKR5KJV5mVWIiKaY2JcoiRY4STfYaYcoiadp+PeJWSaZmVZJuWbZ2aYpydap2ceJikapumcZqrf6KTS6SXVKOgXqmiXLWmWqakaaOqaq2jYa+tb6akd6eqea6sdKqtfLiuZb2yabW0c7e2eb20c7m1er25f8G1ZMKyasW4b8y+bcK8csS+e8q+c8zAb8XBe8rEfdXGbNXJdNTKe9nHetjJdNnLfN7Se+LVeuTZeuvcfPDdfe/iffPjffXoffnof4OHiYyRgYqSn4yckJWcjJWlg5Kjjp+rhpysiZ6ulp6xiaaohaGzhKO2iqW5iquxjqq5hqm7jKK3kaaynKS4kqm8k6q9mraulLS6hLG9jbi3g7q7grm5jrC9kbC9m769k6Sqsqu6oKzBk6/EnbfCkLLDm7TKlrTJnLrJmrzVn7PEoLbKorjHpLrEqrnMo7zMq77Ft77NsLzSo7zQqcHBgcPGi8LIis/LgcfNns3UndbHidXUi93ThN3Rid7ak97bmsLKpMjMt8TTrMHZpcjXtdHKo9jarNPYuc7hvOLWguTZhOvcguzci+rbl/HegvDei+7hhe7gi+7jkPPjg/Pki/bqhPbpifjlhfjljPvshfvri/Pkk/Tlm/TplPTomvnmlPjnnPnrkfnqnfzxi/zwkvbnoPDrtvz4ucTFycTKxMfKzs7JwsvVws7cw9TbxtXU19TY2M3hwdPjxNrlxNvizNvqy9vj0tzq097q2Ozox+Hm2uHs1OPt2+Px2f34wvr53AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB+2p9wAAAEAdFJOU////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wBT9wclAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQBQYWludC5ORVQgdjMuNS4xTuc4+QAABDNJREFUOE91lI1fE3Ucx8+W6YI6HTULaHAbUobh1F3NqBQztDKKWMk4WI9W1AClACujGYRDlqOGPRGUEYPgYEI3Hu53x8M52GXFSknmGq3/5Prdw2CQfV+vu9c9vO/z/f4+39/3EEGK30/dVuH0uN1tn7hcNVXVLlfT2x9VVDa89dr3v83LBAKPP34+teXuxjZny8fvHnjowLlHn9q7o8HpPuPxeE5v23bP7rrW5s/+EsFLr9yx5XWnu/ucxWItJQjCZqOsh08+8l5DveeMu7nWWdPYWN26iAi/vnT7q/WumoOWch+kCIIap2DYbGT/MwX7qrrboXBTdZ0bEe696eX5Ky3f0lDHDwmCAoAGYAye6dmBLz4/7oRkdaML+SXtxlvfbNv3QClNPUtRo9yhwouTDMNOsQwAozQY/ubB0+0/eJwe5NKH+luytiatx8gACADAdQ3NTc1NTbIdHUPsBFQF3P76nh97epCr0bP5pf1562/YWAzEYFmWYfzDnfj+oZ8Y3zh84ivqDYejyLWrJ8fAGF2St+FOagKMU0dT0CTVOvRmy+CFwQskBclZcHghvIREQ3upYZKgKEshSVFpSSn2832xoMOoUQ+QPrL8BbgwruRrqDgfKrCVW80lZJmPItCtJ/6JwQjG+JhRg5LEkWGYm6YHvvobeaengB61PtFPlpURaBbPi5x44vneHNSa95zoFQ2+u4J8GjoIF0tRL9oI9GhE4kQSfhGMGNGSUWmF4Es3shh6P3ARusb4UzTeuJyi2qcR/RGTFzUjS6EdAQ56wg6qHXJiRRTe8A41AH7oJthTiyxFj3HAz86wKZpgIiiJ8ymwPwAEBjJakXDYDm+mmU7ULr5RSozXYE9joN4IJoJL9k5oFZhCvXFO8kf+wpFcAgLFJmxXNyJEzz42OQ3ogLpvpcDlq6DKHxjAdbq6Bbhxw6ldM1BftSIIC5D95GOq0cdTTZsrLkujkGFgOECr4yYmCAcjajwdy62TZ+aafWMRB4BY43+Se1Fct/mN+HCF9AUQ9BmVhIl0TrIhs3V5Chfv0wVgAzQRpbIEUqPPbloZV6FNL/UJGpkQPLToBJol68lzLYS2S53fJPU6oYVeTYZL4WTwz1wJHMlRfJbN5oPG5No4p4BGChZJj6gyIclLAcneHFXVMieD0YcHaZrzD7Ks1rGc267NPr7CKaD9SRpMT3Ls3Nw6rdEbi0S8di2WWZnAyaBw/hDcQAAwzExXhzZZBUOry65J5BRwAafE2QDcJDPCcVYzjt2fUb2Kk8HFy3gx/NkQftigAHjebDLl7qpsvw4oCB/o8idmrQQA5BGzCcfxzErPak5JLfRo081PF1ryzSYMw3HDzjV5452BBh1LxdJ1ELoL12XuXL2MhBaKlwY9ZoJimC6jZU3SNaBg3643GPbsrr8upmyK/3m36vG/k4AtntEwBKYAAAAASUVORK5CYII=',
		'usethem1h' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAqNJREFUSEudlU1oE0EUx9eeevTo0aNHjx49SipYxKReJGKyVS9BbaCNoInSTepnUVLUUrsmDRQpW9GYWiotghW/EmoPkqg5CKUpjWm32TXpJtl0zRuYJdnMbBYfDPsxb99v3n/em93HdLA+V+gouOx1MehKs6495h3MdavKp0jkhtIpbsv8Cad//+DNyVh0ZrGc/Z0TYWgdDPsJrz/sXuWeJezO2wcsQU+5gseEV8t5Va1XMSMej2ssy6KRSqXa0KT3c4vJwrnLo6wpdIjjn66t59uyOd7To0PgPpfL6c+0RYBDQZR2hu9PvyRC2YEHZzbz4jZJOYDgzJoBXq9XC4fDpmKXysrfi4NjgRYo6B1f+LJB+xIyguAwACjLMlVeUoyPyfTWyX7ukA4N3InNq6qq71mnAgFoJpNB0uK9bZaZ9P2tsZkVBHQ6/d1QWZ0geB6ynJqKoUezvTXGm19KKlD9DPSZlbKHAMYCoe0tafHAQD1td4fOFqWSbJahIAhaQwwtm80iN0mS0BXeNctqFkOpVBWHO3ipAQxeaFRSiebs8XgQqBmIfTEQP+OFkGLVVLVmd3FDDDQ6qffwR7gYjMFxhonEnAaLstlsGtzTbGNT3HH0c70MtMTS+2/UDNWaostnPGVgET6fD8nK8zyC0gwY+nF37/Fs2kx/tV5HkpKA8A6kxLLT4oxH3/zR+9DuHj6cWv1VMIPSJMWSwxV8SAZbBlvXctpc8U/cLe8q1Gr9XyD8BK6PRGfbzlM4AEbHX6xWKtWWQwBAxkEqJFKGAIs8f5tGDU8ygA5ce/Iw/XNNNJPXyhzICJlRYc0LcLhHjjziE+vLn7/LUM5WAOCztS0Vv678KE5OLxTb9szK37jvfOgg9I6dDQWsDAfLnW75KxAg/wA2VAgVwrGBmgAAAABJRU5ErkJggg==',
		'usethemeq' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAflJREFUSEtjZCAAwpPbHUBK/jExgGlcgOkfwwGQHMefHycWLmz8QchcFHn/+HqB8qZ5Sxat3vvtzoNn70H4PwEAU7d2y9HvVa0LtobGd0kQZWlIcpvH2k1HXv358/cXIUvwyW/be+ZNUmF/Kl5LK1rnz3389BVB3xDrkDfvP31o6Vu+EaulqcUTY1++ev+OWMOIVff1248vmeVTG1AsBYX35l2nnhNrCKnqjp+5/jYorVUDbmlD95Idf/78oSjOCDmic+rq82AL4+PrOUApi5AGSuV37DvzA5T6GUD5jJhkP2XKlP9nzpzBijdu3Pj/5s2beN0EsgOcp0NT2hM+fvr6mZAPAgMD/9vY2ODEIMfgAz9+/voRltJWALSwLQOYkr4SsvDzZ4JuwmvE7z9/focmt1YwgDI6MXmP0iB9/vL9h7C01gAGUJbYd/gCQR9SGqQgO+DFXe+MdddpHaSzFm1/Dc+HoSktBmcv3n5DyFJy5UFRBoo6lNKmqH5Oz7fvPyhLGVhcBKoE6joWrcMoT0EFQP+s9Rd//vxFtUIAZNnClbuvgzM8NgCytLh25qTrtx5TXGOAghHkM5yWITsgLKXDYvr8rU+PnLz6GZSciY27t+8+fTx9/ubHect3fcSIM2Jq4/D0dgVQ3glNbW8gBoeltkag1ApYLAEAIKtp4+xd+jMAAAAASUVORK5CYII=',
		'usethempr' : imPNG + 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAUCAYAAACeXl35AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAAOwwAADsMBx2+oZAAAABh0RVh0U29mdHdhcmUAUGFpbnQuTkVUIHYzLjM2qefiJQAAAntJREFUSEuVlU1ME1EQx1dOHD169OjRo0eP3rTGLV5Mjdui3lCaQEy01bAtfiDRlIgEwbYkxBAwVVGCgZqI8WsNcjBNlYMJoYRaWNq1ZVtWVv6bvGa7fbv7mOSlzb7Z/29m3szbA5yLtQnR43DZbeGMXztr2eXeYa9VUz/F4zdVN92G/ZO+0MGuWyNjiYm5yvLvnIyluxjxm3z1Yfua+HSa9905xAQ9I0ROTL5YyGvav5obxGn/9ZxUuHClP+AI7RZHn6ys5l2zYQ2kIJe2eu6Pp6jQQOeDc+t5eZNVjNWvXFH/Xu4aCDdAUe+Xs1/W7ERyuZwuSZKezWapLtjDsrOPUmbjdLt4pA4N3x2b0TSNemapVEoXBMEQFEVRDwaDTboej0dHUE52e2Bi0QD6fKFWdJadM8TMZhUnwbiVeGZeUtH9HObMqe2tQGRJyheLxXQsFgPDmGneHz1fLJUVpwwJQFEUnQSAZ7Ty2umo1Zrq9Uc69oCRS3udVHaKEsJYKB8axwzGe25NA58dTdvhBbGbw6Dvd/aQJcBoFPxPp9N6MpmsZ08Lfm1d3vK2i6c4jMT8+++OGZoFkCnEYcjY3J14TvasUDDq113f4FSG5eDJiBBfa0OR0aFpDSXe/KnPIe/vOfpt6VfBCQoxKwDZmLvUmjHRw5Hh6Bpum6uh4XuVbZXarTgvwGjlAhAgLFTAavgI3OhNTDXdp7gA+oeeL1WrNdtLgKXsZh/A4s/eZoyBpxmgndcfP8z8XJH3K271RxmRmS3MHIDX33vs0ej06sLnHwramRW+sVkqfl3MFkfGZ4tNZ8byNW67GD2M2eED0TDL8gbEsw1fBQrkP6+jTExmIuLUAAAAAElFTkSuQmCC',
		'vmkls' : imPNG + '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',
	};
	function setDefLang() {
		t['0'] = "Script language"
			t['1'] = "Travian v2.x server";
		t['2'] = "Remove ad banners";
		t['3'] = "Force T3.1 Legionnaire & Phalanx capacity calculation<br>(for mixed T3.1 & T3.5 servers)";
		t['4'] = "Market";
		t['5'] = "Rally point/Barracks/Workshop/Stable";
		t['6'] = "Town hall/Hero's mansion/Armoury/Blacksmith";
		t['7'] = "Palace/Residence/Academy/Treasury";
		t['8'] = "Alliance";
		t['9'] = "Show additional links in left menu<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
		t['10'] = "Combat simulator link to use:";
		t['11'] = "Link to use for posting reports site";
		t['12'] = "Show 'dorf1.php' and 'dorf2.php' links";
		t['13'] = "Show 'Center map on this village' icon";
		t['15'] = "Show lumber, clay, iron production per hour";
		t['16'] = "Show effective crop production";
		t['17'] = "Show population";
		t['18'] = "Show additional village list as floating window";
		t['19'] = "Show information about buildings in progress and troop movements";
		t['20'] = "Show bookmarks";
		t['21'] = "Show 'User Bookmarks' as floating window";
		t['22'] = "Show note block";
		t['23'] = "Show 'NoteBlock' as floating window";
		t['24'] = "Note block size";
		t['25'] = "Note block height";
		t['26'] = "Show NPC Assistant calculations/links";
		t['27'] = "World Analyser to use";
		t['28'] = "Show analyser statistic links";
		t['29'] = "Map Analyser to use";
		t['30'] = "Show links to map for users";
		t['31'] = "Show links to map for alliances";
		t['32'] = "Show 'Search Bar'";
		t['33'] = "Show 'Search Bar' as floating window";
		t['34'] = "Show CP/day information in upgrade tables";
		t['35'] = "Show crop consumption in upgrade tables";
		t['36'] = "Show 'Until then/Residue' calculation in upgrade/training tables";
		t['37'] = "Show resource fields upgrade table";
		t['38'] = "Show resource level colours";
		t['39'] = "Show 'Resource Bar' table";
		t['40'] = "Show 'Resource Bar' table as floating window";
		t['41'] = "Show buildings upgrade table";
		t['42'] = "Sort buildings by name in upgrade table";
		t['43'] = "Show center numbers";
		t['44'] = "Show building level colours";
		t['45'] = "Show blinking levels for buildings being upgraded";
		t['46'] = "Show additional information for every merchant arrival";
		t['47'] = "Show last market transport";
		t['48'] = "Number of offer pages to preload while on the 'Market => Buy' page<br>(Default = 1)";
		t['49'] = "Rally point default action";
		t['50'] = "No. of scouts for the \"Select scout\" function";
		t['51'] = "Show last attack";
		t['52'] = "Show/use coordinates for last attack";
		t['53'] = "Show troops information in tooltips";
		t['54'] = "Show distance and times to villages in tooltips";
		t['55'] = "Auto fill in available troops for the internal war simulator";
		t['56'] = "Show cell type on the map";
		t['57'] = "Show distances & times in tooltips";
		t['58'] = "Show table of players/villages/occupied oasis";
		t['59'] = "Number of message/report pages to preload<br>(Default = 1)";
		t['60'] = "Show links to open messages/reports in a pop-up";
		t['61'] = "Show \"Delete all\" table on the Reports page";
		t['62'] = "Show the \"Send IGM\" icon for me, too";
		t['63'] = "Show TB3 enhanced Battle Reports";
		t['64'] = "Show details in Report Statistics";
		t['65'] = "Color upgrade available<br>(Default = Empty)";
		t['66'] = "Color max level<br>(Default = Empty)";
		t['67'] = "Color upgrade not possible (not enough resources)<br>(Default = Empty)";
		t['68'] = "Color upgrade via NPC<br>(Default = Empty)";
		t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING (Default = 0)";
		t['82.L'] = "Lock bookmarks (Hide delete, move up, move down icons)";
		t['82.U'] = "Unlock bookmarks (Show delete, move up, move down icons)";
		t['85'] = "Show 'Send troops'/'Send resources' icons";
		t['87'] = "Remember last 1x/2x/3x market send option (if available)";
		t['91'] = "Customize village list";
		t['92.L'] = "Lock list of villages (Hide move up, move down icons)";
		t['92.U'] = "Unlock lis of villages (Show move up, move down icons)";
		t['U.2'] = "Race";
		t['U.3'] = "Name of your capital<br><b>Visit your Profile for an update</b>";
		t['U.6'] = "Coordinates of your capital<br><b>Visit your Profile for an update</b>";
		t['SIM'] = "Combat simulator";
		t['QSURE'] = "Are you sure?";
		t['LOSS'] = "Loss";
		t['PROFIT'] = "Profit";
		t['EXTAV'] = "Extension available";
		t['PLAYER'] = "Player";
		t['VILLAGE'] = "Village";
		t['POPULATION'] = "Population";
		t['COORDS'] = "Coordinates";
		t['MAPTBACTS'] = "Actions";
		t['SAVED'] = "Saved";
		t['YOUNEED'] = "You need";
		t['TODAY'] = "today";
		t['TOMORROW'] = "tomorrow";
		t['DAYAFTERTOM'] = "day after tomorrow";
		t['BN_GID12'] = "Blacksmith";
		t['BN_GID13'] = "Armoury";
		t['BN_GID16'] = "Rally point";
		t['BN_GID17'] = "Marketplace";
		t['BN_GID19'] = "Barracks";
		t['BN_GID20'] = "Stable";
		t['BN_GID21'] = "Workshop";
		t['BN_GID22'] = "Academy";
		t['BN_GID24'] = "Town Hall";
		t['BN_GID25'] = "Residence";
		t['BN_GID26'] = "Palace";
		t['BN_GID27'] = "Treasury";
		t['BN_GID37'] = "Hero's mansion";
		t['SENDRES'] = "Send resources";
		t['BUY'] = "Buy";
		t['SELL'] = "Sell";
		t['SENDIGM'] = "Send IGM";
		t['LISTO'] = "Available";
		t['ON'] = "on";
		t['AT'] = "at";
		t['EFICIENCIA'] = "Efficiency";
		t['NEVER'] = "Never";
		t['ALDEAS'] = "Village(s)";
		t['TIEMPO'] = "Time";
		t['OFREZCO'] = "Offering";
		t['BUSCO'] = "Searching";
		t['TIPO'] = "Type";
		t['DISPONIBLE'] = "Only available";
		t['CUALQUIERA'] = "Any";
		t['YES'] = "Yes";
		t['NO'] = "No";
		t['LOGIN'] = "Login";
		t['MARCADORES'] = "Bookmarks";
		t['ANYADIR'] = "Add";
		t['UBU'] = "New Bookmark URL";
		t['UBT'] = "New Bookmark Text";
		t['DEL'] = "Delete";
		t['MAPA'] = "Map";
		t['MAXTIME'] = "Maximum time";
		t['ARCHIVE'] = "Archive";
		t['SUMMARY'] = "Summary";
		t['TROPAS'] = "Troops";
		t['CHKSCRV'] = "Update TBeyond";
		t['ACTUALIZAR'] = "Update village information";
		t['VENTAS'] = "Saved Offers";
		t['MAPSCAN'] = "Scan the Map";
		t['BIC'] = "Show extended icons";
		t['SAVE'] = "Save";
		t['AT2'] = "Reinforcement";
		t['AT3'] = "Attack: Normal";
		t['AT4'] = "Attack: Raid";
		t['NBSA'] = "Auto";
		t['NBSN'] = "Normal (small)";
		t['NBSB'] = "Large screen (large)";
		t['NBHAX'] = "Automatic expand height";
		t['NBHK'] = "Default height";
		t['NPCSAVETIME'] = "Save: ";
		t['TOTALTROOPS'] = "Total village troops";
		t['SELECTALLTROOPS'] = "Select all troops";
		t['PARTY'] = "Festivities";
		t['CPPERDAY'] = "CP/day";
		t['SLOT'] = "Slots";
		t['TOTAL'] = "Total";
		t['SELECTSCOUT'] = "Select scout";
		t['SELECTFAKE'] = "Select fake";
		t['ALL'] = "All";
		t['SH2'] = "In color fields you may enter:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>- the HEX color code like <b>#004523</b><br>- leave empty for the default color";
		t['SOREP'] = "Show original report (for posting)";
		t['WSIMO1'] = "Internal (provided by the game)";
		t['WSIMO2'] = "External (provided by kirilloid.ru)";
		t['NONEWVER'] = "You have the latest version available";
		t['BVER'] = "You may have a beta version";
		t['NVERAV'] = "A new version of the script is available";
		t['UPDSCR'] = "Update script now ?";
		t['CHECKUPDATE'] = "Checking for script update.<br>Please wait...";
		t['AVPPV'] = "Average population per village";
		t['AVPPP'] = "Average population per player";
		t['MAX'] = "Max";
		t['TOTTRTR'] = "Total troops training";
		t['TB3SL'] = "$1 Setup";
		t['UPDALLV'] = "Update all villages.  USE WITH MAXIMUM CARE AS THIS CAN LEAD TO A BANNED ACCOUNT !";
		t['LARGEMAP'] = "Large map";
		t['USETHEMPR'] = "Use them (proportional)";
		t['USETHEMEQ'] = "Use them (equal)";
		t['GSRVT'] = "Game server";
		t['ACCINFO'] = "Account Information";
		t['NBO'] = "Noteblock";
		t['MNUL'] = "Menu on the left side";
		t['STAT'] = "Statistics";
		t['RESF'] = "Resource fields";
		t['VLC'] = "Village center";
		t['MAPO'] = "Map options";
		t['COLO'] = "Color options";
		t['DBGO'] = "Debug options";
		t['NOW'] = "Now";
		t['CLOSE'] = "Close";
		t['USETHEM1H'] = "Use them (1 hour production)";
		t['OVERVIEW'] = "Overview";
		t['FORUM'] = "Forum";
		t['ATTACKS'] = "Attacks";
		t['NEWS'] = "News";
		t['ADDCRTPAGE'] = "Add current";
		t['SCRPURL'] = "TBeyond page";
		t['SPACER'] = "Spacer";
		t['MEREO'] = "Messages & Reports";
		t['ATTABLES'] = "Troop tables";
		t['MTW'] = "Wasted";
		t['MTX'] = "Exceeding";
		t['MTC'] = "Current load";
		t['ALFL'] = "Link to external forum<br>(Leave empty for internal forum)";
		t['MTCL'] = "Clear all";
		t['CKSORT'] = "Click to sort";
		t['MIN'] = "Min";
		t['SVGL'] = "Shared among villages";
		t['VGL'] = "Village List";
		t['UPDATEPOP'] = "Update population";
		t['EDIT'] = "Edit";
		t['NPCO'] = "NPC Assistant options";
		t['NEWVILLAGEAV'] = "Date/Time";
		t['TIMEUNTIL'] = "Time to wait";
		t['CENTERMAP'] = "Center map on this village";
		t['SENDTROOPS'] = "Send troops";
		t['UPGTB'] = "Resource fields/buildings upgrade tables";
		t['RBTT'] = "Resource Bar";
		t['USE'] = "Use";
		t['RESIDUE'] = "The residue if you build it ";
		t['RESOURCES'] = "Resources";
		t['SH1'] = "Open your Profile for automatic capital/coordinates detection<br>Build the barracks for automatic race detection and then open the village center";
		t['RESEND'] = "Send again ?";
		t['WSI'] = "War simulator provided by the game";
		t['TTT'] = "General troops/distance tooltips";
		t['MTR'] = "Ratio";
		t['USEMTR'] = "Use ratio:";
		t['MTRMIN'] = "(must be $1 minimum)";
		t['MTRMAX'] = "(must be $1 maximum)";
		t['FINDREP'] = "Search the last of";
		t['REP1_TT'] = "Won as attacker without losses";
		t['REP2_TT'] = "Won as attacker with losses";
		t['REP3_TT'] = "Lost as attacker";
		t['REP4_TT'] = "Won as defender without losses";
		t['REP5_TT'] = "Won as defender with losses";
		t['REP6_TT'] = "Lost as defender with losses";
		t['REP7_TT'] = "Lost as defender without losses";
		t['REP8_TT'] = "Reinforcement arrived";
		t['REP11_TT'] = "Merchants delivered mostly lumber";
		t['REP12_TT'] = "Merchants delivered mostly clay";
		t['REP13_TT'] = "Merchants delivered mostly iron";
		t['REP14_TT'] = "Merchants delivered mostly crop";
		t['REP17_TT'] = "Spying was failed";
		t['REP21_TT'] = "Adventure report";
		t['VLISTUP'] = "Move up";
		t['VLISTDOWN'] = "Move down";
		t['VLISTSEP'] = "Insert/remove horizontal separator";
		t['VLISTEDIT'] = "Village properties";
		t['VLISTOPTIONS'] = "Village list options";
		t['REPTT'] = "Show this report in separate window";
		t['WMIN'] = "Minimize window";
		t['WMAX'] = "Maximize window";
		t['REFRESHP'] = "Update page";
		t['1H'] = "1h";
		t['GENLNK'] = "General links enhancements";
		t['11.TT'] = "Posting reports site";
		t['27.TT'] = "World Analyser";
		t['29.TT'] = "Map Analyser";
		t['WSS'] = "Server statistics";
		t['WSP'] = "Player statistics";
		t['WSA'] = "Alliance statistics";
		t['TRAVIANDOPE'] = "Traviandope";
		t['TRAVIANDOPE.TT'] = "World Map, Player, and Alliance Analysis Tool";
		t['TOOLBOX'] = "Toolbox";
		t['TOOLBOX.TT'] = "Units Comparison, Combat Simulator, Calculators, Users and Allies Signature";
		t['CRYTOOLS'] = "Cry's Tools";
		t['CRYTOOLS.TT'] = "Cry's Travian Tools & News";
		t['KIRILLOID'] = "Kirilloid";
		t['KIRILLOID.TT'] = "Lot of useful tables & calculators";
		t['CROPFINDER'] = "Crop finder";
		t['CROPFINDER.TT'] = "Search for crop";
		t['ERRUPDATE'] = "Script update failed!";
		t['TRADEBAL.TT'] = "Get a trade balance for this player";
		t['100'] = "Show links to get trade balance for players";
		t['101'] = "Color upgrade not possible (not enough capacity of granaries/warehouses)<br>(Default = Empty)";
		t['102'] = "Show number of resource fields in 'Resource Bar'";
		t['RESNEED'] = "Need for normal extension:";
		t['NPCNEED'] = "Need for extension via NPC:";
		t['RESREQ_TT'] = "Need for extension: $1";
		t['NPCLNK'] = "&raquo; To NPC trading";
		t['USERES_TT'] = "Allow/disallow to use resource $1 when simultaneously operate with all resources.";
		t['USETRADERS_TT'] = "Use not more then this traders number when distributing resources.";
		t['USEUNIRES_TT'] = "Use not more then this resources quantity when distributing resources.";
		t['USEPPH_TT'] = "Use the 1h production of this village as the maximum transfer quantity.";
		t['USEPPHALL_TT'] = "Use the 1h production of all villages as the maximum transfer quantity.";
		t['STAT_DISMISS'] = "Statistics for dismiss troops";
		t['STAT_REMAINS'] = "Statistics for remains troops";
		t['SELECTALL'] = "Select all";
		t['EVENT'] = "Event";
		t['ARRP'] = "$1 arrivals progress ($2)";
		t['ARRP_TT'] = "Show/hide arrival progress statistics about $1";
		t['VGL2'] = "Additional village list";
		t['112'] = "Show distance (when possible)";
		t['114'] = "Show CP production per day";
		t['117'] = "Number of columns of villages in list";
		t['118'] = "Show tooltips";
		t['CELHINTS'] = "Click to enter the town hall.|Shift-click to hold a celebration.";
		t['DUP_TRADERS_TT'] = "Send same transport again";
		t['REPREAD_TT'] = "Read report";
		t['119'] = "GetterTools world ID";
		t['TCOST'] = "Training cost";
		t['TAVGDUR'] = "Avg.dur.";
		t['120'] = "Enable enhanced UI for trade routes creation/edition";
		t['EDITROUTES_TT'] = "Disable enhanced UI";
	};
	function switchLanguage(lang) {
		if (lang !== 'en') {
			switch (lang) {
			case 'ae':
				t['1'] = "Travian v2.x server";
				t['2'] = "إزالة الإعلانات";
				t['3'] = "T3.1 حساب الحمولة جندي أول & الكتيبة <br> (نسخة ترافيان T3.1 تختلف عن T3.5 )";
				t['4'] = "السوق";
				t['5'] = "نقطة التجمع / الثكنة / المصانع الحربية / الإسطبل";
				t['6'] = "البلدية / قصر الأبطال / مستودع الأسلحة / الحداد";
				t['7'] = "القصر / السكن / الأكاديمية / الخزنة";
				t['8'] = "التحالف";
				t['9'] = "إظهار الروابط الإضافية في القائمة اليمنى <br> (Traviantoolbox, World Analyser, Travilog, Map, وغيره.)";
				t['10'] = "تغيير نوع محاكي المعركة: <br> (في القائمة اليسرى)";
				t['11'] = "وصلة لاستخدامها لنشر التقارير";
				t['12'] = "أظهار روابط 'dorf1.php' و 'dorf2.php'";
				t['13'] = " إظهار أيقونة \"توسيط هذه القرية على الخريطة";
				t['15'] = "إظهار الخشب والطين والحديد الإنتاج لكل ساعة في قائمة القرية";
				t['16'] = "أظهار أنتاج القمح بجانب كل قرية";
				t['17'] = "أظهار عدد السكان بجانب كل قرية";
				t['18'] = "أظهار عمودين لقائمة القرية بصفحة عائمة";
				t['19'] = "عرض معلومات عن تقدم تطوير المباني وتحركات القوات في قائمة القرى";
				t['20'] = "أظهار الروابط";
				t['21'] = "إظهار الروابط بصفحة عائمة ";
				t['22'] = "أظهار دفتر الملاحظات";
				t['23'] = "إظهار دفتر الملاحظات بصفحة عائمة";
				t['24'] = "مقاس دفتر الملاحظات";
				t['25'] = "ارتفاع دفتر الملاحظات";
				t['26'] = "إظهار الحسابات/الروابط للمساعد NPC";
				t['27'] = "اختيار نوع محلل عالم ترافيان";
				t['28'] = "أظهار رابط محلل الإحصائيات";
				t['29'] = "اختيار  نوع محلل الإحصائيات";
				t['30'] = "إظهار روابط الخريطة للمستخدمين";
				t['31'] = "إظهار روابط الخريطة للتحالفات";
				t['32'] = "عرض شريط البحث";
				t['33'] = "إذا اخترت بالأعلى عرض شريط البحث  <br>  تستطيع جعله في نافذة عائمة بالضغط هنا";
				t['34'] = "أظهار مستوى النقاط الحضارية في جدول الترقية";
				t['35'] = "أظهار استهلاك القمح في جدول الترقية";
				t['36'] = "عرض الموارد المتبقية بعد البناء <br> والموارد في هذا الوقت في جدول الترقية والتطوير";
				t['37'] = "إظهار جدول رفع مستوى الموارد  <br>  الجدول الكبير أسفل الصفحة";
				t['38'] = "إظهار الألوان على مستويات الموارد";
				t['39'] = "إظهار شريط الموارد";
				t['40'] = "إظهار شريط الموارد في صفحة عائمة";
				t['41'] = "إظهار جدول رفع مستوى المباني";
				t['42'] = "فرز المباني بالاسم في جدول الترقية";
				t['43'] = "أظهار الأرقام على المباني";
				t['44'] = "أظهار الألوان على مستويات المباني";
				t['45'] = "تفعيل خاصية الوميض عند تطوير المباني ";
				t['46'] = "عرض معلومات إضافية عن وصول كل تاجر";
				t['47'] = "أظهار آخر عملية نقل موارد في السوق";
				t['48'] = "عدد صفحات العروض <br> في 'السوق => شراء' <br> (الوضع الافتراضي = 1 أو فارغ ؛ الحد الأقصى = 5)";
				t['49'] = "الاختصار الافتراضي في نقطة التجمع";
				t['50'] = "عدد الكشافة في  وظيفة \"اختيار الكشافة\"";
				t['51'] = "أظهار آخر هجوم في نقطة التجمع";
				t['52'] = "أظهار الإحداثيات في قائمة آخر هجوم";
				t['53'] = "إظهار معلومات القوات";
				t['54'] = "إظهار المسافة و الوقت للقرى كتلميحات";
				t['55'] = "ملء قوات القرية في محاكي المعركة داخل اللعبة";
				t['56'] = "عرض نوع القرية <br> عند المرور بالماوس على الخريطة";
				t['57'] = "إظهار المسافات & الوقت";
				t['58'] = "إظهار جدول اللاعبين ( القرى / الواحات المحتلة )";
				t['59'] = "عدد الصفحات في الرسائل/التقارير <br> (الوضع الافتراضي = 1 أو فارغ ؛ الحد الأقصى = 5)";
				t['60'] = "إظهار وصلات لفتح الرسائل في نافذة منبثقة";
				t['61'] = "إظهار جدول \"حذف الجميع\" على صفحة التقارير";
				t['62'] = "إظهار أيقونة \"أرسال رسالة\"";
				t['63'] = "عرض الإحصائيات في تقارير المعركة";
				t['64'] = "إظهار التفاصيل في تقرير الإحصاءات";
				t['65'] = "لون التطوير متاح <br> المربع فارغ = افتراضي)";
				t['66'] = "لون الحد الأقصى <br> (المربع فارغ = افتراضي)";
				t['67'] = "لون التطوير لا يمكن <br> (المربع فارغ = افتراضي)";
				t['68'] = "لون التطوير عن طريق NPC <br> (المربع فارغ = افتراضي)";
				t['69'] = "مستوى الدخول فقط لتصحيح الأخطاء للمبرمجين <br> (الافتراضي = 0 أو أتركه فارغ)";
				t['82.L'] = "إغلاق لوحة الروابط   إخفاء أيقونة ( حذف، فوق، تحت";
				t['82.U'] = "فتح لوحة الروابط   إظهار أيقونة ( حذف، فوق، تحت)";
				t['U.2'] = "القبيلة";
				t['U.3'] = "أسم العاصمة <br> لا يمكنك التعديل, فقط قم بزيارة بطاقة العضوية";
				t['U.6'] = "إحداثيات العاصمة <br> لا يمكنك التعديل, فقط قم بزيارة بطاقة العضوية";
				t['SIM'] = "محاكي المعركة";
				t['QSURE'] = "هل أنت متأكد؟";
				t['LOSS'] = "الخسائر";
				t['PROFIT'] = "الفائدة";
				t['EXTAV'] = "متاح";
				t['PLAYER'] = "اللاعب";
				t['VILLAGE'] = "اسم القرية";
				t['POPULATION'] = "السكان";
				t['COORDS'] = "الإحداثيات";
				t['MAPTBACTS'] = "الأمر";
				t['SAVED'] = "تم حفظ الإعدادات";
				t['YOUNEED'] = "تحتاج";
				t['TODAY'] = "اليوم";
				t['TOMORROW'] = "غداً";
				t['DAYAFTERTOM'] = "بعد غداً";
				t['BN_GID12'] = "الحداد";
				t['BN_GID13'] = "مستودع الأسلحة";
				t['BN_GID16'] = "نقطة التجمع";
				t['BN_GID17'] = "السوق";
				t['BN_GID19'] = "الثكنة";
				t['BN_GID20'] = "الإسطبل";
				t['BN_GID21'] = "المصانع الحربية";
				t['BN_GID22'] = "الأكاديمية";
				t['BN_GID24'] = "البلدية";
				t['BN_GID25'] = "السكن";
				t['BN_GID26'] = "القصر";
				t['BN_GID27'] = "الخزنة";
				t['BN_GID37'] = "قصر الأبطال";
				t['SENDRES'] = "إرسال الموارد";
				t['BUY'] = "شراء";
				t['SELL'] = "بيع";
				t['SENDIGM'] = "إرسال رسالة";
				t['LISTO'] = "يتاح";
				t['ON'] = "على";
				t['AT'] = "في";
				t['EFICIENCIA'] = "الفعالية";
				t['NEVER'] = "أبدا";
				t['ALDEAS'] = "القرية-القرى";
				t['TIEMPO'] = "الوقت";
				t['OFREZCO'] = "العرض";
				t['BUSCO'] = "البحث";
				t['TIPO'] = "النوع";
				t['DISPONIBLE'] = "فقط المتاح";
				t['CUALQUIERA'] = "أي";
				t['YES'] = "نعم";
				t['NO'] = "لا";
				t['LOGIN'] = "تسجيل الدخول";
				t['MARCADORES'] = "الروابط";
				t['ANYADIR'] = "إضافة رابط +نص";
				t['UBU'] = "ضع الرابط هنا";
				t['UBT'] = "ضع نص الرابط هنا";
				t['DEL'] = "حذف";
				t['MAPA'] = "الخريطة";
				t['MAXTIME'] = "الحد الأقصى للوقت";
				t['ARCHIVE'] = "الأرشيف";
				t['SUMMARY'] = "الموجز";
				t['TROPAS'] = "القوات";
				t['CHKSCRV'] = "أضغط هنا لتحديث السكربت مباشرة";
				t['ACTUALIZAR'] = "تحديث معلومات القرية";
				t['VENTAS'] = "حفظ العروض";
				t['MAPSCAN'] = "فحص الخريطة";
				t['BIC'] = "الإيقونات المختصرة";
				t['SAVE'] = "حفظ";
				t['AT2'] = "مساندة";
				t['AT3'] = "هجوم: كامل";
				t['AT4'] = "هجوم: للنهب";
				t['NBSA'] = "تلقائي";
				t['NBSN'] = "عادي (صغيره)";
				t['NBSB'] = "ملء الشاشة (كبيرة)";
				t['NBHAX'] = "توسيع تلقائي للارتفاع";
				t['NBHK'] = "ارتفاع افتراضي";
				t['NPCSAVETIME'] = "حفظ: ";
				t['TOTALTROOPS'] = "مجموع القوات في القرية";
				t['SELECTALLTROOPS'] = "اختيار كل القوات";
				t['PARTY'] = "الاحتفالات";
				t['CPPERDAY'] = "نقاط حضارية يومياً";
				t['SLOT'] = "فتح قرية";
				t['TOTAL'] = "المجموع";
				t['SELECTSCOUT'] = "اختيار الكشافة";
				t['SELECTFAKE'] = "اختيار هجوم وهمي";
				t['ALL'] = "الكل";
				t['SH2'] = "يمكنك إدخال الألوان كالأتي:<br>- green أو red أو  orange, الخ.<br>- رمز اللون مثل #004523<br>- تركه فارغ لألون الافتراضي";
				t['SOREP'] = "أظهار النسخة الأصلية للتقرير";
				t['WSIMO1'] = "داخلي (محاكي المعركة العادي)";
				t['WSIMO2'] = "خارجي (محاكي المعركة المطور kirilloid.ru)";
				t['NONEWVER'] = "لديك أحدث نسخة";
				t['BVER'] = "قد يكون لديك نسخة تجريبية";
				t['NVERAV'] = "يوجد نسخة جديدة من السكربت";
				t['UPDSCR'] = "هل تريد تحديث السكربت الآن؟";
				t['CHECKUPDATE'] = "التحقق من وجود تحديث للسكربت. الرجاء الانتظار...";
				t['AVPPV'] = "متوسط عدد السكان للقرية الواحدة ";
				t['AVPPP'] = "متوسط عدد السكان للاعب الواحد";
				t['MAX'] = "الحد الأقصى";
				t['TOTTRTR'] = "أجمالي القوات التي يتم تدريبها";
				t['TB3SL'] = "أعدادات ترافيان بايوند";
				t['UPDALLV'] = "تحديث جميع القرى. لا تستخدمها بكثرة فقد يؤدي ذالك إلى حظر حسابك !";
				t['LARGEMAP'] = "خريطة كبيرة";
				t['USETHEMPR'] = "الاستخدام (النسبي)";
				t['USETHEMEQ'] = "الاستخدام (المتساوي)";
				t['GSRVT'] = "سيرفر اللعبة";
				t['ACCINFO'] = "معلومات الحساب";
				t['NBO'] = "دفتر الملاحظات";
				t['MNUL'] = "القائمة على الجانب الأيمن";
				t['STAT'] = "إحصائيات";
				t['RESF'] = "حقول الموارد";
				t['VLC'] = "مركز القرية";
				t['MAPO'] = "خيارات الخريطة";
				t['COLO'] = "خيارات الألوان";
				t['DBGO'] = "خيارات التصحيح";
				t['NOW'] = "الآن";
				t['CLOSE'] = "إغلاق";
				t['USETHEM1H'] = "الاستخدام (1 ساعة الإنتاج)";
				t['OVERVIEW'] = "العرض";
				t['FORUM'] = "المنتدى";
				t['ATTACKS'] = "الهجمات";
				t['NEWS'] = "الإخبار";
				t['ADDCRTPAGE'] = "إضافة نص للصفحة الحالية";
				t['SCRPURL'] = "اضغط هنا لفتح الصفحة الرسمية للسكربت";
				t['SPACER'] = "إضافة فاصل";
				t['MEREO'] = "رسائل & تقارير";
				t['ATTABLES'] = "جدول القوات";
				t['MTW'] = "الباقي";
				t['MTX'] = "الزائد";
				t['MTC'] = "الحمولة الحالية";
				t['ALFL'] = "رابط خارجي للمنتدى <br> (المربع فارغ = إذا كان المنتدى داخلي)";
				t['MTCL'] = "مسح الكل";
				t['CKSORT'] = "أضغط لترتيب";
				t['MIN'] = "الأدنى";
				t['SVGL'] = "عرض مشترك بين القرى";
				t['VGL'] = "قائمة القرية";
				t['UPDATEPOP'] = "تحديث السكان";
				t['EDIT'] = "تحرير";
				t['NPCO'] = "خيارات المساعدة NPC";
				t['NEWVILLAGEAV'] = "التاريخ/الوقت";
				t['TIMEUNTIL'] = "الوقت اللازم للانتظار";
				t['CENTERMAP'] = "توسيط هذه القرية على الخريطة";
				t['SENDTROOPS'] = "إرسال القوات";
				t['UPGTB'] = "جدول الترقية ( المباني/الحقول )";
				t['RBTT'] = "شريط الموارد";
				t['USE'] = "استخدام";
				t['RESIDUE'] = "الموارد بعد البناء ";
				t['RESOURCES'] = "الموارد قبل البناء ";
				t['SH1'] = "أفتح بطاقة العضوية ليتعرف السكربت تلقائياً على العاصمة <br> أبني الثكنة للكشف تلقائياً على نوع القبيلة ومن ثم الدخول على نقطة التجمع";
				t['RESEND'] = "إرسال مرة أخرى ؟";
				t['WSI'] = "محاكي المعركة داخل اللعبة";
				t['CROPFINDER'] = "بحث عن القرى القمحية";
				t['VGL2'] = "قائمة القرية";
				t['112'] = "إظهار المسافات & الوقت";
				t['114'] = "نقاط حضارية يومياً";
				break;
			case 'ar':
			case 'cl':
			case 'mx':
				t['1'] = "Servidor Travian v2.x?";
				t['2'] = "Quitar banners publicitarios";
				t['3'] = "Forzar el cálculo de capacidad de Legionarios y Falanges según T3.1<br>(para servidores mixtos T3.1 & T3.5)";
				t['4'] = "Mercado";
				t['5'] = "Plaza de reuniones/Cuartel/Taller/Establo";
				t['6'] = "Ayuntamiento/Hogar del H&eacute;roe/Armer&iacute;a/Herrer&iacute;a";
				t['7'] = "Palacio/Residencia/Academia/Tesoro";
				t['8'] = "Alianza";
				t['9'] = "Mostrar enlaces adicionales en el menu de la izquierda<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "&iquest;Qu&eacute; simulador de combate usar?:<br>(men&uacute; izquierdo)";
				t['12'] = "Mostrar enlaces 'dorf1.php' y 'dorf2.php'";
				t['13'] = "Mostrar ícono \"Centrar mapa sobre esta aldea\"";
				t['16'] = "Mostrar producción efectiva de cereales en lista de aldeas";
				t['17'] = "Mostrar cantidad de habitantes en lista de aldeas";
				t['18'] = "Mostrar lista de aldeas adicional (2 columnas) como ventana flotante";
				t['19'] = "Mostrar información acerca de edificios en construcción y movimiento de tropas en lista de aldeas";
				t['20'] = "Mostrar marcadores";
				t['21'] = "Mostrar 'marcadores' como ventana flotante";
				t['22'] = "Mostrar hoja de notas";
				t['23'] = "Mostrar 'hoja de notas' como ventana flotante";
				t['24'] = "Tama&ntilde;o de la hoja de notas";
				t['25'] = "Altura de la hoja de notas";
				t['27'] = "&iquest;Qu&eacute; analizador usar para las estad&iacute;sticas?";
				t['28'] = "Mostrar enlaces del analizador de estadisticas<br>(icono del mundo al lado de usuarios/alianzas)";
				t['29'] = "Analizador de Mapas a ser usado";
				t['30'] = "Mostrar vínculo a mapa, para un usuario";
				t['31'] = "Mostrar vínculo a mapa, para una alianza";
				t['32'] = "Mostrar 'Buscador'";
				t['33'] = "Mostrar 'Buscador' como ventana flotante";
				t['34'] = "Mostrar PC/día en tablas de actualización";
				t['35'] = "Mostrar consumo de cereales en tablas de actualización";
				t['36'] = "Mostrar los cálculos de 'Hasta entonces/Excedentes'<br>en las tablas de entrenamiento/mejora";
				t['37'] = "Mostrar la tabla de actualizaci&oacute;n de los recursos";
				t['38'] = "Mostrar colores en el nivel de los recursos";
				t['39'] = "Mostrar tabla 'Barras de Recursos'";
				t['40'] = "Mostrar tabla 'Barras de Recursos' como ventana flotante";
				t['41'] = "Mostrar la tabla de actualizaci&oacute;n de las construcciones";
				t['42'] = "Ordenar edificios por su nombre en tablas de actualización";
				t['43'] = "Mostrar el nivel de las construcciones en el centro de la aldea";
				t['44'] = "Mostrar colores en el nivel de las construcciones";
				t['45'] = "Mostrar nivel parpadeando en los edificios que están siendo ampliados";
				t['46'] = "Mostrar información adicional para cada mercader en camino";
				t['48'] = "P&aacute;ginas mostradas en la secci&oacute;n 'Comprar' del mercado<br>(Valor por defecto = 1)";
				t['49'] = "Opci&oacute;n por defecto cuando se mandan tropas";
				t['50'] = "N° de esp&iacute;as para selecionar por defecto en \"Seleccionar espías\"";
				t['53'] = "Mostrar informaci&oacute;n de tropas en tooltips";
				t['54'] = "Mostrar tiempos y distancias a aldeas en tooltips";
				t['56'] = "Mostrar el tipo de casilla al ponerle el cursor encima";
				t['57'] = "Mostrar distancias y tiempos en tooltips";
				t['58'] = "Mostrar tabla de Jugadores/Aldeas/Oasis ocupados";
				t['59'] = "N&uacute;mero de pag&iacute;nas de mensajes/reportes precargadas<br>(Valor por defecto = 1)";
				t['60'] = "Mostrar vínculos para abrir mensajes/informes como ventanas emergentes";
				t['61'] = "Mostrar la tabla \"Borrar todo\" en la página de Informes";
				t['62'] = "Mostrar ícono \"Enviar IGM\" también para mi";
				t['63'] = "Mostrar Reportes de Batalla mejorados de TB3";
				t['64'] = "Mostrar detalles en Infórmes Estadísticos";
				t['65'] = "Color para las actualizaciones disponibles";
				t['66'] = "Color para los niveles m&aacute;ximos";
				t['67'] = "Color para las actualizaciones no disponibles";
				t['68'] = "Color para actualizar por medio de NPC";
				t['69'] = "Nivel de Registro de la Consola<br>SOLO PARA PROGRAMADORES O DEPURACI&Oacute;N<br>(Valor por defecto = 0)";
				t['82.L'] = "Bloquear marcadores (Ocultar iconos de eliminar, subir, bajar)";
				t['82.U'] = "Desbloquear marcadores (Mostrar iconos de eliminar, subir, bajar)";
				t['U.2'] = "Raza";
				t['U.3'] = "Nombre de tu capital<br><b>Revisa tu perfil para actualizarla</b>";
				t['U.6'] = "Coordenadas de tu capital<br><b>Revisa tu perfil para actualizarla</b>";
				t['SIM'] = "Simulador de combate";
				t['QSURE'] = "¿Estás seguro?";
				t['LOSS'] = "P&eacute;rdidas";
				t['PROFIT'] = "Ganancias";
				t['EXTAV'] = "Subir nivel";
				t['PLAYER'] = "Jugador";
				t['VILLAGE'] = "Aldea";
				t['POPULATION'] = "Poblaci&oacute;n";
				t['COORDS'] = "Coordenadas";
				t['MAPTBACTS'] = "Acciones";
				t['SAVED'] = "Guardado";
				t['YOUNEED'] = "Te falta";
				t['TODAY'] = "hoy";
				t['TOMORROW'] = "ma&ntilde;ana";
				t['DAYAFTERTOM'] = "pasado ma&ntilde;ana";
				t['BN_GID12'] = "Armer&iacute;a";
				t['BN_GID13'] = "Herrer&iacute;a";
				t['BN_GID16'] = "Plaza de reuniones";
				t['BN_GID17'] = "Mercado";
				t['BN_GID19'] = "Cuartel";
				t['BN_GID20'] = "Establo";
				t['BN_GID21'] = "Taller";
				t['BN_GID22'] = "Academia";
				t['BN_GID24'] = "Ayuntamiento";
				t['BN_GID25'] = "Residencia";
				t['BN_GID26'] = "Palacio";
				t['BN_GID27'] = "Tesoro";
				t['BN_GID37'] = "Hogar del H&eacute;roe";
				t['SENDRES'] = "Enviar recursos";
				t['BUY'] = "Comprar";
				t['SELL'] = "Vender";
				t['SENDIGM'] = "Enviar IGM";
				t['LISTO'] = "Listo";
				t['ON'] = "el";
				t['AT'] = "a las";
				t['EFICIENCIA'] = "Eficiencia";
				t['NEVER'] = "Nunca";
				t['ALDEAS'] = "Aldea(s)";
				t['TIEMPO'] = "Tiempo";
				t['OFREZCO'] = "Ofrezco";
				t['BUSCO'] = "Busco";
				t['TIPO'] = "Tipo";
				t['DISPONIBLE'] = "Solo disponible";
				t['CUALQUIERA'] = "Cualquiera";
				t['YES'] = "Si";
				t['NO'] = "No";
				t['LOGIN'] = "Ingresar";
				t['MARCADORES'] = "Marcadores";
				t['ANYADIR'] = "Añadir";
				t['UBU'] = "URL del nuevo Marcador";
				t['UBT'] = "Nombre del nuevo Marcador";
				t['DEL'] = "Eliminar";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Tiempo m&aacute;ximo";
				t['ARCHIVE'] = "Archivar";
				t['SUMMARY'] = "Resumen";
				t['TROPAS'] = "Tropas";
				t['CHKSCRV'] = "Actualice TBeyond";
				t['ACTUALIZAR'] = "Actualizar informaci&oacute;n de aldea";
				t['VENTAS'] = "Guardar ofertas";
				t['MAPSCAN'] = "Escanear el Mapa";
				t['BIC'] = "Mostrar iconos de acceso r&aacute;pido";
				t['SAVE'] = "Guardar";
				t['AT2'] = "Refuerzos";
				t['AT3'] = "Ataque: Normal";
				t['AT4'] = "Ataque: Asalto";
				t['NBSA'] = "Automático";
				t['NBSN'] = "Normal";
				t['NBSB'] = "Grande";
				t['NBHAX'] = "Expandir altura automáticamente";
				t['NBHK'] = "Altura por defecto";
				t['NPCSAVETIME'] = "Tiempo ahorrado: ";
				t['TOTALTROOPS'] = "Tropas totales de la aldea";
				t['SELECTALLTROOPS'] = "Seleccionar todas las tropas";
				t['PARTY'] = "Fiesta";
				t['CPPERDAY'] = "PC/día";
				t['SLOT'] = "Espacios disp.";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Seleccionar esp&iacute;as";
				t['SELECTFAKE'] = "Seleccionar unidad para fake";
				t['ALL'] = "Todo";
				t['SH2'] = "En los campos para escribir en el color, puedes poner:<br>- <b>green</b> o <b>red</b> o <b>orange</b>, etc.<br>- El c&oacute;digo Hexadecimal del color.<br>- D&eacute;jalo vac&iacute;o para usar el color por defecto";
				t['SOREP'] = "Mostrar reporte original (para poner en foros)";
				t['WSIMO1'] = "Interno (el que trae travian por defecto)";
				t['WSIMO2'] = "Externo (kirilloid.ru)";
				t['NONEWVER'] = "Tiene la última versión disponible";
				t['BVER'] = "Tal ves tengas una versión beta";
				t['NVERAV'] = "Hay una nueva versión del script disponible";
				t['UPDSCR'] = "Actualizar el script?";
				t['CHECKUPDATE'] = "Buscando nuevas versiones del script.<br>Por favor espera...";
				t['AVPPV'] = "Poblaci&oacute;n promedio por aldea";
				t['AVPPP'] = "Poblaci&oacute;n promedio por jugador";
				t['MAX'] = "Max.";
				t['TOTTRTR'] = "Tropas totales que se estan creando";
				t['TB3SL'] = "Config. de TBeyond";
				t['UPDALLV'] = "Actualizar todas las aldeas. USAR CON MUCHO CUIDADO, PUEDE LLEVAR A QUE BORREN TU CUENTA!";
				t['LARGEMAP'] = "Mapa grande";
				t['USETHEMPR'] = "Llenar proporcionalmente a la cantidad de cada recurso que hay en los almacenes";
				t['USETHEMEQ'] = "Llenar con la misma cantidad de cada recurso";
				t['GSRVT'] = "Versi&oacute;n del servidor";
				t['ACCINFO'] = "Información de la Cuenta";
				t['NBO'] = "Hoja de notas";
				t['MNUL'] = "Men&uacute; en el lado izquierdo";
				t['STAT'] = "Estad&iacute;sticas";
				t['RESF'] = "Campos de recursos";
				t['VLC'] = "Centro de la aldea";
				t['MAPO'] = "Opciones del Mapa";
				t['COLO'] = "Opciones de color";
				t['DBGO'] = "Opciones de depuraci&oacute;n (DEBUG)";
				t['NOW'] = "Ahora";
				t['CLOSE'] = "Cerrar";
				t['USETHEM1H'] = "Llenar con 1 hora de producci&oacute;n de esta aldea";
				t['OVERVIEW'] = "Resumen";
				t['FORUM'] = "Foro";
				t['ATTACKS'] = "Ataques";
				t['NEWS'] = "Noticias";
				t['ADDCRTPAGE'] = "Añadir Página Actual";
				t['SCRPURL'] = "Pág. de TBeyond";
				t['SPACER'] = "Separador";
				t['MEREO'] = "Mensajes y Reportes";
				t['ATTABLES'] = "Tabla de tropas";
				t['MTW'] = "Disponible";
				t['MTX'] = "Excedido";
				t['MTC'] = "Carga actual";
				t['ALFL'] = "V&iacute;nculo a foro externo<br>(Dejar en blanco para foro interno)";
				t['MTCL'] = "Limpiar todo";
				t['CKSORT'] = "Haga clic para ordenar";
				t['MIN'] = "Min";
				t['SVGL'] = "Compartir entre las aldeas";
				t['VGL'] = "Lista de Aldeas";
				t['UPDATEPOP'] = "Actualizar habitantes";
				t['EDIT'] = "Editar";
				t['NEWVILLAGEAV'] = "Fecha/Hora";
				t['TIMEUNTIL'] = "Tiempo a esperar";
				t['CENTERMAP'] = "Centrar mapa sobre esta aldea";
				t['SENDTROOPS'] = "Enviar tropas";
				t['UPGTB'] = "Tablas de actualización de Recursos y Edificios";
				t['RBTT'] = "Barras de Recursos";
				t['USE'] = "Usar";
				t['RESIDUE'] = "Excedentes si construyes ";
				t['RESOURCES'] = "Recursos";
				t['SH1'] = "Abra su Perfil para detectar automáticamente la capital/coordenadas<br>Construya el cuartel para la detección automática de la raza y<br>abra entonces el centro de la aldea";
				t['CROPFINDER'] = "Buscar Cultivos";
				t['VGL2'] = "Lista de Aldeas";
				t['112'] = "Mostrar distancias y tiempos en tooltips";
				t['114'] = "PC/día";
				break;
			case 'ba':
			case 'hr':
				t['1'] = "Travian v2.x server";
				t['4'] = "Pijaca";
				t['5'] = "Vojska Mjesto okupljanja/Kasarna/Radionica/Štala";
				t['6'] = "Opština/Herojska vila/Kovačnica oklopa/Kovačnica oružja";
				t['7'] = "Dvorac/Rezidencija/Akademija/Zgrada za blago";
				t['8'] = "Alijansa";
				t['9'] = "Prikazuj dodatne linkove u lijevom<br>izborniku<br>(Traviantoolbox, World Analyser, Travilog, Map, itd.)";
				t['10'] = "Simulator borbe koji se koristi: (izbornik lijevo)";
				t['12'] = "Prikazuj 'dorf1.php' i 'dorf2.php' linkove";
				t['13'] = "Prikaži \"Centriraj kartu na ovo selo\" ikonu";
				t['20'] = "Prikaži Oznake";
				t['22'] = "Prikaži notes";
				t['24'] = "Veličina notesa";
				t['25'] = "Visina notesa";
				t['26'] = "Prikazuj NPC Assistant kalkulacije/linkove";
				t['27'] = "Analizator svijeta koji se koristi";
				t['28'] = "Prikaži statističke linkove analizatora";
				t['37'] = "Prikazuj tablicu nadogradnje za polja resursa";
				t['38'] = "Prikazuj boje nivoa resursa";
				t['41'] = "Prikazuj tablicu nadogradnje za infrastrukturu";
				t['43'] = "Prikaži centralne brojeve";
				t['44'] = "Prikazuj boje nivoa građevine";
				t['48'] = "Proj preučitanih stranica ponude<br>dok ste na stranici za kupovinu => na Pijaci<br>(Zadano = 1)";
				t['49'] = "Standardna akcija za<br>mjesto okupljanja";
				t['50'] = "Broj izviđača za \"Izaberi izviđača\" funkciju";
				t['53'] = "Prikazuj informacije o vojsci na napomenama";
				t['54'] = "Prikazuj udaljenosti i vremena<br>do sela u napomenama";
				t['56'] = "Prikazuj podatke o tipu/oazi ćelije pri prelazu miša preko mape";
				t['57'] = "Prikazuj udaljenosti i vremena";
				t['58'] = "Prikaži tabelu igrača/sela/oaza";
				t['59'] = "Broj unaprijed učitanih<br>poruka/izvještaja<br>(Zadano = 1)";
				t['60'] = "Prikazuj linkove na otvorene<br>poruke u pop-upu";
				t['61'] = "Prikaži \"Izbriši sve\" u izvještajima";
				t['62'] = "Prikaži \"Pošalji IGM\" ikonu i za mene";
				t['64'] = "Prikaži detalje u izvještajima";
				t['65'] = "Boja dostupne nadogradnje<br>(Zadano = prazno)";
				t['66'] = "Boja maksimalnog nivoa<br>(Zadano = prazno)";
				t['67'] = "Boja nemoguće nadogradnje<br>(Zadano = prazno)";
				t['68'] = "Boja nadogradnje pomoću NPC-a<br>(Zadano = prazno)";
				t['69'] = "Nivo zapisa konzole<br>ONLY FOR PROGRAMMERS(Zadano = 0)";
				t['82.L'] = "Zaključaj Oznake (Sakrij ikone za brisanje i pomjeranje)";
				t['82.U'] = "Otključaj Oznake (Prikaži ikone za brisanje i pomjeranje)";
				t['U.2'] = "Pleme";
				t['U.3'] = "Naziv glavnog grada<br>Za ažuriranje posjetite vaš profil";
				t['U.6'] = "Koordinate vašeg glavnog grada<br>Za ažuriranje posjetite vaš profil";
				t['SIM'] = "Simulator borbe";
				t['QSURE'] = "Da li ste sigurni?";
				t['LOSS'] = "Gubitak";
				t['PROFIT'] = "Profit";
				t['EXTAV'] = "Dostupna ekstenzija";
				t['PLAYER'] = "Igrač";
				t['VILLAGE'] = "Selo";
				t['POPULATION'] = "Populacija";
				t['COORDS'] = "Koordinate";
				t['MAPTBACTS'] = "Akcije";
				t['SAVED'] = "Sačuvano";
				t['YOUNEED'] = "Potrebno";
				t['TODAY'] = "danas";
				t['TOMORROW'] = "sutra";
				t['DAYAFTERTOM'] = "prekosutra";
				t['BN_GID12'] = "Kovačnica oružja";
				t['BN_GID13'] = "Kovačnica oklopa";
				t['BN_GID16'] = "Mjesto okupljanja";
				t['BN_GID17'] = "Pijaca";
				t['BN_GID19'] = "Kasarna";
				t['BN_GID20'] = "Štala";
				t['BN_GID21'] = "Radionica";
				t['BN_GID22'] = "Akademija";
				t['BN_GID24'] = "Opština";
				t['BN_GID25'] = "Rezidencija";
				t['BN_GID26'] = "Dvorac";
				t['BN_GID27'] = "Zgrada za blago";
				t['BN_GID37'] = "Herojska vila";
				t['SENDRES'] = "Slanje resursa";
				t['BUY'] = "Kupovina";
				t['SELL'] = "Prodaja";
				t['SENDIGM'] = "Pošalji poruku";
				t['LISTO'] = "Dostupno";
				t['ON'] = "za";
				t['AT'] = "u";
				t['EFICIENCIA'] = "Učinkovitost";
				t['NEVER'] = "Nikad";
				t['ALDEAS'] = "Sela";
				t['TIEMPO'] = "Vrijemo";
				t['OFREZCO'] = "Nudi";
				t['BUSCO'] = "Traži";
				t['TIPO'] = "Tip";
				t['DISPONIBLE'] = "Dostupno samo";
				t['CUALQUIERA'] = "Svejedno";
				t['YES'] = "Da";
				t['NO'] = "Ne";
				t['LOGIN'] = "Prijava";
				t['MARCADORES'] = "Oznake";
				t['ANYADIR'] = "Dodaj";
				t['UBU'] = "Dodaj adresu u Oznake";
				t['UBT'] = "Dodaj tekst u Oznake";
				t['DEL'] = "Obriši";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Maksimalno vrijeme";
				t['ARCHIVE'] = "Arhiva";
				t['SUMMARY'] = "Rezime";
				t['TROPAS'] = "Vojska";
				t['CHKSCRV'] = "Update";
				t['ACTUALIZAR'] = "Ažuriraj podatke o selu";
				t['VENTAS'] = "Spremljenje ponude";
				t['MAPSCAN'] = "Skeniraj mapu";
				t['BIC'] = "Prikazuj proširene ikone";
				t['SAVE'] = "Spremi";
				t['AT2'] = "Pojačanje";
				t['AT3'] = "Napad: normalan";
				t['AT4'] = "Napad: pljačka";
				t['NBSA'] = "Automatski";
				t['NBSN'] = "Normalno (malo)";
				t['NBSB'] = "Veliki ekran (veliko)";
				t['NBHAX'] = "Automatsko proširenje visine";
				t['NBHK'] = "Standardna visina";
				t['NPCSAVETIME'] = "Spremi: ";
				t['TOTALTROOPS'] = "Ukupna vojska sela";
				t['SELECTALLTROOPS'] = "Izaberi sve vojnike";
				t['PARTY'] = "Zabave";
				t['CPPERDAY'] = "KP/dnevno";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Ukupno";
				t['SELECTSCOUT'] = "Izaberi izviđača";
				t['SELECTFAKE'] = "Izaberi lažnjak";
				t['ALL'] = "Sve";
				t['SH2'] = "U polja boje možeš unijeti:<br>- green ili red ili  orange, itd.<br>- HEX (heksadecimalni) kod boje poput #004523<br>- ostaviti prazno za standardnu boju";
				t['SOREP'] = "Prikaži originalni izvještaj (za postanje)";
				t['WSIMO1'] = "Interni (iz igre)";
				t['WSIMO2'] = "Eksterni (kirilloid.ru)";
				t['NONEWVER'] = "Imate posljednju dostupnu verziju";
				t['BVER'] = "Moguće da imate beta verziju";
				t['NVERAV'] = "Dostupna je nova verzija skripte";
				t['UPDSCR'] = "Nadograditi odmah?";
				t['CHECKUPDATE'] = "Provjera nadogradnje skripte.<br>Molimo sačekajte...";
				t['AVPPV'] = "Prosječno populacije po selu";
				t['AVPPP'] = "Prosječno populacije po igraču";
				t['MAX'] = "Maksimalno";
				t['TOTTRTR'] = "Ukupno obučavane vojske";
				t['TB3SL'] = "$1 Podešavanje";
				t['UPDALLV'] = "Ažuriraj sva sela. KORISTITI OPREZNO JER MOŽE DOVESTI DO SUSPENZIJE NALOGA!";
				t['LARGEMAP'] = "Velika mapa";
				t['USETHEMPR'] = "Koristi ih (proporcionalno)";
				t['USETHEMEQ'] = "Koristi ih (jednako)";
				t['ACCINFO'] = "Informacije o nalogu";
				t['NBO'] = "Notes";
				t['MNUL'] = "Izbornik s lijeve strane";
				t['STAT'] = "Statistika";
				t['RESF'] = "Polja resursa";
				t['VLC'] = "Centar sela";
				t['MAPO'] = "Opcije mape";
				t['COLO'] = "Opcije boje";
				t['DBGO'] = "Debug opcije";
				t['NOW'] = "Odmah";
				t['CLOSE'] = "Zatvori";
				t['USETHEM1H'] = "Koristi ih (1 satna proizvodnja)";
				t['OVERVIEW'] = "Pregled";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Napadi";
				t['NEWS'] = "Vijesti";
				t['ADDCRTPAGE'] = "Dodaj trenutnu";
				t['SCRPURL'] = "TBeyond";
				t['SPACER'] = "Spacer";
				t['MEREO'] = "Poruke & Izvještaji";
				t['ATTABLES'] = "Vojne tabele";
				t['MTW'] = "Škart";
				t['MTX'] = "Premašuje";
				t['MTC'] = "Trenutni tovar";
				t['ALFL'] = "Link na eksterni forum<br>(Ostaviti prazno za interni forum)";
				t['MTCL'] = "Poništi sve";
				t['CKSORT'] = "Klikni da sortiraš";
				t['MIN'] = "Min";
				t['SVGL'] = "Djeljeno među selima";
				t['VGL'] = "Lista sela";
				t['UPDATEPOP'] = "Ažuriraj populaciju";
				t['EDIT'] = "Uredi";
				t['NPCO'] = "NPC Assistant opcije";
				t['NEWVILLAGEAV'] = "Datum/Vrijeme";
				t['TIMEUNTIL'] = "Vrijeme za sačekajte";
				t['CENTERMAP'] = "Centriraj kartu na ovo selo";
				t['SENDTROOPS'] = "Pošalji vojsku";
				t['USE'] = "Koristi";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Lista sela";
				t['112'] = "Prikazuj udaljenosti i vremena";
				t['114'] = "KP/dnevno";
				break;
			case 'bg':
				t['1'] = "Travian v2.x сървър";
				t['2'] = "Премахни рекламните банери";
				t['3'] = "Изчисли T3.1 Легионери & Фаланги капацитет<br>(за смесени T3.1 & T3.5 сървъри)";
				t['4'] = "Пазар";
				t['5'] = "Сборен пункт/Казарма/Работилница/Конюшня";
				t['6'] = "Кметство/Таверна/Ковачница за оръжия/Ковачница за брони";
				t['7'] = "Дворец/Резиденция/Академия/Съкровишница";
				t['8'] = "Съюз";
				t['9'] = "Покажи допълнителни връзки в лявото меню<br>(Traviantoolbox, World Analyser, Travilog, Map, и т.н.)";
				t['10'] = "Симулатор на битки:<br>(в лявото меню)";
				t['11'] = "Препратка за военни доклади";
				t['12'] = "Покажи 'dorf1.php' и 'dorf2.php' връзки";
				t['13'] = "Покажи \"Карта\" икона";
				t['15'] = "Покажи дърва, глина, желязо продукция за час в списъка на селото";
				t['16'] = "Покажи ефективната продукция на полетата в списъка на селото";
				t['17'] = "Покажи популацията в списъка на селото";
				t['18'] = "Покажи допълнителни (2 колони) в списъка на селото в отделен прозорец";
				t['19'] = "Покажи информация за сградите в прогрес и движението на войските в списъка на селото";
				t['20'] = "Покажи отметките";
				t['21'] = "Покажи 'Потребителски отметки' в отделен прозорец";
				t['22'] = "Покажи бележка";
				t['23'] = "Покажи 'Бележник' в отделен прозорец";
				t['24'] = "Размер на бележката";
				t['25'] = "Размер бележка - височина";
				t['26'] = "Покажи NPC помошник калкулатор/връзка";
				t['27'] = "Световен анализатор";
				t['28'] = "Покажи връзка към анализатора";
				t['29'] = "Анализатор на картата";
				t['30'] = "Покажи връзки към потребителите в картата";
				t['31'] = "Покажи връзки към съюзите в картата";
				t['32'] = "Покажи 'Лента за търсене'";
				t['33'] = "Покажи 'Лента за търсене' в отделен прозорец";
				t['34'] = "Покажи КР/ден информация в таблицата";
				t['35'] = "Покажи консумацията на сградите в таблицата";
				t['36'] = "Покажи 'Докато/Остатък' калкулатор в надстрой/тренирай таблиците";
				t['37'] = "Покажи таблица с надстройките на ресурсните полета";
				t['38'] = "Покажи цветни нива на ресурсите";
				t['39'] = "Покажи 'Лента на ресурсите' таблица";
				t['40'] = "Покажи 'Лента на ресурсите' таблица в отделен прозорец";
				t['41'] = "Покажи таблица с надстройките на сградите";
				t['42'] = "Сортирай сградите по име в таблицата";
				t['43'] = "Покажи нивата на сградите";
				t['44'] = "Покажи цветни нива на сградите";
				t['45'] = "Покажи мигащи нива на сградите които са надстроени";
				t['46'] = "Покажи допълнителна информация за всеки пристигнал търговец";
				t['48'] = "Брой страници с оферти за презареждане<br>докато е в 'Пазара => Купи' страница<br>(Default = 1)";
				t['49'] = "Сборен пункт нормално действие";
				t['50'] = "Бр. на шпионите за \"Избери шпиони\" функция";
				t['53'] = "Покажи информация за войските в tooltips";
				t['54'] = "Покажи разстоянието и времето до селата в tooltips";
				t['56'] = "Покажи информация за вида/оазиса<br>докато посочвам с мишката върху картата";
				t['57'] = "Покажи разстоянието & времето";
				t['58'] = "Покажи таблица на играчите/селата/превзети оазиси";
				t['59'] = "Брой Съобщения/доклади страници за презареждане<br>(Default = 1)";
				t['60'] = "Покажи връзки към съобщенията/докладите в отворящ се прозорец";
				t['61'] = "Покажи \"Изтрий всички\" таблица в страницата с докладите";
				t['62'] = "Покажи \"Изпрати лично съобщение\" икона за мен също";
				t['63'] = "Покажи TB3 Разширен доклад на битки";
				t['64'] = "Покажи детайли в докладите";
				t['65'] = "Разрешена промяна на цвета<br>(Default = Empty)";
				t['66'] = "Цвят за максимално ниво<br>(Default = Empty)";
				t['67'] = "Невъзможна смяна на цвета<br>(Default = Empty)";
				t['68'] = "Смяна на цвета през NPC<br>(Default = Empty)";
				t['69'] = "Ниво на LOG<br>САМО ЗА ПРОГРАМИСТИ<br>(Default = 0)";
				t['82.L'] = "Заключи отметките (Скрий изтриване, местене нагоре, местене на долу на иконите)";
				t['82.U'] = "Отключи отметките (Покажи изтриване, местене нагоре, местене на долу на иконите)";
				t['U.2'] = "Раса";
				t['U.3'] = "Име на вашата столица<br>Посети твоя профил за обновяване";
				t['U.6'] = "Координати на твоята столица<br>Посети твоя профил за обновяване";
				t['SIM'] = "Симулатор на битки";
				t['QSURE'] = "Сигурни ли сте?";
				t['LOSS'] = "Загуба";
				t['PROFIT'] = "Печалба";
				t['EXTAV'] = "Възможно надстрояване";
				t['PLAYER'] = "Играч";
				t['VILLAGE'] = "Село";
				t['POPULATION'] = "Популация";
				t['COORDS'] = "Координати";
				t['MAPTBACTS'] = "Действия";
				t['SAVED'] = "Промените са запазени";
				t['YOUNEED'] = "Имате нужда от";
				t['TODAY'] = "днес";
				t['TOMORROW'] = "утре";
				t['DAYAFTERTOM'] = "в други ден";
				t['BN_GID12'] = "Ковачница за оръжия";
				t['BN_GID13'] = "Ковачница за брони";
				t['BN_GID16'] = "Сборен пункт";
				t['BN_GID17'] = "Пазар";
				t['BN_GID19'] = "Казарма";
				t['BN_GID20'] = "Конюшня";
				t['BN_GID21'] = "Работилница";
				t['BN_GID22'] = "Академия";
				t['BN_GID24'] = "Кметство";
				t['BN_GID25'] = "Резиденция";
				t['BN_GID26'] = "Дворец";
				t['BN_GID27'] = "Съкровишница";
				t['BN_GID37'] = "Таверна";
				t['SENDRES'] = "Изпрати ресурси";
				t['BUY'] = "Купи";
				t['SELL'] = "Продай";
				t['SENDIGM'] = "Изпрати лично съобщение";
				t['LISTO'] = "Възможно";
				t['ON'] = "на";
				t['AT'] = "в";
				t['EFICIENCIA'] = "Способност";
				t['NEVER'] = "Никога";
				t['ALDEAS'] = "Село(а)";
				t['TIEMPO'] = "Време";
				t['OFREZCO'] = "Предлагане";
				t['BUSCO'] = "Търсене";
				t['TIPO'] = "Вид";
				t['DISPONIBLE'] = "Само възможните";
				t['CUALQUIERA'] = "Всички";
				t['YES'] = "Да";
				t['NO'] = "Не";
				t['LOGIN'] = "Влизане";
				t['MARCADORES'] = "Отметки";
				t['ANYADIR'] = "Прибавяне";
				t['UBU'] = "Нова отметка URL";
				t['UBT'] = "Нова отметка Текст";
				t['DEL'] = "Изтриване";
				t['MAPA'] = "Карта";
				t['MAXTIME'] = "Максимално време";
				t['ARCHIVE'] = "Архив";
				t['SUMMARY'] = "Общо";
				t['TROPAS'] = "Войски";
				t['CHKSCRV'] = "Обнови TBeyond";
				t['ACTUALIZAR'] = "Обнови информацията за селото";
				t['VENTAS'] = "Запази офертите";
				t['MAPSCAN'] = "Сканирай картата";
				t['BIC'] = "Покажи допълнителни икони";
				t['SAVE'] = "Възможно:";
				t['AT2'] = "Подкрепление";
				t['AT3'] = "Атака: Нормална";
				t['AT4'] = "Атака: Набег";
				t['NBSA'] = "Автоматично";
				t['NBSN'] = "Нормално (малко)";
				t['NBSB'] = "Широк екран (голямо)";
				t['NBHAX'] = "Автоматично уголеми височината";
				t['NBHK'] = "Стандартна височина";
				t['NPCSAVETIME'] = "Запази: ";
				t['TOTALTROOPS'] = "Общо войски за селото";
				t['SELECTALLTROOPS'] = "Маркирай всички войски";
				t['PARTY'] = "Празненства";
				t['CPPERDAY'] = "КР/ден";
				t['SLOT'] = "Слот";
				t['TOTAL'] = "Общо";
				t['SELECTSCOUT'] = "Избери шпионин";
				t['SELECTFAKE'] = "Избери фалшив";
				t['ALL'] = "Всички";
				t['SH2'] = "В цветните полета можеш да поставяш:<br>- orange или red или green, и т.н.<br>- HEX цвят пример #004523<br>- остави празно за стандартния цвят";
				t['SOREP'] = "Покажи оригиналния доклад";
				t['WSIMO1'] = "Вътрешно (доставено от играта)";
				t['WSIMO2'] = "Външно (доставено от kirilloid.ru)";
				t['NONEWVER'] = "Имате последната възможна версия";
				t['BVER'] = "Вие разполагате с бета версия";
				t['NVERAV'] = "Има нова версия на скрипта";
				t['UPDSCR'] = "Обнови версията на скрипта сега ?";
				t['CHECKUPDATE'] = "Проверка за обновявания.<br>Моля изчакайте...";
				t['AVPPV'] = "Средна популация за селото";
				t['AVPPP'] = "Средна популация за играч";
				t['MAX'] = "Максимално";
				t['TOTTRTR'] = "Общо тренирани единици";
				t['TB3SL'] = "$1 Настройка";
				t['UPDALLV'] = "Обнови за всички села. ИЗПОЛЗВАЙ С МАКСИМАЛНО ВНИМАНИЕ ЗА ДА НЕ БЪДЕШ НАКАЗАН !";
				t['LARGEMAP'] = "Голяма карта";
				t['USETHEMPR'] = "Използвай ги (пропорционално)";
				t['USETHEMEQ'] = "Използвай ги (по равно)";
				t['GSRVT'] = "Сървър на играта";
				t['ACCINFO'] = "Информация за акаунта";
				t['NBO'] = "Бележник";
				t['MNUL'] = "Меню от лявата страна";
				t['STAT'] = "Статистика";
				t['RESF'] = "Ресурсни полета";
				t['VLC'] = "Мегдан";
				t['MAPO'] = "Опции на картата";
				t['COLO'] = "Опции за цвета";
				t['DBGO'] = "Debug опции";
				t['NOW'] = "Сега";
				t['CLOSE'] = "Затвори";
				t['USETHEM1H'] = "Използвай ги (1 часова продукция)";
				t['OVERVIEW'] = "Общ изглед";
				t['FORUM'] = "Форум";
				t['ATTACKS'] = "Атаки";
				t['NEWS'] = "Новини";
				t['ADDCRTPAGE'] = "Добави текущо";
				t['SCRPURL'] = "TBeyond страница";
				t['SPACER'] = "Разстояния";
				t['MEREO'] = "Съобщения & Доклади";
				t['ATTABLES'] = "Таблица на войските";
				t['MTW'] = "Налично";
				t['MTX'] = "В излишък";
				t['MTC'] = "Текущ товар";
				t['ALFL'] = "Връзка към форум<br>(Остави празно за вътрешния форум)";
				t['MTCL'] = "Изчисти всички";
				t['CKSORT'] = "Натисни за сортиране";
				t['MIN'] = "Минимално";
				t['SVGL'] = "Разпределяне между селата";
				t['VGL'] = "Списък на селата";
				t['UPDATEPOP'] = "Обнови популацията";
				t['EDIT'] = "Промяна";
				t['NPCO'] = "NPC опции за помощ";
				t['NEWVILLAGEAV'] = "Дата/Час";
				t['TIMEUNTIL'] = "Време за изчакване";
				t['CENTERMAP'] = "Карта";
				t['SENDTROOPS'] = "Изпрати войски";
				t['UPGTB'] = "Ресурсни полета/сгради таблица";
				t['RBTT'] = "Лента на ресурсите";
				t['USE'] = "Използвай";
				t['RESIDUE'] = "Остатък ако построите ";
				t['RESOURCES'] = "Ресурси";
				t['SH1'] = "Отвори твоя профил за автоматично намиране на столица/координати<br>Построй казарма за автоматично засичане на расата и после отвори мегдана";
				t['CROPFINDER'] = "Търсене на поля";
				t['VGL2'] = "Списък на селата";
				t['112'] = "Покажи разстоянието & времето";
				t['114'] = "КР/ден";
				break;
			case 'br':
				t['1'] = "Travian v2.x server";
				t['4'] = "Mercado";
				t['5'] = "Ponto de encontro/Quartel/Oficina/Cavalaria";
				t['6'] = "Edifício Principaç/Mansão do Herói/Fábrica de Armaduras/Ferreiro";
				t['8'] = "Aliança";
				t['9'] = "Exibir links adicionais no menu esquerdo?<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['12'] = "Mostrar 'dorf1.php' and 'dorf2.php' links";
				t['20'] = "Exibir favoritos";
				t['22'] = "Exibir bloco de anotações";
				t['24'] = "Tamanho do bloco de anotações";
				t['25'] = "Altura do bloco de anotações";
				t['37'] = "Exibir recursos disponíveis para elevar";
				t['38'] = "Exibir cores nos recursos";
				t['41'] = "Exibir construções disponíveis para elevar";
				t['43'] = "Exibir níveis de construção";
				t['44'] = "Exibir cores nos edifícios";
				t['48'] = "Number of offer pages to preload<br>while on the 'Market => Buy' page<br>(Default = 1)";
				t['49'] = "Ação padrão do Ponto de Encontro";
				t['50'] = "Nº de tropas espiãs \"Select scout\" fuction";
				t['53'] = "Mostrar informações de tropas";
				t['57'] = "Exibir distâncias e tempos";
				t['59'] = "Número de mensagens/relatórios por página<br>(Default = 1)";
				t['65'] = "Cores disponíveis<br>(Default = Empty)";
				t['66'] = "Cor de nível máximo<br>(Default = Empty)";
				t['67'] = "Cor de não disponível<br>(Default = Empty)";
				t['68'] = "Cor de atualização via NPC<br>(Default = Empty)";
				t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
				t['82.L'] = "Fechar favoritos (ocultar ícones de edição)";
				t['82.U'] = "Abrir Favoritos (Mostrar ícones de edição)";
				t['U.2'] = "Raça";
				t['U.3'] = "Nome da sua capital<br>Visite seu perfil";
				t['U.6'] = "Coordenadas da sua capital<br>Visite seu perfil";
				t['SIM'] = "Simulador de Combate";
				t['QSURE'] = "Tem certeza?";
				t['LOSS'] = "Perdas";
				t['PROFIT'] = "Lucro";
				t['EXTAV'] = "Recursos suficientes";
				t['PLAYER'] = "Jogador";
				t['VILLAGE'] = "Aldeia";
				t['POPULATION'] = "População";
				t['COORDS'] = "Coords";
				t['MAPTBACTS'] = "Ações";
				t['SAVED'] = "Configurações salvas";
				t['YOUNEED'] = "Você precisa";
				t['TODAY'] = "hoje";
				t['TOMORROW'] = "amanhã";
				t['DAYAFTERTOM'] = "depois de amanhã";
				t['BN_GID12'] = "Ferreiro";
				t['BN_GID13'] = "Fábrica de Armaduras";
				t['BN_GID16'] = "Enviar tropas";
				t['BN_GID17'] = "Mercado";
				t['BN_GID19'] = "Quartel";
				t['BN_GID20'] = "Cavalaria";
				t['BN_GID21'] = "Oficina";
				t['BN_GID24'] = "Edifício Principal";
				t['BN_GID37'] = "Mansão do Herói";
				t['SENDRES'] = "Enviar recursos";
				t['BUY'] = "Comprar";
				t['SELL'] = "Vender";
				t['SENDIGM'] = "Enviar IGM";
				t['LISTO'] = "Disponível";
				t['ON'] = "em";
				t['AT'] = "as";
				t['EFICIENCIA'] = "Eficiência";
				t['NEVER'] = "Nunca";
				t['ALDEAS'] = "Aldeias";
				t['TIEMPO'] = "Tempo";
				t['OFREZCO'] = "Oferecendo";
				t['BUSCO'] = "Procurando";
				t['TIPO'] = "Tipo";
				t['DISPONIBLE'] = "Somente disponível?";
				t['CUALQUIERA'] = "Qualquer";
				t['YES'] = "Sim";
				t['NO'] = "Não";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Favoritos";
				t['ANYADIR'] = "Adicionar";
				t['UBU'] = "URL do novo favorito";
				t['UBT'] = "Texto do novo favorito";
				t['DEL'] = "Deletar";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Tempo máximo";
				t['ARCHIVE'] = "Arquivo";
				t['SUMMARY'] = "Sumário";
				t['TROPAS'] = "Tropas";
				t['CHKSCRV'] = "Atualizar TBeyond";
				t['ACTUALIZAR'] = "Atualizar informação da aldeia";
				t['VENTAS'] = "Ofertas salvas";
				t['MAPSCAN'] = "Analisar mapa";
				t['BIC'] = "Exibir ícones adicionais";
				t['SAVE'] = "Salvo";
				t['AT2'] = "Reforço";
				t['AT3'] = "Ataque: Normal";
				t['AT4'] = "Ataque: Assalto";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normal (pequeno)";
				t['NBSB'] = "Grande";
				t['NBHAX'] = "Altura automática";
				t['NBHK'] = "Altura padrão";
				t['NPCSAVETIME'] = "Salvo: ";
				t['TOTALTROOPS'] = "Total de tropas da aldeia";
				t['SELECTALLTROOPS'] = "Selecionar todas as tropas";
				t['PARTY'] = "Festividades";
				t['CPPERDAY'] = "CP/dia";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Enviar espiões";
				t['SELECTFAKE'] = "Enviar fakes";
				t['ALL'] = "Todos";
				t['SOREP'] = "Exibir relatório original";
				t['WSIMO1'] = "Interno (provided by the game)";
				t['WSIMO2'] = "Externo (provided by kirilloid.ru)";
				t['NONEWVER'] = "Você tem a última versão instalada.";
				t['BVER'] = "VOcê tem uma versão beta.";
				t['NVERAV'] = "Uma nova versão do script foi encontrada";
				t['UPDSCR'] = "Atualizar script agora ?";
				t['CHECKUPDATE'] = "Checando novas atualizações.<br>Aguarde...";
				t['AVPPV'] = "Média de população por aldeia";
				t['AVPPP'] = "Média de população por jogadores";
				t['MAX'] = "Máximo";
				t['TOTTRTR'] = "Total de tropas sendo treinadas";
				t['TB3SL'] = "Configurações do Script";
				t['UPDALLV'] = "Atualizar todas as aldeias.  UTILIZAR COM O MÁXIMO DE CAUTELA, ESSA FUNÇÃO PODE FAZER SUA CONTA SER BANIDA DO JOGO !";
				t['LARGEMAP'] = "Mapa maior";
				t['USETHEMPR'] = "Usar tudo (proporcional)";
				t['USETHEMEQ'] = "Usar tudo (equilibrar)";
				t['NBO'] = "Bloco de anotações";
				t['MNUL'] = "Menu on the left side";
				t['STAT'] = "Statistics";
				t['RESF'] = "Resource fields";
				t['VLC'] = "Centro da Aldeia";
				t['MAPO'] = "Opções de Mapa";
				t['COLO'] = "Opções de Cor";
				t['DBGO'] = "Opções de DEBUG";
				t['NOW'] = "Agora";
				t['CLOSE'] = "Fechar";
				t['USETHEM1H'] = "Usar tudo (1 hora de produção)";
				t['OVERVIEW'] = "Visão geral";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "LOG de ataques";
				t['NEWS'] = "Notícias";
				t['ADDCRTPAGE'] = "Adicionar atual";
				t['SCRPURL'] = "TBeyond page";
				t['SPACER'] = "Separador";
				t['MEREO'] = "Mensagens e Relatórios";
				t['ATTABLES'] = "Tabela de tropas";
				t['MTW'] = "Capacidade desperdiçada";
				t['MTX'] = "Capacidade excedida";
				t['MTC'] = "Capacidade utilizada";
				t['ALFL'] = "Link para fórum externo<br>(deixe vazio o fórum interno)";
				t['MTCL'] = "Apagar tudo";
				t['CKSORT'] = "Click to sort";
				t['MIN'] = "Mínimo";
				t['SVGL'] = "Shared among villages";
				t['VGL'] = "Lista de Aldeias";
				t['UPDATEPOP'] = "Atualizar habitantes";
				t['USE'] = "Usar";
				t['RESIDUE'] = "Se construir, sobra";
				t['RESOURCES'] = "Recursos";
				t['CROPFINDER'] = "Localizador de CROPs";
				t['VGL2'] = "Lista de Aldeias";
				t['112'] = "Exibir distâncias e tempos";
				t['114'] = "CP/dia";
				break;
			case 'cn':
				t['1'] = "Travian v2.x 服务器";
				t['2'] = "移除广告并回复服务器时间";
				t['3'] = "修正古罗马步兵及方阵兵的负载量（仅适用于部分德服）";
				t['4'] = "市场";
				t['5'] = "集结点/兵营/马厩/工场";
				t['6'] = "市政厅/英雄园/铁匠铺/军械库";
				t['7'] = "皇宫/行宫/研发所/宝库";
				t['8'] = "联盟";
				t['9'] = "在左边的选单显示更多链接<br>(Travilog,Traviantoolbox,TravMap,World Analyser等等.)";
				t['10'] = "左边选单的战斗模拟器链接";
				t['12'] = "显示'dorf1.php'和'dorf2.php'的链接";
				t['13'] = "在村庄旁 显示 \"居中地图\"的图示";
				t['16'] = "在村庄旁显示粮产余额";
				t['17'] = "在村庄旁显示村庄人口";
				t['18'] = "在悬浮窗显示额外的村庄列表（两列，便于多村切换）";
				t['19'] = "在村庄列表中显示升级、建造及部队移动的信息";
				t['20'] = "显示书签";
				t['21'] = "在悬浮窗显示自定义书签";
				t['22'] = "显示笔记栏";
				t['23'] = "在悬浮窗显示笔记栏";
				t['24'] = "笔记栏大小";
				t['25'] = "笔记栏高度";
				t['26'] = "显示NPC交易的链接和计算";
				t['27'] = "所选用的世界分析";
				t['28'] = "在玩家名称右边显示分析链接";
				t['29'] = "选取地图分析网站";
				t['30'] = "在玩家名称右侧显示分析链接";
				t['31'] = "在联盟名称右侧显示分析链接";
				t['32'] = "显示搜索条";
				t['33'] = "在悬浮窗中显示搜索条";
				t['34'] = "在升级信息中显示文明度变化";
				t['35'] = "在升级信息中显示粮耗变化";
				t['36'] = "在升级列表中显示已存资源及升级后剩余资源";
				t['37'] = "显示资源田升级信息";
				t['38'] = "显示资源田等级颜色";
				t['39'] = "显示仓位统计表";
				t['40'] = "在悬浮窗显示仓位统计表";
				t['41'] = "显示建筑物升级信息";
				t['42'] = "按名称排列建筑升级表（按英文）";
				t['43'] = "显示建筑物等级";
				t['44'] = "显示建筑物等级颜色";
				t['45'] = "闪烁显示正在升级的建筑物等级";
				t['46'] = "运向本村的资源和商队显示附加信息";
				t['48'] = "页数预先加载<br>在 '市场 => 买入' 页面中<br>(默认 = 1 或 空白; 最多 = 5)";
				t['49'] = "集结点的默认行动";
				t['50'] = "利用\"选择侦察兵\"时<br>所派出侦察兵的数量";
				t['53'] = "快速显示士兵数据";
				t['54'] = "在tooltip中显示距离和时间";
				t['56'] = "当鼠标移到时<br>显示村庄种类或绿洲数据";
				t['57'] = "显示距离及时间";
				t['58'] = "在\"karte.php\"显示 玩家/村庄/绿洲 信息";
				t['59'] = "在讯息和报告的页面中<br>预先加载的页数<br>(默认 = 1 或 空白; 最多 = 5)";
				t['60'] = "使用弹出窗口显示报告和消息";
				t['61'] = "在报告页面显示 \"全删除\"的选项";
				t['62'] = "显示 发IGM给自己的图示";
				t['63'] = "显示TB3的强化战报信息";
				t['64'] = "显示战报的详细数据";
				t['65'] = "已可升级的颜色<br>(默认 = 空白)";
				t['66'] = "已达最高等级的颜色<br>(默认 = 空白)";
				t['67'] = "不可升级的颜色<br>(默认 = 空白)";
				t['68'] = "可利用npc交易来升级的颜色<br>(默认 = 空白)";
				t['69'] = "控制台日志等级<br>只适用于程序开发员 或 BUG调试<br>(默认 = 0 or 空白)";
				t['82.L'] = "锁定书签 (隐藏 删除, 移上, 移下的图示)";
				t['82.U'] = "解锁书签 (显示 删除, 移上, 移下的图示)";
				t['U.2'] = "种族";
				t['U.3'] = "主村名称<br>请浏览自己的个人资料来进行自动更新，不要自己修改此栏";
				t['U.6'] = "主村坐标<br>请浏览自己的个人资料来进行自动更新，不要自己修改此栏";
				t['SIM'] = "战斗模拟器";
				t['QSURE'] = "你确定吗?";
				t['LOSS'] = "损失";
				t['PROFIT'] = "获益";
				t['EXTAV'] = "可以升级!";
				t['PLAYER'] = "玩家";
				t['VILLAGE'] = "村庄";
				t['POPULATION'] = "人口";
				t['COORDS'] = "坐标";
				t['MAPTBACTS'] = "行动";
				t['SAVED'] = "已保存";
				t['YOUNEED'] = "您要";
				t['TODAY'] = "今天";
				t['TOMORROW'] = "明天";
				t['DAYAFTERTOM'] = "后天";
				t['BN_GID12'] = "铁匠铺";
				t['BN_GID13'] = "军械库";
				t['BN_GID16'] = "集结点";
				t['BN_GID17'] = "市场";
				t['BN_GID19'] = "兵营";
				t['BN_GID20'] = "马厩";
				t['BN_GID21'] = "工场";
				t['BN_GID22'] = "研发所";
				t['BN_GID24'] = "市政厅";
				t['BN_GID25'] = "行宫";
				t['BN_GID26'] = "皇宫";
				t['BN_GID27'] = "宝库";
				t['BN_GID37'] = "英雄园";
				t['SENDRES'] = "运送资源";
				t['BUY'] = "买";
				t['SELL'] = "卖";
				t['SENDIGM'] = "发送IGM";
				t['LISTO'] = "需要等到";
				t['ON'] = "-";
				t['AT'] = "-";
				t['EFICIENCIA'] = "效率";
				t['NEVER'] = "仓位不足，无法实现";
				t['ALDEAS'] = "村庄";
				t['TIEMPO'] = "时间";
				t['OFREZCO'] = "提供";
				t['BUSCO'] = "搜索";
				t['TIPO'] = "比例";
				t['DISPONIBLE'] = "忽略过少物资";
				t['CUALQUIERA'] = "所有";
				t['YES'] = "是";
				t['NO'] = "否";
				t['LOGIN'] = "登入";
				t['MARCADORES'] = "书签";
				t['ANYADIR'] = "加入";
				t['UBU'] = "新书签网址";
				t['UBT'] = "新书签标题(只限英文及数字)";
				t['DEL'] = "删除";
				t['MAPA'] = "TravMap";
				t['MAXTIME'] = "最大运输时间";
				t['ARCHIVE'] = "保存";
				t['SUMMARY'] = "概要";
				t['TROPAS'] = "军队";
				t['CHKSCRV'] = "检查更新";
				t['ACTUALIZAR'] = "更新此村庄的数据";
				t['VENTAS'] = "卖出纪录";
				t['MAPSCAN'] = "扫描此地图";
				t['BIC'] = "显示更多快捷图标";
				t['SAVE'] = "保存";
				t['AT2'] = "增援";
				t['AT3'] = "攻击：普通";
				t['AT4'] = "攻击：抢夺";
				t['NBSA'] = "自动";
				t['NBSN'] = "普通 (细)";
				t['NBSB'] = "大画面 (大)";
				t['NBHAX'] = "高度自动伸展";
				t['NBHK'] = "基本高度";
				t['NPCSAVETIME'] = "资源满足需时：";
				t['TOTALTROOPS'] = "此村庄的士兵总数";
				t['SELECTALLTROOPS'] = "选择全部士兵";
				t['PARTY'] = "活动";
				t['CPPERDAY'] = "文明点（每天）";
				t['SLOT'] = "扩张";
				t['TOTAL'] = "总数";
				t['SELECTSCOUT'] = "选择侦察兵";
				t['SELECTFAKE'] = "选择佯攻";
				t['ALL'] = "全部";
				t['SH2'] = "在字段中，你可输入：<br>- green 或 red 或 orange, 等等...<br>- 也可输入颜色的16进制码，如 #004523<br>- 也可以什么也不填来用默认颜色";
				t['SOREP'] = "显示原始报告";
				t['WSIMO1'] = "内置 (由游戏所提供)";
				t['WSIMO2'] = "外部 (由kirilloid.ru提供)";
				t['NONEWVER'] = "你正在使用最新版本";
				t['NVERAV'] = "已有新版本插件推出了，";
				t['UPDSCR'] = "要进行更新吗？";
				t['CHECKUPDATE'] = "正在检查插件更新，请等等...";
				t['AVPPV'] = "平均每村人口";
				t['AVPPP'] = "平均每玩家人口";
				t['MAX'] = "最多";
				t['TOTTRTR'] = "所有正在训练的士兵";
				t['TB3SL'] = "TB设置";
				t['UPDALLV'] = "更新所有村庄。(有可能导致账号被锁)";
				t['LARGEMAP'] = "大地图";
				t['USETHEMPR'] = "派出所有商人 (按资源比例分配)";
				t['USETHEMEQ'] = "派出所有商人 (平均分配)";
				t['GSRVT'] = "游戏服务器";
				t['ACCINFO'] = "个人资料";
				t['NBO'] = "笔记栏";
				t['MNUL'] = "左边选单";
				t['STAT'] = "统计";
				t['RESF'] = "村落概貌";
				t['VLC'] = "村庄中心";
				t['MAPO'] = "地图设定";
				t['COLO'] = "颜色设定";
				t['DBGO'] = "调试设定";
				t['NOW'] = "现在";
				t['CLOSE'] = "关闭";
				t['USETHEM1H'] = "派出所有商人 (资源1小时产量)";
				t['OVERVIEW'] = "概要";
				t['FORUM'] = "论坛";
				t['ATTACKS'] = "攻击";
				t['NEWS'] = "新闻";
				t['ADDCRTPAGE'] = "加入本页";
				t['SCRPURL'] = "TB脚本支持";
				t['SPACER'] = "分隔线";
				t['MEREO'] = "讯息&报告";
				t['ATTABLES'] = "军队的列表";
				t['MTW'] = "浪费负载";
				t['MTX'] = "超载量";
				t['MTC'] = "现时总搬运数";
				t['ALFL'] = "链接到外置论坛<br>(留空来使用内置论坛)";
				t['MTCL'] = "全部清除";
				t['CKSORT'] = "点击来排序";
				t['MIN'] = "最少";
				t['SVGL'] = "分享记录到其村庄";
				t['VGL'] = "村庄列表";
				t['UPDATEPOP'] = "更新人口数据";
				t['EDIT'] = "修改";
				t['NPCO'] = "NPC交易选项";
				t['NEWVILLAGEAV'] = "日期";
				t['TIMEUNTIL'] = "需要等待的时间";
				t['CENTERMAP'] = "此村庄居中的地图";
				t['SENDTROOPS'] = "出兵";
				t['UPGTB'] = "资源田和建筑物的升级信息表";
				t['RBTT'] = "仓位统计表";
				t['USE'] = "送出";
				t['RESIDUE'] = "升级后剩余资源";
				t['RESOURCES'] = "升级时已存资源";
				t['CROPFINDER'] = "找田助手";
				t['VGL2'] = "村庄列表";
				t['112'] = "显示距离及时间";
				t['114'] = "文明点（每天）";
				break;
			case 'cz':
				t['1'] = "Travian verze 2.x";
				t['2'] = "Odstranit reklamní bannery";
				t['3'] = "Vynutit výpočty kapacit Legionářů a Falang jako v T3.1<br>(pro smíšené servery T3.1 & T3.5)";
				t['4'] = "Tržiště";
				t['5'] = "Shromaždiště/Kasárny/Dílny/Stáje";
				t['6'] = "Radnice/Hrdinský dvůr/Zbrojnice/Kovárna";
				t['7'] = "Palác/Rezidence/Akademie/Pokladnice";
				t['8'] = "Aliance";
				t['9'] = "Zobrazit odkazy v levém menu<br>(Traviantoolbox, World Analyser, Travilog, Mapa atd.)";
				t['10'] = "Bitevní simulátor:<br>(levé menu)";
				t['11'] = "Odkaz na server pro zveřejňování hlášení";
				t['12'] = "Zobrazit odkazy 'dorf1.php' a 'dorf2.php'";
				t['13'] = "Zobrazit ikonu 'Vycentruj mapu na tuto vesnici'";
				t['15'] = "Zobrazit produkci dřeva, hlíny, železa za hodinu v seznamu vesnic";
				t['16'] = "Zobrazit produkci obilí v seznamu vesnic";
				t['17'] = "Zobrazit populaci v seznamu vesnic";
				t['18'] = "Zobrazit seznam vesnic v plovoucím okne";
				t['19'] = "Zobrazit informace o budovách ve výstavbě a pohybu jednotek";
				t['20'] = "Zobrazit záložky";
				t['21'] = "Zobrazit 'záložky' jako okno";
				t['22'] = "Zobrazit poznámkový blok";
				t['23'] = "Zobrazit 'poznámkový blok' jako okno";
				t['24'] = "Velikost poznámkového bloku";
				t['25'] = "Výška poznámkového bloku";
				t['26'] = "Zobrazit NPC pomocníky (výpočty a odkazy)";
				t['27'] = "Analyser:";
				t['28'] = "Zobrazit odkaz na analyser";
				t['29'] = "Mapy k použití";
				t['30'] = "Zobrazit odkazy na mapu pro hráče";
				t['31'] = "Zobrazit odkazy na mapu pro aliance";
				t['32'] = "Zobrazit \"pole vyhledávaní\"";
				t['33'] = "Zobrazit pole vyhledávaní jako plovouci okno";
				t['34'] = "Zobrazit KB/den v tabulce staveb";
				t['35'] = "Zobrazit spotřebu obilí v tabulce staveb";
				t['36'] = "Zobrazit \"Do/Zbývá\" v kalkulaci ";
				t['37'] = "Zobrazit tabulku rozšíření polí";
				t['38'] = "Obarvit úrovně polí";
				t['39'] = "Zobrazit tabulku 'suroviny'";
				t['40'] = "Zobrazit tabulku 'suroviny' jako okno";
				t['41'] = "Zobrazit tabulku rozšíření budov";
				t['42'] = "Uspořádat budovy podle jména";
				t['43'] = "Zobrazit úrovně budov";
				t['44'] = "Obarvit úrovně budov";
				t['45'] = "Zobrazit blikající levely pro budovy, které se staví";
				t['46'] = "Zobrazit další informace o každém přicházejícím obchodníku  ";
				t['47'] = "Zobrazit poslední transport";
				t['48'] = "Počet kontrolovaných stránek<br>na 'Tržiště => Koupit'<br>(Výchozí= 1)";
				t['49'] = "Výchozí vojenská akce";
				t['50'] = "Počet špehů při použití funkce poslat špehy";
				t['51'] = "Zobrazit poslední útok";
				t['52'] = "Zobrazit/použít souřednice posledního útoku";
				t['53'] = "Informace o jednotkách při najetí myší";
				t['54'] = "Zobrazit vzdálenosti a časy při najetí myší";
				t['55'] = "Automaticky vyplnit interní bojový simulátor dostupnými jednotkami";
				t['56'] = "Zobrazit typ vesnic<br>při najetí myší na mapu";
				t['57'] = "Zobrazit vzdálenosti a časy";
				t['58'] = "Zobrazit tabulku hráčů/vesnic/oáz";
				t['59'] = "Počet stránek zpráv/reportů k načtení<br>(Výchozí= 1)";
				t['60'] = "Zobrazit odkaz pro otevření zprávy v novém okně.";
				t['61'] = "Zobrazit tabulku \"Smazat vše\" na stránce s reporty";
				t['62'] = "Zobrazit \"Poslat zprávu\" i pro mě";
				t['63'] = "Zobrazit rozšíření TB3 výpis bitvy";
				t['64'] = "Zobrazit detaily ve statistice reportu";
				t['65'] = "Možnost vylepšení (barva)<br>(Nezadáno = Výchozí)";
				t['66'] = "Maximální úroveň (barva)<br>(Nezadáno = Výchozí)";
				t['67'] = "Vylepšení nemožné (barva)<br>(Nezadáno = Výchozí)";
				t['68'] = "Vylepšení pomocí NPC (barva)<br>(Nezadáno = Výchozí)";
				t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Výchozí= 0)";
				t['82.L'] = "Uzamknout záložky (skryje ikony smazat a přesunout)";
				t['82.U'] = "Odemknout záložky (zobrazí ikony smazat a přesunout)";
				t['85'] = "Zobrazit ikonu \"Poslat vojáky/suroviny\"";
				t['87'] = "Pamatovat poslední 1x/2x/3x nastavení obchodu";
				t['91'] = "Přizpůsobit seznam vesnic";
				t['92.L'] = "Zamknout seznam vesnic (Rozmístění)";
				t['92.U'] = "Odemknout seznam vesnic (Rozmístění)";
				t['U.2'] = "Národ";
				t['U.3'] = "Jméno hlavní vesnice<br><b>Pro aktualizaci navštiv svůj profil</b>";
				t['U.6'] = "Souřadnice hlavní vesnice<br><b>Pro aktualizaci navštiv svůj profil</b>";
				t['SIM'] = "Bitevní simulátor";
				t['QSURE'] = "Jsi si jistý?";
				t['LOSS'] = "Materiální ztráta";
				t['PROFIT'] = "Výnos";
				t['EXTAV'] = "Rozšířit";
				t['PLAYER'] = "Hráč";
				t['VILLAGE'] = "Vesnice";
				t['POPULATION'] = "Populace";
				t['COORDS'] = "Souřadnice";
				t['MAPTBACTS'] = "Akce";
				t['SAVED'] = "Uloženo";
				t['YOUNEED'] = "Potřebuješ:";
				t['TODAY'] = "dnes";
				t['TOMORROW'] = "zítra";
				t['DAYAFTERTOM'] = "pozítří";
				t['BN_GID12'] = "Kovárna";
				t['BN_GID13'] = "Zbrojnice";
				t['BN_GID16'] = "Shromaždiště";
				t['BN_GID17'] = "Tržiště";
				t['BN_GID19'] = "Kasárny";
				t['BN_GID20'] = "Stáje";
				t['BN_GID21'] = "Dílna";
				t['BN_GID22'] = "Akademie";
				t['BN_GID24'] = "Radnice";
				t['BN_GID25'] = "Rezidence";
				t['BN_GID26'] = "Palác";
				t['BN_GID27'] = "Pokladnice";
				t['BN_GID37'] = "Hrdinský dvůr";
				t['SENDRES'] = "Poslat suroviny";
				t['BUY'] = "Koupit";
				t['SELL'] = "Prodat";
				t['SENDIGM'] = "Poslat zprávu";
				t['LISTO'] = "Dostupné";
				t['ON'] = "v";
				t['AT'] = "v";
				t['EFICIENCIA'] = "Efektivita";
				t['NEVER'] = "Nikdy";
				t['ALDEAS'] = "Vesnic";
				t['TIEMPO'] = "Čas";
				t['OFREZCO'] = "Nabízí";
				t['BUSCO'] = "Hledá";
				t['TIPO'] = "Poměr";
				t['DISPONIBLE'] = "Pouze dostupné";
				t['CUALQUIERA'] = "Cokoli";
				t['YES'] = "Ano";
				t['NO'] = "Ne";
				t['LOGIN'] = "Přihlášení";
				t['MARCADORES'] = "Záložky";
				t['ANYADIR'] = "Přidat";
				t['UBU'] = "URL odkazu";
				t['UBT'] = "Název záložky";
				t['DEL'] = "Odstranit";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Maximální čas";
				t['ARCHIVE'] = "Archiv";
				t['SUMMARY'] = "Souhrn";
				t['TROPAS'] = "Vojsko";
				t['CHKSCRV'] = "Aktualizuj TBeyond";
				t['ACTUALIZAR'] = "Aktualizovat informace o vesnici";
				t['VENTAS'] = "Nabídky tržiště (neměnit)";
				t['MAPSCAN'] = "Prohledat mapu";
				t['BIC'] = "Zobrazení rozšiřujících ikon";
				t['SAVE'] = "Uložit";
				t['AT2'] = "Podpora";
				t['AT3'] = "Normální";
				t['AT4'] = "Loupež";
				t['NBSA'] = "Automatická";
				t['NBSN'] = "Malý";
				t['NBSB'] = "Velký";
				t['NBHAX'] = "Automatická výška";
				t['NBHK'] = "Výchozí výška";
				t['NPCSAVETIME'] = "Ušetříš: ";
				t['TOTALTROOPS'] = "Všechny jednotky vyrobené ve vesnici";
				t['SELECTALLTROOPS'] = "Všechny jednotky";
				t['PARTY'] = "Slavnosti";
				t['CPPERDAY'] = "KB/den";
				t['SLOT'] = "Sloty";
				t['TOTAL'] = "Celkem";
				t['SELECTSCOUT'] = "Špehy";
				t['SELECTFAKE'] = "Fake";
				t['ALL'] = "Vše";
				t['SH2'] = "Barvy můžeš zadat jako:<br>- <b>green</b> , <b>red</b> nebo <b>orange</b> atd.<br>- HEX kód barvy např. <b>#004523</b><br>- nechat prázdné pro výchozí barvu";
				t['SOREP'] = "Zobrazit originální report";
				t['WSIMO1'] = "Interní (travian.cz)";
				t['WSIMO2'] = "Externí (kirilloid.ru)";
				t['NONEWVER'] = "Máš poslední dostupnou verzi";
				t['BVER'] = "Patrně máš betaverzi";
				t['NVERAV'] = "Je dostupná nová verze";
				t['UPDSCR'] = "Aktualizovat nyní?";
				t['CHECKUPDATE'] = "Kontroluji novou verzi.<br>Prosím čekej...";
				t['AVPPV'] = "Průměrná populace vesnic";
				t['AVPPP'] = "Průměrná populace hráčů";
				t['MAX'] = "Maximum";
				t['TOTTRTR'] = "Celkem jednotek ve výcviku";
				t['TB3SL'] = "Nastavení $1";
				t['UPDALLV'] = "Aktualizovat všechny vesnice. POUŽÍVEJ VELMI OPATRNĚ! MŮŽE VÉST K ZABLOKOVÁNÍ ÚČTU!";
				t['LARGEMAP'] = "Velká mapa";
				t['USETHEMPR'] = "Rozdělit (proportional)";
				t['USETHEMEQ'] = "Rozdělit (equal)";
				t['GSRVT'] = "Herní server";
				t['ACCINFO'] = "Nastavení hráče <b>Čeština: <a href=\"http://www.rypi.cz\">Rypi</a>, JiriK</b>";
				t['NBO'] = "Poznámkový blok";
				t['MNUL'] = "Levá nabídka";
				t['STAT'] = "Statistiky";
				t['RESF'] = "Surovinová pole";
				t['VLC'] = "Centrum vesnice";
				t['MAPO'] = "Nastavení mapy";
				t['COLO'] = "Nastavení barev";
				t['DBGO'] = "Ladící nastavení";
				t['NOW'] = "Teď";
				t['CLOSE'] = "Zavřít";
				t['USETHEM1H'] = "Rozdělit (1 hodinová produkce)";
				t['OVERVIEW'] = "Přehled";
				t['FORUM'] = "Fórum";
				t['ATTACKS'] = "Útoky";
				t['NEWS'] = "Novinky";
				t['ADDCRTPAGE'] = "Přidat aktuální stránku";
				t['SCRPURL'] = "Stránka TBeyond";
				t['SPACER'] = "Oddělovač";
				t['MEREO'] = "Zprávy a Hlášení";
				t['ATTABLES'] = "Přehled jednotek";
				t['MTW'] = "Zbývá";
				t['MTX'] = "Přebývá";
				t['MTC'] = "Současný náklad";
				t['ALFL'] = "Odkaz na externí fórum<br>(nevyplněno = interní fórum)";
				t['MTCL'] = "Vyčistit vše";
				t['CKSORT'] = "Klikni pro seřazení";
				t['MIN'] = "Min";
				t['SVGL'] = "Pro všechny vesnice";
				t['VGL'] = "Seznam vesnic";
				t['UPDATEPOP'] = "Aktualizovat populaci";
				t['EDIT'] = "Upravit";
				t['NPCO'] = "Nastavení NPC pomocníka";
				t['NEWVILLAGEAV'] = "Datum/čas";
				t['TIMEUNTIL'] = "Čas čekání";
				t['CENTERMAP'] = "Vycentruj mapu kolem této vesnice";
				t['SENDTROOPS'] = "Poslat jednotky";
				t['UPGTB'] = "Tabulka vylepšení surovinových polí/budov";
				t['RBTT'] = "Tabulka surovin";
				t['USE'] = "Použít";
				t['RESIDUE'] = "Zbytek po postavení";
				t['RESOURCES'] = "Suroviny";
				t['SH1'] = "Otevři svůj profil pro automatické zjištění hlavní vesnice a souradnic <br> Vybuduj kasárny pro automatické zjištění kmene.";
				t['RESEND'] = "Poslat znovu";
				t['WSI'] = "Bitevní simulátor poskytován hrou";
				t['MTR'] = "Poměr";
				t['USEMTR'] = "Použít v poměre";
				t['MTRMIN'] = "(musí být nejméně $1)";
				t['MTRMAX'] = "(musí být nejvíc $1)";
				t['REP3_TT'] = "Prohrál si jako útočník";
				t['REP4_TT'] = "Vyhrál si jako obránce beze strat";
				t['VLISTUP'] = "Posunout dole";
				t['VLISTDOWN'] = "Posunout dolů";
				t['VLISTSEP'] = "Vložit/odstranit horizontální separátor";
				t['REPTT'] = "Ukázat tento report v samostatním okne";
				t['CROPFINDER'] = "Vyhledávač MC";
				t['VGL2'] = "Seznam vesnic";
				t['112'] = "Zobrazit vzdálenosti a časy";
				t['114'] = "KB/den";
				break;
			case 'de':
				t['1'] = "Travian v2.x Server";
				t['2'] = "Banners entfernen";
				t['3'] = "T3.1 Tragekapazität für Legionär & Phalanx erzwingen<br>(für T3.1 & T3.5 Spieleserver)";
				t['4'] = "Marktplatz";
				t['5'] = "Versammlungsplatz/Kaserne/Stall/Werkstatt";
				t['6'] = "Rathaus/Heldenhof/Rüstungs-/Waffenschmiede";
				t['7'] = "Palast/Residenz/Akademie/Schatzkammer";
				t['8'] = "Allianz";
				t['9'] = "Zusätzliche Links im linken Menü anzeigen<br />(Traviantoolbox, World Analyser, Travilog, Map, usw.)";
				t['10'] = "Option Kampfsimulatorlink";
				t['11'] = "Option Sitelink für das Hochladen der Reports";
				t['12'] = "Zeige die Links 'dorf1.php' und 'dorf2.php' an";
				t['13'] = "Zeige \"Zentriere Karte auf dieses Dorf\" Icon an";
				t['15'] = "Zeige Produktion von Holz, Lehm, Eisen pro Stunde in der Liste der Dörfer an";
				t['16'] = "Zeige effektive Getreide-Produktion in the Liste der D&ouml;fer an";
				t['17'] = "Zeige Anzahl der Einwohner in der Liste der D&ouml;rfer an";
				t['18'] = "Zeige eine zusätzliche Dörferliste (2 Spalten) als Floating-Fenster an";
				t['19'] = "Zeige Informationen über Gebäude die ausgebaut werden und Truppenbewegungen in der Liste der Dörfer";
				t['20'] = "Lesezeichen anzeigen";
				t['21'] = "Zeige 'User Bookmarks' als Floating-Fenster an";
				t['22'] = "Notizblock anzeigen";
				t['23'] = "Zeige 'NoteBlock' als Floating-Fenster an";
				t['24'] = "Grösse Notizblock";
				t['25'] = "Notizblock: Höhe";
				t['26'] = "NPC Assistent Kalkulation/Links anzeigen";
				t['27'] = "Benutze World Analyser";
				t['28'] = "World Analyser Statistiklinks anzeigen";
				t['29'] = "Option Karten-Analyser";
				t['30'] = "Links zur Karte anzeigen - Spieler";
				t['31'] = "Links zur Karte anzeigen - Allianzen";
				t['32'] = "Zeige 'Suche-Bar' an";
				t['33'] = "Zeige 'Suche-Bar' als Floating-Fenster an";
				t['34'] = "Zeige KP/Tag Info in den Upgradetabellen an";
				t['35'] = "Zeige Getreide-Verbrauch in Upgradetabellen an";
				t['36'] = "Zeige 'Am/Rest' Kalkulation in Upgrade/Ausbildungstabellen an";
				t['37'] = "Upgradetabelle f&uuml;r Resifelder anzeigen";
				t['38'] = "Ressilevel Farbcode anzeigen";
				t['39'] = "Zeige die Ressi-Bar an";
				t['40'] = "Zeige 'Ressi-Bar' als Floating-Fenster an";
				t['41'] = "Upgradetabelle f&uuml;r Gebäude anzeigen";
				t['42'] = "Sortiere Gebäude nach Name in der Upgradetabelle";
				t['43'] = "Levels im Dorfzentrum anzeigen";
				t['44'] = "Gebäudelevel Farbcode anzeigen";
				t['45'] = "Blinkende Levels für Gebäude die gerade ausgebaut werden";
				t['46'] = "Zeige zus&auml;tzliche Infos für jede Händlerankunft";
				t['48'] = "Anzahl der Angebotsseiten auf der 'Markt => Kaufen' Seite,<br />die vom Server automatisch runtergeladen werden sollen (Standard = 1)";
				t['49'] = "Standard Aktion Versammlungsplatz";
				t['50'] = "Anzahl der Späher für die \"Späher auswählen\" Funktion";
				t['53'] = "Truppeninformationen anzeigen (in Informations-Boxen)";
				t['54'] = "Zeige Entfernung & Zeiten zu den Dörfern in ToolTips an";
				t['56'] = "Zelltyp auf der Karte anzeigen wenn Mauszeiger &uuml;ber Zelle";
				t['57'] = "Entfernungen & Zeiten anzeigen";
				t['58'] = "Tabelle der Spieler/Dörfer/besetzte Oasen anzeigen";
				t['59'] = "Anzahl der \"Nachrichten & Berichte\" Seiten<br />die vom Server automatisch runtergeladen werden sollen (Standard = 1)";
				t['60'] = "Links um IGMs/KB in Pop-ups zu öffnen anzeigen";
				t['61'] = "\"Alle löschen\" Tabelle auf Berichte Seite anzeigen";
				t['62'] = "Zeige das \"Sende IGM\" Icon auch f&uuml;r mich an";
				t['63'] = "Zeige TB3 erweiterte Kampfreports";
				t['64'] = "Details in Berichte Statistiken anzeigen";
				t['65'] = "Farbe \"Upgrade möglich\"";
				t['66'] = "Farbe \"Max Level\"";
				t['67'] = "Farbe \"Upgrade nicht möglich\"";
				t['68'] = "Farbe \"Upgrade via NPC\"";
				t['69'] = "Log Level Konsole - Nur f&uuml;r Programmierer (Standard = 0)";
				t['82.L'] = "Lesezeichen sperren (Die Icons werden ausgeblendet)";
				t['82.U'] = "Lesezeichen entsperren (Die Icons fürs Löschen und sortieren werden wieder angezeigt)";
				t['U.2'] = "Volk";
				t['U.3'] = "Name des Hauptdorfs";
				t['U.6'] = "Koordinaten des Hauptdorfs";
				t['SIM'] = "Kampfsimulator";
				t['QSURE'] = "Sind Sie sicher?";
				t['LOSS'] = "Rohstoff-Verluste";
				t['PROFIT'] = "Rentabilit&auml;t";
				t['EXTAV'] = "Ausbau m&ouml;glich";
				t['PLAYER'] = "Spieler";
				t['VILLAGE'] = "Dorf";
				t['POPULATION'] = "Einwohner";
				t['COORDS'] = "Koordinaten";
				t['MAPTBACTS'] = "Aktion";
				t['SAVED'] = "Gespeichert";
				t['YOUNEED'] = "Ben&ouml;tige";
				t['TODAY'] = "heute";
				t['TOMORROW'] = "morgen";
				t['DAYAFTERTOM'] = "&uuml;bermorgen";
				t['BN_GID12'] = "Waffenschmiede";
				t['BN_GID13'] = "Rüstungsschmiede";
				t['BN_GID16'] = "Versammlungsplatz";
				t['BN_GID17'] = "Marktplatz";
				t['BN_GID19'] = "Kaserne";
				t['BN_GID20'] = "Stall";
				t['BN_GID21'] = "Werkstatt";
				t['BN_GID22'] = "Akademie";
				t['BN_GID24'] = "Rathaus";
				t['BN_GID25'] = "Residenz";
				t['BN_GID26'] = "Palast";
				t['BN_GID27'] = "Schatzkammer";
				t['BN_GID37'] = "Heldenhof";
				t['SENDRES'] = "H&auml;ndler schicken";
				t['BUY'] = "Kaufen";
				t['SELL'] = "Verkaufen";
				t['SENDIGM'] = "IGM schreiben";
				t['LISTO'] = "Genug";
				t['ON'] = "";
				t['AT'] = "um";
				t['EFICIENCIA'] = "Effektivität";
				t['NEVER'] = "Nie";
				t['ALDEAS'] = "Dörfer";
				t['TIEMPO'] = "Zeit";
				t['OFREZCO'] = "Biete";
				t['BUSCO'] = "Suche";
				t['TIPO'] = "Tauschverhältnis";
				t['DISPONIBLE'] = "Nur annehmbare Angebote";
				t['CUALQUIERA'] = "Beliebig";
				t['YES'] = "Ja";
				t['NO'] = "Nein";
				t['MARCADORES'] = "Lesezeichen";
				t['ANYADIR'] = "Hinzuf&uuml;gen";
				t['UBU'] = "Lesezeichen URL";
				t['UBT'] = "Lesezeichen Text";
				t['DEL'] = "Entfernen";
				t['MAPA'] = "Karte";
				t['MAXTIME'] = "Maximale Dauer";
				t['ARCHIVE'] = "Archiv";
				t['SUMMARY'] = "Zusammenfassung";
				t['CHKSCRV'] = "Update TBeyond";
				t['ACTUALIZAR'] = "Update Dorf Info";
				t['VENTAS'] = "Gespeicherte Angebote";
				t['BIC'] = "Zusätzliche Icons";
				t['SAVE'] = "Speichern";
				t['AT2'] = "Unterstützung";
				t['AT3'] = "Angriff: Normal";
				t['AT4'] = "Angriff: Raubzug";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normal (klein)";
				t['NBSB'] = "Breiter Monitor (breit)";
				t['NBHAX'] = "Höhe automatisch anpassen";
				t['NBHK'] = "Standard Höhe";
				t['NPCSAVETIME'] = "Zeitgewinn";
				t['TOTALTROOPS'] = "Truppen dieses Dorfes";
				t['SELECTALLTROOPS'] = "Alle Truppen ausw&auml;hlen";
				t['PARTY'] = "Feste";
				t['CPPERDAY'] = "KPs/Tag";
				t['SLOT'] = "Slots";
				t['SELECTSCOUT'] = "Späher auswählen";
				t['SELECTFAKE'] = "Fake Truppen auswählen";
				t['ALL'] = "Alles";
				t['SH2'] = "Was man in Farbfelder eintragen kann:<br>- (Englisch) <b>green</b> oder <b>red</b> oder <b>orange</b>, etc.<br>- HEX Farbkod, z.B. <b>#004523</b><br>- leer für Standardfarbe";
				t['SOREP'] = "Original Bericht anzeigen";
				t['WSIMO1'] = "Intern (vom Spiel zur Verfügung gestellt)";
				t['WSIMO2'] = "Extern (von der kirilloid.ru Seite)";
				t['NONEWVER'] = "Sie haben die letzte Version installiert";
				t['BVER'] = "Sie haben vielleicht eine Beta Version installiert";
				t['NVERAV'] = "Eine neue Version des Scripts steht zur Verfügung";
				t['UPDSCR'] = "Script jetzt aktualisieren ?";
				t['CHECKUPDATE'] = "Es wird nach einer neuen Scriptversion gesucht.<br>Bitte warten...";
				t['AVPPV'] = "Durchschnitt: Bewohner/Dorf";
				t['AVPPP'] = "Durchschnitt: Bewohner/Spieler";
				t['TOTTRTR'] = "Total Truppen in Ausbildung";
				t['TB3SL'] = "$1 Einstellungen";
				t['UPDALLV'] = "Alle Dörfer aktualisieren. BITTE MIT VORSICHT BENUTZEN, DIES KÖNNTE ZUR SPERRUNG DES ACCOUNTS FÜHREN !";
				t['LARGEMAP'] = "Große Karte";
				t['USETHEMPR'] = "Rohstoffe proportional verteilen";
				t['USETHEMEQ'] = "Rohstoffe gleichmäßig verteilen";
				t['GSRVT'] = "Server";
				t['ACCINFO'] = "Account Info";
				t['NBO'] = "Notizblock";
				t['MNUL'] = "Menü links";
				t['STAT'] = "Statistiken";
				t['RESF'] = "Rohstofffelder";
				t['VLC'] = "Dorfzentrum";
				t['MAPO'] = "Karten Einstellung";
				t['COLO'] = "Farbeinstellungen  (Standard = Leer)";
				t['DBGO'] = "Fehlersuche";
				t['NOW'] = "Jetzt";
				t['CLOSE'] = "Schließen";
				t['USETHEM1H'] = "1 Stundenproduktion schicken";
				t['OVERVIEW'] = "Übersicht";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Angriffe";
				t['NEWS'] = "News";
				t['ADDCRTPAGE'] = "Aktuelle Seite hinzufügen";
				t['SCRPURL'] = "TB-Homepage";
				t['SPACER'] = "Abstandshalter";
				t['MEREO'] = "Nachrichten & Berichte";
				t['ATTABLES'] = "Truppenübersicht";
				t['MTW'] = "Noch verfügbaren Platz verschwendet";
				t['MTX'] = "Zuviel";
				t['MTC'] = "Aktuell verwendet";
				t['ALFL'] = "Link externes Forum (Für internes Forum leer lassen)";
				t['MTCL'] = "Alle entfernen";
				t['CKSORT'] = "Zum Sortieren klicken";
				t['MIN'] = "Min";
				t['SVGL'] = "Für alle Dörfer verfügbar";
				t['VGL'] = "Dorfübersicht";
				t['UPDATEPOP'] = "Einwohnerzahl aktualisieren";
				t['EDIT'] = "Bearbeiten";
				t['NPCO'] = "Optionen NPC Assistent";
				t['NEWVILLAGEAV'] = "Datum/Uhrzeit";
				t['TIMEUNTIL'] = "Wartezeit";
				t['CENTERMAP'] = "Zentriere Karte auf dieses Dorf";
				t['SENDTROOPS'] = "Truppen schicken";
				t['UPGTB'] = "Ressifelder/Gebäude Upgradetabellen";
				t['RBTT'] = "Ressi-Bar";
				t['USE'] = "Benutze";
				t['RESIDUE'] = "Rest wenn gebaut ";
				t['RESOURCES'] = "Rohstoffe";
				t['SH1'] = "Öffne Dein Profil für automatische Erkennung des Hauptdorfs und Koordinated<br>Baue eine Kaserne f&uuml;r die automatische Volkserkennung und öffne dann das Dorfzentrum";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Dorfübersicht";
				t['112'] = "Entfernungen & Zeiten anzeigen";
				t['114'] = "KPs/Tag";
				break;
			case 'dk':
				t['1'] = "Travian v2.x server";
				t['2'] = "Fjern reklamebannere";
				t['4'] = "Markedsplads";
				t['5'] = "Forsamlingsplads/Kaserne/Værksted/Stald";
				t['6'] = "Rådhus/Heltebygning/Rustningssmedje/Våbensmedje";
				t['7'] = "Palads/Residens/Akademi/Skattekammer";
				t['8'] = "Alliance";
				t['9'] = "Vis ekstra links i venstremenu<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Kampsimulator link der skal bruges:<br>(venstremenu)";
				t['12'] = "Vis 'dorf1.php' og 'dorf2.php' links";
				t['13'] = "Vis 'Centrer kortet på denne by' ikon";
				t['15'] = "Vis tømmer, ler, jern produktion pr. time";
				t['16'] = "Vis effektiv kornproduktion";
				t['17'] = "Vis indbyggertal";
				t['19'] = "Vis information om byggeprojekter og troppebevægelser";
				t['20'] = "Vis links";
				t['21'] = "Vis 'Bruger links' som flytbar vindue";
				t['22'] = "Vis notesblok";
				t['23'] = "Vis 'Notesblok' som flytbar vindue";
				t['24'] = "Notesblok størrelse";
				t['25'] = "Notesblok højde";
				t['26'] = "Vis NPC Assistent beregninger/links";
				t['27'] = "World Analyser, der skal bruges";
				t['28'] = "Vis analyser statistic links";
				t['29'] = "Map Analyser, der skal bruges";
				t['30'] = "Vis link til kort over spillere";
				t['31'] = "Vis link til kort over alliancer";
				t['32'] = "Vis 'Search bar'";
				t['33'] = "Vis 'Search bar' som flytbar vindue ";
				t['34'] = "Vis KP/dag i opgraderingstabel";
				t['35'] = "Vis kornforbrug i opgraderingstabel";
				t['36'] = "Vis 'Mangles/Rest' i opgraderings-/uddannelsestabeller";
				t['37'] = "Vis råstoffelter i opgraderingstabel";
				t['38'] = "Vis råstoftrin farver";
				t['39'] = "Vis 'Råstofbar'";
				t['40'] = "vis 'Råstofbar' som flytbar vindue";
				t['41'] = "Vis bygnings opgraderingstabel";
				t['42'] = "Sorter bygninger efter navn i opgraderingstabel";
				t['43'] = "Vis centernummer";
				t['44'] = "Vis bygningstrin farver";
				t['45'] = "Vis blinkende ikoner for bygninger, der bliver opgraderet";
				t['46'] = "Vis ekstra information for hver ankommende handelsmand";
				t['48'] = "Antal sider med tilbud, der skal indlæses,<br>mens du er på 'Markedsplads => Køb' side<br>(Default = 1)";
				t['49'] = "Forsamlingsplads standard aktion";
				t['50'] = "Antal spioner til 'Vælg spioner' funktion";
				t['51'] = "Vis sidste angreb";
				t['52'] = "Vis/brug koordinater fra sidste angreb";
				t['53'] = "Vis troppeinformation i tooltips";
				t['54'] = "Vis afstande og tider til byer i tooltips";
				t['55'] = "Udfyld automatisk med tilgængelige tropper i intern kampsimulator";
				t['56'] = "Vis celletype/oase info<br>Hold musen over kortet";
				t['57'] = "Vis afstand & tider";
				t['58'] = "Vis tabel med spiller/byer/besatte oaser";
				t['59'] = "Antal besked/rapport sider som skal indlæses<br>(Default = 1)";
				t['60'] = "Vis link til at åbne beskeder i et pop-up";
				t['61'] = "Vis \"Slet alle\" tabel på Rapport side";
				t['62'] = "Vis \"Send IGM\" ikon for mig, også";
				t['63'] = "Vis ekstra information i kamprapporter";
				t['64'] = "Vis detaljer i statistikrapport";
				t['65'] = "Farve opgradering mulig<br>(Default = Empty)";
				t['66'] = "Farve Fuldt udbygget<br>(Default = Empty)";
				t['67'] = "Farve opgradering ikke mulig<br>(Default = Empty)";
				t['68'] = "Farve opgradering via NPC<br>(Default = Empty)";
				t['82.L'] = "Lock links (Gem slet, flyt op, flyt ned ikoner)";
				t['82.U'] = "Unlock links (Vis slet, flyt op, flyt ned ikoner)";
				t['85'] = "Vis 'Send tropper'/'Send råstoffer' ikoner";
				t['87'] = "Husk indstillinger fra sidste 1x/2x/3x forsendelse (hvis tilgængeligt)";
				t['91'] = "Tilpas landsbyliste";
				t['U.2'] = "Race";
				t['U.3'] = "Din hovedlandsbys navn<br><b>Besøg din profil for at opdatere</b>";
				t['U.6'] = "Din hovedlandsbys koordinater<br><b>Besøg din profil for at opdatere</b>";
				t['SIM'] = "Kampsimulator";
				t['QSURE'] = "Er du sikker?";
				t['LOSS'] = "Tab";
				t['PROFIT'] = "Profit";
				t['EXTAV'] = "Udvidelse mulig";
				t['PLAYER'] = "Spiller";
				t['VILLAGE'] = "By";
				t['POPULATION'] = "Indbygger";
				t['COORDS'] = "Koordinater";
				t['MAPTBACTS'] = "Handlinger";
				t['SAVED'] = "Gemt";
				t['YOUNEED'] = "Du mangler";
				t['TODAY'] = "i dag";
				t['TOMORROW'] = "i morgen";
				t['DAYAFTERTOM'] = "i overmorgen";
				t['BN_GID12'] = "Våbensmedje";
				t['BN_GID13'] = "Rustningssmedje";
				t['BN_GID16'] = "Forsamlingsplads";
				t['BN_GID17'] = "Markedsplads";
				t['BN_GID19'] = "Kaserne";
				t['BN_GID20'] = "Stald";
				t['BN_GID21'] = "Værksted";
				t['BN_GID22'] = "Akademi";
				t['BN_GID24'] = "Rådhus";
				t['BN_GID25'] = "Residens";
				t['BN_GID26'] = "Palads";
				t['BN_GID27'] = "Skattekammer";
				t['BN_GID37'] = "Heltebygning";
				t['SENDRES'] = "Send råstoffer";
				t['BUY'] = "Køb";
				t['SELL'] = "Sælg";
				t['SENDIGM'] = "Send IGM";
				t['LISTO'] = "Tilgængelig";
				t['ON'] = "på";
				t['AT'] = "kl.";
				t['EFICIENCIA'] = "Effektivitet";
				t['NEVER'] = "Aldrig";
				t['ALDEAS'] = "Landsby(er)";
				t['TIEMPO'] = "Tid";
				t['OFREZCO'] = "Tilbyder";
				t['BUSCO'] = "Søger";
				t['TIPO'] = "Type";
				t['DISPONIBLE'] = "Kun tilgængelig";
				t['CUALQUIERA'] = "Alle";
				t['YES'] = "Ja";
				t['NO'] = "Nej";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Links";
				t['ANYADIR'] = "Tilføj";
				t['UBU'] = "Nyt link URL";
				t['UBT'] = "Nyt link tekst";
				t['DEL'] = "Slet";
				t['MAPA'] = "Kort";
				t['MAXTIME'] = "Maximum tid";
				t['ARCHIVE'] = "Arkiv";
				t['SUMMARY'] = "Total";
				t['TROPAS'] = "Tropper";
				t['CHKSCRV'] = "Opdater TBeyond";
				t['ACTUALIZAR'] = "Opdater by information";
				t['VENTAS'] = "Gemte tilbud";
				t['MAPSCAN'] = "Skan kortet";
				t['BIC'] = "Vis udvidede ikoner";
				t['SAVE'] = "Gem";
				t['AT2'] = "Opbakning";
				t['AT3'] = "Angreb: Normal";
				t['AT4'] = "Angreb: Plyndringstogt";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normal (lille)";
				t['NBSB'] = "Stor skærm (Stor)";
				t['NBHAX'] = "Automatisk udvid højde";
				t['NBHK'] = "Standard højde";
				t['NPCSAVETIME'] = "Gem: ";
				t['TOTALTROOPS'] = "Byens totale troppeantal";
				t['SELECTALLTROOPS'] = "Vælg alle tropper";
				t['PARTY'] = "Fest";
				t['CPPERDAY'] = "KP/dag";
				t['SLOT'] = "Udvidelse";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Vælg spioner";
				t['SELECTFAKE'] = "Vælg fake";
				t['ALL'] = "Alle";
				t['SH2'] = "I farve felterne kan du skrive:<br>- <b>grøn</b> eller <b>rød</b> eller  <b>orange</b>, osv.<br>- HEX farvekoden som <b>#004523</b><br>- udelad for default farve";
				t['SOREP'] = "Vis original rapport (Til visning)";
				t['WSIMO1'] = "Intern (leveret af spillet)";
				t['WSIMO2'] = "Ekstern (leveret af kirilloid.ru)";
				t['NONEWVER'] = "Du har den seneste version";
				t['BVER'] = "Du må have en beta version";
				t['NVERAV'] = "En ny version af scriptet er tilgængelig";
				t['UPDSCR'] = "Opdater scriptet nu ?";
				t['CHECKUPDATE'] = "Checker for script opdateringer.<br>Vent venligst...";
				t['AVPPV'] = "Gennemsnitligt antal indbyggere per by";
				t['AVPPP'] = "Gennemsnitligt antal indbyggere per spiller";
				t['TOTTRTR'] = "Totalt antal tropper, der trænes";
				t['UPDALLV'] = "Opdater alle byer.  BRUG MED STOR FORSIGTIGHED, DA DET KAN FØRE TIL EN BANNED KONTO !";
				t['LARGEMAP'] = "Stort kort";
				t['USETHEMPR'] = "Brug dem (proportional)";
				t['USETHEMEQ'] = "Brug dem (alle ens)";
				t['ACCINFO'] = "Konto Information";
				t['NBO'] = "Notesblok";
				t['MNUL'] = "Menu i venstre side";
				t['STAT'] = "Statistik";
				t['RESF'] = "Råstoffelter";
				t['VLC'] = "Landsbycenter";
				t['MAPO'] = "Kort indstillinger";
				t['COLO'] = "Farve indstillinger";
				t['DBGO'] = "Debug indstillinger";
				t['NOW'] = "Nu";
				t['CLOSE'] = "Luk";
				t['USETHEM1H'] = "Brug dem (1 times produktion)";
				t['OVERVIEW'] = "oversigt";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Angreb";
				t['NEWS'] = "Nyheder";
				t['ADDCRTPAGE'] = "Tilføj nuværende";
				t['SCRPURL'] = "TBeyond page";
				t['SPACER'] = "Mellemrumslinje";
				t['MEREO'] = "Beskeder & Rapporter";
				t['ATTABLES'] = "Troppetabel";
				t['MTW'] = "Spildt";
				t['MTX'] = "Overskredet med";
				t['MTC'] = "Nuværende last";
				t['ALFL'] = "Link til ekstern forum<br>(Tom for intern forum)";
				t['MTCL'] = "Slet alle";
				t['CKSORT'] = "Klik for at sortere";
				t['MIN'] = "Min";
				t['SVGL'] = "Del imellem byer";
				t['VGL'] = "Landsbyliste";
				t['UPDATEPOP'] = "Opdater indbyggertal";
				t['EDIT'] = "Rediger";
				t['NPCO'] = "NPC Assistent indstillinger";
				t['NEWVILLAGEAV'] = "Dato/Tid";
				t['TIMEUNTIL'] = "Ventetid";
				t['CENTERMAP'] = "Centrer kortet på denne by";
				t['SENDTROOPS'] = "Send tropper";
				t['UPGTB'] = "Råstoffelter/Bygnings opgraderingstabel";
				t['RBTT'] = "Råstofbar";
				t['USE'] = "Brug";
				t['RESIDUE'] = "Rest, hvis du bygger ";
				t['RESOURCES'] = "Råstoffer";
				t['RESEND'] = "Send igen ?";
				t['MTR'] = "Forhold";
				t['USEMTR'] = "Brug forhold:";
				t['WMIN'] = "Minimer vindue";
				t['WMAX'] = "Maximer vindue";
				t['CROPFINDER'] = "Crop finder";
				t['101'] = "Farve opgradering ikke mulig (ikke nok kapacitet i kornkamre/råstoflagre)<br>(Default = Empty)";
				t['102'] = "Vis antal råstoffelter i 'Råstofbar'";
				t['RESNEED'] = "Mangles til normal udvidelse:";
				t['NPCNEED'] = "Mangles til udvidelse via NPC:";
				t['NPCLNK'] = "&raquo; Til NPC handel";
				t['VGL2'] = "Landsbyliste";
				t['112'] = "Vis afstand & tider";
				t['114'] = "KP/dag";
				t['117'] = "Antal kolonner";
				t['118'] = "Vis tooltips";
				t['TCOST'] = "Uddannelse";
				t['120'] = "Aktiver forbedret brugergrænseflade til at oprette/ændre handelsruter";
				break;
			case 'el':
			case 'gr':
				t['1'] = "Travian v2.x server";
				t['2'] = "Αφαίρεση διαφημίσεων";
				t['3'] = "Εξανάγκασε την χωρητικότητα υπολογισμού των T3.1 Λεγεωνάριων και Φάλαγγων</br>(Για τους Τ3.1 & Τ3.5 server) ";
				t['4'] = "Αγορά";
				t['5'] = "Πλατεία συγκεντρώσεως/Στρατόπεδο/Εργαστήριο/Στάβλος";
				t['6'] = "Δημαρχείο/Περιοχή ηρώων/Σιδηρουργείο/Οπλοποιείο";
				t['7'] = "Παλάτι/Μέγαρο/Ακαδημία/Θησαυροφυλάκιο";
				t['8'] = "Συμμαχία";
				t['9'] = "Δείξε επιπλέον συνδέσμους στο αριστερό μενού<br>(Traviantoolbox, World Analyser, Travilog, TravMap, κτλ.)";
				t['10'] = "Σύνδεσμος για χρήση προσομοιωτή μάχης:";
				t['11'] = "Σύνδεσμος σελίδας για χρήση έκδοσης αναφορών ";
				t['12'] = "Δείξε τους συνδέσμους 'dorf1.php' και 'dorf2.php'";
				t['13'] = "Δείξε το εικονίδιο \"Επικέντρωση χάρτη σε αυτό το χωριό\"";
				t['15'] = "Εμφάνιση παραγωγής ξυλείας, πηλού, σιδήρου ανά ώρα στην λίστα χωριών";
				t['16'] = "Εμφάνιση ενεργής παραγωγής σιτηρών στην λίστα χωριών";
				t['17'] = "Εμφάνιση πληθυσμού στην λίστα χωριών";
				t['18'] = "Εμφάνιση επιπλέον (2 στηλών) λίστα χωριών ως αιωρούμενο παράθυρο";
				t['19'] = "Εμφάνιση πληροφοριών για τα κτήρια στην ουρά και τις κινήσεις στρατευμάτων στην λίστα χωριών";
				t['20'] = "Εμφάνιση σελιδοδεικτών";
				t['21'] = "Εμφάνιση της 'Χρήσης Σελιδοδεικτών' ως αιωρούμενο παράθυρο";
				t['22'] = "Εμφάνιση του σημειωματάριου";
				t['23'] = "Εμφάνιση του 'Σημειωματάριου' ως αιωρούμενο παράθυρο";
				t['24'] = "Μέγεθος σημειωματάριου";
				t['25'] = "Ύψος σημειωματάριου";
				t['26'] = "Δείξε τους υπολογισμούς/συνδέσμους του NPC βοηθού";
				t['27'] = "Αναλυτής Κόσμου για χρήση";
				t['28'] = "Δείξε συνδέσμους για αναλυτικά στατιστικά";
				t['29'] = "Αναλυτής Χάρτη για χρήση";
				t['30'] = "Εμφάνιση συνδέσμων στον χάρτη για χρήστες";
				t['31'] = "Εμφάνιση συνδέσμων στον χάρτη για συμμαχίες";
				t['32'] = "Εμφάνιση 'Μπάρας Αναζήτησης'";
				t['33'] = "Εμφάνιση 'Μπάρας Αναζήτησης' ως αιωρούμενο παράθυρο";
				t['34'] = "Εμφάνιση πληροφοριών ΠΠ/μέρα στους πίνακες αναβάθμισης";
				t['35'] = "Εμφάνιση κατανάλωσης σιτηρών στους πίνακες αναβάθμισης";
				t['36'] = "Εμφάνιση υπολογισμών 'Μέχρι τότε/Υπόλοιπο' στους πίνακες αναβάθμισης/εκπαίδευσης";
				t['37'] = "Εμφάνιση πίνακα αναβάθμισης για τις πρώτες ύλες";
				t['38'] = "Εμφάνιση χρωμάτων για τα επίπεδα των πρώτων υλών";
				t['39'] = "Εμφάνιση πίνακα 'Μπάρας πρώτων υλών'";
				t['40'] = "Εμφάνιση πίνακα 'Μπάρας πρώτων υλών' ως αιωρούμενο παράθυρο";
				t['41'] = "Εμφάνιση του πίνακα αναβαθμίσεων για τα κτήρια";
				t['42'] = "Εμφάνιση κτηρίων κατά όνομα στον πίνακα αναβάθμισης";
				t['43'] = "Εμφάνιση κεντρικών αριθμών";
				t['44'] = "Εμφάνιση χρωμάτων για τα επίπεδα των κτηρίων";
				t['45'] = "Εμφάνιση του επιπέδου του κτηρίου που αναβαθμίζεται να αναβοσβήνει";
				t['46'] = "Εμφάνιση επιπλέον πληροφοριών για κάθε άφιξη εμπόρου";
				t['47'] = "Εμφάνιση τελευταίας μεταφοράς αγαθών";
				t['48'] = "Αριθμός σελίδων προσφορών για προφόρτωση<br>μέσα στην σελίδα 'Αγορά =>  'Αγορά'<br>(Προεπιλογή = 1)";
				t['49'] = "Προεπιλεγμένη ενέργεια πλατείας συγκεντρώσεως";
				t['50'] = "Αριθμός ανιχνευτών για την λειτουργία \"Ανίχνευσης\"";
				t['51'] = "Εμφάνιση τελευταίας επίθεσης";
				t['52'] = "Εμφάνιση/χρήση συντεταγμένων για την τελευταία επίθεση";
				t['53'] = "Εμφάνιση πληροφοριών στρατευμάτων στις συμβουλές εργαλείου";
				t['54'] = "Εμφάνιση απόστασης και χρόνου σε χωριά στις συμβουλές εργαλείου";
				t['55'] = "Αυτόματο γέμισμα διαθέσιμων στρατευμάτων για τον εσωτερικό προσομοιωτή μάχης";
				t['56'] = "Εμφάνιση τύπου χωραφιού/όασης<br>καθώς περνάει το ποντίκι από τον χάρτη";
				t['57'] = "Εμφάνιση αποστάσεων και χρόνων";
				t['58'] = "Εμφάνιση του πίνακα παικτών/χωριών/κατειλημμένων οάσεων";
				t['59'] = "Αριθμός μηνυμάτων/αναφορών για φόρτωμα<br>(Προεπιλογή =1)";
				t['60'] = "Εμφάνιση συνδέσμων για άνοιγμα μηνυμάτων/αναφορών<br>σε αναδυόμενο παράθυρο";
				t['61'] = "Εμφάνιση του πίνακα \"Διαγραφή όλων\" στην σελίδα Αναφορών";
				t['62'] = "Εμφάνιση του εικονιδίου \"Αποστολής μηνύματος IGM\" και για μένα, επίσης";
				t['63'] = "Εμφάνιση ενισχυμένων Αναφορών Μάχης ΤΒ3";
				t['64'] = "Εμφάνιση λεπτομερειών στα Στατιστικά Αναφορών";
				t['65'] = "Χρώμα όταν υπάρχει διαθέσιμη αναβάθμιση<br>(Προεπιλογή = Κενό)";
				t['66'] = "Χρώμα όταν είναι στο μέγιστο επίπεδο<br>(Προεπιλογή = Κενό)";
				t['67'] = "Χρώμα όταν είναι αδύνατη η αναβάθμιση (όχι αρκετοί πόροι)<br>(Προεπιλογή = Κενό)";
				t['68'] = "Χρώμα για αναβάθμιση μέσω του NPC<br>(Προεπιλογή = Κενό)";
				t['69'] = "Console Log Level<br><b>ΜΟΝΟ ΓΙΑ ΠΡΟΓΡΑΜΜΑΤΑΤΙΣΤΕΣ Ή ΑΠΟΣΦΑΛΜΑΤΩΣΗ</b><br>(Προεπιλογή = 0";
				t['82.L'] = "Κλείδωσε τα αγαπημενα (Απόκρυψη διαγραφής, μετακίνησης πάνω/κάτω εικονιδίων)";
				t['82.U'] = "Ξεκλείδωσε τα αγαπημένα (Εμφάνιση διαγραφής, μετακίνησης πάνω/κάτω εικονιδίων)";
				t['85'] = "Εμφάνιση εικονιδίων 'Αποστολής στρατευμάτων/Αποστολής πόρων'";
				t['87'] = "Υπενθύμιση τελευταίας 1x/2x/3x επιλογής αποστολής αγοράς</br>(αν είναι διαθέσιμο)";
				t['91'] = "Προσαρμογή λίστας χωριών";
				t['92.L'] = "Κλείδωσε την λίστα χωριών (Απόκρυψη διαγραφής, μετακίνησης πάνω/κάτω εικονιδίων)";
				t['92.U'] = "Ξεκλείδωσε την λίστα χωριών (Απόκρυψη διαγραφής, μετακίνησης πάνω/κάτω εικονιδίων)";
				t['U.2'] = "Φυλή";
				t['U.3'] = "Όνομα πρωτεύουσας<br><b>Επισκέψου το προφίλ σου για ενημέρωση</b>";
				t['U.6'] = "Συντεταγμένες πρωτεύουσας<br><b>Επισκέψου το προφίλ σου για ενημέρωση</b>";
				t['SIM'] = "Προσομοιωτής μάχης";
				t['QSURE'] = "Είσαι σίγουρος;";
				t['LOSS'] = "Ζημιά";
				t['PROFIT'] = "Κέρδος";
				t['EXTAV'] = "Διαθέσιμη αναβάθμιση";
				t['PLAYER'] = "Παίκτης";
				t['VILLAGE'] = "Χωριό";
				t['POPULATION'] = "Πληθυσμός";
				t['COORDS'] = "Συντεταγμένες";
				t['MAPTBACTS'] = "Ενέργειες";
				t['SAVED'] = "Αποθηκεύτηκε";
				t['YOUNEED'] = "Χρειάζεσαι";
				t['TODAY'] = "σήμερα";
				t['TOMORROW'] = "αύριο";
				t['DAYAFTERTOM'] = "μεθαύριο";
				t['BN_GID12'] = "Σιδηρουργείο";
				t['BN_GID13'] = "Πανοπλοποιείο";
				t['BN_GID16'] = "Πλατεία συγκεντρώσεως";
				t['BN_GID17'] = "Αγορά";
				t['BN_GID19'] = "Στρατόπεδο";
				t['BN_GID20'] = "Στάβλος";
				t['BN_GID21'] = "Εργαστήριο";
				t['BN_GID22'] = "Ακαδημία";
				t['BN_GID24'] = "Δημαρχείο";
				t['BN_GID25'] = "Μέγαρο";
				t['BN_GID26'] = "Παλάτι";
				t['BN_GID27'] = "Θησαυροφυλάκιο";
				t['BN_GID37'] = "Περιοχή ηρώων";
				t['SENDRES'] = "Αποστολή πρώτων υλών";
				t['BUY'] = "Αγόρασε";
				t['SELL'] = "Πούλησε";
				t['SENDIGM'] = "Αποστολή μηνύματος";
				t['LISTO'] = "Διαθέσιμο";
				t['ON'] = "την";
				t['AT'] = "στις";
				t['EFICIENCIA'] = "Πληρότητα";
				t['NEVER'] = "Ποτέ";
				t['ALDEAS'] = "Χωριό(ά)";
				t['TIEMPO'] = "Χρόνος";
				t['OFREZCO'] = "Προσφέρει";
				t['BUSCO'] = "Αναζητεί";
				t['TIPO'] = "Τύπος";
				t['DISPONIBLE'] = "Μόνο διαθέσιμα";
				t['CUALQUIERA'] = "Όλα";
				t['YES'] = "Ναι";
				t['NO'] = "Όχι";
				t['LOGIN'] = "Σύνδεση";
				t['MARCADORES'] = "Αγαπημένα";
				t['ANYADIR'] = "Προσθήκη";
				t['UBU'] = "Νέο αγαπημένο URL";
				t['UBT'] = "Νέο αγαπημένο Κείμενο";
				t['DEL'] = "Διαγραφή";
				t['MAPA'] = "Χάρτης";
				t['MAXTIME'] = "Μέγιστος χρόνος";
				t['ARCHIVE'] = "Αρχείο";
				t['SUMMARY'] = "Σύνοψη";
				t['TROPAS'] = "Στρατεύματα";
				t['CHKSCRV'] = "Αναβάθμιση TBeyond";
				t['ACTUALIZAR'] = "Ανανέωση πληροφοριών χωριού";
				t['VENTAS'] = "Αποθηκευμένες Προσφορές";
				t['MAPSCAN'] = "Σάρωση του χάρτη";
				t['BIC'] = "Εμφάνιση επεκταμένων εικονιδίων";
				t['SAVE'] = "Αποθήκευση";
				t['AT2'] = "Ενισχύσεις";
				t['AT3'] = "Επίθεση: Κανονική";
				t['AT4'] = "Επίθεση: Επιδρομή";
				t['NBSA'] = "Αυτόματο";
				t['NBSN'] = "Κανονικό (μικρό)";
				t['NBSB'] = "Μεγάλη οθόνη (μεγάλο)";
				t['NBHAX'] = "Αυτόματη επέκταση ύψους";
				t['NBHK'] = "Προεπιλεγμένο ύψος";
				t['NPCSAVETIME'] = "Κερδίζεις: ";
				t['TOTALTROOPS'] = "Συνολικά στρατεύματα χωριού";
				t['SELECTALLTROOPS'] = "Επιλογή όλων των στρατευμάτων";
				t['PARTY'] = "Εορταστικές εκδηλώσεις";
				t['CPPERDAY'] = "ΠΠ/μέρα";
				t['SLOT'] = "Διαθέσιμος χώρος";
				t['TOTAL'] = "Σύνολο";
				t['SELECTSCOUT'] = "Ανίχνευση";
				t['SELECTFAKE'] = "Αντιπερισπασμός";
				t['ALL'] = "Όλα";
				t['SH2'] = "Στα πεδία χρωμάτων μπορείς να βάλεις:<br>- <b>green</b> ή <b>red</b> ή <b>orange</b>, κτλ.<br>- κώδικα HEX για χρώματα όπως <b>#004523</b><br>- άφησε κενό για προεπιλεγμένο χρώμα";
				t['SOREP'] = "Δείξε κανονική αναφορά (για ποστάρισμα)";
				t['WSIMO1'] = "Εσωτερικός (παρέχεται από το παιχνίδι)";
				t['WSIMO2'] = "Εξωτερικός (παρέχεται από το kirilloid.ru)";
				t['NONEWVER'] = "Έχεις την τελευταία έκδοση";
				t['BVER'] = "Πιθανών έχεις μια δοκιμαστική έκδοση";
				t['NVERAV'] = "Μια νέα έκδοση του script είναι διαθέσιμη";
				t['UPDSCR'] = "Να ενημερωθεί το scipt τώρα;";
				t['CHECKUPDATE'] = "Έλεγχος για την ενημέρωση του script.<br>Παρακαλώ περιμένετε...";
				t['AVPPV'] = "Μέσος πληθυσμός ανα χωριό";
				t['AVPPP'] = "Μέσος πληθυσμός ανά παίκτη";
				t['MAX'] = "Μέγιστο";
				t['TOTTRTR'] = "Συνολικά στρατεύματα σε εκπαίδευση";
				t['TB3SL'] = "$1 Ρυθμίσεις";
				t['UPDALLV'] = "Ενημέρωσε όλα τα χωριά. ΧΡΗΣΙΜΟΠΟΙΗΣΕ ΤΟ ΜΕ ΜΕΓΑΛΗ ΠΡΟΣΟΧΗ ΚΑΘΩΣ ΜΠΟΡΕΙ ΝΑ ΑΠΟΒΛΗΘΕΙΣ !!!";
				t['LARGEMAP'] = "Μεγάλος χάρτης";
				t['USETHEMPR'] = "Χρησιμοποίησε τα (αναλογικά)";
				t['USETHEMEQ'] = "Χρησιμοποίησε τα (ίσα)";
				t['GSRVT'] = "Server Παιχνιδιού";
				t['ACCINFO'] = "Πληροφορίες λογαριασμού";
				t['NBO'] = "Σημειωματάριο";
				t['MNUL'] = "Μενού στο αριστερό μέρος";
				t['STAT'] = "Στατιστικά";
				t['RESF'] = "Χωράφια πρώτων υλών";
				t['VLC'] = "Κέντρο χωριού";
				t['MAPO'] = "Επιλογές χάρτη";
				t['COLO'] = "Επιλογές χρωμάτων";
				t['DBGO'] = "Επιλογές αποσφαλμάτωσης";
				t['NOW'] = "Τώρα";
				t['CLOSE'] = "Κλείσιμο";
				t['USETHEM1H'] = "Χρησιμοποίησε τα (1 ωριαία παραγωγή)";
				t['OVERVIEW'] = "Επισκόπηση";
				t['FORUM'] = "Φόρουμ";
				t['ATTACKS'] = "Επιθέσεις";
				t['NEWS'] = "Νέα";
				t['ADDCRTPAGE'] = "Προσθήκη τρέχουσας";
				t['SCRPURL'] = "Σελίδα του TBeyond";
				t['SPACER'] = "Διάστημα";
				t['MEREO'] = "Μηνύματα & Αναφορές";
				t['ATTABLES'] = "Πίνακες στρατευμάτων";
				t['MTW'] = "Χάσιμο";
				t['MTX'] = "Υπέρβαση";
				t['MTC'] = "Τρέχον φορτίο";
				t['ALFL'] = "Σύνδεσμος προς εξωτερικό φόρουμ<br>(Άφησε το άδειο για το εσωτερικό φόρουμ)";
				t['MTCL'] = "Καθαρισμός όλων";
				t['CKSORT'] = "Κλικ για ταξινόμηση";
				t['MIN'] = "Ελάχιστο";
				t['SVGL'] = "Κοινό σε όλα τα χωριά";
				t['VGL'] = "Λίστα Χωριών";
				t['UPDATEPOP'] = "Ενημέρωση πληθυσμού";
				t['EDIT'] = "Επεξεργασία";
				t['NPCO'] = "Επιλογές του NPC βοηθού";
				t['NEWVILLAGEAV'] = "Ημερομηνία/Ώρα";
				t['TIMEUNTIL'] = "Χρόνος αναμονής";
				t['CENTERMAP'] = "Επικέντρωση χάρτη σε αυτό το χωριό";
				t['SENDTROOPS'] = "Αποστολή στρατευμάτων";
				t['UPGTB'] = "Πίνακες αναβάθμισης χωραφιών πρώτων υλών/κτηρίων";
				t['RBTT'] = "Μπάρα πρώτων υλών";
				t['USE'] = "Χρήση";
				t['RESIDUE'] = "Υπόλοιπο αν χτίσεις";
				t['RESOURCES'] = "Πρώτες Ύλες";
				t['SH1'] = "Άνοιξε το Προφίλ σου για αυτόματη ανίχνευση πρωτεύουσας/συντεταγμένων<br>Χτίσε το στρατόπεδο για αυτόματη ανίχνευση φυλής και μετά άνοιξε το κέντρο του χωριού";
				t['RESEND'] = "Αποστολή ξανά;";
				t['WSI'] = "Προσομοιωτής μάχης που παρέχετε από το παιχνίδι";
				t['TTT'] = "Γενικά εργαλεία βοήθειας στρατευμάτων/αποστάσεως";
				t['MTR'] = "Αναλογία";
				t['USEMTR'] = "Αναλογία";
				t['MTRMIN'] = "(πρέπει να είναι το ελάχιστο $1)";
				t['FINDREP'] = "Αναζήτηση του τελευταίου από";
				t['REP1_TT'] = "Νίκησε ως επιτιθέμενος χωρίς απώλειες ";
				t['REP2_TT'] = "Νίκησε ως επιτιθέμενος με απώλειες ";
				t['REP3_TT'] = "Έχασε ως επιτιθέμενος";
				t['REP4_TT'] = "Νίκησε ως αμυνόμενος χωρίς απώλειες";
				t['REP5_TT'] = "Νίκησε ως αμυνόμενος με απώλειες";
				t['REP6_TT'] = "Έχασε ως αμυνόμενος με απώλειες";
				t['REP7_TT'] = "Έχασε ως αμυνόμενος χωρίς απώλειες";
				t['VLISTUP'] = "Μετακίνηση πάνω";
				t['VLISTDOWN'] = "Μετακίνηση κάτω";
				t['VLISTSEP'] = "Εισαγωγή/αφαίρεση οριζόντιου διαχωριστή";
				t['VLISTEDIT'] = "Ιδιότητες χωριού";
				t['VLISTOPTIONS'] = "Επιλογές λίστας χωριών";
				t['REPTT'] = "Εμφάνιση αυτής της αναφοράς σε ξεχωριστό παράθυρο";
				t['WMIN'] = "Ελαχιστοποίηση παράθυρου";
				t['WMAX'] = "Μεγιστοποίηση παράθυρου";
				t['REFRESHP'] = "Ενημέρωση σελίδας";
				t['1H'] = "ώρα";
				t['GENLNK'] = "Γενικές βελτιώσεις συνδέσμων";
				t['11.TT'] = "Σελίδα δημοσίευσης αναφορών";
				t['27.TT'] = "Αναλυτής Κόσμου";
				t['29.TT'] = "Αναλυτής Χάρτη";
				t['WSS'] = "Στατιστικά Server";
				t['WSP'] = "Στατιστικά Παίχτη";
				t['WSA'] = "Στατιστικά Συμμαχίας";
				t['TRAVIANDOPE'] = "Traviandope";
				t['TRAVIANDOPE.TT'] = "Εργαλείο ανάλυσης παγκόσμιου χάρτη, παίχτη και συμμαχίας";
				t['TOOLBOX'] = "Toolbox";
				t['TOOLBOX.TT'] = "Εργαλείο σύγκρισης μονάδων, προσομοιωτής μάχης, υπολογιστές, υπογραφές παιχτών και συμμαχιών";
				t['CRYTOOLS'] = "Cry's Tools";
				t['CRYTOOLS.TT'] = "Εργαλεία Travian του Cry και νέα";
				t['KIRILLOID'] = "Kirilloid";
				t['KIRILLOID.TT'] = "Πολλοί χρήσιμοι πίνακες και υπολογιστές";
				t['CROPFINDER'] = "Ευρετής φάρμας";
				t['CROPFINDER.TT'] = "Αναζήτηση για φάρμα";
				t['ERRUPDATE'] = "Αποτυχία ενημέρωσης script!";
				t['TRADEBAL.TT'] = "Λήψη υπολοίπου ανταλλαγής για αυτόν τον παίχτη";
				t['100'] = "Εμφάνιση συνδέσμων για λήψη υπολοίπου ανταλλαγής για παίχτες";
				t['101'] = "Χρώμα όταν δεν είναι διαθέσιμη η αναβάθμιση (δεν υπάρχει αρκετός χώρος στις αποθήκες)</br>(Προεπιλογή = Κενό)";
				t['102'] = "Εμφάνιση αριθμού χωραφιών πρώτων υλών στην 'Μπάρα Πρώτων Υλών'";
				t['RESNEED'] = "Χρειάζονται για κανονική αναβάθμιση:";
				t['NPCNEED'] = "Χρειάζονται για αναβάθμιση μέσω NPC:";
				t['RESREQ_TT'] = "Χρειάζονται για αναβάθμιση: $1";
				t['NPCLNK'] = "&raquo; Προς NPC εμπόριο";
				t['USERES_TT'] = "Αποδοχή/απαγόρευση χρήσης πρώτης ύλης $1 όταν λειτουργούν ταυτόχρονα όλες οι πρώτες ύλες.";
				t['USETRADERS_TT'] = "Χρήση όχι περισσότερου από αυτόν τον αριθμό εμπόρων όταν διανέμεις πρώτες ύλες.";
				t['USEUNIRES_TT'] = "Χρήση όχι περισσότερου από αυτή τη ποσότητα πρώτων υλών όταν διανέμεις πρώτες ύλες.";
				t['USEPPH_TT'] = "Χρήση της παραγωγής σε μια ώρα αυτού του χωριού ως την μέγιστη ποσότητα μεταφοράς.";
				t['USEPPHALL_TT'] = "Χρήση της παραγωγής σε μια ώρα όλων των χωριών ως την μέγιστη ποσότητα μεταφοράς.";
				t['STAT_DISMISS'] = "Στατιστικά για διωγμένα στρατεύματα";
				t['STAT_REMAINS'] = "Στατιστικά για εναπομείναντα στρατεύματα";
				t['SELECTALL'] = "Επιλογή όλων";
				t['VGL2'] = "Λίστα Χωριών";
				t['112'] = "Εμφάνιση αποστάσεων και χρόνων";
				t['114'] = "ΠΠ/μέρα";
				break;
			case 'es':
				t['1'] = "Servidor de Travian v2.x?";
				t['2'] = "Eliminar anuncios";
				t['3'] = "Forzar T3.1 Legionnaire & Phalanx capacity calculation<br>(para servidores mixtos T3.1 & T3.5)";
				t['4'] = "Mercado";
				t['5'] = "Plaza de reuniones/Cuartel/Taller/Establo";
				t['6'] = "Ayuntamiento/Hogar del Héroe/Armería/Herrería";
				t['7'] = "Palacio/Residencia/Academia/Tesoro";
				t['8'] = "Alianza";
				t['9'] = "Mostrar enlaces adicionales en el menú de la izquierda<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "¿Qué simulador de ataque deseas usar?:<br>(menú izquierdo)";
				t['11'] = "Enlace para la publicación de informes";
				t['12'] = "Mostrar enlaces 'dorf1.php' y 'dorf2.php'";
				t['13'] = "Mostrar icono \"Centrar mapa sobre esta aldea\"";
				t['15'] = "Mostrar la produccion por hora de madera, barro, hierro y cereal en el listado de aldeas";
				t['16'] = "Mostrar eficacia de producción de cereal en el listado de aldeas";
				t['17'] = "Mostrar población en el listado de aldeas";
				t['18'] = "Muestra en 2 columnas una lista de aldeas en una ventana flotante";
				t['19'] = "Mostrar información sobre los avances en los edificios y los movimientos de tropas en el listado de aldeas";
				t['20'] = "Mostrar marcadores";
				t['21'] = "Ver tabla de 'Enlaces' en una ventana flotante";
				t['22'] = "Mostrar block de notas";
				t['23'] = "Ver 'Block de notas' en una ventana flotante";
				t['24'] = "Tamaño del block de notas";
				t['25'] = "Altura del block de notas";
				t['26'] = "Mostrar Asistente de NPC para calculadora/enlaces";
				t['27'] = "¿Qué Analizador de estadísticas deseas usar?";
				t['28'] = "Mostrar enlaces del analizador de estadísticas<br>(icono de la bola del mundo al lado de usuarios/alianzas)";
				t['29'] = "Usar el analizador del mapa";
				t['30'] = "Mostrar mapa de enlaces para usuarios";
				t['31'] = "Mostrar mapa de enlaces para alianzas";
				t['32'] = "Mostrar 'Barra de Búsqueda'";
				t['33'] = "Ver 'Barra de Búsqueda' en una ventana flotante";
				t['34'] = "Ver información de CP por día en la actualización de las tablas";
				t['35'] = "Mostrar actualizaciones en las tablas de consumo de cereal.";
				t['36'] = "Mostrar los cálculos de 'Hasta entonces/Excedentes'<br>en las tablas de entrenamiento/mejora";
				t['37'] = "Mostrar la tabla de actualización de recursos";
				t['38'] = "Mostrar colores en el nivel de los recursos";
				t['39'] = "Ver tabla de 'Recursos'";
				t['40'] = "Ver tabla de 'Recursos' en una ventana flotante";
				t['41'] = "Mostrar la tabla de actualización de las construcciones";
				t['42'] = "Ordenar edificios por su nombre en la tabla de actualizaciones";
				t['43'] = "Mostrar el nivel de las construcciones en el centro de la aldea";
				t['44'] = "Mostrar colores en el nivel de las construcciones";
				t['45'] = "Mostrar nivel parpadeando en los edificios que están siendo ampliados";
				t['48'] = "Páginas mostradas en la sección 'Comprar' del mercado<br>(Valor por defecto = 1)";
				t['49'] = "Opción por defecto para el envió de tropas";
				t['50'] = "N° de espías para seleccionar por defecto en \"Seleccionar espías\"";
				t['53'] = "Mostrar información de las tropas en mensajes emergentes";
				t['54'] = "Mostrar tiempos y distancias a aldeas en mensajes emergentes";
				t['56'] = "Mostar la descripción del tipo de casilla/oasis<br>al pasar el mouse por encima de la casilla.";
				t['57'] = "Mostrar distancias y tiempos en un mensaje emergente";
				t['58'] = "Mostrar tabla de Jugadores/Aldeas/Oasis ocupados";
				t['59'] = "Número de páginas de mensajes/reportes precargados<br>(Valor por defecto = 1)";
				t['60'] = "Mostrar vínculos para abrir los mensajes e informes en ventanas emergentes";
				t['61'] = "Mostar \"Borrar todo\" en la página de informes";
				t['62'] = "Mostrar icono \"Enviar IGM\" para mitambién";
				t['63'] = "Mostar TB3 en los informes de batalla";
				t['64'] = "Mostrar detalles estadísticos en los reportes";
				t['65'] = "Color para las actualizaciones disponibles <br>(Defecto = En blanco)";
				t['66'] = "Color para los niveles máximos<br>(Defecto = En blanco)";
				t['67'] = "Color para las actualizaciones no disponibles<br>(Defecto = En blanco)";
				t['68'] = "Color para actualizar por medio de NPC<br>(Defecto = En blanco)";
				t['69'] = "Nivel de Registro de la Consola<br>SOLO PARA PROGRAMADORES O DEPURACIÓN<br>(Valor por defecto = 0)";
				t['82.L'] = "Bloquear marcadores (Ocultar iconos de eliminar, subir, bajar)";
				t['82.U'] = "Desbloquear marcadores (Mostrar iconos de eliminar, subir, bajar)";
				t['U.2'] = "Raza";
				t['U.3'] = "Nombre de tu capital<br>Entra en tu perfil para actualizarla";
				t['U.6'] = "Coordenadas de tu capital<br>Entra en tu perfil para actualizarlas";
				t['SIM'] = "Simulador de combate";
				t['QSURE'] = "¿Estás seguro?";
				t['LOSS'] = "Pérdidas";
				t['PROFIT'] = "Ganancias";
				t['EXTAV'] = "Subir nivel";
				t['PLAYER'] = "Jugador";
				t['VILLAGE'] = "Aldea";
				t['POPULATION'] = "Población";
				t['COORDS'] = "Coordenadas";
				t['MAPTBACTS'] = "Acciones";
				t['SAVED'] = "Guardado";
				t['YOUNEED'] = "Te falta";
				t['TODAY'] = "hoy";
				t['TOMORROW'] = "mañana";
				t['DAYAFTERTOM'] = "pasado mañana";
				t['BN_GID12'] = "Herrería";
				t['BN_GID13'] = "Armería";
				t['BN_GID16'] = "Plaza de reuniones";
				t['BN_GID17'] = "Mercado";
				t['BN_GID19'] = "Cuartel";
				t['BN_GID20'] = "Establo";
				t['BN_GID21'] = "Taller";
				t['BN_GID22'] = "Academia";
				t['BN_GID24'] = "Ayuntamiento";
				t['BN_GID25'] = "Residencia";
				t['BN_GID26'] = "Palacio";
				t['BN_GID27'] = "Tesoro";
				t['BN_GID37'] = "Hogar del Héroe";
				t['SENDRES'] = "Enviar recursos";
				t['BUY'] = "Comprar";
				t['SELL'] = "Vender";
				t['SENDIGM'] = "Enviar IGM";
				t['LISTO'] = "Disponible";
				t['ON'] = "el";
				t['AT'] = "a las";
				t['EFICIENCIA'] = "Eficacia";
				t['NEVER'] = "Nunca";
				t['ALDEAS'] = "Aldea(s)";
				t['TIEMPO'] = "Tiempo";
				t['OFREZCO'] = "Ofrezco";
				t['BUSCO'] = "Busco";
				t['TIPO'] = "Tipo";
				t['DISPONIBLE'] = "Solo disponible";
				t['CUALQUIERA'] = "Cualquiera";
				t['YES'] = "Si";
				t['NO'] = "No";
				t['LOGIN'] = "Identificarse";
				t['MARCADORES'] = "Marcadores";
				t['ANYADIR'] = "Añadir";
				t['UBU'] = "URL del nuevo Marcador";
				t['UBT'] = "Nombre del nuevo Marcador";
				t['DEL'] = "Eliminar";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Tiempo máximo";
				t['ARCHIVE'] = "Archivar";
				t['SUMMARY'] = "Resumen";
				t['TROPAS'] = "Tropas";
				t['CHKSCRV'] = "Actualizar TBeyond";
				t['ACTUALIZAR'] = "Actualizar información sobre la aldea";
				t['VENTAS'] = "Guardar ofertas";
				t['MAPSCAN'] = "Escanear el Mapa";
				t['BIC'] = "Mostrar iconos de acceso rápido";
				t['SAVE'] = "Guardar";
				t['AT2'] = "Refuerzos";
				t['AT3'] = "Ataque: Normal";
				t['AT4'] = "Ataque: Atraco";
				t['NBSA'] = "Automático";
				t['NBSN'] = "Normal (pequeño)";
				t['NBSB'] = "Grande (alargado)";
				t['NBHAX'] = "Expandir altura automáticamente";
				t['NBHK'] = "Altura por defecto";
				t['NPCSAVETIME'] = "Tiempo ahorrado: ";
				t['TOTALTROOPS'] = "Total de tropas de la aldea";
				t['SELECTALLTROOPS'] = "Seleccionar todas las tropas";
				t['PARTY'] = "Fiesta";
				t['CPPERDAY'] = "PC por día";
				t['SLOT'] = "Espacio disponible";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Seleccionar espías";
				t['SELECTFAKE'] = "Seleccionar unidad para fake (Engaño)";
				t['ALL'] = "Todo";
				t['SH2'] = "Puedes modificar o personalizar los colores, escribiendo en los campos destinados al color:<br>- Green, Red, orange, etc.<br>- El código Hexadecimal del color como por ejemplo #004523.<br>- Dejar en blanco para usar el color por defecto.";
				t['SOREP'] = "Mostrar el reporte original (para poner en foros)";
				t['WSIMO1'] = "Interno (el que trae travian por defecto)";
				t['WSIMO2'] = "Externo (promovido por kirilloid.ru)";
				t['NONEWVER'] = "Usted tiene la última versión disponible";
				t['BVER'] = "Usted dispone de una versión de prueba";
				t['NVERAV'] = "Una nueva versión del script está disponible";
				t['UPDSCR'] = "¿Actualizar el script?";
				t['CHECKUPDATE'] = "Buscando una nueva versión del script.<br>Por favor espere...";
				t['AVPPV'] = "Promedio de población por aldea";
				t['AVPPP'] = "Promedio de población por jugador";
				t['MAX'] = "Máximo.";
				t['TOTTRTR'] = "Tropas totales que se están creando";
				t['TB3SL'] = "Configurar TBeyond";
				t['UPDALLV'] = "Actualizar todas las aldeas. USAR CON MUCHO CUIDADO, PUEDE LLEVAR A QUE BORREN TU CUENTA!";
				t['LARGEMAP'] = "Mapa grande";
				t['USETHEMPR'] = "Repartir la cantidad de recursos de los almacenes (de manera proporcional)";
				t['USETHEMEQ'] = "Repartir la cantidad de recursos de los almacenes (equitativa=misma cantidad)";
				t['GSRVT'] = "Versión del servidor";
				t['ACCINFO'] = "Información de la Cuenta";
				t['NBO'] = "Block de notas";
				t['MNUL'] = "Menú en el lado izquierdo";
				t['STAT'] = "Estadísticas";
				t['RESF'] = "Campos de recursos";
				t['VLC'] = "Centro de la aldea";
				t['MAPO'] = "Opciones del mapa";
				t['COLO'] = "Opciones de color";
				t['DBGO'] = "Opciones de depuración (DEBUG MODE)";
				t['NOW'] = "Ahora";
				t['CLOSE'] = "Cerrar";
				t['USETHEM1H'] = "Repartir materias primas de esta aldea (1 hora de producción)";
				t['OVERVIEW'] = "Resumen";
				t['FORUM'] = "Foro";
				t['ATTACKS'] = "Ataques";
				t['NEWS'] = "Noticias";
				t['ADDCRTPAGE'] = "Añadir página actual";
				t['SCRPURL'] = "Página de TBeyond";
				t['SPACER'] = "Espacio";
				t['MEREO'] = "Mensajes y Reportes";
				t['ATTABLES'] = "Tabla de tropas";
				t['MTW'] = "Disponible";
				t['MTX'] = "Excedido";
				t['MTC'] = "Carga actual";
				t['ALFL'] = "Vínculo a foro externo<br>(Dejar en blanco para foro interno)";
				t['MTCL'] = "Limpiar todo";
				t['CKSORT'] = "Haga clic aquí para ordenar";
				t['MIN'] = "Mínimo";
				t['SVGL'] = "Repartir entre las aldeas";
				t['VGL'] = "Lista de Aldeas";
				t['UPDATEPOP'] = "Actualizar habitantes";
				t['EDIT'] = "Editar";
				t['NPCO'] = "Asistente de opciones del NPC";
				t['NEWVILLAGEAV'] = "Fecha/Hora";
				t['TIMEUNTIL'] = "Tiempo de espera";
				t['CENTERMAP'] = "Centrar mapa sobre esta aldea";
				t['SENDTROOPS'] = "Enviar tropas";
				t['UPGTB'] = "Mostrar actualizaciones en las tablas de  recursos y edificios.";
				t['RBTT'] = "Recursos";
				t['USE'] = "Usar";
				t['RESIDUE'] = "Excedentes si construyes ";
				t['RESOURCES'] = "Recursos";
				t['CROPFINDER'] = "Búsqueda 9c / 15c";
				t['VGL2'] = "Lista de Aldeas";
				t['112'] = "Mostrar distancias y tiempos en un mensaje emergente";
				t['114'] = "PC por día";
				break;
			case 'fi':
				t['1'] = "Travian v2.x serveri";
				t['2'] = "Poista mainosbannerit";
				t['3'] = "Pakota T3.1 Legioonalaisten ja Falangien kantomäärälaskenta<br />(sekoitetuille T3.1 ja T3.5 servereille)";
				t['4'] = "Tori";
				t['5'] = "Kokoontumispiste/Kasarmi/Työpaja/Talli";
				t['6'] = "Kaupungintalo/Sankarinkartano/Haarniskapaja/Aseseppä";
				t['7'] = "Palatsi/Virka-asunto/Akatemia/Aarrekammio";
				t['8'] = "Liittouma";
				t['9'] = "Näytä lisälinkit vasemmanpuoleisessa valikossa<br />(Traviantoolbox, World Analyser, Travilog, Map, jne.)";
				t['10'] = "Taistelusimulaattorilinkki käytössä:<br />(Vasemmanpuoleinen valikko)";
				t['11'] = "Valitse sivu mitä käytetään raporttien lähettämiseen";
				t['12'] = "Näytä 'dorf1.php' ja 'dorf2.php' linkit";
				t['13'] = "Näytä \"Keskitä kartta tähän kylään\" kuvake";
				t['15'] = "Näytä puun, saven ja raudan tuntituotannot kylälistassa";
				t['16'] = "Näytä viljantuotanto kylälistassa";
				t['17'] = "Näytä asukasluku kylälistassa";
				t['18'] = "Näytä lisäksi kahden palstan kylälista siirrettävänä ikkunana";
				t['19'] = "Näytä tiedot valmistuvista rakennuksista ja joukkojen liikkeistä kylälistassa";
				t['20'] = "Näytä kirjanmerkit";
				t['21'] = "Näytä 'kirjanmerkit' siirrettävänä ikkunana";
				t['22'] = "Näytä muistilappu";
				t['23'] = "Näytä 'Muistilappu' siirrettävänä ikkunana";
				t['24'] = "Muistilapun koko";
				t['25'] = "Muistilapun korkeus";
				t['26'] = "Näytä NPC Avustajan laskelmat ja linkit";
				t['27'] = "Valitse World Analyser";
				t['28'] = "Näytä analyysitilastot linkkeinä";
				t['29'] = "Mitä kartta-analysoijaa käytetään";
				t['30'] = "Näytä pelaajien linkit karttaan";
				t['31'] = "Näytä liittojen linkit karttaan";
				t['32'] = "Näytä Hakupalkki";
				t['33'] = "Näytä 'Hakupalkki' siirrettävänä ikkunana";
				t['34'] = "Näytä KP/päivä päivitystaulukoissa";
				t['35'] = "Näytä viljan kulutus päivitystaulukoissa";
				t['36'] = "Näytä 'Siihen mennessä/Ylijäävät' laskelma, päivitys ja koulutus taulukoissa";
				t['37'] = "Näytä resurssikenttien päivitystaulukko";
				t['38'] = "Näytä resurssipeltojen tasovärit";
				t['39'] = "Näytä 'Resurssipalkki'";
				t['40'] = "Näytä 'Resurssipalkki' siirrettävänä ikkunana";
				t['41'] = "Näytä rakennusten päivitystaulukko";
				t['42'] = "Järjestä rakennukset päivityslistassa nimen perusteella";
				t['43'] = "Näytä rakennuksien tasonumerot";
				t['44'] = "Näytä rakennuksien tasovärit";
				t['45'] = "Näytä rakennuksien tasot vilkkuvina, kun niitä päivitetään";
				t['46'] = "Näytä lisätiedot kaikille saapuville kauppiaille";
				t['47'] = "Näytä viimeisin resurssilähetys";
				t['48'] = "Tarjoussivujen latautumismäärä<br />ollessasi torilla => Osta sivu<br />(Oletus = 1)";
				t['49'] = "Kokoontumispisteen oletustoiminto";
				t['50'] = "Tiedustelijoiden määrä \"Valitse tiedustelija\" ominaisuudelle";
				t['51'] = "Näytä viimeisin hyökkäykseni";
				t['52'] = "Näytä/käytä viimeisimmän hyökkäyksen koordinaatteja";
				t['53'] = "Näytä joukkotiedot vihjeissä";
				t['54'] = "Näytä välimatka ja ajat vihjeissä";
				t['55'] = "Täytä simulaattori automaattisesti kylässä olevien joukkojen perusteella";
				t['56'] = "Näytä kylätyypit ja keitaat<br />liikutellessasi hiirtä kartalla";
				t['57'] = "Näytä matkat ja ajat";
				t['58'] = "Näytä taulukko pelaajista/kylistä/varatuista keitaista";
				t['59'] = "Esiladattujen viesti- ja raporttisivujen määrä<br />(Oletus = 1)";
				t['60'] = "Näytä linkki ponnahdusikkunaan";
				t['61'] = "Näytä \"Poista kaikki\"-painike raporttisivulla";
				t['62'] = "Näytä \"Lähetä viesti\" kuvake myös itselleni";
				t['63'] = "Näytä TB3 parannellut taisteluraportit";
				t['64'] = "Näytä yksityiskohdat raporttitilastoissa";
				t['65'] = "\"Päivitys mahdollinen\" väri<br />(Oletus = Tyhjä)";
				t['66'] = "\"Korkein mahdollinen taso\" väri<br />(Oletus = Tyhjä)";
				t['67'] = "\"Päivitys ei mahdollista\" väri<br />(Oletus = Tyhjä)";
				t['68'] = "\"Päivitys mahdollinen NPC:llä\" väri<br />(Oletus = Tyhjä)";
				t['69'] = "Kirjautumistaso konsoliin<br>VAIN OHJELMOIJILLE JA TESTAAJILLE<br>(Oletus = 0)";
				t['82.L'] = "Lukitse kirjanmerkit (Piilottaa: poista, siirrä ylös, siirrä alas ja muokkaa -painikkeet)";
				t['82.U'] = "Avaa kirjanmerkit (Näyttää: poista, siirrä ylös, siirrä alas ja muokkaa -painikkeet)";
				t['U.2'] = "Rotu";
				t['U.3'] = "Pääkaupunkisi nimi<br /><b>Käy profiilissa päivittääksesi</b>";
				t['U.6'] = "Pääkaupunkisi koordinaatit<br /><b>Käy profiilissa päivittääksesi</b>";
				t['SIM'] = "Taistelusimulaattori";
				t['QSURE'] = "Oletko varma?";
				t['LOSS'] = "Menetys";
				t['PROFIT'] = "Hyöty";
				t['EXTAV'] = "Päivitys mahdollista ";
				t['PLAYER'] = "Pelaaja";
				t['VILLAGE'] = "Kylä";
				t['POPULATION'] = "Asukasluku";
				t['COORDS'] = "Koordinaatit";
				t['MAPTBACTS'] = "Toiminnot";
				t['SAVED'] = "Tallennettu";
				t['YOUNEED'] = "Tarvitset";
				t['TODAY'] = "tänään";
				t['TOMORROW'] = "huomenna";
				t['DAYAFTERTOM'] = "ylihuomenna";
				t['BN_GID12'] = "Aseseppä";
				t['BN_GID13'] = "Haarniskapaja";
				t['BN_GID16'] = "Kokoontumispiste";
				t['BN_GID17'] = "Tori";
				t['BN_GID19'] = "Kasarmi";
				t['BN_GID20'] = "Talli";
				t['BN_GID21'] = "Työpaja";
				t['BN_GID22'] = "Akatemia";
				t['BN_GID24'] = "Kaupungintalo";
				t['BN_GID25'] = "Virka-asunto";
				t['BN_GID26'] = "Palatsi";
				t['BN_GID27'] = "Aarrekammio";
				t['BN_GID37'] = "Sankarinkartano";
				t['SENDRES'] = "Lähetä resursseja";
				t['SELL'] = "Myy";
				t['SENDIGM'] = "Lähetä viesti";
				t['LISTO'] = "Saatavilla";
				t['ON'] = "Saatavilla";
				t['AT'] = "kello";
				t['EFICIENCIA'] = "Hyötysuhde";
				t['NEVER'] = "Ei koskaan";
				t['ALDEAS'] = "Kylä(t)";
				t['TIEMPO'] = "Aika";
				t['OFREZCO'] = "Tarjonnut minulle";
				t['BUSCO'] = "Pyytänyt minulta";
				t['TIPO'] = "Suhde";
				t['DISPONIBLE'] = "Vain saatavilla olevat";
				t['CUALQUIERA'] = "Mikä tahansa";
				t['YES'] = "Kyllä";
				t['NO'] = "Ei";
				t['LOGIN'] = "Kirjaudu sisään";
				t['MARCADORES'] = "Kirjanmerkit";
				t['ANYADIR'] = "Lisää";
				t['UBU'] = "Uusi kirjanmerkin URL";
				t['UBT'] = "Uusi kirjanmerkkiteksti";
				t['DEL'] = "Poista";
				t['MAPA'] = "Kartta";
				t['MAXTIME'] = "Enimmäisaika";
				t['ARCHIVE'] = "Arkisto";
				t['SUMMARY'] = "Yhteenveto";
				t['TROPAS'] = "Joukot";
				t['ACTUALIZAR'] = "Päivitä kylän tiedot";
				t['VENTAS'] = "Tallennetut tarjoukset";
				t['MAPSCAN'] = "Tutki kartta";
				t['BIC'] = "Näytä laajennetut kuvakkeet";
				t['SAVE'] = "Tallenna";
				t['AT2'] = "Vahvistus";
				t['AT3'] = "Hyökkäys: Normaali";
				t['AT4'] = "Hyökkäys: Ryöstö";
				t['NBSA'] = "Automaattinen";
				t['NBSN'] = "Normaali";
				t['NBSB'] = "Laaja";
				t['NBHAX'] = "Automaattinen korkeuden säätö";
				t['NBHK'] = "Oletus korkeus";
				t['NPCSAVETIME'] = "Säästä: ";
				t['TOTALTROOPS'] = "Kylän joukkojen kokonaismäärä";
				t['SELECTALLTROOPS'] = "Valitse kaikki joukot";
				t['PARTY'] = "Juhlat";
				t['CPPERDAY'] = "KP/päivä";
				t['SLOT'] = "Kyliä";
				t['TOTAL'] = "Yhteensä";
				t['SELECTSCOUT'] = "Valitse tiedustelija";
				t['SELECTFAKE'] = "Valitse hämy";
				t['ALL'] = "Kaikki";
				t['SH2'] = "Värikentissä voit käyttää:<br />- <b>Green</b> , <b>red</b> , <b>orange</b> jne.<br />- HEX värikoodeja kuten <b>#004523</b><br />- Oletus: tyhjä";
				t['SOREP'] = "Näytä alkuperäinen raportti";
				t['WSIMO1'] = "Sisäinen (Pelin tarjoama)";
				t['WSIMO2'] = "Ulkoinen (kirilloid.ru tarjoama)";
				t['NONEWVER'] = "Sinulla on uusin saatavilla oleva versio";
				t['BVER'] = "Sinulla saattaa olla beta-versio";
				t['NVERAV'] = "Scriptistä on saatavilla uusi versio";
				t['UPDSCR'] = "Päivitä scripti nyt ?";
				t['CHECKUPDATE'] = "Tarkistetaan päivitystä scriptille.<br />Odota hetki...";
				t['AVPPV'] = "Kylien keskimääräinen asukasluku";
				t['AVPPP'] = "Pelaajien keskimääräinen asukasluku";
				t['MAX'] = "Enintään";
				t['TOTTRTR'] = "Koulutuksessa olevien joukkojen kokonaismäärä";
				t['TB3SL'] = "$1 Asetukset";
				t['UPDALLV'] = "Päivitä kaikki kylät. HUOMIOI: SAATTAA JOHTAA TILIN JÄÄDYTTÄMISEEN!!";
				t['LARGEMAP'] = "Iso kartta";
				t['USETHEMPR'] = "Käytä ne (Prosentuaalisesti)";
				t['USETHEMEQ'] = "Käytä ne (tasaisesti)";
				t['GSRVT'] = "Serveri";
				t['ACCINFO'] = "Tilin tiedot";
				t['NBO'] = "Muistilappu";
				t['MNUL'] = "Vasemmanpuoleinen valikko";
				t['STAT'] = "Tilastot";
				t['RESF'] = "Resurssikentät";
				t['VLC'] = "Kylän keskusta";
				t['MAPO'] = "Kartta asetukset";
				t['COLO'] = "Väri asetukset";
				t['DBGO'] = "Debug asetukset";
				t['NOW'] = "Nyt";
				t['CLOSE'] = "Sulje";
				t['USETHEM1H'] = "Käytä ne (Tunnin tuotto)";
				t['OVERVIEW'] = "Yleiskatsaus";
				t['FORUM'] = "Foorumi";
				t['ATTACKS'] = "Hyökkäykset";
				t['NEWS'] = "Uutiset";
				t['ADDCRTPAGE'] = "Lisää nykyinen";
				t['SPACER'] = "Väliviiva";
				t['MEREO'] = "Viestit ja Raportit";
				t['ATTABLES'] = "Joukko taulukot";
				t['MTW'] = "Tuhlattu";
				t['MTX'] = "Ylittää";
				t['MTC'] = "Nykyinen määrä";
				t['ALFL'] = "Linkki pelin ulkopuoliselle foorumille<br />(Jätä tyhjäksi kun käytät pelinsisäistä foorumia)";
				t['MTCL'] = "Tyhjennä kaikki";
				t['CKSORT'] = "Klikkaa järjestääksesi";
				t['MIN'] = "Vähintään";
				t['SVGL'] = "Jaa kylien välillä";
				t['VGL'] = "Kylälista";
				t['UPDATEPOP'] = "Päivitä asukasluku";
				t['EDIT'] = "Muokkaa";
				t['NPCO'] = "NPC Avustajan asetukset";
				t['NEWVILLAGEAV'] = "Päivä ja aika";
				t['TIMEUNTIL'] = "Aikaa jäljellä";
				t['CENTERMAP'] = "Keskitä kartta tähän kylään";
				t['SENDTROOPS'] = "Lähetä joukkoja";
				t['UPGTB'] = "Resurssikentät/Rakennukset";
				t['RBTT'] = "Resurssipalkki";
				t['USE'] = "Käytä";
				t['RESIDUE'] = "Ylijäävät resurssit jos rakennat";
				t['RESOURCES'] = "Resurssit";
				t['SH1'] = "Automaattinen kaupunki ja koordinaatti tunnistus, kun käyt profiilissasi<br />Automaattinen rotu tunnistus, kun rakennat ja avaat kasarmin";
				t['RESEND'] = "Lähetä uudelleen?";
				t['WSI'] = "Pelin sisäinen taistelusimulaattori";
				t['TTT'] = "Yleiset joukko ja matka vihjeet";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Kylälista";
				t['112'] = "Näytä matkat ja ajat";
				t['114'] = "KP/päivä";
				break;
			case 'fr':
				t['1'] = "Serveur Travian v2.x";
				t['3'] = "Forcer le calcul des Légionnaires & Phalanges T3.1<br>(pour les serveurs mixtes 3.1 et 3.5)";
				t['4'] = "Marché";
				t['5'] = "Rassemblement/Caserne/Atelier/Etable";
				t['6'] = "Hotel de ville/Manoir héros/Armurerie/Usine";
				t['7'] = "Palais/Residence/Academie/Tresor";
				t['9'] = "Ajouter liens dans menu gauche<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Simulateur de combat à utiliser :<br>(menu gauche)";
				t['12'] = "Afficher liens 'Global' et 'Centre' sur liste des Villages";
				t['13'] = "Afficher l icone \"Centrer sur ce village\"";
				t['16'] = "Afficher la production de cereales dans la liste des villages";
				t['17'] = "Afficher la population dans la liste des villages";
				t['18'] = "Afficher en plus une liste des villages (2 colonnes) en fenêtre flottante";
				t['19'] = "Afficher les informations sur les constructions et les mouvements de troupes dans la liste de villages";
				t['20'] = "Afficher les liens favoris";
				t['21'] = "Afficher 'Liens favoris' comme une fenetre flotante";
				t['22'] = "Afficher le bloc-notes";
				t['23'] = "Afficher 'Bloc note' comme une fenetre flotante";
				t['24'] = "Taille Bloc-notes";
				t['25'] = "Hauteur Bloc-notes";
				t['26'] = "Afficher options NPC Assistant";
				t['27'] = "Analyseur à utiliser ";
				t['28'] = "Afficher liens Analyseur";
				t['29'] = "Analyser de carte a utiliser";
				t['30'] = "Afficher un lien vers la carte pour les joueurs";
				t['31'] = "Afficher un lien vers la carte pour les alliances";
				t['32'] = "Afficher 'Rechercher'";
				t['33'] = "Afficher 'Rechercher' dans fenêtre flottante";
				t['34'] = "Afficher PC/jour dans le tableau";
				t['35'] = "Afficher la consommation de cereales dans le tableau";
				t['37'] = "Afficher tableau sur page ressources";
				t['38'] = "Afficher les ressources en couleur";
				t['39'] = "Afficher le tableau de 'Barre de ressource'";
				t['40'] = "Afficher le tableau de 'Barre de ressource' comme une fenetre flotante";
				t['41'] = "Afficher tableau sur page batiments";
				t['42'] = "Classer les batiments par nom dans le tableau";
				t['43'] = "Afficher nombres";
				t['44'] = "Afficher les batiments en couleur";
				t['45'] = "Afficher niveau clignotant sur batiment constructible";
				t['48'] = "Nombre de pages des offres marché ('Marché => Offre')<br>à charger/consulter (Défaut = 1)";
				t['49'] = "Action par défaut sur place de rassemblement";
				t['50'] = "Nb. d'éclaireurs lors du clic sur \"Eclaireur\"";
				t['53'] = "Afficher info troupes dans info-bulle";
				t['54'] = "Afficher distance temps dans info bulle";
				t['56'] = "Affiche le type de case (sur carte)<br>lorsdu survol du curseur";
				t['57'] = "Afficher distance & temps";
				t['58'] = "Afficher tableau joueurs/villages/oasis";
				t['59'] = "Nb. de pages message/rapport à charger<br>(Défaut = 1)";
				t['60'] = "Montrer liens pour ouvrir les messages/rapports dans une popup";
				t['61'] = "Afficher \"Tout supprimer\" dans page de rapports";
				t['62'] = "Afficher icone \"Envoi message\" pour moi aussi";
				t['63'] = "Montrer les RC ameliores TB3";
				t['64'] = "Afficher detail Statistiques dans rapport";
				t['65'] = "Couleur pour Construction possible<br>(Vide = couleur par défaut)";
				t['66'] = "Couleur pour 'Niveau max'<br>(Vide = couleur par défaut)";
				t['67'] = "Couleur pour 'Construction impossible'<br>(Vide = couleur par défaut)";
				t['68'] = "Couleur pour 'Construction avec NPC'<br>(Vide = défaut)";
				t['69'] = "Console Log - RÉSERVÉ aux DEVELOPPEURS et DEBUGGEURS<br>(Défaut = 0)";
				t['82.L'] = "Verrouiller (Cache icones pour gérer les liens)";
				t['82.U'] = "Déverrouiller (Affiche icones pour gérer les liens)";
				t['U.2'] = "Peuple";
				t['U.3'] = "Nom de la Capitale";
				t['U.6'] = "Coordonnées de la Capitale";
				t['SIM'] = "Simulateur";
				t['QSURE'] = "Es-tu certain ?";
				t['LOSS'] = "Pertes en matériels";
				t['PROFIT'] = "Rentabilité";
				t['EXTAV'] = "Tu peux déjà augmenter son niveau";
				t['PLAYER'] = "Joueur";
				t['POPULATION'] = "Population";
				t['COORDS'] = "Coordonnées";
				t['SAVED'] = "Sauvegarde";
				t['YOUNEED'] = "Il manque";
				t['TODAY'] = "aujourd'hui";
				t['TOMORROW'] = "demain";
				t['DAYAFTERTOM'] = "après-demain";
				t['BN_GID12'] = "Armurerie";
				t['BN_GID13'] = "Usine armure";
				t['BN_GID16'] = "Place de rassemblement";
				t['BN_GID17'] = "Place du marché";
				t['BN_GID19'] = "Caserne";
				t['BN_GID20'] = "Ecurie";
				t['BN_GID21'] = "Atelier";
				t['BN_GID22'] = "Académie";
				t['BN_GID24'] = "Hotel de ville";
				t['BN_GID25'] = "Résidence";
				t['BN_GID26'] = "Palais";
				t['BN_GID27'] = "Trésor";
				t['BN_GID37'] = "Manoir Héros";
				t['SENDRES'] = "Envoyer des ressources";
				t['BUY'] = "Acheter des ressources";
				t['SELL'] = "Vendre des ressources";
				t['SENDIGM'] = "Envoyer MSG";
				t['LISTO'] = "Prêt";
				t['ON'] = "le";
				t['AT'] = "à";
				t['EFICIENCIA'] = "Efficacité";
				t['NEVER'] = "Jamais";
				t['TIEMPO'] = "Temps";
				t['OFREZCO'] = "Offre";
				t['BUSCO'] = "Recherche";
				t['DISPONIBLE'] = "Disponible";
				t['CUALQUIERA'] = "Toutes";
				t['YES'] = "Oui";
				t['NO'] = "Non";
				t['MARCADORES'] = "Liens";
				t['ANYADIR'] = "Ajouter";
				t['UBU'] = "URL du nouveau lien";
				t['UBT'] = "Texte du nouveau lien";
				t['DEL'] = "Supprimer";
				t['MAPA'] = "Carte";
				t['MAXTIME'] = "Temps maximum";
				t['SUMMARY'] = "Résumé";
				t['TROPAS'] = "Troupes";
				t['CHKSCRV'] = "MàJ TBeyond";
				t['ACTUALIZAR'] = "Mise a jour informations village";
				t['VENTAS'] = "Paramètres Vente";
				t['MAPSCAN'] = "Analyse de la carte - ATTENTION NE PAS UTILISER- RISQUE BLOCAGE OP !";
				t['BIC'] = "Afficher les icones étendues";
				t['SAVE'] = "Sauver";
				t['AT2'] = "Assistance";
				t['AT3'] = "Attaque: Normal";
				t['AT4'] = "Attaque: Pillage";
				t['NBSN'] = "Normal";
				t['NBSB'] = "Large";
				t['NBHAX'] = "Hauteur Auto";
				t['NBHK'] = "Hauteur par défaut";
				t['NPCSAVETIME'] = "Sauver : ";
				t['TOTALTROOPS'] = "Troupes totales du village";
				t['SELECTALLTROOPS'] = "Tout sélectionner";
				t['PARTY'] = "Festivités";
				t['CPPERDAY'] = "PC/jour";
				t['SELECTSCOUT'] = "Eclaireur";
				t['SELECTFAKE'] = "Diversion";
				t['ALL'] = "Tout";
				t['SH2'] = "Dans case 'Couleur' vous pouvez saisir :<br>-red ou orange, etc.<br>- ou une couleur HEX exemple :#004523<br>- Laisser vide pour couleur par défaut";
				t['SOREP'] = "Rapport original (A cocher obligatoirement avant diffusion du RC)";
				t['WSIMO1'] = "Interne (celui du jeu)";
				t['WSIMO2'] = "Externe (fourni par kirilloid.ru)";
				t['NONEWVER'] = "Pas de mise à jour disponible";
				t['BVER'] = "Tu as une version Beta du script (supérieure à version officielle) - Mise à jour impossible";
				t['NVERAV'] = "Une nouvelle version du script est disponible";
				t['UPDSCR'] = "Mettre à jour le script ?";
				t['CHECKUPDATE'] = "Recherche de nouvelle version du script.<br>Veuillez patienter...";
				t['AVPPV'] = "Population moyenne par village";
				t['AVPPP'] = "Population moyenne par joueur";
				t['TOTTRTR'] = "Total troupes en fabrication ";
				t['UPDALLV'] = "Actualiser tous les villages. ATTENTION : NE PAS UTILISER - RISQUE BLOCAGE OP. !";
				t['LARGEMAP'] = "Carte étendue";
				t['USETHEMPR'] = "Calculer (proportionnel)";
				t['USETHEMEQ'] = "Calculer (égalité)";
				t['GSRVT'] = "Type de serveur";
				t['ACCINFO'] = "Données personnelles";
				t['NBO'] = "Bloc-notes";
				t['MNUL'] = "Menu à gauche";
				t['STAT'] = "Statistiques";
				t['RESF'] = "Vue globale";
				t['VLC'] = "Centre village";
				t['MAPO'] = "options Carte";
				t['COLO'] = "options Couleur";
				t['DBGO'] = "options Debug";
				t['NOW'] = "Maintenant";
				t['CLOSE'] = "Fermer";
				t['USETHEM1H'] = "Calculer 1h de Prod.";
				t['OVERVIEW'] = "Vue globale";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Attaques";
				t['NEWS'] = "Nouvelles";
				t['ADDCRTPAGE'] = "Marquer cette page";
				t['SCRPURL'] = "Page TBeyond";
				t['SPACER'] = "Séparateur";
				t['MEREO'] = "Messages & Rapports";
				t['ATTABLES'] = "Liste troupes";
				t['MTW'] = "Non utilisé";
				t['MTX'] = "En trop";
				t['MTC'] = "Transporté";
				t['ALFL'] = "Lien vers forum externe<br>(Laisser vide pour forum interne)";
				t['MTCL'] = "Tout effacer";
				t['CKSORT'] = "Cliquer pour trier";
				t['SVGL'] = "Sauver pour tous";
				t['VGL'] = "Liste des Villages";
				t['UPDATEPOP'] = "MaJ pop.";
				t['EDIT'] = "Editer";
				t['NPCO'] = "Options assistant NPC";
				t['NEWVILLAGEAV'] = "Date/Heure";
				t['TIMEUNTIL'] = "Temps d attente";
				t['CENTERMAP'] = "Centrer la carte sur ce village";
				t['SENDTROOPS'] = "Envoyer troupes";
				t['UPGTB'] = "Tableau de mise a jour des batiments/champs";
				t['RBTT'] = "Barre de ressource";
				t['USE'] = "Utiliser";
				t['CROPFINDER'] = "Recherche 15C";
				t['VGL2'] = "Liste des Villages";
				t['112'] = "Afficher distance & temps";
				t['114'] = "PC/jour";
				break;
			case 'hk':
			case 'tw':
				t['1'] = "Travian v2.x 伺服器";
				t['2'] = "移除廣告列";
				t['3'] = "修正古羅馬步兵及方陣兵的負載量<br>(僅適用於混合 T3.1 & T3.5 的伺服器)";
				t['4'] = "市場";
				t['5'] = "集結點/兵營/工場/馬廄";
				t['6'] = "村會堂/英雄宅/鐵匠/盔甲廠";
				t['7'] = "皇宮/行宮/研究院/寶物庫";
				t['8'] = "聯盟";
				t['9'] = "在左側選單中顯示更多連結<br>(Traviantoolbox, World Analyser, Travilog, Map, 等等.)";
				t['10'] = "左側選單的戰鬥模擬器連結";
				t['11'] = "張貼戰鬥報告的網站連結";
				t['12'] = "在村莊旁顯示 'dorf1.php'和'dorf2.php'的圖示";
				t['13'] = "在村莊旁顯示 '地圖置中'的圖示";
				t['15'] = "在村莊旁顯示 木材、磚塊、鋼鐵的每小時產量";
				t['16'] = "在村莊旁顯示 有效糧產";
				t['17'] = "在村莊旁顯示 村莊人口";
				t['18'] = "在浮動視窗顯示額外的村莊列表(兩列排序)";
				t['19'] = "在村莊旁顯示 建造中建築和軍隊移動的訊息";
				t['20'] = "顯示書籤";
				t['21'] = "在浮動視窗顯示書籤";
				t['22'] = "顯示筆記欄";
				t['23'] = "在浮動視窗顯示筆記欄";
				t['24'] = "筆記欄大小";
				t['25'] = "筆記欄高度";
				t['26'] = "顯示NPC交易的連結和計算";
				t['27'] = "選取世界分析網站";
				t['28'] = "在玩家名稱右側顯示分析連結";
				t['29'] = "選取地圖分析網站";
				t['30'] = "在玩家名稱右側顯示分析連結";
				t['31'] = "在聯盟名稱右側顯示分析連結";
				t['32'] = "顯示 '搜尋列'";
				t['33'] = "在浮動視窗顯示搜尋列";
				t['34'] = "在升級表單顯示 文明點資訊";
				t['35'] = "在升級表單顯示 糧食消耗";
				t['36'] = "在升級表單顯示 建造時已存資源及建造後剩餘資源";
				t['37'] = "顯示全資源田升級表單";
				t['38'] = "顯示資源田等級顏色";
				t['39'] = "顯示資源列表單";
				t['40'] = "在浮動視窗顯示資源列表單";
				t['41'] = "顯示全建築物升級表單";
				t['42'] = "在升級表單顯示 以建築名稱排序的表單";
				t['43'] = "顯示建築物等級";
				t['44'] = "顯示建築物等級顏色";
				t['45'] = "閃爍顯示正在升級的建築";
				t['46'] = "顯示每筆抵達商人的額外詳細資訊";
				t['48'] = "預先載入的頁數<br>'市場 → 買進' 的頁面中<br>(預設 = 1, 最多 = 5)";
				t['49'] = "集結點的預設行動";
				t['50'] = "設定\"選取偵察軍隊\"時<br>預設派出的軍隊數量";
				t['53'] = "在tooltip中顯示軍隊資料";
				t['54'] = "在tooltip中顯示距離和時間";
				t['56'] = "當滑鼠移到時<br>顯示村莊種類或綠洲資料";
				t['57'] = "顯示距離及時間";
				t['58'] = "在地圖顯示 玩家/村莊/綠洲 表單";
				t['59'] = "預先載入的頁數<br> 訊息和報告 的頁面中<br>(預設 = 1, 最多 = 5)";
				t['60'] = "顯示以彈出視窗方式讀取IGM的連結";
				t['61'] = "在報告頁面顯示 \"全部刪除\" 表單";
				t['62'] = "顯示 \"發IGM給自己\" 的圖示";
				t['63'] = "顯示強化的戰鬥報告";
				t['64'] = "顯示詳細戰鬥統計報告";
				t['65'] = "已可升級的顏色<br>(預設 = 空白)";
				t['66'] = "已達最高等級的顏色<br>(預設 = 空白)";
				t['67'] = "不可升級的顏色<br>(預設 = 空白)";
				t['68'] = "可利用NPC交易來升級的顏色<br>(預設 = 空白)";
				t['69'] = "程式記錄等級<br>只適用於程式開發員 或 除蟲工作<br>(預設 = 0)";
				t['82.L'] = "鎖定書籤 (隱藏 刪除, 移上, 移下的圖示)";
				t['82.U'] = "解鎖書籤 (顯示 刪除, 移上, 移下的圖示)";
				t['U.2'] = "種族";
				t['U.3'] = "您村莊的名稱<br>請瀏覽個人資料來進行自動更新，不要手動修改此欄";
				t['U.6'] = "您村莊的坐標<br>請瀏覽個人資料來進行自動更新，不要手動修改此欄";
				t['SIM'] = "戰鬥模擬器";
				t['QSURE'] = "是否確定?";
				t['LOSS'] = "損失";
				t['PROFIT'] = "獲益";
				t['EXTAV'] = "已可升級!";
				t['PLAYER'] = "玩家";
				t['VILLAGE'] = "村莊";
				t['POPULATION'] = "人口";
				t['COORDS'] = "座標";
				t['MAPTBACTS'] = "行動";
				t['SAVED'] = "儲存";
				t['YOUNEED'] = "您要";
				t['TODAY'] = "今天";
				t['TOMORROW'] = "明天";
				t['DAYAFTERTOM'] = "後天";
				t['BN_GID12'] = "鐵匠";
				t['BN_GID13'] = "盔甲廠";
				t['BN_GID16'] = "集結點";
				t['BN_GID17'] = "市場";
				t['BN_GID19'] = "兵營";
				t['BN_GID20'] = "馬廄";
				t['BN_GID21'] = "工場";
				t['BN_GID22'] = "研究院";
				t['BN_GID24'] = "村會堂";
				t['BN_GID25'] = "行宮";
				t['BN_GID26'] = "皇宮";
				t['BN_GID27'] = "寶物庫";
				t['BN_GID37'] = "英雄宅";
				t['SENDRES'] = "運送資源";
				t['BUY'] = "買進";
				t['SELL'] = "賣出";
				t['SENDIGM'] = "發送IGM";
				t['LISTO'] = "升級可於";
				t['ON'] = "-";
				t['AT'] = "-";
				t['EFICIENCIA'] = "效率";
				t['NEVER'] = "永不";
				t['ALDEAS'] = "村莊";
				t['TIEMPO'] = "時間";
				t['OFREZCO'] = "提供";
				t['BUSCO'] = "搜索";
				t['TIPO'] = "比例";
				t['DISPONIBLE'] = "忽略過少物資";
				t['CUALQUIERA'] = "所有";
				t['YES'] = "是";
				t['NO'] = "否";
				t['LOGIN'] = "登入";
				t['MARCADORES'] = "書籤";
				t['ANYADIR'] = "加入";
				t['UBU'] = "新書籤網址";
				t['UBT'] = "新書籤標題(只限英文及數字)";
				t['DEL'] = "刪除";
				t['MAPA'] = "地圖 (TravMap)";
				t['MAXTIME'] = "最大運輸時間";
				t['ARCHIVE'] = "儲存";
				t['SUMMARY'] = "概要";
				t['TROPAS'] = "軍隊";
				t['CHKSCRV'] = "檢查版本更新";
				t['ACTUALIZAR'] = "更新此村莊的資料";
				t['VENTAS'] = "賣出紀錄";
				t['MAPSCAN'] = "搜尋此地圖";
				t['BIC'] = "顯示更多快捷圖示";
				t['SAVE'] = "儲存";
				t['AT2'] = "增援";
				t['AT3'] = "攻擊：正常";
				t['AT4'] = "攻擊：搶奪";
				t['NBSA'] = "自動";
				t['NBSN'] = "普通 (細)";
				t['NBSB'] = "大畫面 (大)";
				t['NBHAX'] = "自動變更高度";
				t['NBHK'] = "固定高度";
				t['NPCSAVETIME'] = "儲存資源需時：";
				t['TOTALTROOPS'] = "此村莊的軍隊總數";
				t['SELECTALLTROOPS'] = "選取全部士兵";
				t['PARTY'] = "慶祝";
				t['CPPERDAY'] = "文明點（每天）";
				t['SLOT'] = "擴展量";
				t['TOTAL'] = "總數";
				t['SELECTSCOUT'] = "選取偵察軍隊";
				t['SELECTFAKE'] = "選取佯攻軍隊";
				t['ALL'] = "全部";
				t['SH2'] = "在欄位中，可以輸入：<br>- green 或 red 或 orange, 等等...<br>- 或是輸入顏色的16進制碼，如 #004523<br>- 也可以保留空白來使用預設顏色";
				t['SOREP'] = "顯示原始的報告 (給張貼用)";
				t['WSIMO1'] = "內置 (由遊戲所提供)";
				t['WSIMO2'] = "外連 (由kirilloid.ru提供)";
				t['NONEWVER'] = "您正在使用最新版本";
				t['BVER'] = "目前正在使用測試版";
				t['NVERAV'] = "目前已有更新的版本，";
				t['UPDSCR'] = "是否需要更新？";
				t['CHECKUPDATE'] = "正在檢查程式更新，請稍候...";
				t['AVPPV'] = "平均每村人口";
				t['AVPPP'] = "平均每玩家人口";
				t['MAX'] = "最多";
				t['TOTTRTR'] = "所有正在訓練的士兵";
				t['TB3SL'] = "設定 TBeyond ML&CN";
				t['UPDALLV'] = "更新所有村莊資料。(有機會導致被鎖帳號)";
				t['LARGEMAP'] = "大地圖";
				t['USETHEMPR'] = "派出所有商人 (按資源比例分配)";
				t['USETHEMEQ'] = "派出所有商人 (平均分配)";
				t['GSRVT'] = "遊戲伺服器";
				t['ACCINFO'] = "帳號資料";
				t['NBO'] = "筆記欄";
				t['MNUL'] = "左側選單";
				t['STAT'] = "統計";
				t['RESF'] = "資源田";
				t['VLC'] = "城鎮中心";
				t['MAPO'] = "地圖設定";
				t['COLO'] = "顏色設定";
				t['DBGO'] = "除蟲設定";
				t['NOW'] = "現在";
				t['CLOSE'] = "關閉";
				t['USETHEM1H'] = "派出所有商人 (資源1小時產量)";
				t['OVERVIEW'] = "概要";
				t['FORUM'] = "論壇";
				t['ATTACKS'] = "攻擊";
				t['NEWS'] = "新聞";
				t['ADDCRTPAGE'] = "加入此頁";
				t['SCRPURL'] = "TB ML&CN 官網";
				t['SPACER'] = "分隔線";
				t['MEREO'] = "訊息和報告";
				t['ATTABLES'] = "軍隊列表";
				t['MTW'] = "浪費負載";
				t['MTX'] = "超載量";
				t['MTC'] = "目前總搬運量";
				t['ALFL'] = "連結到自設聯盟論壇<br>(保留空白來使用預設聯盟論壇)";
				t['MTCL'] = "全部清除";
				t['CKSORT'] = "點擊來排序";
				t['MIN'] = "最少";
				t['SVGL'] = "分享記錄到其他村莊";
				t['VGL'] = "村莊列表";
				t['UPDATEPOP'] = "更新人口";
				t['EDIT'] = "編輯";
				t['NPCO'] = "NPC交易選項";
				t['NEWVILLAGEAV'] = "日期/時間";
				t['TIMEUNTIL'] = "需要等待的時間";
				t['CENTERMAP'] = "將村莊在地圖置中";
				t['SENDTROOPS'] = "派遣軍隊";
				t['UPGTB'] = "資源田/建築物升級表單";
				t['RBTT'] = "資源列";
				t['USE'] = "送出";
				t['RESIDUE'] = "建造後剩餘資源";
				t['RESOURCES'] = "建造時已存資源";
				t['SH1'] = "點擊玩家資料連結以取得首都相關資料<br>接著建造或點擊兵營以偵測種族，然後再開啟村莊大樓。";
				t['CROPFINDER'] = "搜田工具";
				t['VGL2'] = "村莊列表";
				t['112'] = "顯示距離及時間";
				t['114'] = "文明點（每天）";
				break;
			case 'hu':
				t['1'] = "Travian v2.x kiszolgáló";
				t['4'] = "Piac";
				t['5'] = "Gyülekezõtér/Kaszárnya/Mûhely/Istálló";
				t['6'] = "Tanácsháza/Hõsök háza/Páncélkovács/Fegyverkovács";
				t['7'] = "Palota/Rezidencia/Akadémia/Kincstár";
				t['8'] = "Klán";
				t['9'] = "További linkek bal oldalon<br>(Traviantoolbox, World Analyser, Travilog, Térkép, stb.)";
				t['10'] = "Harcszimulátor link:<br>(bal oldali menü)";
				t['12'] = "'dorf1.php' és 'dorf2.php' linkek mutatása";
				t['13'] = "Mutasd a \"Térkép központosítása\" ikont";
				t['20'] = "Könyvjelzõk mutatása";
				t['22'] = "Jegyzettömb mutatása";
				t['24'] = "Jegyzettömb mérete";
				t['25'] = "Jegyzettömb magassága";
				t['26'] = "NPC segítõ számítások és linkek mutatása";
				t['27'] = "World Analyser választása";
				t['28'] = "Linkek a statisztika elemzõhöz";
				t['37'] = "Külterület fejlesztési táblája";
				t['38'] = "Külterület színjelzése";
				t['41'] = "Épületek fejlesztési táblája";
				t['43'] = "Épület szintek mutatása";
				t['44'] = "Épületek színjelzése";
				t['45'] = "Villogó szintjelzés az éppen fejlesztett épületekhez";
				t['48'] = "Piaci ajánlatoknál több oldal elõre betöltése<br>A Piac -Vásárlás- oldalán<br>(Alap = 1)";
				t['49'] = "Gyülekezõtér alapmûvelet";
				t['50'] = "Kémek száma a \"Kémek választása\" funkcióhoz";
				t['53'] = "Egység információ mutatása gyorstippben";
				t['54'] = "Távolság és idõ mutatása falvakhoz";
				t['56'] = "Mezõ-típus, oázis infó mutatása<br>az egérmutató alatt";
				t['57'] = "Távolság/idõ mutatása";
				t['58'] = "Játékosok/falvak/oázisok mutatása a térképnél";
				t['59'] = "Üzenetek/jelentések elõre betöltött oldalainak száma<br>(Default = 1)";
				t['60'] = "Linkek az üzenetek felugró ablakban mutatásához";
				t['61'] = "\"Mindet törölni\" mutatása a jelentésekhez";
				t['62'] = "\"Üzenet küldése\" mutatása magam részére is";
				t['64'] = "Jelentés statisztika részletezése";
				t['65'] = "Szín, ha fejleszthetõ<br>(az alaphoz hagyd üresen)";
				t['66'] = "Szín, ha teljesen ki van építve<br>(az alaphoz hagyd üresen)";
				t['67'] = "Szín, ha nem elérhetõ a fejlesztés<br>(az alaphoz hagyd üresen)";
				t['68'] = "Szín, ha NPC-vel fejleszthetõ<br>(az alaphoz hagyd üresen)";
				t['69'] = "Konzol naplózási szint<br>CSAK PROGRAMOZÓKNAK VAGY HIBAKERESÉSHEZ<br>(Alap = 0)";
				t['82.L'] = "Könyvjelzõk lezárása (Törlés és mozgatás ikonok eltüntetése)";
				t['82.U'] = "Könyvjelzõk feloldása (Törlés és mozgatás ikonok mutatása)";
				t['U.2'] = "Nép";
				t['U.3'] = "Fõfalud neve<br><a href=\"spieler.php\">Nézd meg a profilodat a frissítéshez</a>";
				t['U.6'] = "Fõfalud koordinátái<br><a href=\"spieler.php\">Nézd meg a profilodat a frissítéshez</a>";
				t['SIM'] = "Harc szimulátor";
				t['QSURE'] = "Biztos vagy benne?";
				t['LOSS'] = "Veszteség";
				t['PROFIT'] = "Nyereség";
				t['EXTAV'] = "Fejlesztés elérhetõ";
				t['PLAYER'] = "Játékos";
				t['VILLAGE'] = "Falu";
				t['POPULATION'] = "Népesség";
				t['COORDS'] = "Koordináták";
				t['MAPTBACTS'] = "Mozgás:";
				t['SAVED'] = "Mentve";
				t['YOUNEED'] = "Kell";
				t['TODAY'] = "ma";
				t['TOMORROW'] = "holnap";
				t['DAYAFTERTOM'] = "holnapután";
				t['BN_GID12'] = "Fegyverkovács";
				t['BN_GID13'] = "Páncélkovács";
				t['BN_GID16'] = "Gyülekezõtér";
				t['BN_GID17'] = "Piac";
				t['BN_GID19'] = "Kaszárnya";
				t['BN_GID20'] = "Istálló";
				t['BN_GID21'] = "Mûhely";
				t['BN_GID22'] = "Akadémia";
				t['BN_GID24'] = "Tanácsháza";
				t['BN_GID25'] = "Rezidencia";
				t['BN_GID26'] = "Palota";
				t['BN_GID27'] = "Kincstár";
				t['BN_GID37'] = "Hõsök háza";
				t['SENDRES'] = "Nyersanyag küldése";
				t['BUY'] = "Vétel";
				t['SELL'] = "Eladás";
				t['SENDIGM'] = "Üzenet küldése";
				t['LISTO'] = "Elérhetõ";
				t['ON'] = "ezen a napon:";
				t['AT'] = "ekkor:";
				t['EFICIENCIA'] = "Hatékonyság";
				t['NEVER'] = "Soha";
				t['ALDEAS'] = "Falvak";
				t['TIEMPO'] = "Idõ";
				t['OFREZCO'] = "Felajánlás";
				t['BUSCO'] = "Keresés";
				t['TIPO'] = "Típus";
				t['DISPONIBLE'] = "Csak elfogadhatót";
				t['CUALQUIERA'] = "Mind";
				t['YES'] = "Igen";
				t['NO'] = "Nem";
				t['LOGIN'] = "Bejelentkezés";
				t['MARCADORES'] = "Könyvjelzõk";
				t['ANYADIR'] = "Hozzáad";
				t['UBU'] = "Könyvjelzõ URL";
				t['UBT'] = "Könyvjelzõ szövege";
				t['DEL'] = "Törlés";
				t['MAPA'] = "Térkép";
				t['MAXTIME'] = "Maximum idõ";
				t['ARCHIVE'] = "Archívum";
				t['SUMMARY'] = "Összefoglalás";
				t['TROPAS'] = "Egységek";
				t['CHKSCRV'] = "TBeyond frissítése";
				t['ACTUALIZAR'] = "Falu információ frissítése";
				t['VENTAS'] = "Mentett ajánlatok";
				t['MAPSCAN'] = "Térkép vizsgálata";
				t['BIC'] = "Bõvített ikonok";
				t['SAVE'] = "Mentés";
				t['AT2'] = "Támogatás";
				t['AT3'] = "Normál támadás";
				t['AT4'] = "Rablótámadás";
				t['NBSA'] = "Automatikus";
				t['NBSN'] = "Normál (kicsi)";
				t['NBSB'] = "Nagy képernyõ (nagy)";
				t['NBHAX'] = "Magasság automatikus bõvítése";
				t['NBHK'] = "Alap magasság";
				t['NPCSAVETIME'] = "Spórolsz: ";
				t['TOTALTROOPS'] = "A faluban képzett egységek";
				t['SELECTALLTROOPS'] = "Minden egység kiválasztása";
				t['PARTY'] = "Ünnepségek";
				t['CPPERDAY'] = "KP/nap";
				t['SLOT'] = "Hely";
				t['TOTAL'] = "Teljes";
				t['SELECTSCOUT'] = "Kémek kiválasztása";
				t['SELECTFAKE'] = "Fake kiválasztása";
				t['ALL'] = "Mind";
				t['SH2'] = "A színeket így add meg:<br>- green vagy red vagy  orange stb.<br>- vagy HEX színkóddal #004523<br>- hagyd üresen az alapértelmezett színhez";
				t['SOREP'] = "Eredeti jelentés (küldéshez)";
				t['WSIMO1'] = "Beépített";
				t['WSIMO2'] = "Külsõ (kirilloid.ru által)";
				t['NONEWVER'] = "A legújabb verziót használod";
				t['BVER'] = "Lehet hogy BETA verziód van";
				t['NVERAV'] = "A szkript új verziója elérhetõ";
				t['UPDSCR'] = "Frissíted most?";
				t['CHECKUPDATE'] = "Szkript-frissítés keresése.<br>Kérlek várj...";
				t['AVPPV'] = "Falunkénti átlag népesség";
				t['AVPPP'] = "Játékosonkénti átlag népesség";
				t['TOTTRTR'] = "Összes kiképzés alatt álló egység";
				t['TB3SL'] = "$1 Beállítások";
				t['UPDALLV'] = "Minden falu frissítése. HASZNÁLD ÓVATOSAN, TILTÁS JÁRHAT ÉRTE!";
				t['LARGEMAP'] = "Nagy térkép";
				t['USETHEMPR'] = "Arányos elosztás";
				t['USETHEMEQ'] = "Egyenlõ elosztás";
				t['GSRVT'] = "Játék kiszolgáló";
				t['ACCINFO'] = "Felhasználó információ";
				t['NBO'] = "Jegyzettömb";
				t['MNUL'] = "Baloldali menü";
				t['STAT'] = "Statisztikák";
				t['RESF'] = "Külterület";
				t['VLC'] = "Faluközpont";
				t['MAPO'] = "Térkép beállítások";
				t['COLO'] = "Szín beállítások";
				t['DBGO'] = "Hibakeresési beállítások";
				t['NOW'] = "Most";
				t['CLOSE'] = "Bezárás";
				t['USETHEM1H'] = "Egy órai termelés";
				t['OVERVIEW'] = "Áttekintés";
				t['FORUM'] = "Fórum";
				t['ATTACKS'] = "Támadások";
				t['NEWS'] = "Hírek";
				t['ADDCRTPAGE'] = "Jelenlegi hozzáadása";
				t['SCRPURL'] = "TBeyond oldal";
				t['SPACER'] = "Elválasztó";
				t['MEREO'] = "Üzenetek & Jelentések";
				t['ATTABLES'] = "Egység tábla";
				t['MTW'] = "Elpazarolva";
				t['MTX'] = "Meghaladja";
				t['MTC'] = "Jelenlegi rakomány";
				t['ALFL'] = "Link külsõ fórumhoz<br>(belsõhöz hagyd üresen)";
				t['MTCL'] = "Mindet törölni";
				t['CKSORT'] = "Rendezéshez kattints";
				t['MIN'] = "Min";
				t['SVGL'] = "Minden faluhoz menteni";
				t['VGL'] = "Falu lista";
				t['UPDATEPOP'] = "Népesség frissítése";
				t['EDIT'] = "Szerkesztés";
				t['NPCO'] = "NPC segítõ beállításai";
				t['NEWVILLAGEAV'] = "Dátum/Idõ";
				t['TIMEUNTIL'] = "Várakozás";
				t['CENTERMAP'] = "Térkép középpontjába ezt a falut";
				t['SENDTROOPS'] = "Egységek kiküldése";
				t['USE'] = "Használat";
				t['CROPFINDER'] = "Búzakeresõ";
				t['VGL2'] = "Falu lista";
				t['112'] = "Távolság/idõ mutatása";
				t['114'] = "KP/nap";
				break;
			case 'id':
				t['1'] = "Server Travian v2.x";
				t['2'] = "Hilangkan baner iklan";
				t['3'] = "Paksa kalkulasi kapasitas Legionnaire & Phalanx ke T3.1<br>(untuk server campuran T3.1 & T3.5)";
				t['4'] = "Pasar";
				t['5'] = "Titik Temu|Barak|Bengkel|Istal";
				t['6'] = "Balai desa|Padepokan|Pabrik Perisai|Pandai Besi";
				t['7'] = "Istana|Kastil|Akademi|Gudang Ilmu";
				t['8'] = "Aliansi";
				t['9'] = "Tampilkan link tambahan di menu kiri<br>(Travian Toolbox, World Analyser, Travilog, Map, dll.)";
				t['10'] = "Link simulator perang untuk dipakai:";
				t['11'] = "Link situs yang dipakai untuk posting laporan";
				t['12'] = "tampilkan link 'Peninjauan Desa' dan 'Pusat Desa'";
				t['13'] = "Tampilkan ikon 'Tengah peta'";
				t['15'] = "Tampilkan produksi katu, tanah liat, besi per jam";
				t['16'] = "Tampilkan produksi gandum efektif";
				t['17'] = "Tampilkan populasi";
				t['18'] = "Tampilkan daftar desa tambahan sebagai jendela terpisah";
				t['19'] = "Tampilkan informasi tentang pembangunan berjalan dan pergerakan pasukan";
				t['20'] = "Tampilkan bookmark";
				t['21'] = "Tampilkan bookmark sebagai jendela terpisah";
				t['22'] = "Tampilkan blok catatan";
				t['23'] = "Tampilkan blok catatan sebagai jendela terpisah";
				t['24'] = "Ukuran blok catatan";
				t['25'] = "Lebar blok catatan";
				t['26'] = "Tampilkan link/kalkulasi NPC";
				t['27'] = "World Analyser yang dipakai";
				t['28'] = "Tampilkan link Analyser Statistic";
				t['29'] = "Map Analyser yang dipakai";
				t['30'] = "Tampilkan link ke Map Analyser untuk pemain";
				t['31'] = "Tampilkan link ke Map Analyser untuk aliansi";
				t['32'] = "Tampilkan 'Tabel Pencarian'";
				t['33'] = "Tampilkan 'Tabel Pencarian' sebagai jendela terpisah";
				t['34'] = "Tampilkan informasi NB/hari di tabel tingkatan";
				t['35'] = "Tampilkan informasi penggunaan gandum di tabel tingkatan";
				t['36'] = "Tampilkan sisa sumberdaya di tabel tingkatan/pelatihan";
				t['37'] = "Tampilkan tabel tingkatan lahan sumberdaya";
				t['38'] = "Tampilkan warna tingkatan sumberdaya";
				t['39'] = "Tampilkan 'Tabel Sumberdaya'";
				t['40'] = "Tampilkan 'Tabel Sumberdaya' sebagai jendela terpisah";
				t['41'] = "Tampilkan tabel tingkatan bangunan";
				t['42'] = "Urutkan bangunan berdasarkan nama di tabel tingkatan";
				t['43'] = "Tampilkan angka pusat";
				t['44'] = "Tampilkan warna tingkatan bangunan";
				t['45'] = "Tampilkan kedipan untuk bangunan yang sedang ditingkatkan";
				t['46'] = "Tampilkan informasi tambahan di setiap kedatangan pedagang";
				t['47'] = "Tampilkan pengangkutan pasar terakhir";
				t['48'] = "Jumlah halaman penawaran untuk ditampilkan<br>saat ada di halaman 'Pasar => Beli'<br>(Default = 1)";
				t['49'] = "Aksi default dari titik temu";
				t['50'] = "Jumlah pengintai untuk fungsi \"Pilih pengintai\"";
				t['51'] = "Tampilkan serangan terakhir";
				t['52'] = "Tampilkan koordinat serangan terakhir";
				t['53'] = "Tampilkan info pasukan di tooltip";
				t['54'] = "Tampilkan jarak dan waktu ke desa-desa di tooltip";
				t['55'] = "Isi jumlah pasukan tersedia secara otomatis ke simulator perang yang ada";
				t['56'] = "Tampilkan tipe info bidang pada peta";
				t['57'] = "Tampilkan jarak & waktu";
				t['58'] = "Tampilkan tabel pemain/desa/oasis yang dikuasai";
				t['59'] = "Jumlah halaman pesan/laporan untuk ditampilkan<br>(Default = 1)";
				t['60'] = "Tampilkan link untuk membuka pesan dalam popup";
				t['61'] = "Tampilkan tabel \"Hapus semua\" di halaman Laporan";
				t['62'] = "Tampilkan ikon \"Kirim Pesan\"";
				t['63'] = "Tampilkan laporan penyerangan TB3 yang disempurnakan";
				t['64'] = "Tampilkan detail pada Statistik Laporan";
				t['65'] = "Warna upgrade tersedia<br>(Default = Kosong)";
				t['66'] = "Warna level maks<br>(Default = Kosong)";
				t['67'] = "Warna upgrade tidak tersedia<br>(Default = Kosong)";
				t['68'] = "Warna upgrade lewat NPC<br>(Default = Kosong)";
				t['69'] = "Console Log Level<br>HANYA UNTUK PROGRAMMERS ATAU DEBUGGING<br>(Default = 0)";
				t['82.L'] = "Gembok bookmark (sembunyikan ikon hapus, naikkan, turunkan)";
				t['82.U'] = "Lepas bookmark (tampilkan ikon hapus, naikkan, turunkan)";
				t['85'] = "Tampilkan ikon 'Kirim pasukan'/'Kirim sumberdaya'";
				t['87'] = "Ingat opsi kirim 1x/2x/3x yang terakhir pada pasar (jika tersedia)";
				t['91'] = "Kostumisasi daftar desa";
				t['92.L'] = "Kunci daftar desa (sembunyikan ikon pindah ke atas, pindah ke bawah)";
				t['92.U'] = "Buka pengunci daftar desa (tampilkan ikon pindah ke atas, pindah ke bawah)";
				t['U.2'] = "Suku";
				t['U.3'] = "Nama Ibukota<br><b>Kunjungi profil Anda untuk perubahan</b>";
				t['U.6'] = "Koordinat Ibukota Anda<br><b>Kunjungi profil Anda untuk perubahan</b>";
				t['SIM'] = "Simulator Perang";
				t['QSURE'] = "Anda yakin?";
				t['LOSS'] = "Kerugian";
				t['PROFIT'] = "Laba";
				t['EXTAV'] = "Pengembangan tersedia";
				t['PLAYER'] = "Pemain";
				t['VILLAGE'] = "Desa";
				t['POPULATION'] = "Populasi";
				t['COORDS'] = "Koordinat";
				t['MAPTBACTS'] = "Aksi";
				t['SAVED'] = "Disimpan";
				t['YOUNEED'] = "Anda butuh";
				t['TODAY'] = "hari ini";
				t['TOMORROW'] = "besok";
				t['DAYAFTERTOM'] = "lusa";
				t['BN_GID12'] = "Pandai besi";
				t['BN_GID13'] = "Pabrik perisai";
				t['BN_GID16'] = "Titik Temu";
				t['BN_GID17'] = "Pasar";
				t['BN_GID19'] = "Barak";
				t['BN_GID20'] = "Istal";
				t['BN_GID21'] = "Bengkel";
				t['BN_GID22'] = "Akademi";
				t['BN_GID24'] = "Balai Desa";
				t['BN_GID25'] = "Kastil";
				t['BN_GID26'] = "Istana";
				t['BN_GID27'] = "Gudang Ilmu";
				t['BN_GID37'] = "Padepokan";
				t['SENDRES'] = "Kirim sumberdaya";
				t['BUY'] = "Beli";
				t['SELL'] = "Jual";
				t['SENDIGM'] = "Kirim Pesan";
				t['LISTO'] = "Tersedia";
				t['ON'] = "pada";
				t['AT'] = "pukul";
				t['EFICIENCIA'] = "Efisiensi";
				t['NEVER'] = "Tidak akan pernah cukup";
				t['ALDEAS'] = "Desa";
				t['TIEMPO'] = "Waktu";
				t['OFREZCO'] = "Penawaran";
				t['BUSCO'] = "Cari";
				t['TIPO'] = "Tipe";
				t['DISPONIBLE'] = "Hanya tersedia";
				t['CUALQUIERA'] = "Apapun";
				t['YES'] = "Ya";
				t['NO'] = "Tidak";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Bookmark";
				t['ANYADIR'] = "Tambah";
				t['UBU'] = "URL Bookmark";
				t['UBT'] = "Nama Bookmark";
				t['DEL'] = "Hapus";
				t['MAPA'] = "Peta";
				t['MAXTIME'] = "Waktu maks";
				t['ARCHIVE'] = "Arsip";
				t['SUMMARY'] = "Laporan";
				t['TROPAS'] = "Pasukan";
				t['ACTUALIZAR'] = "Update informasi desa";
				t['VENTAS'] = "Simpan penawaran";
				t['MAPSCAN'] = "Pindai peta";
				t['BIC'] = "Tampilkan ikon tambahan";
				t['SAVE'] = "Simpan";
				t['AT2'] = "Bantuan";
				t['AT3'] = "Serangan: Normal";
				t['AT4'] = "Serangan: Raid";
				t['NBSA'] = "Otomatis";
				t['NBSN'] = "Normal (kecil)";
				t['NBSB'] = "Layar lebar (besar)";
				t['NBHAX'] = "Lebar menyesuaikan otomatis";
				t['NBHK'] = "Lebar asal";
				t['NPCSAVETIME'] = "Simpan: ";
				t['TOTALTROOPS'] = "Jumlah pasukan";
				t['SELECTALLTROOPS'] = "Pilih semua pasukan";
				t['PARTY'] = "Pesta";
				t['CPPERDAY'] = "NB/hari";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Pilih pengintai";
				t['SELECTFAKE'] = "Pilih penipu";
				t['ALL'] = "Seluruh";
				t['SH2'] = "Di kolom warna Anda bisa mengisi:<br>- <b>green</b> atau <b>red</b> atau <b>orange</b>, dll.<br>- warna menggunakan kode heksadesilmal (HEX), seperti <b>#004523</b><br>- kosongkan untuk warna default";
				t['SOREP'] = "Tampilkan laporan asli (untuk posting dalam forum)";
				t['WSIMO1'] = "Internal (dari permainan)";
				t['WSIMO2'] = "Eksternal (dari kirilloid.ru)";
				t['NONEWVER'] = "Anda memiliki versi terakhir yang tersedia";
				t['BVER'] = "Anda memiliki versi beta";
				t['NVERAV'] = "Versi script terbaru telah tersedia";
				t['UPDSCR'] = "Update script sekarang?";
				t['CHECKUPDATE'] = "Mengecek update script.<br>Harap tunggu...";
				t['AVPPV'] = "Populasi rata-rata per desa";
				t['AVPPP'] = "Populasi rata-rata per pemain";
				t['MAX'] = "Maks";
				t['TOTTRTR'] = "Total pelatihan pasukan";
				t['UPDALLV'] = "Update semua desa. PEMAKAIAN MAKSIMUM BISA MENYEBABKAN AKUN ANDA DIHAPUS!";
				t['LARGEMAP'] = "Peta lebar";
				t['USETHEMPR'] = "Pakai (proporsional)";
				t['USETHEMEQ'] = "Pakai (sama)";
				t['GSRVT'] = "Server permainan";
				t['ACCINFO'] = "Informasi Akun";
				t['NBO'] = "Catatan";
				t['MNUL'] = "Menu di sebelah kanan";
				t['STAT'] = "Statistik";
				t['RESF'] = "Lahan Sumberdaya";
				t['VLC'] = "Pusat desa";
				t['MAPO'] = "Opsi peta";
				t['COLO'] = "Opsi warna";
				t['DBGO'] = "Opsi debug";
				t['NOW'] = "Sekarang";
				t['CLOSE'] = "Tutup";
				t['USETHEM1H'] = "Pakai (1 jam produksi)";
				t['OVERVIEW'] = "Peninjauan";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Serangan";
				t['NEWS'] = "Berita";
				t['ADDCRTPAGE'] = "Tambahkan halaman ini";
				t['SCRPURL'] = "TBeyond Home";
				t['SPACER'] = "Penjeda";
				t['MEREO'] = "Pesan & Laporan";
				t['ATTABLES'] = "Tabel pasukan";
				t['MTW'] = "Sisa muatan";
				t['MTX'] = "Melampaui";
				t['MTC'] = "Muatan saat ini";
				t['ALFL'] = "Link ke forum luar<br>(kosongkan untuk memakai forum internal)";
				t['MTCL'] = "Kosongkan Semua";
				t['CKSORT'] = "Klik untuk mengurutkan";
				t['MIN'] = "Min";
				t['SVGL'] = "Pembagian diantara desa-desa";
				t['VGL'] = "Daftar Desa";
				t['UPDATEPOP'] = "Update populasi";
				t['EDIT'] = "Ubah";
				t['NPCO'] = "Opsi NPC Assistant";
				t['NEWVILLAGEAV'] = "Tanggal/Waktu";
				t['TIMEUNTIL'] = "Waktu untuk menunggu";
				t['CENTERMAP'] = "Desa ini sebagai tengah-tengah peta";
				t['SENDTROOPS'] = "Kirim Pasukan";
				t['UPGTB'] = "Tabel Tingkatan Sumberdaya/Bangunan";
				t['RBTT'] = "Tabel Sumberdaya";
				t['USE'] = "Pakai";
				t['RESIDUE'] = "Sisa Sumberdaya jika dibangun ";
				t['RESOURCES'] = "Sumberdaya";
				t['SH1'] = "Buka Profil Anda untuk mendeteksi ibukota/koordinat secara otomatis<br>Bangun barak untuk mendeteksi suku secara otomatis lalu membuka pusat desa";
				t['RESEND'] = "Kirim lagi?";
				t['WSI'] = "Simulasi perang yang disediakan oleh permainan";
				t['TTT'] = "Tooltip pasukan/jarak umum";
				t['MTR'] = "Rasio";
				t['USEMTR'] = "Pakai rasio:";
				t['MTRMIN'] = "(minimal harus $1)";
				t['MTRMAX'] = "(maksimal harus $1)";
				t['FINDREP'] = "Cari laporan terbaru";
				t['REP1_TT'] = "Menang sebagai penyerang tanpa korban";
				t['REP2_TT'] = "Menang sebagai penyerang dengan korban";
				t['REP3_TT'] = "Kalah sebagai penyerang";
				t['REP4_TT'] = "Menang sebagai pembela tanpa korban";
				t['REP5_TT'] = "Menang sebagai pembela dengan korban";
				t['REP6_TT'] = "Kalah sebagai pembela dengan korban";
				t['REP7_TT'] = "Kalah sebagai pembela tanpa korban";
				t['VLISTUP'] = "Pindah ke atas";
				t['VLISTDOWN'] = "Pindah ke bawah";
				t['VLISTSEP'] = "Tambah/hapus pemisah horizontal";
				t['VLISTEDIT'] = "Properti desa";
				t['VLISTOPTIONS'] = "Opsi daftar desa";
				t['REPTT'] = "Tampilkan laporan di jendela terpisah";
				t['WMIN'] = "Minimalkan jendela";
				t['WMAX'] = "Maksimalkan jendela";
				t['REFRESHP'] = "Perbarui halaman";
				t['1H'] = "1j";
				t['11.TT'] = "Situs Posting laporan";
				t['27.TT'] = "Analisis Dunia";
				t['29.TT'] = "Analisis Pera";
				t['WSS'] = "Statistik server";
				t['WSP'] = "Statistik pemain";
				t['WSA'] = "Statistik aliansi";
				t['TRAVIANDOPE.TT'] = "World Map, Player, dan Alliance Analysis Tool";
				t['TOOLBOX.TT'] = "Units Comparison, Combat Simulator, Calculators, Users dan Allies Signature";
				t['CROPFINDER'] = "Pencari desa gandum";
				t['CROPFINDER.TT'] = "Mencari desa gandum";
				t['RESNEED'] = "Dibutuhkan untuk menaikkan secara normal";
				t['NPCNEED'] = "Dibutuhkan untuk menaikkan dengan bantuan NPC";
				t['RESREQ_TT'] = "Dibutuhkan untuk menaikkan dengan $1";
				t['NPCLNK'] = "&raquo; Ke perdagangan NPC";
				t['VGL2'] = "Daftar Desa";
				t['112'] = "Tampilkan jarak & waktu (jika mungkin)";
				t['114'] = "Tampilkan NB/hari";
				t['117'] = "Jumlah kolom di daftar desa";
				t['118'] = "Tampilkan tooltip";
				t['CELHINTS'] = "Klik untuk masuk ke Balai Desa.|Shift-klik untuk mengadakan pesta.";
				break;
			case 'il':
				t['1'] = "שרת טרוויאן גירסה 2.x";
				t['2'] = "הסר באנרים";
				t['3'] = "שנה חישובי יכולת נשיאה של ליגיונר ופלנקס בשרתי T3.1<br>(מיועד לשרתי T3.1 ו- T3.5 משולבים - מופיע בעיקר בשרתי .de)";
				t['4'] = "שוק";
				t['5'] = "נקודת מפגש/מגורי חיילים/בית-מלאכה/אורווה ";
				t['6'] = "בניין העירייה/אחוזת הגיבור/חרש שריון/חרש נשק";
				t['7'] = "ארמון/מגורים/אקדמיה/משרד-האוצר";
				t['8'] = "ברית";
				t['9'] = "הראה לינקים נוספים בתפריט הימני<br>(Traviantoolbox, World Analyser, Travilog, מפה, וכו')";
				t['10'] = "סימולטור קרב לשימוש (בתפריט הימני)";
				t['12'] = "הצג קישוריי 'dorf1.php' ו- 'dorf2.php' ברשימת הכפרים";
				t['13'] = "הצג סמל \"מַרְכֵּז כפר זה במפה\" ברשימת הכפרים";
				t['16'] = "הצג נטו ייצור יבול של כל כפר ברשימת הכפרים";
				t['17'] = "הצג אוכלוסייה ברשימת הכפרים";
				t['18'] = "הצג טבלאת רשימת כפרים נוספת כחלון צף (יוצג בשני טורים)";
				t['19'] = "הצג סמל מידע אודות תנועת כוחות ובניינים בתהליכי שידרוג/בנייה ברשימת הכפרים";
				t['20'] = "הראה מועדפים";
				t['21'] = "הצג את ה'מועדפים' כחלון מרחף";
				t['22'] = "הצג פנקס הערות";
				t['23'] = "הצג את 'פנקס הרשימות' כחלון צף";
				t['24'] = "גודל פנקס הערות";
				t['25'] = "גובה פנקס הערות";
				t['26'] = "הצג חישובים ולינקים של מְסַיֵּעַ ה- NPC";
				t['27'] = "מאגר נתונים לשימוש";
				t['28'] = "הצג לינקים סטטיסטיים ממאגר נתונים";
				t['29'] = "מנתח מפה לשימוש";
				t['30'] = "הצג לינקים למפה - למיקומי שחקנים";
				t['31'] = "הצג לינקים למפה - למיקומי בריתות";
				t['32'] = "הצג מסגרת חיפוש'";
				t['33'] = "הצג 'מסגרת חיפוש' כחלון צף";
				t['34'] = "הצג נקודות תרבות ליום בטבלאת השידרוגים";
				t['35'] = "הצג צריכת יבול בטבלאת השידרוגים";
				t['36'] = "הצג חישוביי זמנים ומשאבים נחוצים בטבלאות שידרוג מבנים וייצור חיילים";
				t['37'] = "הראה טבלת שדרוג שדות משאבים";
				t['38'] = "הצג רמת שדות משאבים בצבע";
				t['39'] = "הצג טבלאת 'גרף בארים'";
				t['40'] = "הצג טבלאת 'גרף בארים' כחלון צף";
				t['41'] = "הראה טבלת שדרוג מבנים";
				t['42'] = "סדר את המבנים בטבלת שידרוג המבנים לפי שמות";
				t['43'] = "הצג רמות מבנים";
				t['44'] = "הצג רמת מבנים בצבע";
				t['45'] = "הצג מספרים מהבהבים למבנים שעוברים שידרוג";
				t['46'] = "הצג מידע נוסף אצל כל סוחר שמגיע";
				t['48'] = "מספר דפי הצעות לטעינה בזמן שנמצאים בעמוד 'שוק => הצעות'<br>(ברירת מחדל = 1)";
				t['49'] = "פעולת ברירת מחדל בנקודת המפגש";
				t['50'] = "מספר הסיירים שירשם בשימוש בפונקציה 'שלח סייר'";
				t['53'] = "הצג מידע על החיילים בהצבעת העכבר על תמונותיהם";
				t['54'] = "הצג מרחקים וזמנים בהצבעת העכבר על שמות כפרים";
				t['56'] = "הראה סוג עמק נטוש/נווה מדבר בזמן העברת העכבר מעליו במפה";
				t['57'] = "הצג מרחקים וזמנים";
				t['58'] = "הצג טבלה של שחקנים/כפרים/עמקים תפוסים";
				t['59'] = "מספר דפי ההודעות/דוחות שברצונך לטעון<br>(ברירת-מחדל = 1)";
				t['60'] = "הצג קישור לפתיחת הודעות בחלון מוקפץ";
				t['61'] = "הצג את טבלת כפתורי המחיקה בדפי הדוחות";
				t['62'] = "הצג את סמל 'שליחת הודעה' גם ליד שם המשתמש שלי";
				t['63'] = "הצג סטטיסטיקה בסיסית בדפי הדוחות";
				t['64'] = "הצג פרטי סטטיסטיקה נוספים בדפי הדוחות";
				t['65'] = "צבע שדרוג זמין (ברירת מחדל = ריק)";
				t['66'] = "צבע שלב מקסימאלי (ברירת מחדל = ריק)";
				t['67'] = "צבע כאשר שדרוג לא אפשרי (ברירת מחדל = ריק)";
				t['68'] = "צבע שדרוג ע\"י NPC (ברירת מחדל = ריק)";
				t['69'] = "Console Log Level<br>רק בשביל מתכנתים או בודקי באגים, (ברירת מחדל = 0)";
				t['82.L'] = "נעל מועדפים (מסתיר את סמלי המחיקה וההזזה)";
				t['82.U'] = "בטל נעילת מועדפים (מציג את סמלי המחיקה וההזזה)";
				t['U.2'] = "<b>גזע</b><br>אם מופיעה שגיאה/ריק, אנא הכנס למגורי החיילים";
				t['U.3'] = "<b>שם הבירה</b><br>אם מופיעה שגיאה/ריק, אנא הכנס לדף הפרופיל";
				t['U.6'] = "<b>קואורדינטות הבירה</b><br>אם מופיעה שגיאה/ריק, אנא הכנס לדף הפרופיל";
				t['SIM'] = "סימולטור קרב ";
				t['QSURE'] = "האם אתה בטוח?";
				t['LOSS'] = "הפסד";
				t['PROFIT'] = "רווח";
				t['EXTAV'] = "שידרוג זמין";
				t['PLAYER'] = "שחקן";
				t['VILLAGE'] = "כפר";
				t['POPULATION'] = "אוכלוסייה";
				t['COORDS'] = "קואורדינטות";
				t['MAPTBACTS'] = "פעולות";
				t['SAVED'] = "נשמר";
				t['YOUNEED'] = "את/ה צריכ/ה";
				t['TODAY'] = "היום";
				t['TOMORROW'] = "מחר";
				t['DAYAFTERTOM'] = "מחרתיים";
				t['BN_GID12'] = "חרש נשק";
				t['BN_GID13'] = "חרש שריון";
				t['BN_GID16'] = "נקודת מפגש";
				t['BN_GID17'] = "שוק";
				t['BN_GID19'] = "מגורי חיילים";
				t['BN_GID20'] = "אורווה";
				t['BN_GID21'] = "בית מלאכה";
				t['BN_GID22'] = "אקדמיה";
				t['BN_GID24'] = "בניין העירייה";
				t['BN_GID25'] = "מגורים מלכותיים";
				t['BN_GID26'] = "ארמון";
				t['BN_GID27'] = "משרד-האוצר";
				t['BN_GID37'] = "אחוזת הגיבור";
				t['SENDRES'] = "שלח משאבים";
				t['BUY'] = "קנה";
				t['SELL'] = "מכור";
				t['SENDIGM'] = "שלח הודעה";
				t['LISTO'] = "זמין";
				t['ON'] = "זמין";
				t['AT'] = "ב";
				t['EFICIENCIA'] = "יעילות";
				t['NEVER'] = "אף פעם";
				t['ALDEAS'] = "כפר(ים)";
				t['TIEMPO'] = "זמן";
				t['OFREZCO'] = "מציע";
				t['BUSCO'] = "מחפש";
				t['TIPO'] = "יחס ההחלפה";
				t['DISPONIBLE'] = "רק עסקאות אפשריות ?";
				t['CUALQUIERA'] = "כל סוג";
				t['YES'] = "כן";
				t['NO'] = "לא";
				t['LOGIN'] = "התחבר";
				t['MARCADORES'] = "מועדפים";
				t['ANYADIR'] = "הוסף";
				t['UBU'] = "לינק";
				t['UBT'] = "שם";
				t['DEL'] = "מחק";
				t['MAPA'] = "מפה";
				t['MAXTIME'] = "מקסימום זמן שליחה";
				t['ARCHIVE'] = "ארכיון";
				t['SUMMARY'] = "סיכום";
				t['TROPAS'] = "כוחות";
				t['CHKSCRV'] = "עדכן TBeyond";
				t['ACTUALIZAR'] = "עדכן מידע על הכפר";
				t['VENTAS'] = "הצעות שמורות";
				t['MAPSCAN'] = "סרוק מפה";
				t['BIC'] = "הצג אייקונים מורחבים";
				t['SAVE'] = "שמור";
				t['AT2'] = "תגבורת";
				t['AT3'] = "התקפה רגילה";
				t['AT4'] = "התקפת פשיטה";
				t['NBSA'] = "אוטומאטי";
				t['NBSN'] = "רגיל (קטן)";
				t['NBSB'] = "מסך רחב";
				t['NBHAX'] = "הרחב גובה אוטומאטית";
				t['NBHK'] = "גובה ברירת מחדל";
				t['NPCSAVETIME'] = "שמור: ";
				t['TOTALTROOPS'] = "סה\"כ כוחות שיש לכפר זה";
				t['SELECTALLTROOPS'] = "בחר את כל החיילים";
				t['PARTY'] = "חגיגות";
				t['CPPERDAY'] = "נקודות תרבות ליום";
				t['SLOT'] = "מקום פנוי";
				t['TOTAL'] = "סה\"כ";
				t['SELECTSCOUT'] = "בחר סייר";
				t['SELECTFAKE'] = "התקפה מזויפת";
				t['ALL'] = "הכל";
				t['SH2'] = "בשורות הצבעים אתה יכול להכניס:<br>- <b>green</b> או <b>red</b> או  <b>orange</b> וכו'<br>- קוד HEX  כמו <b>#004523</b><br>- השאר ריק בשביל ברירת המחדל";
				t['SOREP'] = "הראה דוח רגיל (לפרסום)";
				t['WSIMO1'] = "פנימי (מסופק על ידי המשחק)";
				t['WSIMO2'] = "חיצוני (מסופק על ידי kirilloid.ru)";
				t['NONEWVER'] = "יש לך את הגירסה העדכנית ביותר";
				t['BVER'] = "אתה יכול להוריד את גירסת הבטא";
				t['NVERAV'] = "קיימת גירסה חדשה לסקריפט";
				t['UPDSCR'] = "עדכן את הסקיפט עכשיו?";
				t['CHECKUPDATE'] = "בודק עדכונים לסקריפט. אנא המתן...";
				t['AVPPV'] = "ממוצע אוכלוסייה לכפר";
				t['AVPPP'] = "ממוצע אוכלוסייה לשחקן";
				t['MAX'] = "מקס";
				t['TOTTRTR'] = "סה\"כ חיילים באימון";
				t['TB3SL'] = "הגדרות $1";
				t['UPDALLV'] = "עדכן מידע על כל הכפרים. השתמשו בזהירות כי הדבר יכול להוביל לקבלת באן!";
				t['LARGEMAP'] = "מפה גדולה";
				t['USETHEMPR'] = "חלק משאבים (באופן פרופורציוני)";
				t['USETHEMEQ'] = "חלק משאבים (באופן שווה)";
				t['GSRVT'] = "סוג השרת";
				t['ACCINFO'] = "מידע חשבון";
				t['NBO'] = "פנקס הרשימות";
				t['MNUL'] = "תוספות התפריט שבצד ימין";
				t['STAT'] = "סטטיסטיקות";
				t['RESF'] = "שדות משאבים";
				t['VLC'] = "מרכז הכפר";
				t['MAPO'] = "אפשרויות מפה";
				t['COLO'] = "אפשרויות צבעים";
				t['DBGO'] = "מסוף שגיאות";
				t['NOW'] = "כעת";
				t['CLOSE'] = "סגור";
				t['USETHEM1H'] = "חלק משאבים (תוצר של שעה)";
				t['OVERVIEW'] = "מבט-על";
				t['FORUM'] = "פורום";
				t['ATTACKS'] = "התקפות";
				t['NEWS'] = "חדשות";
				t['ADDCRTPAGE'] = "הוסף דף נוכחי";
				t['SCRPURL'] = "אתר הסקריפט";
				t['SPACER'] = "קו הפרדה";
				t['MEREO'] = "הודעות ודוחות";
				t['ATTABLES'] = "טבלאות חיילים";
				t['MTW'] = "מקום פנוי";
				t['MTX'] = "לא ניתן לשלוח";
				t['MTC'] = "סה\"כ משאבים";
				t['ALFL'] = "קישור לפורום ברית חיצוני (השאר ריק כדי להשתמש בפורום שמספק המשחק)";
				t['MTCL'] = "נקה הכל";
				t['CKSORT'] = "לחץ כדי למיין";
				t['MIN'] = "מינימום";
				t['SVGL'] = "שתף את ההצעה השמורה בכל הכפרים שלי";
				t['VGL'] = "רשימת הכפרים";
				t['UPDATEPOP'] = "עדכן אוכלוסייה";
				t['NPCO'] = "אפשרויות מְסַיֵּעַ ה- NPC";
				t['NEWVILLAGEAV'] = "מתי ?";
				t['TIMEUNTIL'] = "עוד כמה זמן ?";
				t['CENTERMAP'] = "מַרְכֵּז כפר זה במפה";
				t['SENDTROOPS'] = "שלח כוחות";
				t['UPGTB'] = "טבלאות שידרוג משאבים/מבנים";
				t['RBTT'] = "סרגל משאבים";
				t['USE'] = "השתמש";
				t['RESIDUE'] = "משאבים שישארו לך אם תבנה ";
				t['RESOURCES'] = "משאבים";
				t['SH1'] = "פתח את הפרופיל שלך לזיהוי עיר בירה/קוארדינטות<br>בנה מגורי חיילים בשביל זיהוי גזע אוטומטי ואז כנס למרכז הכפר";
				t['CROPFINDER'] = "מוצא קרופרים";
				t['VGL2'] = "רשימת הכפרים";
				t['112'] = "הצג מרחקים וזמנים";
				t['114'] = "נקודות תרבות ליום";
				break;
			case 'ir':
				t['1'] = "تراویان نسخه*.2";
				t['2'] = "پاک کردن تبلیغات";
				t['3'] = "مجبور کردن برآورد گنجایش T3.1 سرباز لژیون و سرباز پیاده(تواما برای خدمات رسان های T3.1 و T3.5)";
				t['4'] = "بازار";
				t['5'] = "اردوگاه/سربازخانه/کارگاه/اصطبل";
				t['6'] = "تالار شهر/امارت قهرمان/زره سازی/اسلحه سازی";
				t['7'] = "قصر/اقامتگاه/دارالفنون/خزانه";
				t['8'] = "اتحاد";
				t['9'] = "نمایش پیوند های اضافی در فهرست سمت راست<br>(جعبه ابزار تراویان، تحلیلگر جهان، ثبت گزارش نبرد، نقشه و غیره.)";
				t['10'] = "پیوند به شبیه ساز نبرد برای استفاده:<br>(فهرست سمت راست)";
				t['11'] = "پیوند برای استفاده از پایگاه های ثبت گزارش(نبرد)";
				t['12'] = "نمایش پیوند های 'dorf1.php' و 'dorf2.php'";
				t['13'] = "نمایش دکمه \"مرکز نقشه برای این دهکده\"";
				t['15'] = "نمایش میزان تولید در ساعت چوب، خشت، آهن در فهرست دهکده";
				t['16'] = "نمایش تولید مؤثر گندم در فهرست دهکده";
				t['17'] = "نمایش جمعیت در فهرست دهکده";
				t['18'] = "نمایش فهرست دهکده اضافی (2 ستون) به صورت شناور";
				t['19'] = "نمایش اطلاعات درباره ساختمان های در حال گسترش و سربازان در حرکت<br>در فهرست دهکده";
				t['20'] = "نشاندادن برچسب ها";
				t['21'] = "نمایش 'برچسب های کاربر' به صورت پنجره شناور";
				t['22'] = "نمایش دفترچه یادداشت";
				t['23'] = "نمایش 'دفترچه یادداشت' به صورت شناور";
				t['24'] = "اندازه دفترچه یادداشت";
				t['25'] = "ارتفاع دفترچه یادداشت";
				t['26'] = "نمایش محاسبات و پیوند به دستیار تعدیل منابع";
				t['27'] = "تحلیلگر جهان برای استفاده";
				t['28'] = "نمایش پیوند تحلیلگر آماری";
				t['29'] = "تحلیلگر نقشه برای استفاده";
				t['30'] = "نمایش پیوند به نقشه برای کاربران";
				t['31'] = "نمایش پیوند به نقشه برای اتحاد ها ";
				t['32'] = "نمایش 'نوار جستجو'";
				t['33'] = "نمایش 'نوار جستجو' به صورت پنجره شناور";
				t['34'] = "نمایش اطلاعات 'امتیاز فرهنگی در روز' در جدول گسترش منابع و ساختمان ها";
				t['35'] = "نمایش میزان مصرف گندم در جدول گسترش";
				t['36'] = "نمایش محاسبات 'سپس/پس مانده' در جدول های تعلیم/ارتقاء";
				t['37'] = "نمایش جدول گسترش منابع";
				t['38'] = "نشاندادن رنگ های سطح منابع";
				t['39'] = "نمایش جدول 'نوار منابع'";
				t['40'] = "نمایش جدول 'نوار منابع' به صورت پنجره شناور";
				t['41'] = "نمایش جدول گسترش ساختمان ها";
				t['42'] = "مرتبسازی ساختمان ها بر اساس نام در جدول گسترش";
				t['43'] = "نشان دادن شماره های مرکزی";
				t['44'] = "نشان دادن رنگ های سطح ساختمان ها";
				t['45'] = "نمایش سطح ساختمان و منابع به صورت چشمکزن برای ساختمان ها یا منابع در حال ارتقاء";
				t['46'] = "نمایش اطلاعات اضافی برای هر بازرگان در حرکت";
				t['47'] = "نشاندادن آخرین تبادل بازار";
				t['48'] = "تعداد صفحات پیشنهاد برای پیش بارگذاری<br>که در صفحه 'بازار => خرید' وجود دارد<br>(پیشفرض = 1)";
				t['49'] = "عملکرد پیشفرض اردوگاه";
				t['50'] = "تعداد ماموران شناسایی برای<br>تابع \"انتخاب مامور شناسایی\"";
				t['51'] = "نمایش آخرین حمله";
				t['52'] = "نشاندادن/استفاده مختصات برای آخرین حمله";
				t['53'] = "نمایش اطلاعات لشکریان در توضیحات یک خطی (tooltip)";
				t['54'] = "نمایش فاصله و زمان رسیدن به دهکده در توضیحات یک خطی (tooltip)";
				t['55'] = "پر کردن خودکار شبیه ساز نبرد داخلی با لشکریان موجود";
				t['56'] = "وقتی که موس روی نقشه است<br>اطلاعات نوع سرزمین یا دهکده نمایش داده شود";
				t['57'] = "نمایش فاصله و زمان";
				t['58'] = "نمایش جدولی بازیکن ها/دهکده ها/سرزمین های تصرف شده";
				t['59'] = "تعداد پیغام ها یا گزارشات برای پیش بار گزاری<br>(پیشفرض = 1)";
				t['60'] = "نمایش پیوند برای باز کردن پیغام ها/گزارش ها در پنجره حبابی";
				t['61'] = "نمایش جدول 'حذف همه' در صفحه گزارشات";
				t['62'] = "نشان دادن دکمه ارسال پیام خصوصی برای من";
				t['63'] = "نمایش تسهيلات گزارش نبرد فراتراویان 3 (TB3)";
				t['64'] = "نمایش جزئیات در گزارشات آماری";
				t['65'] = "رنگ قابل گسترش<br>(پیشفرض = خالی)";
				t['66'] = "رنگ حداکثر سطح<br>(پیشفرض = خالی)";
				t['67'] = "رنگ عدم امکان گسترش<br>(پیشفرض = خالی)";
				t['68'] = "رنگ امکان گسترش با تعدیل منابع<br>(پیشفرض = خالی)";
				t['69'] = "Console Log Level<br>فقط برای برنامه نویس ها و خطایابی<br>(پیشفرض = 0)";
				t['82.L'] = "قفل برچسب ها (پنهان سازی دکمه های حذف، انتقال به بالا، انتقال به پایین)";
				t['82.U'] = "باز کردن قفل برچسب ها (نشاندادن دکمه حذف، انتقال به بالا، انتقال به پایین)";
				t['85'] = "نشاندادن شمایل 'ارسال لشکریان/ارسال منابع'";
				t['87'] = "به یاد داشتن آخرین گزینه های '1/2/3 برابر' ارسال بازار (در صورت موجودیت)";
				t['U.2'] = "نژاد";
				t['U.3'] = "نام پایتخت شما <br>برای بروز رسانی به پروفایل خود بروید";
				t['U.6'] = "موقعیت پایتخت شما<br>برای به روز رسانی به پروفایل خود بروید";
				t['SIM'] = "شبیه ساز نبرد";
				t['QSURE'] = "آیا مطمئن هستید؟";
				t['LOSS'] = "زیان";
				t['PROFIT'] = "سود";
				t['EXTAV'] = "قابل توسعه";
				t['PLAYER'] = "بازیکن";
				t['VILLAGE'] = "دهکده";
				t['POPULATION'] = "جمعیت";
				t['COORDS'] = "موقعیت";
				t['MAPTBACTS'] = "اقدامات";
				t['SAVED'] = "ذخیره شد";
				t['YOUNEED'] = "مورد نیاز";
				t['TODAY'] = "امروز";
				t['TOMORROW'] = "فردا";
				t['DAYAFTERTOM'] = "پس فردا";
				t['BN_GID12'] = "اسلحه سازی";
				t['BN_GID13'] = "زره سازی";
				t['BN_GID16'] = "اردوگاه";
				t['BN_GID17'] = "بازار";
				t['BN_GID19'] = "سربازخانه";
				t['BN_GID20'] = "اصطبل";
				t['BN_GID21'] = "کارگاه";
				t['BN_GID22'] = "دارالفنون";
				t['BN_GID24'] = "تالار دهکده";
				t['BN_GID25'] = "اقامتگاه";
				t['BN_GID26'] = "قصر";
				t['BN_GID27'] = "خزانه";
				t['BN_GID37'] = "امارت قهرمان";
				t['SENDRES'] = "ارسال منابع";
				t['BUY'] = "خرید";
				t['SELL'] = "فروش";
				t['SENDIGM'] = "ارسال پیام خصوصی";
				t['LISTO'] = "در دسترس";
				t['ON'] = "در";
				t['AT'] = "در";
				t['EFICIENCIA'] = "بازدهی";
				t['NEVER'] = "هرگز";
				t['ALDEAS'] = "دهکده(ها)";
				t['TIEMPO'] = "زمان";
				t['OFREZCO'] = "گذاشتن پیشنهاد";
				t['BUSCO'] = "جستجو";
				t['TIPO'] = "نوع";
				t['DISPONIBLE'] = "فقط در دسترس";
				t['CUALQUIERA'] = "همه";
				t['YES'] = "بله";
				t['NO'] = "خیر";
				t['LOGIN'] = "ورود";
				t['MARCADORES'] = "برچسب ها";
				t['ANYADIR'] = "اضافه کردن";
				t['UBU'] = "نشانی برچسب جدید";
				t['UBT'] = "متن برچسب جدید";
				t['DEL'] = "پاک کردن";
				t['MAPA'] = "نقشه";
				t['MAXTIME'] = "حداکثر زمان";
				t['ARCHIVE'] = "بایگانی";
				t['SUMMARY'] = "خلاصه";
				t['TROPAS'] = "لشکریان";
				t['CHKSCRV'] = "بروز رسانی TBeyond";
				t['ACTUALIZAR'] = "بروز رسانی اطلاعات دهکده";
				t['VENTAS'] = "پیشنهاد های ذخیره شده";
				t['MAPSCAN'] = "پویش کردن نقشه";
				t['BIC'] = "نمایش شمایل های (icon) رمز شده";
				t['SAVE'] = "ذخیره";
				t['AT2'] = "نیروی کمکی";
				t['AT3'] = "حمله: عادی";
				t['AT4'] = "حمله: غارت";
				t['NBSA'] = "خودکار";
				t['NBSN'] = "عادی (کوچک)";
				t['NBSB'] = "صفحه بزرگ (بزرگ)";
				t['NBHAX'] = "گسترش خودکار ارتفاع";
				t['NBHK'] = "ارتفاع پیشفرض";
				t['NPCSAVETIME'] = "ذخیره: ";
				t['TOTALTROOPS'] = "لشکریان موجود در روستا";
				t['SELECTALLTROOPS'] = "انتخاب تمام لشکریان";
				t['PARTY'] = "جشن ها";
				t['CPPERDAY'] = "امتیاز فرهنگی در روز";
				t['SLOT'] = "شکاف";
				t['TOTAL'] = "مجموع";
				t['SELECTSCOUT'] = "انتخاب مامور شناسایی(جاسوس)";
				t['SELECTFAKE'] = "انتخاب حمله بدلی";
				t['ALL'] = "همه";
				t['SH2'] = "در فیلد رنگ شما می توانید وارد کنید:<br>- green یا red یا  orange و غیره.<br>- رمز رنگ در مبنای 16 مانند #004523<br>- برای پیش فرض خالی رها کنید";
				t['SOREP'] = "نمایش گزارش اصلی (برای ارسال پیغام)";
				t['WSIMO1'] = "داخلی (مهیا شده به وسیله بازی)";
				t['WSIMO2'] = "خارجی (مهیا شده به وسیله ی kirilloid.ru-با امکانت بیشتر)";
				t['NONEWVER'] = "شما آخرین نسخه ی موجود را در اختیار دارید";
				t['BVER'] = "ممکن است شما نشخه آزمایشی را در اختیار داشته باشید";
				t['NVERAV'] = "نسخه جدید اسکریپت موجود می باشد";
				t['UPDSCR'] = "هم اکنون به روز رسانی شود؟";
				t['CHECKUPDATE'] = "بررسی برای بروز رسانی. لطفا صبر کنید...";
				t['AVPPV'] = "میلنگین جمعییت برای هر دهکده";
				t['AVPPP'] = "میانگین جمعییت برای هر بازیکن";
				t['MAX'] = "حداکثر";
				t['TOTTRTR'] = "مجموع سربازان در حال تعلیم";
				t['TB3SL'] = "تنظیمات فراتراویان $1";
				t['UPDALLV'] = "بروز رسانی تمام دهکده ها. با دقت زیاد از این گزینه استفاده کنید زیرا ممکن است باعث توقیف حساب شما شود!";
				t['LARGEMAP'] = "نقشه بزرگ";
				t['USETHEMPR'] = "استفاده از آنها (به نسبت)";
				t['USETHEMEQ'] = "استفاده از آنها (برابر)";
				t['GSRVT'] = "خدمات رسان بازی(سرور)";
				t['ACCINFO'] = "اطلاعات حساب";
				t['NBO'] = "دفترچه یادداشت";
				t['MNUL'] = "فهرست سمت راست";
				t['STAT'] = "آمار";
				t['RESF'] = "منابع";
				t['VLC'] = "مرکز دهکده";
				t['MAPO'] = "تنظیمات نقشه";
				t['COLO'] = "تنظیمات رنگ";
				t['DBGO'] = "تنظیمات خطا یابی";
				t['NOW'] = "اکنون";
				t['CLOSE'] = "بستن";
				t['USETHEM1H'] = "استفاده از آنها ( تولید 1 ساعت)";
				t['OVERVIEW'] = "دید کلی";
				t['FORUM'] = "تالار گفتمان";
				t['ATTACKS'] = "حملات";
				t['NEWS'] = "اخبار";
				t['ADDCRTPAGE'] = "اضافه کردن همین صفحه به برچسب ها";
				t['SCRPURL'] = "صفحه TBeyond";
				t['SPACER'] = "فضاساز (فاصله بندی)";
				t['MEREO'] = "پیغام ها و گزارشات";
				t['ATTABLES'] = "جداول لشکریان (فقط در حالت پلاس)";
				t['MTW'] = "تلف شده";
				t['MTX'] = "بیش از حد";
				t['MTC'] = "بار گزاری کنونی";
				t['ALFL'] = "پیوند به تالار گفتمان خارجی<br>(برای تالار گفتمان داخلی خالی رها شود)";
				t['MTCL'] = "پاک کردن همه";
				t['CKSORT'] = "برای مرتب سازی کلیک کنید";
				t['MIN'] = "حداقل";
				t['SVGL'] = "سهیم کردن (در دست رس قرار دادن) میان دهکده ها";
				t['VGL'] = "فهرست دهکده ها";
				t['UPDATEPOP'] = "بروز رسانی جمعیت";
				t['EDIT'] = "ویرایش";
				t['NPCO'] = "تنظیمات دستیار تعدیل منابع";
				t['NEWVILLAGEAV'] = "روز/زمان";
				t['TIMEUNTIL'] = "مدت زمان انتظار";
				t['CENTERMAP'] = "مرکز نقشه برای این دهکده";
				t['SENDTROOPS'] = "ارسال لشکریان";
				t['UPGTB'] = "جدول گسترش منابع و ساختمان ها";
				t['RBTT'] = "نوار منابع";
				t['USE'] = "استفاده";
				t['RESIDUE'] = "پس مانده اگر شما آن را بسازید ";
				t['RESOURCES'] = "منابع";
				t['SH1'] = "باز کردن پرفایل شما برای بازیابی خودکار پایتخت/مختصات<br>برای نمایان سازی خودکار نژاد سربازخانه بسازید و سپس مرکز دهکده را باز کنید";
				t['RESEND'] = "ارسال دوباره؟";
				t['WSI'] = "شبیه ساز نبرد محیا شده به وسیله بازی";
				t['TTT'] = "تنظیمات عمومی توضیح خطی لشکریان/مصافت";
				t['CROPFINDER'] = "کاوشگر گندمزار";
				t['VGL2'] = "فهرست دهکده ها";
				t['112'] = "نمایش فاصله و زمان";
				t['114'] = "امتیاز فرهنگی در روز";
				break;
			case 'it':
				t['1'] = "Server Travian v2.x";
				t['2'] = "Rimuovi banner pubblicitari";
				t['3'] = "Forza il calcolo della capacitÃ  di legionari e lancieri gallici<br>come nella versione 3.1<br>(per server con versione mista 3.1 & 3.5 - per adesso solo per server .de)";
				t['4'] = "Mercato";
				t['5'] = "Caserma/Campo d'addestramento/Officina/Scuderia";
				t['6'] = "Municipio/Circolo degli eroi/Armeria/Fabbro";
				t['7'] = "Castello/Residence/Accademia/Camera del tesoro";
				t['8'] = "Alleanza";
				t['9'] = "Mostra links aggiuntivi nel menu di sinistra<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Simulatore di combattimento da usare:<br>(nel menu a sinistra)";
				t['12'] = "Mostra i collegamenti a 'dorf1.php' e 'dorf2.php'";
				t['13'] = "Mostra l'icona 'Centra la mappa su questo villaggio'";
				t['15'] = "Mostra la produzione oraria di legno, argilla e ferro";
				t['16'] = "Mostra la produzione di grano netta";
				t['17'] = "Mostra la popolazione";
				t['18'] = "Mostra una lista dei villaggi aggiuntiva (su 2 colonne) in una finestra";
				t['19'] = "Mostra informazioni su ampliamenti di costruzioni e movimenti di truppe";
				t['20'] = "Mostra segnalibri";
				t['21'] = "Mostra i segnalibri in una finestra";
				t['22'] = "Mostra blocco note";
				t['23'] = "Mostra il blocco note in una finestra";
				t['24'] = "Larghezza blocco note";
				t['25'] = "Altezza blocco note";
				t['26'] = "Mostra calcoli/links per il Mercato Nero";
				t['27'] = "World Analyser da utilizzare";
				t['28'] = "Mostra link statistiche World Analyser";
				t['29'] = "Map Analyser da usare";
				t['30'] = "Mostra il link alla mappa per gli utenti";
				t['31'] = "Mostra il link alla mappa per le alleanze";
				t['32'] = "Mostra la 'barra di ricerca'";
				t['33'] = "Mostra la 'barra di ricerca' in una finestra";
				t['34'] = "Mostra PC/giorno nelle tabelle";
				t['35'] = "Mostra consumo di grano nelle tabelle";
				t['36'] = "Mostra i calcoli 'Risorse il/Residue' nelle tabelle di ampliamento/addestramento";
				t['37'] = "Mostra tabella ampliamento campi";
				t['38'] = "Mostra colori livelli campi";
				t['39'] = "Mostra grafici a barre delle risorse";
				t['40'] = "Mastra i grafici a barre delle risorse in una finestra";
				t['41'] = "Mostra tabella ampliamento edifici";
				t['42'] = "Ordina le strutture per nome nella tabella di ampliamento";
				t['43'] = "Mostra livelli edifici";
				t['44'] = "Mostra colori livelli edifici";
				t['45'] = "Mostra il livello delle strutture in costruzione lampeggiante";
				t['46'] = "Mostra informazioni aggiuntive sui mercanti in arrivo";
				t['48'] = "Numero di pagine di offerte da precaricare<br>nella pagina 'Mercato => Visualizza offerte'<br>(Default = 1)";
				t['49'] = "Azione predefinita per 'Invia truppe'";
				t['50'] = "Numero di spie per l'invio di spiate";
				t['53'] = "Mostra i tooltip con le informazioni sulle truppe";
				t['54'] = "Mostra tooltip con tempi e distanza dai villaggi";
				t['56'] = "Mostra informazioni sul tipo di terreno/oasi<br>mentre il mouse passa sulla mappa";
				t['57'] = "Mostra distanze e tempi";
				t['58'] = "Mostra tabella dei giocatori/villaggi/oasi occupate";
				t['59'] = "Numero di pagine di messaggi/report da precaricare<br>(Default = 1)";
				t['60'] = "Mostra links per aprire i messaggi in un pop-up";
				t['61'] = "Mostra tabella \"Eliminare\" nella pagina dei report";
				t['62'] = "Mostra l'icona 'Invia messaggio' anche per me";
				t['63'] = "Mostra report avanzati di TB3";
				t['64'] = "Mostra dettagli nelle statistiche dei Reports";
				t['65'] = "Colore ampliamento disponibile <br>(Vuoto = default)";
				t['66'] = "Colore livello massimo raggiunto <br>(Vuoto = default)";
				t['67'] = "Colore ampliamento non disponibile <br>(Vuoto = default)";
				t['68'] = "Colore ampliamento col mercato nero <br> (Vuoto = default)";
				t['69'] = "Livello di logging della console<br>SOLO PER SVILUPPATORI O PER DEBUGGING<br>(Default = 0)";
				t['82.L'] = "Blocca segnalibri (Nasconde le icone cancella, sposta in alto e sposta in basso)";
				t['82.U'] = "Sblocca segnalibri (Mostra le icone cancella, sposta in alto e sposta in basso)";
				t['U.2'] = "Popolo";
				t['U.3'] = "Nome del villaggio capitale<br><b>Vai alla pagina del tuo Profilo per aggiornare i dati</b>";
				t['U.6'] = "Coordinate del villaggio capitale<br><b>Vai alla pagina del tuo Profilo per aggiornare i dati</b>";
				t['SIM'] = "Simulatore di combattimento";
				t['QSURE'] = "Sei sicuro?";
				t['LOSS'] = "Perdita in materiale";
				t['PROFIT'] = "Guadagno";
				t['EXTAV'] = "Ampliamento disponibile";
				t['PLAYER'] = "Proprietario";
				t['VILLAGE'] = "Villaggio";
				t['POPULATION'] = "Popolazione";
				t['COORDS'] = "Coordinate";
				t['MAPTBACTS'] = "Azioni";
				t['SAVED'] = "Salvato";
				t['YOUNEED'] = "Mancano";
				t['TODAY'] = "oggi";
				t['TOMORROW'] = "domani";
				t['DAYAFTERTOM'] = "dopodomani";
				t['BN_GID12'] = "Fabbro";
				t['BN_GID13'] = "Armeria";
				t['BN_GID16'] = "Caserma";
				t['BN_GID17'] = "Mercato";
				t['BN_GID19'] = "Campo d'addestramento";
				t['BN_GID20'] = "Scuderia";
				t['BN_GID21'] = "Officina";
				t['BN_GID22'] = "Accademia";
				t['BN_GID24'] = "Municipio";
				t['BN_GID25'] = "Residence";
				t['BN_GID26'] = "Castello";
				t['BN_GID27'] = "Camera del tesoro";
				t['BN_GID37'] = "Circolo degli eroi";
				t['SENDRES'] = "Invia risorse";
				t['BUY'] = "Compra risorse";
				t['SELL'] = "Vendi risorse";
				t['SENDIGM'] = "Invia messaggio";
				t['LISTO'] = "Disponibile";
				t['ON'] = "il";
				t['AT'] = "alle";
				t['EFICIENCIA'] = "Efficienza";
				t['NEVER'] = "Mai";
				t['ALDEAS'] = "Villaggi";
				t['TIEMPO'] = "Tempo";
				t['OFREZCO'] = "Offerta";
				t['BUSCO'] = "Richiesta";
				t['TIPO'] = "Percentuale di scambio";
				t['DISPONIBLE'] = "Disponibile";
				t['CUALQUIERA'] = "Tutti";
				t['YES'] = "Si";
				t['NO'] = "No";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Segnalibri";
				t['ANYADIR'] = "Aggiungi";
				t['UBU'] = "URL segnalibro";
				t['UBT'] = "Nome segnalibro";
				t['DEL'] = "Eliminare";
				t['MAPA'] = "Mappa";
				t['MAXTIME'] = "Tempo massimo";
				t['ARCHIVE'] = "Archivio";
				t['SUMMARY'] = "Riepilogo";
				t['TROPAS'] = "Truppe";
				t['CHKSCRV'] = "Verifica Aggiornamenti";
				t['ACTUALIZAR'] = "Aggiorna le informazioni sul villaggio";
				t['VENTAS'] = "Offerte salvate";
				t['MAPSCAN'] = "Scansiona la mappa";
				t['BIC'] = "Icone aggiuntive per accesso rapido";
				t['SAVE'] = "Salva";
				t['AT2'] = "Rinforzo";
				t['AT3'] = "Attacco: Normale";
				t['AT4'] = "Attacco: Raid";
				t['NBSA'] = "Automatica";
				t['NBSN'] = "Normale (Piccolo)";
				t['NBSB'] = "Schermi grandi (Grande)";
				t['NBHAX'] = "Adatta l'altezza automaticamente";
				t['NBHK'] = "Altezza predefinita";
				t['NPCSAVETIME'] = "Tempo guadagnato: ";
				t['TOTALTROOPS'] = "Truppe del villaggio complessive";
				t['SELECTALLTROOPS'] = "Seleziona tutte le truppe";
				t['PARTY'] = "Party";
				t['CPPERDAY'] = "PC/giorno";
				t['TOTAL'] = "Totale";
				t['SELECTSCOUT'] = "Spiata";
				t['SELECTFAKE'] = "Fake";
				t['ALL'] = "Tutto";
				t['SH2'] = "Nei campi dei colori puoi inserire:<br>- il nome (in inglese) <b>green</b> o <b>red</b> o <b>orange</b>, etc.<br>- il codice esadecimale del colore <b>#004523</b><br>- lasciare vuoto per usare i colori predefiniti";
				t['SOREP'] = "Mostra report originale (per postare sul forum)";
				t['WSIMO1'] = "Interno (quello presente nel gioco)";
				t['WSIMO2'] = "Esterno (fornito da kirilloid.ru)";
				t['NONEWVER'] = "Ã‰ giÃ  installata l'ultima versione disponibile";
				t['BVER'] = "Potresti avere una versione Beta";
				t['NVERAV'] = "Ã‰ disponibile una nuova versione";
				t['UPDSCR'] = "Aggiornare ora lo script?";
				t['CHECKUPDATE'] = "Controllo dell'ultima versione disponibile.<br>Attendere prego...";
				t['AVPPV'] = "Popolazione media villaggi";
				t['AVPPP'] = "Popolazione media giocatori";
				t['TOTTRTR'] = "Totale truppe in addestramento";
				t['TB3SL'] = "Impostazioni $1";
				t['UPDALLV'] = "Aggiorna tutti i villaggi.  USARE CON CAUTELA, potrebbe comportare il BAN dell`account!";
				t['LARGEMAP'] = "Mappa estesa";
				t['USETHEMPR'] = "Completa proporzionalmente";
				t['USETHEMEQ'] = "Completa equamente";
				t['GSRVT'] = "Server di gioco";
				t['ACCINFO'] = "Informazioni Account";
				t['NBO'] = "Blocco note";
				t['MNUL'] = "Menu di sinistra";
				t['STAT'] = "Statistiche";
				t['RESF'] = "Campi di risorse";
				t['VLC'] = "Centro del villaggio";
				t['MAPO'] = "Opzioni mappa";
				t['COLO'] = "Opzioni colori";
				t['DBGO'] = "Opzioni di debug";
				t['NOW'] = "Adesso";
				t['CLOSE'] = "Chiudi";
				t['USETHEM1H'] = "Completa con la produzione oraria";
				t['OVERVIEW'] = "Riepilogo";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Attacchi";
				t['NEWS'] = "News";
				t['ADDCRTPAGE'] = "Aggiungi pagina corrente";
				t['SPACER'] = "Separatore";
				t['MEREO'] = "Messaggi e Report";
				t['ATTABLES'] = "Tabella truppe";
				t['MTW'] = "Sprecate";
				t['MTX'] = "In eccesso";
				t['MTC'] = "Carico corrente";
				t['ALFL'] = "Link al forum esterno<br>(Lasciare vuoto per il forum interno)";
				t['MTCL'] = "Cancella tutto";
				t['CKSORT'] = "Clicca per ordinare";
				t['MIN'] = "Min";
				t['SVGL'] = "Condivisa tra i villaggi";
				t['VGL'] = "Elenco villaggi";
				t['UPDATEPOP'] = "Aggiorna popolazione";
				t['EDIT'] = "Modifica";
				t['NPCO'] = "Opzioni Mercato Nero";
				t['NEWVILLAGEAV'] = "Data/Ora";
				t['TIMEUNTIL'] = "Tempo di attesa";
				t['CENTERMAP'] = "Centra la mappa su questo villaggio";
				t['SENDTROOPS'] = "Invia truppe";
				t['UPGTB'] = "Tabella risorse/costruzioni";
				t['RBTT'] = "Grafici a barre delle risorse";
				t['USE'] = "Usa";
				t['RESIDUE'] = "Risorse residue se costruisci";
				t['RESOURCES'] = "Risorse";
				t['SH1'] = "Apri il Profilo per il riconoscimento automatico delle informazioni sulla capitale<br>Costruisci il Campo di addestramento per il riconoscimento automatico del popolo e dopo apri il centro del villaggio";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Elenco villaggi";
				t['112'] = "Mostra distanze e tempi";
				t['114'] = "PC/giorno";
				break;
			case 'jp':
				t['2'] = "広告バナーを削除し、サーバ時間の位置を変更";
				t['3'] = "ファランクス・レジョネアをT3.1として計算する<br>(for mixed T3.1 & T3.5 servers)jp1～jp3";
				t['4'] = "市場";
				t['5'] = "集兵所/兵舎/作業場/馬舎";
				t['6'] = "集会所/英雄の館/防具工場/鍛冶場";
				t['7'] = "宮殿/官邸/学院/金庫";
				t['8'] = "同盟";
				t['9'] = "左側のメニューに追加のリンクを表示<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "戦闘シミュレータリンク設定<br>(メニュー左)";
				t['12'] = "村の概観・村の中心のリンクを表示";
				t['13'] = "「村を中心にマップを表示」アイコンの追加";
				t['15'] = "村のリストに資源(木・粘土・鉄)の生産量を追加";
				t['16'] = "村の一覧に穀物生産量を表示";
				t['17'] = "村の一覧に人口を表示";
				t['18'] = "村のリストを2列にしてフローティングウィンドウ化する";
				t['19'] = "村のリストに建設している建物の情報を表示";
				t['20'] = "ブックマークを表示する";
				t['21'] = "ブックマークをフローティングウィンドウ化する";
				t['22'] = "メモ帳を表示する";
				t['23'] = "ノートブックををフローティングウィンドウ化する";
				t['24'] = "メモ帳のサイズ";
				t['25'] = "メモ帳の高さ";
				t['26'] = "NPCトレードへのリンクの表示";
				t['27'] = "World Analyserの設定";
				t['28'] = "analyserへのリンクを表示";
				t['29'] = "Map Analyser の設定";
				t['30'] = "ユーザー名にMAPへのリンクアイコンを追加";
				t['31'] = "同盟名にMAPへのリンクアイコンを追加";
				t['32'] = "サーチバーを追加";
				t['33'] = "サーチバーをフローティングウィンドウ化する";
				t['34'] = "アップグレードテーブルにCPの生産量の表示";
				t['35'] = "アップグレードテーブルに穀物消費量を表示";
				t['36'] = "アップグレード/トレーニングテーブルの詳細な計算を表示";
				t['37'] = "資源タイルのアップグレードテーブルを表示する";
				t['38'] = "色でリソースのレベルを表示";
				t['39'] = "リソースバーを追加する";
				t['40'] = "リソースバーテーブルをフローティングウィンドウ化する";
				t['41'] = "建物のアップグレードテーブルを表示する";
				t['42'] = "アップグレードテーブルを名前順に表示";
				t['43'] = "センターの数字を表示";
				t['44'] = "色で建物のレベルを表示";
				t['45'] = "アップグレードを行っている建物のLVを点滅表示";
				t['46'] = "輸送中の物資の詳細を表示";
				t['48'] = "トレードページの同時に読み込むページ数<br>(Default = 1)";
				t['49'] = "集兵所の基本アクション";
				t['50'] = "スカウトを選んだ際、選択する人数";
				t['53'] = "兵士アイコンを選んだ際、詳細情報を表示";
				t['54'] = "村の名前を選んだ際、距離・時間を表示する";
				t['56'] = "グリッドのタイプを表示/オアシスインフォメーション";
				t['57'] = "距離と時間を表示する";
				t['58'] = "プレイヤーリストの表示(村・オアシス)";
				t['59'] = "レポートページの同時に読み込むページ数<br>(Default = 1)";
				t['60'] = "メッセージ/レポートをポップアップで表示するリンクの追加";
				t['61'] = "レポートページに「全て削除」ボタンを追加";
				t['63'] = "戦闘レポートの統計を表示する";
				t['64'] = "戦闘レポートの統計の詳細を表示する";
				t['69'] = "コンソールログレベル<br>プログラマーやデバッグのために<br>(Default = 0)";
				t['82.L'] = "ブックマークのロック (削除,編集,上移動,下移動アイコンを隠す)";
				t['82.U'] = "ブックマークのアンロック (削除,編集,上移動,下移動アイコンの表示)";
				t['U.3'] = "あなたの村の名前<br><b>Visit your Profile for an update</b>";
				t['U.6'] = "あなたの村の座標<br><b>Visit your Profile for an update</b>";
				t['SIM'] = "戦闘シミュレータ";
				t['QSURE'] = "ホントに良いですか？";
				t['LOSS'] = "損失";
				t['PROFIT'] = "利益";
				t['EXTAV'] = "準備完了";
				t['PLAYER'] = "プレイヤー";
				t['VILLAGE'] = "村名";
				t['POPULATION'] = "人口";
				t['COORDS'] = "座標";
				t['MAPTBACTS'] = "アクション";
				t['SAVED'] = "保存しました";
				t['YOUNEED'] = "不足";
				t['TODAY'] = "今日";
				t['TOMORROW'] = "明日";
				t['DAYAFTERTOM'] = "明後日";
				t['BN_GID12'] = "鍛冶場";
				t['BN_GID13'] = "防具工場";
				t['BN_GID16'] = "集兵所";
				t['BN_GID17'] = "市場";
				t['BN_GID19'] = "兵舎";
				t['BN_GID20'] = "馬舎";
				t['BN_GID21'] = "作業場";
				t['BN_GID22'] = "学院";
				t['BN_GID24'] = "集会所";
				t['BN_GID25'] = "官邸";
				t['BN_GID26'] = "宮殿";
				t['BN_GID27'] = "金庫";
				t['BN_GID37'] = "英雄の館";
				t['SENDRES'] = "資源の送付";
				t['BUY'] = "売方";
				t['SELL'] = "買方";
				t['SENDIGM'] = "メッセージの送付";
				t['LISTO'] = "準備完了予定";
				t['ON'] = "on";
				t['AT'] = "at";
				t['EFICIENCIA'] = "効率";
				t['NEVER'] = "容量不足";
				t['ALDEAS'] = "村";
				t['TIEMPO'] = "時間";
				t['OFREZCO'] = "売方";
				t['BUSCO'] = "買方";
				t['TIPO'] = "タイプ";
				t['DISPONIBLE'] = "取引可能";
				t['CUALQUIERA'] = "全て";
				t['YES'] = "はい";
				t['NO'] = "いいえ";
				t['LOGIN'] = "ログイン";
				t['MARCADORES'] = "ブックマーク";
				t['ANYADIR'] = "ブックマークへ追加";
				t['UBU'] = "追加するブックマークのURL";
				t['UBT'] = "追加するブックマークのタイトル";
				t['DEL'] = "削除";
				t['MAPA'] = "TravMap";
				t['MAXTIME'] = "最大時間";
				t['ARCHIVE'] = "アーカイブ";
				t['SUMMARY'] = "要約";
				t['TROPAS'] = "兵士";
				t['CHKSCRV'] = "最新バージョンのチェック";
				t['MAPSCAN'] = "マップをスキャン";
				t['BIC'] = "拡張アイコンを表示する";
				t['SAVE'] = "保存";
				t['AT2'] = "援兵";
				t['AT3'] = "通常攻撃";
				t['AT4'] = "奇襲";
				t['NPCSAVETIME'] = "時間を節約:";
				t['TOTALTROOPS'] = "全村の兵士";
				t['SELECTALLTROOPS'] = "すべての兵士を選択";
				t['SELECTSCOUT'] = "スカウトを選択";
				t['SELECTFAKE'] = "フェイクを選択";
				t['SOREP'] = "オリジナルレポートを見る";
				t['NONEWVER'] = "あなたは最新バージョンを持っています。";
				t['NVERAV'] = "最新バージョン";
				t['UPDSCR'] = "スクリプトをアップデートしますか?";
				t['CHECKUPDATE'] = "アップデートが無いか確認しています...";
				t['AVPPV'] = "村当たりの平均人口";
				t['AVPPP'] = "プレイヤー当たりの平均人口";
				t['MAX'] = "最大";
				t['TB3SL'] = "$1をセットアップ";
				t['LARGEMAP'] = "地図を大きくする";
				t['USETHEMPR'] = "比例";
				t['USETHEMEQ'] = "均等";
				t['GSRVT'] = "ゲームサーバー";
				t['ACCINFO'] = "アカウント情報";
				t['NBO'] = "ノートブック";
				t['MNUL'] = "左メニューのリンク設定";
				t['STAT'] = "統計";
				t['RESF'] = "リソースフィールド";
				t['VLC'] = "村の中心";
				t['MAPO'] = "地図オプション";
				t['COLO'] = "文字色オプション";
				t['DBGO'] = "デバッグオプション";
				t['CLOSE'] = "閉じる";
				t['USETHEM1H'] = "1時間生産量";
				t['OVERVIEW'] = "概要";
				t['FORUM'] = "フォーラム";
				t['ATTACKS'] = "戦闘";
				t['NEWS'] = "ニュース";
				t['ADDCRTPAGE'] = "このページをブックマークに追加する";
				t['SPACER'] = "スペーサー";
				t['MEREO'] = "メッセージ・レポート";
				t['ATTABLES'] = "配備一覧";
				t['MTW'] = "余剰輸送量";
				t['MTX'] = "不足輸送量";
				t['MTC'] = "総輸送量";
				t['ALFL'] = "外部のフォーラムへのリンク<br>(内部フォーラムを使う場合は書かないでください。)";
				t['MTCL'] = "すべてを削除";
				t['SVGL'] = "全村で共有する";
				t['VGL'] = "村のリスト";
				t['UPDATEPOP'] = "最新の情報に更新";
				t['EDIT'] = "編集";
				t['NPCO'] = "NPCトレードオプション";
				t['NEWVILLAGEAV'] = "日付/時刻";
				t['TIMEUNTIL'] = "待ち時間";
				t['CENTERMAP'] = "村を中心にMAP表示";
				t['SENDTROOPS'] = "兵士を送る";
				t['UPGTB'] = "アップグレードテーブル";
				t['RESIDUE'] = "実行後";
				t['RESOURCES'] = "実行可能時";
				t['VGL2'] = "村のリスト";
				t['112'] = "距離と時間を表示する";
				break;
			case 'kr':
				t['1'] = "Travian v2.x 서버";
				t['2'] = "광고 배너 제거";
				t['3'] = "Force T3.1 Legionnaire & Phalanx capacity calculation<br>(for mixed T3.1 & T3.5 servers)";
				t['4'] = "시장";
				t['5'] = "집결지/병영/공방/마구간";
				t['6'] = "마을회관/영웅 저택/병기고/대장간";
				t['7'] = "궁전/저택/연구소/보물창고";
				t['8'] = "동맹";
				t['9'] = "왼쪽 메뉴에 추가 링크 보이기 <br>(Traviantoolbox, World Analyser, Travilog, Map, 등.)";
				t['10'] = "사용할 전투 시뮬레이터:<br>(왼쪽메뉴)";
				t['11'] = "글 쓰기를 위해 사용할 보고서 사이트";
				t['12'] = "'dorf1.php(마을 둘러보기)' 과 'dorf2.php(마을 중심)' 링크 보이기";
				t['13'] = "중앙 지도 아이콘 보이기";
				t['15'] = "마을 목록에 시간당 자원 생산량 보이기";
				t['16'] = "마을 목록에 실제 농작물 생산량 보이기";
				t['17'] = "마을 목록에 인구 수 보이기";
				t['18'] = "마을 목록 창을 이동 가능한 창으로 보이기";
				t['19'] = "마을 목록에 건물 짓기 상황과 부대 이동 상황 보이기";
				t['20'] = "북마크 보이기";
				t['21'] = "'북마크'를 이동 가능한 창으로 보이기";
				t['22'] = "노트 보이기";
				t['23'] = "'노트'를 이동 가능한 창으로 보이기";
				t['24'] = "노트 크기";
				t['25'] = "노트 높이";
				t['26'] = "NPC 교역 링크 및 계산값 보이기";
				t['27'] = "사용할 World Analyser";
				t['28'] = "World Analyser 통계 링크 보이기";
				t['29'] = "사용할 Map Analyser";
				t['30'] = "사용자의 지도 상 위치 링크 보이기";
				t['31'] = "동맹원의 지도 상 위치 링크 보이기";
				t['32'] = "'찾기 바' 보이기";
				t['33'] = "'찾기 바'를 이동 가능한 창으로 보이기";
				t['34'] = "업그레이드 테이블에 하루 당 문화점수 획득 정보 보이기";
				t['35'] = "업그레이드 테이블에 작물 소비량 증가 보이기";
				t['36'] = "업그레이드/훈련 테이블에 예상 자원과 건축/업그레이드 후 남는 예상 자원 표시";
				t['37'] = "자원 필드에 업그레이드 테이블 보이기";
				t['38'] = "자원필드 레벨 색 보이기";
				t['39'] = "'자원 바' 테이블 보이기";
				t['40'] = "'자원 바' 테이블을 이동 가능한 창으로 보이기";
				t['41'] = "건물에 업그레이드 테이블 보이기";
				t['42'] = "업그레이드 테이블의 건물 정보를 이름순으로 정렬";
				t['43'] = "마을 건물에 레벨 보이기";
				t['44'] = "빌딩 레벨 색 보이기";
				t['45'] = "업그레이드 중인 건물의 레벨 깜빡이기";
				t['46'] = "상인이 도착했을 때 총 자원 정보 보이기";
				t['47'] = "마지막으로 운반한 자원량 보이기";
				t['48'] = "'장터 => 구입' 선택시 미리 읽어들일 제안 페이지 수 (기본값 = 1)";
				t['49'] = "집결지 기본 행동 설정";
				t['50'] = "정찰병 선택에 사용할 수 있는 정찰병의 수";
				t['51'] = "마지막 공격 설정 보이기";
				t['52'] = "마지막 공격 대상 좌표 보이기/사용하기";
				t['53'] = "툴팁에 부대 정보 보이기";
				t['54'] = "툴팁에 마을까지의 거리와 시간 보이기";
				t['55'] = "내장 전투 시뮬레이터에 사용 가능한 부대 내역을 자동으로 채우기";
				t['56'] = "지도 위에 마우스를 올리면 지역의 종류와 오아시스 정보 보이기";
				t['57'] = "거리와 시간 보이기";
				t['58'] = "사용자/마을/차지한 오아시스에 대한 목록 보이기";
				t['59'] = "미리 읽어들일 메시지와 보고서 페이지의 수 (기본값 = 1)";
				t['60'] = "메시지/리포트를 팝업창으로 보기 위한 아이콘 보이기";
				t['61'] = "보고서 페이지에 \"모두보기 삭제\" 보이기";
				t['62'] = "자기 자신에게도 \"메시지 보내기\" 아이콘 표시";
				t['63'] = "TB3 확장 전투보고서 보이기";
				t['64'] = "보고서 통계에 세부 사항 보이기";
				t['65'] = "색 : 업그레이드 가능(기본값 = 빈 칸)";
				t['66'] = "색 : 최고 레벨 (기본값 = 빈 칸)";
				t['67'] = "색 : 업그레이드 불가능(기본값 = 빈 칸)";
				t['68'] = "색 : NPC거래 후 업그레이드 가능(기본값 = 빈 칸)";
				t['69'] = "Console Log 표시 등급 설정<br>주의: 개발자나 디버깅 용도로만 사용해야 함(기본값 = 0)";
				t['82.L'] = "북마크 잠금(삭제, 위로 이동, 아래로 이동 아이콘 숨김)";
				t['82.U'] = "북마크 잠금 해제(삭제, 위로 이동, 아래로 이동 아이콘 보이기)";
				t['U.2'] = "종족";
				t['U.3'] = "수도 이름<br>업데이트를 위해 프로필 페이지를 방문해 주세요";
				t['U.6'] = "수도의 좌표<br>업데이트를 위해 프로필 페이지를 방문해 주세요";
				t['SIM'] = "전투 시뮬레이터";
				t['QSURE'] = "확실합니까?";
				t['LOSS'] = "손실";
				t['PROFIT'] = "이득";
				t['EXTAV'] = "확장 가능";
				t['PLAYER'] = "플레이어";
				t['VILLAGE'] = "마을";
				t['POPULATION'] = "인구";
				t['COORDS'] = "좌표";
				t['MAPTBACTS'] = "행동";
				t['SAVED'] = "저장됨";
				t['YOUNEED'] = "필요";
				t['TODAY'] = "오늘";
				t['TOMORROW'] = "내일";
				t['DAYAFTERTOM'] = "모레";
				t['BN_GID12'] = "대장간";
				t['BN_GID13'] = "병기고";
				t['BN_GID16'] = "집결지";
				t['BN_GID17'] = "시장";
				t['BN_GID19'] = "병영";
				t['BN_GID20'] = "마구간";
				t['BN_GID21'] = "공방";
				t['BN_GID22'] = "연구소";
				t['BN_GID24'] = "마을회관";
				t['BN_GID25'] = "저택";
				t['BN_GID26'] = "궁전";
				t['BN_GID27'] = "보물창고";
				t['BN_GID37'] = "영웅 저택";
				t['SENDRES'] = "자원 보내기";
				t['BUY'] = "구입";
				t['SELL'] = "판매";
				t['SENDIGM'] = "메시지 보내기";
				t['LISTO'] = "가능한";
				t['ON'] = "날짜";
				t['AT'] = "시간";
				t['EFICIENCIA'] = "효율";
				t['NEVER'] = "불가능";
				t['ALDEAS'] = "마을(들)";
				t['TIEMPO'] = "시간";
				t['OFREZCO'] = "제안";
				t['BUSCO'] = "검색";
				t['TIPO'] = "종류";
				t['DISPONIBLE'] = "가능한 거래만 표시";
				t['CUALQUIERA'] = "모두";
				t['YES'] = "네";
				t['NO'] = "아니오";
				t['LOGIN'] = "로그인";
				t['MARCADORES'] = "북마크";
				t['ANYADIR'] = "추가";
				t['UBU'] = "새 북마크 주소";
				t['UBT'] = "새 북마크 이름";
				t['DEL'] = "삭제";
				t['MAPA'] = "지도";
				t['MAXTIME'] = "최대 시간";
				t['ARCHIVE'] = "보관";
				t['SUMMARY'] = "요약";
				t['TROPAS'] = "부대";
				t['CHKSCRV'] = "TBeyond 업데이트";
				t['ACTUALIZAR'] = "마을 정보 업데이트";
				t['VENTAS'] = "저장된 판매리스트";
				t['MAPSCAN'] = "지도 검색";
				t['BIC'] = "상단 메뉴 추가 아이콘 보이기";
				t['SAVE'] = "저장";
				t['AT2'] = "지원";
				t['AT3'] = "공격: 통상";
				t['AT4'] = "공격: 약탈";
				t['NBSA'] = "자동";
				t['NBSN'] = "보통 (작음)";
				t['NBSB'] = "큰 스크린 (큼)";
				t['NBHAX'] = "높이 자동 설정";
				t['NBHK'] = "기본 높이";
				t['NPCSAVETIME'] = "저장: ";
				t['TOTALTROOPS'] = "모든 마을 병력 총합";
				t['SELECTALLTROOPS'] = "부대 모두 선택";
				t['PARTY'] = "잔치";
				t['CPPERDAY'] = "문화점수/일";
				t['SLOT'] = "슬롯";
				t['TOTAL'] = "총합";
				t['SELECTSCOUT'] = "정찰병 선택";
				t['SELECTFAKE'] = "위장 공격";
				t['ALL'] = "모두";
				t['SH2'] = "색상 필드에 입력할 수 있는 값:<br>- green, red 혹은 orange 등의 영어 색상 단어.<br>- #004523 같은 HEX 색상 코드<br>- 빈 칸으로 두면 기본 색상 적용";
				t['SOREP'] = "원래의 보고서 형식으로 보이기(글쓰기용)";
				t['WSIMO1'] = "내부 (게임에서 제공)";
				t['WSIMO2'] = "외부 (kirilloid.ru 에서 제공)";
				t['NONEWVER'] = "이미 최신 버젼이 설치되어 있습니다.";
				t['BVER'] = "베타 버젼이 설치되어 있습니다.";
				t['NVERAV'] = "새 버젼의 스크립트를 사용하실 수 있습니다.";
				t['UPDSCR'] = "지금 스크립트를 업그레이드 하시겠습니까?";
				t['CHECKUPDATE'] = "스크립트 업데이트를 확인하고 있습니다.<br> 기다려 주십시오...";
				t['AVPPV'] = "마을 당 평균 인구 수";
				t['AVPPP'] = "사용자 당 평균 인구 수";
				t['MAX'] = "최대";
				t['TOTTRTR'] = "훈련 중인 병사 수";
				t['TB3SL'] = "$1 설정";
				t['UPDALLV'] = "모든 마을 정보 갱신. <br>경고: 이 명령어 사용시 밴 당할 수 있으므로 주의해야 합니다!";
				t['LARGEMAP'] = "큰 지도";
				t['USETHEMPR'] = "비율";
				t['USETHEMEQ'] = "동일한 양";
				t['GSRVT'] = "게임 서버";
				t['ACCINFO'] = "결제 정보";
				t['NBO'] = "노트";
				t['MNUL'] = "왼쪽 메뉴";
				t['STAT'] = "통계";
				t['RESF'] = "자원 필드";
				t['VLC'] = "마을 중심";
				t['MAPO'] = "지도 옵션";
				t['COLO'] = "색상 옵션";
				t['DBGO'] = "디버그 옵션";
				t['NOW'] = "지금";
				t['CLOSE'] = "Close";
				t['USETHEM1H'] = "1시간 생산량";
				t['OVERVIEW'] = "정보";
				t['FORUM'] = "포럼";
				t['ATTACKS'] = "전투 기록";
				t['NEWS'] = "소식";
				t['ADDCRTPAGE'] = "지금 페이지를 추가";
				t['SCRPURL'] = "TBeyond 홈페이지";
				t['SPACER'] = "구분자 추가";
				t['MEREO'] = "메시지 & 보고서";
				t['ATTABLES'] = "부대 테이블";
				t['MTW'] = "낭비";
				t['MTX'] = "초과";
				t['MTC'] = "현재 운반양";
				t['ALFL'] = "외부 포럼에 연결<br>(빈 칸으로 두면 내부 포럼에 연결)";
				t['MTCL'] = "모두 초기화";
				t['CKSORT'] = "정렬";
				t['MIN'] = "최소";
				t['SVGL'] = "마을간 공유";
				t['VGL'] = "마을 목록";
				t['UPDATEPOP'] = "인구 업데이트";
				t['EDIT'] = "편집";
				t['NPCO'] = "NPC 교역 옵션";
				t['NEWVILLAGEAV'] = "날짜/시간";
				t['TIMEUNTIL'] = "대기 시간";
				t['CENTERMAP'] = "중앙 지도";
				t['SENDTROOPS'] = "부대 보내기";
				t['UPGTB'] = "자원 필드/건물 업그레이드 테이블";
				t['RBTT'] = "자원 바";
				t['USE'] = "사용";
				t['RESIDUE'] = "건축 명령 후 남게 될 예상 자원 ";
				t['RESOURCES'] = "예상 획득 자원";
				t['SH1'] = "수도 및 각 마을 좌표 자동 인식을 위해 프로필을 확인해 주세요<br>종족 자동 인식을 위해 병영을 지은 후 마을 중심을 열어 주세요";
				t['RESEND'] = "다시 보내기";
				t['WSI'] = "게임에서 제공하는 전투 시뮬레이터";
				t['TTT'] = "General troops/distance tooltips";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "마을 목록";
				t['112'] = "거리와 시간 보이기";
				t['114'] = "문화점수/일";
				break;
			case 'lt':
				t['1'] = "Travian v2.x serveris";
				t['2'] = "Pašalinti reklamas";
				t['4'] = "Turgavietė";
				t['5'] = "Susibūrimo vieta/Kareivinės/Dirbtuvės/Arklidė";
				t['6'] = "Rotušė/Karžygio namai/Šarvų kalvė/Ginklų kalvė";
				t['7'] = "Valdomų rūmai/Rezidencija/Akademija/Iždinė";
				t['8'] = "Aljansas";
				t['9'] = "Rodyti papildomas nuorodas kairiajame meniu<br>(Traviantoolbox, World Analyser, Travilog, žemėlapis ir t.t.)";
				t['10'] = "Naudojama nuoroda kovos simuliatoriui:<br>(kairiajame meniu)";
				t['12'] = "Rodyti 'dorf1.php' ir 'dorf2.php' nuorodas";
				t['13'] = "Rodyti nuorodą \"Centruoti šią gyvenvietę žemėlapyje\"";
				t['15'] = "Rodyti medienos, molio, geležies gaminimą per valandą";
				t['16'] = "Rodyti efektyvią grūdų gamybą";
				t['17'] = "Rodyti gyventojų skaičių";
				t['19'] = "Rodyti informaciją apie pastatų statybą ir karių siuntimus";
				t['20'] = "Rodyti žymas";
				t['21'] = "Rodyti vartotojo žymas kaip laisvą langą";
				t['22'] = "Rodyti užrašų knygelę";
				t['24'] = "Užrašų knygelės dydis";
				t['25'] = "Užrašų knygelės aukštis";
				t['26'] = "Rodyti NPC asistento skaičiavimus/nuorodas";
				t['27'] = "Naudojamas statistikos tiekėjas";
				t['28'] = "Rodyti statistikos nuorodas";
				t['32'] = "Rodyti paieškos langelį";
				t['34'] = "Lygių kėlimo lentelėse rodyti KT per dieną";
				t['35'] = "Rodyti grūdų sunaudojimą";
				t['37'] = "Rodyti resursų laukų lygių kėlimo lentelę";
				t['38'] = "Rodyti resursų lygių spalvas";
				t['39'] = "Rodyti resursų lentelę";
				t['41'] = "Rodyti pastatų lygių kėlimo lentelę";
				t['42'] = "Patobulinimų lentelėje pastatus rūšiuoti pagal pavadinimą";
				t['43'] = "Rodyti gyvenvietės centro lygius";
				t['44'] = "Rodyti pastatų lygių spalvas";
				t['45'] = "Rodyti mirksinčius statomų pastatų lygius";
				t['48'] = "Pasiūlymų puslapių skaičius užkrovimui<br>esant puslapyje 'Turgavietė => Pirkti'<br>(Numatyta = 1)";
				t['49'] = "Susibūrimo vietos pagrindinis veiksmas";
				t['50'] = "Žvalgų kiekis Funkcijai \"Pasirinkti žvalgus\"";
				t['51'] = "Rodyti paskutinę ataką";
				t['52'] = "Rodyti/naudoti paskutinės atakos koordinates";
				t['53'] = "Pranešimų lentelėje rodyti karių informaciją";
				t['54'] = "Atstumą ir laikus iki gyvenvietės rodyti pranešimų lentelėje";
				t['56'] = "Rodyti laukų/oazių informaciją,<br>kai pelė rodo į žemėlapio laukelį";
				t['57'] = "Rodyti atstumą ir laiką";
				t['58'] = "Rodyti žaidėjų/gyvenviečių/oazių lentelę";
				t['59'] = "Užkraunamų pranešimų/ataskaitų puslapių skaičius<br>(Numatyta = 1)";
				t['60'] = "Rodyti nuorodas laiškų atidarymui iškylančiajame lange";
				t['61'] = "Rodyti \"Trinti viską\" lentelę ataskaitų puslapyje";
				t['62'] = "Rodyti \"Siųsti IGM\" piktogramą ir man";
				t['64'] = "Ataskaitų statistikoje rodyti detales";
				t['65'] = "Galimo lygio kėlimo spalva<br>(Tuščia = pradinė)";
				t['66'] = "Aukščiausio lygio spalva<br>(Tuščia = pradinė)";
				t['67'] = "Negalimo lygio kėlimo spalva<br>(Tuščia = pradinė)";
				t['68'] = "Galimo lygio kėlimo per NPC prekeivį spalva<br>(Tuščia = pradinė)";
				t['69'] = "Konsolės registro lygis<br>TIK PROGRAMUOTOJAMS ARBA KLAIDŲ PAIEŠKAI<br>(Numatyta = 0)";
				t['82.L'] = "Fiksuoti žymas (nerodyti trynimo, perkėlimo aukštyn bei žemyn ikonų)";
				t['82.U'] = "Nefiksuoti žymų (rodyti trynimo, perkėlimo aukštyn bei žemyn ikonas)";
				t['U.2'] = "Gentis";
				t['U.3'] = "Jūsų sostinės pavadinimas";
				t['U.6'] = "Jūsų sostinės koordinatės";
				t['SIM'] = "Mūšių simuliat.";
				t['QSURE'] = "Tikrai pašalinti?";
				t['LOSS'] = "Nuostoliai";
				t['PROFIT'] = "Pelnas";
				t['EXTAV'] = "Galima kelti lygį";
				t['PLAYER'] = "Žaidėjas";
				t['VILLAGE'] = "Gyvenvietės pavadinimas";
				t['POPULATION'] = "Populiacija";
				t['COORDS'] = "Koordinatės";
				t['MAPTBACTS'] = "Veiksmai";
				t['SAVED'] = "Išsaugota";
				t['YOUNEED'] = "Jums reikia";
				t['TODAY'] = "šiandien";
				t['TOMORROW'] = "rytoj";
				t['DAYAFTERTOM'] = "poryt";
				t['BN_GID12'] = "Ginklų kalvė";
				t['BN_GID13'] = "Šarvų kalvė";
				t['BN_GID16'] = "Susibūrimo vieta";
				t['BN_GID17'] = "Turgavietė";
				t['BN_GID19'] = "Kareivinės";
				t['BN_GID20'] = "Arklidė";
				t['BN_GID21'] = "Dirbtuvės";
				t['BN_GID22'] = "Akademija";
				t['BN_GID24'] = "Rotušė";
				t['BN_GID25'] = "Rezidencija";
				t['BN_GID26'] = "Valdovų rūmai";
				t['BN_GID27'] = "Iždinė";
				t['BN_GID37'] = "Karžygio namai";
				t['SENDRES'] = "Siųsti resursus";
				t['BUY'] = "Pirkti";
				t['SELL'] = "Parduoti";
				t['SENDIGM'] = "Siųsti žinutę";
				t['LISTO'] = "Resursų bus";
				t['ON'] = "";
				t['AT'] = "";
				t['EFICIENCIA'] = "Efektyvumas";
				t['NEVER'] = "Niekada";
				t['ALDEAS'] = "Gyvenvietė(-s)";
				t['TIEMPO'] = "Laikas";
				t['OFREZCO'] = "Siūloma";
				t['BUSCO'] = "Ieškoma";
				t['TIPO'] = "Santykis";
				t['DISPONIBLE'] = "Tik įmanomi";
				t['CUALQUIERA'] = "Nesvarbu";
				t['YES'] = "Taip";
				t['NO'] = "Ne";
				t['LOGIN'] = "Prisijungti";
				t['MARCADORES'] = "Žymos";
				t['ANYADIR'] = "Pridėti";
				t['UBU'] = "Nauja URL nuoroda";
				t['UBT'] = "Nauja tekstinė nuoroda";
				t['DEL'] = "Ištrinti";
				t['MAPA'] = "Žemėlapis";
				t['MAXTIME'] = "Gabenimo laikas (iki)";
				t['ARCHIVE'] = "Archyvas";
				t['SUMMARY'] = "Santrauka";
				t['TROPAS'] = "Kariai";
				t['CHKSCRV'] = "Atnaujinti TBeyond";
				t['ACTUALIZAR'] = "Atnaujinti gyvenvietės informaciją";
				t['VENTAS'] = "Išsaugoti pasiūlymai";
				t['MAPSCAN'] = "Skanuoti žemėlapį";
				t['BIC'] = "Išplėsti naršymo juostą";
				t['SAVE'] = "Išsaugoti";
				t['AT2'] = "Pastiprinimas";
				t['AT3'] = "Puolimas: ataka";
				t['AT4'] = "Puolimas: reidas";
				t['NBSA'] = "Automatinis";
				t['NBSN'] = "Normalus (maža)";
				t['NBSB'] = "Dideliems ekranams (didelė)";
				t['NBHAX'] = "Automatiškai išsiplečianti";
				t['NBHK'] = "Fiksuoto dydžio";
				t['NPCSAVETIME'] = "Bus sukaupta po: ";
				t['TOTALTROOPS'] = "Visi gyvenvietės kariai";
				t['SELECTALLTROOPS'] = "Pasirinkti visus karius";
				t['PARTY'] = "Taškai";
				t['CPPERDAY'] = "KT per dieną";
				t['SLOT'] = "Vietos";
				t['TOTAL'] = "Iš viso";
				t['SELECTSCOUT'] = "Pasirinkti žvalgus";
				t['SELECTFAKE'] = "Pasirinkti netikrą ataką";
				t['ALL'] = "Visi";
				t['SH2'] = "Spalvų laukuose galite įvesti:<br>- green arba red arba orange, ir t.t.<br>- taip pat HEX spalvų kodą, pvz.: #004523<br>- jei norite palikti standartinę spalvą, laukelį palikite tuščią";
				t['SOREP'] = "Rodyti originalią ataskaitą (kopijavimui)";
				t['WSIMO1'] = "Vidinė (siūloma žaidimo)";
				t['WSIMO2'] = "Išorinė (siūloma kirilloid.ru)";
				t['NONEWVER'] = "Jūs turite naujausią versiją";
				t['BVER'] = "Jūs galite turėti beta versiją";
				t['NVERAV'] = "Dabartinė versija";
				t['UPDSCR'] = "Atnaujinti dabar?";
				t['CHECKUPDATE'] = "Ieškoma atnaujinimų.<br>Prašome palaukti...";
				t['AVPPV'] = "Gyventojų vidurkis gyvenvietei";
				t['AVPPP'] = "Gyventojų vidurkis žaidėjui";
				t['MAX'] = "Daugiausiai";
				t['TOTTRTR'] = "Iš viso treniruojamų karių";
				t['TB3SL'] = "$1 nustatymai";
				t['UPDALLV'] = "Atnaujinti visas gyvenvietes.  NAUDOTI ITIN ATSARGIAI, NES DĖL TO GALI BŪTITE BŪTI UŽBLOKUOTAS !";
				t['LARGEMAP'] = "Didelis žemėlapis";
				t['USETHEMPR'] = "Naudoti (proporcingai)";
				t['USETHEMEQ'] = "Naudoti (lygiai)";
				t['GSRVT'] = "Žaidimo serveris";
				t['ACCINFO'] = "Registracijos informacija";
				t['NBO'] = "Užrašinė";
				t['MNUL'] = "Meniu kairėje pusėje";
				t['STAT'] = "Statistika";
				t['RESF'] = "Resursų laukai";
				t['VLC'] = "Gyvenvietės centras";
				t['MAPO'] = "Žemėlapio parinktys";
				t['COLO'] = "Spalvų parinktys";
				t['DBGO'] = "Debug'inimo parinktys";
				t['NOW'] = "Dabar";
				t['CLOSE'] = "Atšaukti";
				t['USETHEM1H'] = "Naudoti (1 valandos produkcija)";
				t['OVERVIEW'] = "Apžvalga";
				t['FORUM'] = "Forumas";
				t['ATTACKS'] = "Puolimai";
				t['NEWS'] = "Naujienos";
				t['ADDCRTPAGE'] = "Pridėti šį puslapį";
				t['SCRPURL'] = "TB puslapis";
				t['SPACER'] = "Pridėti skirtuką";
				t['MEREO'] = "Pranešimai ir ataskaitos";
				t['ATTABLES'] = "Karių lentelė";
				t['MTW'] = "Neišnaudota";
				t['MTX'] = "Viršyta";
				t['MTC'] = "Esamas pakrovimas";
				t['ALFL'] = "Nuoroda į įšorini forumą<br>(jei naudojate vidinį, nerašykite nieko)";
				t['MTCL'] = "Viską išvalyti";
				t['CKSORT'] = "Rūšiuoti";
				t['MIN'] = "Mažiausiai";
				t['SVGL'] = "Visose gyvenvietėse";
				t['VGL'] = "Gyvenviečių sąrašas";
				t['UPDATEPOP'] = "Atnaujinti populiaciją";
				t['EDIT'] = "Redaguoti";
				t['NPCO'] = "NPC asistentas";
				t['NEWVILLAGEAV'] = "Data/Laikas";
				t['TIMEUNTIL'] = "Laukimo laikas";
				t['CENTERMAP'] = "Centruoti šią gyvenvietę žemėlapyje";
				t['SENDTROOPS'] = "Siųsti karius";
				t['UPGTB'] = "Resursų laukų ir pastatų lygių kėlimo lentelės";
				t['RBTT'] = "Resursų lentelė";
				t['USE'] = "Naudoti";
				t['CROPFINDER'] = "Crop Finder";
				t['VGL2'] = "Gyvenviečių sąrašas";
				t['112'] = "Rodyti atstumą ir laiką";
				t['114'] = "KT per dieną";
				t['TCOST'] = "Pagaminimo kaina";
				break;
			case 'lv':
				t['1'] = "Travian v2.x server";
				t['4'] = "Tirgus";
				t['5'] = "Mītiņa vieta/Kazarmas/Darbnīca/Stallis";
				t['6'] = "Rātsnams/Varoņu Savrupmāja/Ieroču kaltuve/Bruņu kaltuve";
				t['8'] = "Alianse";
				t['9'] = "Rādīt papildus saites kreisajā izvēlnes joslā<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Kaujas simulatora saite:<br>(kreisā izvēlnes josla)";
				t['12'] = "Rādīt 'dorf1.php' un 'dorf2.php' saites";
				t['20'] = "Rādīt saglabātās saites";
				t['22'] = "Rādīt pierakstu blociņu";
				t['24'] = "Piezīmju blociņa izmērs";
				t['25'] = "Pierakstu blociņa augstums";
				t['27'] = "Pasaules analīze";
				t['28'] = "Rādīt analīzes ikonu pie saitēm";
				t['37'] = "Rādīt resursu līmeņu tabulu";
				t['38'] = "Rādīt resursu līmeņu krāsas";
				t['41'] = "Rādīt celtņu līmeņu tabulu";
				t['43'] = "Numurus rādīt centrētus";
				t['44'] = "Rādīt celtņu līmeņu krāsas";
				t['48'] = "Piedāvājumu lapu skaits <br>kamēr ‘Tirgus => Pirkt' page<br>(Noklusētais = 1)";
				t['49'] = "Mītiņa vietas noklusētā darbība";
				t['50'] = "Skautu skaits priekš \"Izvēlēties skautus\" funkcijas";
				t['53'] = "Rādīt karaspēka informāciju Tooltip’os";
				t['56'] = "Rādīt sūnas tipu/oāzes informācijuShow <br>while kamēr peles kursors ir uz kartes";
				t['57'] = "Rādīt distanci un laiku";
				t['59'] = "Ziņojumu skaits <br>(Noklusētais = 1)";
				t['65'] = "Krāsa: Iespējams uzlabot<br>(Noklusētais = Tukšs)";
				t['66'] = "Krāsa: Maksimālā līmeņa krāsa l<br>(Noklusētais = Tukšs)";
				t['67'] = "Krāsa: Līmeni nevar uzlabot<br>( Noklusētais = Tukšs)";
				t['68'] = "Krāsa: Uzlabošana caur NPC<br>( Noklusētais = Tukšs)";
				t['69'] = "Konsules Log līmenis<br>TIKAI PRIEKŠ PROGRAMĒTĀJIEM  VAI KĻŪDU NOVĒRŠANAS<br>(Noklusētais = 0)";
				t['82.L'] = "Slēgt saites (Slēpt dzēst, pārvietot uz augšu, uz leju ikonas)";
				t['82.U'] = "Atslēgt saites ( Rādīt dzēst, pārvietot uz augšu, uz leju ikonas)";
				t['U.2'] = "Rase";
				t['U.3'] = "Galvaspilsētas nosaukums<br><b>Apmeklē savu profilu</b>";
				t['U.6'] = "Galvaspilsētas koordinātes<br><b> Apmeklē savu profilu</b>";
				t['SIM'] = "Kaujas simulātors";
				t['QSURE'] = "Vai esi pārliecināts?";
				t['LOSS'] = "Zaudējumi";
				t['PROFIT'] = "Guvums";
				t['EXTAV'] = "Celšana pieejama";
				t['PLAYER'] = "Spēlētājs";
				t['VILLAGE'] = "Ciems";
				t['POPULATION'] = "Populācija";
				t['COORDS'] = "Koordinātes";
				t['MAPTBACTS'] = "Notikumi";
				t['SAVED'] = "Saglabāts";
				t['YOUNEED'] = "Nepieciešams";
				t['TODAY'] = "šodien";
				t['TOMORROW'] = "rītdien";
				t['DAYAFTERTOM'] = "aizparīt";
				t['BN_GID12'] = " Ieroču kaltuve ";
				t['BN_GID13'] = "Bruņu kaltuve ";
				t['BN_GID16'] = "Mītiņa vieta";
				t['BN_GID17'] = "Tirgus";
				t['BN_GID19'] = "Kazarmas";
				t['BN_GID20'] = "Stallis";
				t['BN_GID21'] = "Darbnīca";
				t['BN_GID24'] = "Rātsnams";
				t['BN_GID37'] = " Varoņu Savrupmāja";
				t['SENDRES'] = "Sūtīt resursus";
				t['BUY'] = "Pirkt";
				t['SELL'] = "Pārdot";
				t['SENDIGM'] = "Sūtīt ziņu";
				t['LISTO'] = "Pieejams";
				t['ON'] = "ap";
				t['AT'] = "ap";
				t['EFICIENCIA'] = "Lietderība";
				t['NEVER'] = "Ne tagad";
				t['ALDEAS'] = "Ciemi";
				t['TIEMPO'] = "Laiks";
				t['OFREZCO'] = "Piedāvājumi";
				t['BUSCO'] = "Meklē";
				t['TIPO'] = "Tips";
				t['DISPONIBLE'] = "Tikai pieejamos";
				t['CUALQUIERA'] = "Jebkurš";
				t['YES'] = "Jā";
				t['NO'] = "Nē";
				t['LOGIN'] = "Ieiet";
				t['MARCADORES'] = "Saglabātās saites";
				t['ANYADIR'] = "Pievienot";
				t['UBU'] = "Jaunās saites URL";
				t['UBT'] = "Jaunās saites nosaukums";
				t['DEL'] = "Dzēst";
				t['MAPA'] = "Karte";
				t['MAXTIME'] = "Maksimālais laiks";
				t['ARCHIVE'] = "Arhīvs";
				t['SUMMARY'] = "Pārskats";
				t['TROPAS'] = "Karavīri";
				t['CHKSCRV'] = "Atjaunot versiju";
				t['ACTUALIZAR'] = "Atjaunot ciema informāciju";
				t['VENTAS'] = "Saglabātie piedāvājumi";
				t['MAPSCAN'] = "Meklēt kartē";
				t['BIC'] = "Rādīt papildus ikonas";
				t['SAVE'] = "Saglabāt";
				t['AT2'] = "Papildspēki";
				t['AT3'] = "Uzbrukums: Parasts";
				t['AT4'] = "Uzbrukums: Iebrukums";
				t['NBSA'] = "Automātisks";
				t['NBSN'] = "Normāls (mazais)";
				t['NBSB'] = "Platiem ekrāniem (lielais)";
				t['NBHAX'] = "Automātiski izstiepts augstums";
				t['NBHK'] = "Noklusētais augstums";
				t['NPCSAVETIME'] = "Saglabāt:";
				t['TOTALTROOPS'] = "Kopējais karaspēka skaits";
				t['SELECTALLTROOPS'] = "Izvēlēties visu karaspēku";
				t['PARTY'] = "Svinības";
				t['CPPERDAY'] = "Kultūras punkti/Dienā";
				t['SLOT'] = "Vieta";
				t['TOTAL'] = "Kopā";
				t['SELECTSCOUT'] = "Izvēlieties izlūku";
				t['SELECTFAKE'] = "Izvēlieties ne-īsto";
				t['ALL'] = "Visi";
				t['SH2'] = "Krāsu laukumos varat ievadīt šādas krāsas:<br>- <b>green</b> vai <b>red</b> vai  <b>orange</b>, utt.<br>- kā arī krāsu kodus <b>#004523</b><br>- vai arī atstājat tukšu, lai izmantotu noklusētās krāsas";
				t['SOREP'] = "Rādīt oriģinālo ziņojumu (priekš kopēšanas utt)";
				t['WSIMO1'] = "Iekšējais (nodrošinājusi spēle)";
				t['WSIMO2'] = "Ārējais (nodršinājis kirilloid.ru)";
				t['NONEWVER'] = "Jūs jau lietojat pēdējo versiju";
				t['BVER'] = "Jūs varat lietot arī Beta versiju";
				t['NVERAV'] = "Jaunākā skripta versija ir pieejama";
				t['UPDSCR'] = "Atjaunot skriptu tagad?";
				t['CHECKUPDATE'] = "Meklēju skripta jauninājumu.<br>Lūdzu uzgaidiet...";
				t['AVPPV'] = "Vidējā populācija pret ciemu";
				t['AVPPP'] = "Vidējā populācija pret spēlētāju";
				t['MAX'] = "Maksimālais";
				t['TOTTRTR'] = "Kopējais karaspēka skaits, kas tiek trenēts";
				t['TB3SL'] = "$1 opcijas";
				t['UPDALLV'] = "Uzlabot visus ciemus. ŠO LABĀK NEIZMANTOT, JO TAS VAR NOVEST PIE KONTA BLOĶĒŠANAS";
				t['LARGEMAP'] = "Lielā karte";
				t['USETHEMPR'] = "Lietot tos (proporcionāli)";
				t['USETHEMEQ'] = "Lietot tos (vienlīdzīgi)";
				t['GSRVT'] = "Spēles serveris";
				t['NBO'] = "Pierakstu blociņs";
				t['MNUL'] = "Kreisās puses izvēles josla";
				t['STAT'] = "Statistika";
				t['RESF'] = "Resursu lauki";
				t['VLC'] = "Ciema centrs";
				t['MAPO'] = "Kastes iestatījumi";
				t['COLO'] = "Krāsu iestatījumi";
				t['DBGO'] = "Kļūdu ziņojumu iestatījumi";
				t['NOW'] = "Tagad";
				t['CLOSE'] = "Aizvērt";
				t['USETHEM1H'] = "Lietot tos (1 stundas produkcija)";
				t['OVERVIEW'] = "Pārskats";
				t['FORUM'] = "Forums";
				t['ATTACKS'] = "Uzbrukumi";
				t['NEWS'] = "Ziņojumi";
				t['ADDCRTPAGE'] = "Pievienot atvērto lapu";
				t['SCRPURL'] = "TBeyond mājaslapa";
				t['SPACER'] = "Starp";
				t['MEREO'] = "Saņemtās ziņas un ziņojumi";
				t['ATTABLES'] = "Karaspēka saraksti";
				t['MTW'] = "Izniekots";
				t['MTX'] = "Pārmērīgs";
				t['MTC'] = "Pašreizējā krava";
				t['ALFL'] = "Saite uz ārējo Travian forumu<br>(atstāj tukšu, lai saite būtu uz starptautisko forumu)";
				t['MTCL'] = "Nodzēst visu";
				t['VGL'] = "Ciemu saraksts";
				t['USE'] = "Lietot";
				t['CROPFINDER'] = "Labības lauku meklētajs";
				t['VGL2'] = "Ciemu saraksts";
				t['112'] = "Rādīt distanci un laiku";
				t['114'] = "Kultūras punkti/Dienā";
				break;
			case 'my':
				t['1'] = "Server Travian v2.x";
				t['2'] = "Hilangkan banner iklan";
				t['4'] = "Pasar";
				t['5'] = "Titik perhimpunan/Berek/Bengkel/Kandang kuda";
				t['6'] = "Dewan perbandaran/Rumah agam wira/Kedai perisai/Kedai senjata";
				t['7'] = "Istana/Residen/Akademi/Perbendaharaan";
				t['8'] = "Persekutuan";
				t['9'] = "Tunjukkan link tambahan di menu sebelah kiri<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Link simulator peperangan untuk digunakan:<br>(menu disebelah kiri)";
				t['12'] = "Tunjukkan link 'dorf1.php' and 'dorf2.php'";
				t['13'] = "Tunjukkan ikon \"Ketengahkan peta untuk kampung ini\" ";
				t['15'] = "Tunjukkan ikon \"Produksi sumber per jam' didalam list kampung";
				t['16'] = "Tunjukkan produksi tanaman efektif di dalam list kampung";
				t['17'] = "Tunjukkan populasi di dalam list kampung";
				t['20'] = "Tunjukkan bookmarks";
				t['22'] = "Tunjukkan blok nota";
				t['24'] = "Saiz blok nota";
				t['25'] = "Ketinggian blok nota";
				t['26'] = "Tunjukkan pengiraan/link Pembantu NPC";
				t['27'] = "World Analyser untuk digunakan";
				t['28'] = "Tunjukkan link penganalisa statistik";
				t['34'] = "Tunjukkan informasi MB/Hari di dalam jadual naiktaraf";
				t['35'] = "Tunjukkan penggunaan makanan didalam jadual naik taraf";
				t['37'] = "Tunjukkan jadual naiktaraf tapak sumber";
				t['38'] = "Tunjukkan warna-warna tahap sumber";
				t['39'] = "Tunjukkan jadual bar sumber";
				t['41'] = "Tunjukkan jadual naiktaraf bangunan";
				t['43'] = "Tunjukkan nombor-nombor di pusat kampung";
				t['44'] = "Tunjukkan warna-warna tahap bangunan";
				t['45'] = "Tunjukkan level berkedip untuk bangunan yang sedang dinaiktaraf";
				t['48'] = "Jumlah mukasurat tawaran untuk dipreload<br>Semasa di 'Pasar => Mukasurat beli' <br>(Default = 1)";
				t['49'] = "Aksi Titik perhimpunan";
				t['50'] = "Bilangan peninjau untuk fungsi \"Pilihkan peninjau\"";
				t['53'] = "Tunjukkan informasi askar-askar di tooltips";
				t['54'] = "Tunjukkan jarak dan masa kepada sesuatu kampung di tooltips";
				t['56'] = "Tunjukkan informasi jenis petak/oasis <br>semasa meletakkan cursor diatas peta";
				t['57'] = "Tunjukkan jarak & masa";
				t['58'] = "Tunjukkan jadual pemain/kampung/oasis berpenduduk";
				t['59'] = "Bilangan mukasurat mesej/laporan untuk dipreload<br>(Default = 1)";
				t['60'] = "Tunjukkan link untuk membuka mesej sebagai pop-up";
				t['61'] = "Tunjukkan jadual \"Padam semua\" di mukasurat laporan";
				t['62'] = "Tunjukkan ikon \"Hantar IGM\" kepada saya juga";
				t['64'] = "Tunjukkan detail di dalam Statistic Laporan";
				t['65'] = "Warna naiktaraf ada<br>(Default = Kosong)";
				t['66'] = "Warna tahap maksimum<br>(Default = Kosong)";
				t['67'] = "Warna naiktaraf tak mungkin<br>(Default = Kosong)";
				t['68'] = "Warna naiktaraf menggunakan NPC<br>(Default = Kosong)";
				t['82.L'] = "Kunci bookmark (Sorokkan ikon padam, keatas, kebawah)";
				t['82.U'] = "Buka kunci bookmark (Tunjukkan ikon padam, keatas, kebawah)";
				t['U.2'] = "Puak";
				t['U.3'] = "Namakan ibukota anda<br><b>Lawat Profile anda untuk kemaskini</b>";
				t['U.6'] = "Koordinat ibukota<br><b>Lawat Profile anda untuk kemaskini</b>";
				t['SIM'] = "Simulator Peperangan";
				t['QSURE'] = "Adakah anda pasti?";
				t['LOSS'] = "Kerugian";
				t['PROFIT'] = "Keuntungan";
				t['EXTAV'] = "Boleh dibesarkan";
				t['PLAYER'] = "Pemain";
				t['VILLAGE'] = "Kampung";
				t['POPULATION'] = "Populasi";
				t['COORDS'] = "Koordinat";
				t['MAPTBACTS'] = "Aksi";
				t['SAVED'] = "Disimpan";
				t['YOUNEED'] = "Anda Perlu";
				t['TODAY'] = "Hari ini";
				t['TOMORROW'] = "Esok";
				t['DAYAFTERTOM'] = "Lusa";
				t['BN_GID12'] = "Kedai Senjata";
				t['BN_GID13'] = "Kedai Perisai";
				t['BN_GID16'] = "Titik Perhimpunan";
				t['BN_GID17'] = "Pasar";
				t['BN_GID19'] = "Berek";
				t['BN_GID20'] = "Kandang Kuda";
				t['BN_GID21'] = "Bengkel";
				t['BN_GID22'] = "Akademi";
				t['BN_GID24'] = "Dewan Perbandaran";
				t['BN_GID25'] = "Residen";
				t['BN_GID26'] = "Istana";
				t['BN_GID27'] = "Perbendaharaan";
				t['BN_GID37'] = "Rumah Agam Wira";
				t['SENDRES'] = "Hantarkan Sumber-sumber";
				t['BUY'] = "Beli";
				t['SELL'] = "Tawar";
				t['SENDIGM'] = "Hantar IGM";
				t['LISTO'] = "Ada";
				t['ON'] = "pada";
				t['AT'] = "di";
				t['EFICIENCIA'] = "Kecekapan";
				t['NEVER'] = "Tidak pernah";
				t['ALDEAS'] = "Kampung(-kampung)";
				t['TIEMPO'] = "Masa";
				t['OFREZCO'] = "Menawar";
				t['BUSCO'] = "Mencari";
				t['TIPO'] = "Jenis";
				t['DISPONIBLE'] = "Hanya Ada";
				t['CUALQUIERA'] = "Mana-mana";
				t['YES'] = "Ya";
				t['NO'] = "Tidak";
				t['LOGIN'] = "Log Masuk";
				t['MARCADORES'] = "Bookmark";
				t['ANYADIR'] = "Tambah";
				t['UBU'] = "URL Bookmark Baru";
				t['UBT'] = "Teks Bookmark Baru";
				t['DEL'] = "Padam";
				t['MAPA'] = "Peta";
				t['MAXTIME'] = "Masa Maksimum";
				t['ARCHIVE'] = "Arkib";
				t['SUMMARY'] = "Rumusan";
				t['TROPAS'] = "Askar-askar";
				t['CHKSCRV'] = "Kemaskini TBeyond";
				t['ACTUALIZAR'] = "Kemaskini informasi kampung";
				t['VENTAS'] = "Tawaran tersimpan";
				t['MAPSCAN'] = "Imbaskan Peta";
				t['BIC'] = "Tunjukkan lebih ikon";
				t['SAVE'] = "Simpan";
				t['AT2'] = "Bantuan";
				t['AT3'] = "Serangan: Normal";
				t['AT4'] = "Serangan: Serbuan";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normal (kecil)";
				t['NBSB'] = "Skrin besar (besar)";
				t['NBHAX'] = "Laras Tinggi Automatik";
				t['NBHK'] = "Ketinggian Default";
				t['NPCSAVETIME'] = "Jimat: ";
				t['TOTALTROOPS'] = "Jumlah askar-askar dalam kampung";
				t['SELECTALLTROOPS'] = "Pilihkan semua askar";
				t['PARTY'] = "Perayaan";
				t['CPPERDAY'] = "MB/hari";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Jumlah";
				t['SELECTSCOUT'] = "Pilihkan peninjau";
				t['SELECTFAKE'] = "Pilihkan fake";
				t['ALL'] = "Semua";
				t['SH2'] = "Didalam ruang warna anda boleh memasuskkan:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>-  Kod warna HEX seperti<b>#004523</b><br>- Tinggalkan kosong untuk warna default";
				t['SOREP'] = "Tunjukkan laporan original (untuk dipost)";
				t['WSIMO1'] = "Dalaman (disediakan oleh permainan)";
				t['WSIMO2'] = "Luaran (disediakan oleh kirilloid.ru)";
				t['NONEWVER'] = "Anda mempunyai versi yang terbaru";
				t['BVER'] = "Anda mempunyai versi beta";
				t['NVERAV'] = "A Terdapat versi skrip yang lebih baru";
				t['UPDSCR'] = "Kemaskini skrip sekarang ?";
				t['CHECKUPDATE'] = "Memeriksa untuk kemaskini skrip.<br>Sila tunggu...";
				t['AVPPV'] = "Populasi purata per kampung";
				t['AVPPP'] = "Populasi purata per pemain";
				t['MAX'] = "Maksimum";
				t['TOTTRTR'] = "Jumlah askar sedang dilatih";
				t['TB3SL'] = "Setup $1";
				t['UPDALLV'] = "Kemaskini semua kampung.  GUNAKAN DENGAN BERHATI-HATI KERANA INI BOLEH MEMBAWA KEPADA PEMBEKUAN AKAUN ANDA !";
				t['LARGEMAP'] = "Peta Besar";
				t['USETHEMPR'] = "Guna (Dalam Peratus)";
				t['USETHEMEQ'] = "Guna (Samarata)";
				t['GSRVT'] = "Server dunia permainan";
				t['ACCINFO'] = "Informasi Akaun";
				t['NBO'] = "Nota";
				t['MNUL'] = "Menu di sebelah kiri";
				t['STAT'] = "Statistik";
				t['RESF'] = "Tapak sumber";
				t['VLC'] = "Pusat Kampung";
				t['MAPO'] = "Pilihan peta";
				t['COLO'] = "Pilihan warna";
				t['DBGO'] = "Pilihan debug";
				t['NOW'] = "Sekarang";
				t['CLOSE'] = "Tutup";
				t['USETHEM1H'] = "Guna (Produksi sejam)";
				t['OVERVIEW'] = "Keseluruhan";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Serangan";
				t['NEWS'] = "Berita";
				t['ADDCRTPAGE'] = "Tambahkan mukasurat sekarang";
				t['SCRPURL'] = "Mukasurat TBeyond";
				t['SPACER'] = "Penambah jarak";
				t['MEREO'] = "Mesej & Laporan";
				t['ATTABLES'] = "Jadual askar-askar";
				t['MTW'] = "Dibazirkan";
				t['MTX'] = "Melebihi";
				t['MTC'] = "Kapasiti sekarang";
				t['ALFL'] = "Linkkan ke forum luaran<br>(Tinggalkan kosong untuk forum dalaman)";
				t['MTCL'] = "Padamkan semua";
				t['CKSORT'] = "Klikkan untuk membahagi";
				t['MIN'] = "Minimum";
				t['SVGL'] = "Kongsikan antara kampung";
				t['VGL'] = "List kampung-kampung";
				t['UPDATEPOP'] = "Kemaskini populasi";
				t['EDIT'] = "Edit";
				t['NPCO'] = "Pilihan Pembantu NPC";
				t['NEWVILLAGEAV'] = "Tarikh/Masa";
				t['TIMEUNTIL'] = "Masa untuk menunggu";
				t['CENTERMAP'] = "Ketengahkan peta untuk kampung ini";
				t['SENDTROOPS'] = "Hantarkan askar-askar";
				t['UPGTB'] = " Jadual naiktaraf Tapak sumber/Bangunan";
				t['RBTT'] = "Bar Sumber";
				t['USE'] = "Guna";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "List kampung-kampung";
				t['112'] = "Tunjukkan jarak & masa";
				t['114'] = "MB/hari";
				break;
			case 'nl':
				t['1'] = "Travian v2.x server";
				t['3'] = "Forceer T3.1 Phalanx en Legionair Capaciteits berekening.<br>(Voor gemixte T3.1 & T3.5 servers - meestal .de servers)";
				t['4'] = "Marktplaats";
				t['5'] = "Verzamelplaats/Barakken/Werkplaatsen/Stal";
				t['6'] = "Raadhuis/Heldenhof/Uitrustingssmederij/Wapensmid";
				t['7'] = "Paleis/Residentie/Academie/Schatkamer";
				t['8'] = "Alliantie";
				t['9'] = "Extra link laten zien in linker menu<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Veldslagsimulator link gebruiken:<br>(in menu links)";
				t['12'] = "Laat de 'dorf1.php' en 'dorf2.php' links zien";
				t['13'] = "Icoon voor \"Centreer map op dit dorp\" laten zien";
				t['16'] = "Laat netto graanproductie zien in de dorpen lijst zien";
				t['17'] = "Laat de Populatie zien in de dorpen lijst zien";
				t['18'] = "Laat extra (2 Kolommen) dorpenlijst zien als zwevend venster";
				t['20'] = "Links laten zien";
				t['21'] = "Laat \"Gebruikers Links\" als zwevend venster zien";
				t['22'] = "Kladblok zichtbaar";
				t['23'] = "Laat \"Kladblok\" als zwevend venster zien";
				t['24'] = "Kladblok grote";
				t['25'] = "Kladblok hoogte";
				t['26'] = "NPC Handelaar links en info laten zien";
				t['27'] = "World Analyser gebruiken";
				t['28'] = "Laat Analyser statistieken links zien";
				t['29'] = "Welke map analyser te gebruiken:";
				t['30'] = "Laat links naar de kaart zien voor spelers";
				t['31'] = "Laat links naar de kaart zien voor allianties";
				t['34'] = "Laat CP/dag zien in de uitbreidingstabel";
				t['35'] = "Laat graanverbruik zien in de uitbreidingstabel";
				t['37'] = "Grondstofvelden uitbreidings tabel weergeven";
				t['38'] = "Grondstof kleur niveau weergeven";
				t['39'] = "Laat het \"Grondstof productie venster\" zien";
				t['40'] = "Laat het \"Grondstof productie venster\" als zwevend venster zien";
				t['41'] = "Gebouwen uitbereidings tabel weergeven";
				t['43'] = "Dorp nummers weergeven";
				t['44'] = "Gebouwen kleur niveau weergeven";
				t['45'] = "Laat knipperend icoon zien voor gebouwen die worden gebouwd";
				t['48'] = "Aantal pagina's voorladen<br>bij 'Marktplaats => kopen'<br>(Standaard = 1)";
				t['49'] = "Verzamelplaats standaard aktie";
				t['50'] = "Aantal scouts voor de \"Selecteer verkenners\" functie";
				t['53'] = "Troepen info laten zien bij muis op plaatjes.";
				t['54'] = "Afstand en tijd laten zien naar dorp in tooltip";
				t['55'] = "Automatisch aanwezige troepen invullen";
				t['56'] = "Laat veld type/oase info zien<br>bij muisover het veld";
				t['57'] = "Afstanden en tijden laten zien";
				t['58'] = "Laat de tabel zien van Spelers/Dorpen/Oases";
				t['59'] = "Aantal paginas voorladen<br>(Standaard = 1)";
				t['61'] = "Tabel met \"Verwijder\" laten zien op raporten pagina";
				t['62'] = "Ook mijn \"Stuur IGM\" icoon laten zien";
				t['63'] = "Laat TB3.5 Uitgebreide Aanvalsrapporten zien";
				t['64'] = "Laat uitgebreide details zien in de statistieken";
				t['65'] = "Kleur voor uitbreidbaar<br>(Standaard leeg)";
				t['66'] = "Kleur max level<br>(Standaard leeg)";
				t['67'] = "Kleur niet uitbreidbaar<br>(Standaard leeg)";
				t['68'] = "Kleur uitbreidbaar via NPC<br>(Standaard leeg)";
				t['69'] = "Console Log Niveau (Standaard = 0)<br>(alleen voor programeurs of debugging)";
				t['82.L'] = "Bladwijzers vast zetten (Verberg de verwijder en verplaats iconen)";
				t['U.2'] = "Ras";
				t['U.3'] = "Naam van hoofddorp<br><b>Niet bewerken, ga hiervoor naar je profiel</b>";
				t['U.6'] = "Coordinaten van hoofddorp<br><b>Niet bewerken, ga hiervoor naar je profiel</b>";
				t['SIM'] = "Gevecht simulator";
				t['QSURE'] = "Weet je het zeker?";
				t['LOSS'] = "Verlies";
				t['PROFIT'] = "Winst";
				t['EXTAV'] = "Uitbreiding beschikbaar";
				t['PLAYER'] = "Speler";
				t['VILLAGE'] = "Dorp";
				t['POPULATION'] = "Populatie";
				t['COORDS'] = "Co&ouml;rd";
				t['MAPTBACTS'] = "Acties";
				t['SAVED'] = "Bewaard";
				t['YOUNEED'] = "Nog nodig";
				t['TODAY'] = "vandaag";
				t['TOMORROW'] = "morgen";
				t['DAYAFTERTOM'] = "overmorgen";
				t['BN_GID12'] = "Wapensmid";
				t['BN_GID13'] = "Uitrustingssmederij";
				t['BN_GID16'] = "Verzamelpunt";
				t['BN_GID17'] = "Marktplaats";
				t['BN_GID19'] = "Barakken";
				t['BN_GID20'] = "Stal";
				t['BN_GID21'] = "Werkplaats";
				t['BN_GID24'] = "Raadhuis";
				t['BN_GID37'] = "Heldenhof";
				t['SENDRES'] = "Stuur grondstoffen";
				t['BUY'] = "Koop";
				t['SELL'] = "Verkoop";
				t['SENDIGM'] = "Stuur IGM";
				t['LISTO'] = "Uitbreiding beschikbaar";
				t['ON'] = "om";
				t['AT'] = "om";
				t['EFICIENCIA'] = "Effici&euml;ntie";
				t['NEVER'] = "Nooit";
				t['ALDEAS'] = "Dorp(en)";
				t['TIEMPO'] = "Tijd";
				t['OFREZCO'] = "Bieden";
				t['BUSCO'] = "Zoeken";
				t['TIPO'] = "Type";
				t['DISPONIBLE'] = "Alleen beschikbaar";
				t['CUALQUIERA'] = "Elke";
				t['YES'] = "Ja";
				t['NO'] = "Nee";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Links";
				t['ANYADIR'] = "Toevoegen";
				t['UBU'] = "Nieuwe link URL";
				t['UBT'] = "Nieuwe link Text";
				t['DEL'] = "Verwijder";
				t['MAPA'] = "Map";
				t['MAXTIME'] = "Max. tijd";
				t['ARCHIVE'] = "Archiveer";
				t['SUMMARY'] = "Samenvatting";
				t['TROPAS'] = "Troepen";
				t['CHKSCRV'] = "Update TBeyond";
				t['ACTUALIZAR'] = "Update dorp informatie";
				t['VENTAS'] = "Opgeslagen verkopen";
				t['MAPSCAN'] = "Scan de map";
				t['BIC'] = "Uitgebreide iconen zichtbaar";
				t['SAVE'] = "Opslaan";
				t['AT2'] = "Versterking";
				t['AT3'] = "Aanval";
				t['AT4'] = "Overval";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normaal (klein)";
				t['NBSB'] = "Groot";
				t['NBHAX'] = "Automatisch groter maken";
				t['NBHK'] = "Standaard hoogte";
				t['NPCSAVETIME'] = "Bespaar: ";
				t['TOTALTROOPS'] = "Totaal dorp troepen";
				t['SELECTALLTROOPS'] = "Selecteer alle troepen";
				t['PARTY'] = "Feest";
				t['CPPERDAY'] = "CP/dag";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Totaal";
				t['SELECTSCOUT'] = "Selecteer verkenners";
				t['SELECTFAKE'] = "Selecteer fake";
				t['ALL'] = "Alles";
				t['SH2'] = "In de kleur velen mag je invullen:<br>- <b>green</b>, <b>red</b> or <b>orange</b>, etc.<br>- de HEX kleur code zoals <b>#004523</b><br>- leeg laten voor standaard kleur";
				t['SOREP'] = "Laat orgineel bericht zien (voor verzenden)";
				t['WSIMO1'] = "Die van het spel";
				t['WSIMO2'] = "Externe (door kirilloid.ru)";
				t['NONEWVER'] = "Je hebt de laatste versie";
				t['BVER'] = "Je hebt waarschijnlijk een beta versie";
				t['NVERAV'] = "Er is een nieuwe versie beschikbaar";
				t['UPDSCR'] = "Update script nu ?";
				t['CHECKUPDATE'] = "Voor updates controleren... Een moment.";
				t['AVPPV'] = "Gemiddelde populatie per dorp";
				t['AVPPP'] = "Gemiddelde populatie per speler";
				t['TOTTRTR'] = "Totaal aantal troepen";
				t['UPDALLV'] = "Update alle dorpen. LETOP: Bij vaak gebruik kan dit lijden tot een ban van travain!";
				t['LARGEMAP'] = "Grote map";
				t['USETHEMPR'] = "Verdeel (procentueel)";
				t['USETHEMEQ'] = "Verdeel (Gelijkmatig)";
				t['GSRVT'] = "Server versie";
				t['ACCINFO'] = "Account info";
				t['NBO'] = "Kladblok";
				t['MNUL'] = "Linker menu";
				t['STAT'] = "Statistieken";
				t['RESF'] = "Grondstof velden";
				t['VLC'] = "Dorp centrum";
				t['MAPO'] = "Map opties";
				t['COLO'] = "Kleur opties";
				t['DBGO'] = "Debug opties";
				t['NOW'] = "Nu";
				t['CLOSE'] = "Sluit";
				t['USETHEM1H'] = "Verdeel (1 uur productie)";
				t['OVERVIEW'] = "Overzicht";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Aanvallen";
				t['NEWS'] = "Nieuws";
				t['ADDCRTPAGE'] = "Huidige pagina";
				t['SCRPURL'] = "TBeyond pagina";
				t['SPACER'] = "Scheidingsteken";
				t['MEREO'] = "Berichten & Raportages";
				t['ATTABLES'] = "Troepen tabellen";
				t['MTW'] = "Ruimte over";
				t['MTX'] = "Te veel";
				t['MTC'] = "Huidige lading";
				t['ALFL'] = "Link naar extern forum<br>(Leeg laten voor intern forum)";
				t['MTCL'] = "Leeg alle velden";
				t['CKSORT'] = "Klik voor sorteren";
				t['SVGL'] = "Voor elk dorp gebruiken";
				t['VGL'] = "Dorpen lijst";
				t['EDIT'] = "Bewerk";
				t['NPCO'] = "NPC Handel opties";
				t['NEWVILLAGEAV'] = "Datum/Tijd";
				t['TIMEUNTIL'] = "Wacht tijd";
				t['CENTERMAP'] = "Centreer map op dit dorp";
				t['USE'] = "Verdeel het";
				t['WSI'] = "In-game gevechts simulator";
				t['CROPFINDER'] = "Graanvelden zoeker";
				t['VGL2'] = "Dorpen lijst";
				t['112'] = "Afstanden en tijden laten zien";
				t['114'] = "CP/dag";
				break;
			case 'no':
				t['1'] = "Travian v2.x server";
				t['8'] = "Allianse";
				t['9'] = "Vis flere lenker i menyen til venstre<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Kampsimulator link:<br>(menyen til venstre)";
				t['20'] = "Vis bokmerker";
				t['22'] = "Vis notatblokk";
				t['24'] = "Notisblokk størrelse";
				t['25'] = "Notisblokk høyde";
				t['28'] = "Show analyser statistic links";
				t['37'] = "Vis utvidelseshjelp for ressursfelt";
				t['38'] = "Vi farge på ressurs nivået";
				t['41'] = "Vis utvidelseshjelp for bygninger";
				t['43'] = "Vis bygnings nivå";
				t['44'] = "Vis bygnings nivå farger";
				t['48'] = "Mengde av 'tilbyr' sider som skal lastes<br>i 'Marked => Kjøp' side<br>(Standard = 1)";
				t['49'] = "Møteplass standard handling ";
				t['56'] = "Vis rute/oase type<br>ved musepekeren over kartet";
				t['57'] = "Vis avstand og tid";
				t['65'] = "Farge utvidelse tilgjengelig<br>(Standard = Tom)";
				t['66'] = "Farge maksimalt nivål<br>(Standard = Tom)";
				t['67'] = "Farge utvidelse ikke tilgjengelig<br>(Standard = Tom)";
				t['68'] = "Farge utvidelse via NPC<br>(Standard = Tom)";
				t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
				t['U.2'] = "Stamme";
				t['U.3'] = "Navn på din hovedby<br><b>Ikke endre på dette, besøk profilen din!</b>";
				t['U.6'] = "Koordinater til hovedbyen din<br><b>Ikke endre på dette, besøk profilen din!</b>";
				t['SIM'] = "Kamp-simulator";
				t['QSURE'] = "Er du sikker?";
				t['LOSS'] = "Tap";
				t['PROFIT'] = "Profit";
				t['EXTAV'] = "Utvidelse tilgjengelig";
				t['PLAYER'] = "Spiller";
				t['VILLAGE'] = "By";
				t['POPULATION'] = "Befolknong";
				t['COORDS'] = "Koordinater";
				t['MAPTBACTS'] = "Handlinger";
				t['SAVED'] = "Lagret";
				t['YOUNEED'] = "Du trenger";
				t['TODAY'] = "idag";
				t['TOMORROW'] = "imorgen";
				t['DAYAFTERTOM'] = "dagen etter imorgen";
				t['BN_GID16'] = "Møteplass";
				t['BN_GID17'] = "Markedsplass";
				t['BN_GID19'] = "Kaserne";
				t['BN_GID20'] = "Stall";
				t['BN_GID21'] = "Verksted";
				t['SENDRES'] = "Send ressurser";
				t['BUY'] = "Kjøp";
				t['SELL'] = "Selg";
				t['SENDIGM'] = "Send IGM";
				t['LISTO'] = "Kan bygges";
				t['ON'] = "den";
				t['AT'] = "klokken";
				t['EFICIENCIA'] = "Effektivitet";
				t['NEVER'] = "Aldri";
				t['ALDEAS'] = "By(er)";
				t['TIEMPO'] = "Tid";
				t['OFREZCO'] = "Tilbyr";
				t['BUSCO'] = "Leter etter";
				t['TIPO'] = "Type";
				t['DISPONIBLE'] = "Kun tigjengelig";
				t['CUALQUIERA'] = "Alle";
				t['YES'] = "Ja";
				t['NO'] = "Nei";
				t['LOGIN'] = "Logg inn";
				t['MARCADORES'] = "Bokmerker";
				t['ANYADIR'] = "Legg til";
				t['UBU'] = "Nytt bokmerke URL";
				t['UBT'] = "Nytt nokmerke Text";
				t['DEL'] = "Slett";
				t['MAPA'] = "Kart";
				t['MAXTIME'] = "Maximum tid";
				t['ARCHIVE'] = "Arkiv";
				t['SUMMARY'] = "Resume";
				t['TROPAS'] = "Tropper";
				t['CHKSCRV'] = "Oppdater TBeyond";
				t['ACTUALIZAR'] = "Oppdater by-informasjon";
				t['VENTAS'] = "Lagrede tilbud";
				t['MAPSCAN'] = "Scan Kartet";
				t['BIC'] = "Vis utvidede iconer";
				t['SAVE'] = "Lagre";
				t['AT2'] = "Forsterkninger";
				t['AT3'] = "Angrep: Normalt";
				t['AT4'] = "Angrep: Plyndringstokt";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normal (Liten)";
				t['NBSB'] = "Større";
				t['NBHAX'] = "Automatisk utvid høyde";
				t['NBHK'] = "Standard høyde";
				t['NPCSAVETIME'] = "Lagre: ";
				t['TOTALTROOPS'] = "Totale tropper i byen";
				t['SELECTALLTROOPS'] = "Velg alle tropper";
				t['PARTY'] = "Fester";
				t['CPPERDAY'] = "KP/dag";
				t['SLOT'] = "Utvidelse";
				t['TOTAL'] = "Totalt";
				t['SELECTSCOUT'] = "Velg scout";
				t['SELECTFAKE'] = "Velg fake";
				t['ALL'] = "Alle";
				t['SH2'] = "I farge-felt kan du skrive:<br>- <b>green</b> eller <b>red</b> eller  <b>orange</b>, etc.<br>- the HEX color code like <b>#004523</b><br>- leave empty for the default color";
				t['SOREP'] = "Vis orginal rapport (for posting)";
				t['NONEWVER'] = "Du har den siste versjonen tilgjengelig";
				t['BVER'] = "Du har kansje en beta versjon";
				t['NVERAV'] = "En ny versjon er tilgjengelig";
				t['UPDSCR'] = "Oppdatere nå ?";
				t['CHECKUPDATE'] = "Leter etter script oppdatering.<br>Venligst vent...";
				t['AVPPV'] = "Gjennomsnittlig befolkning per by";
				t['AVPPP'] = "Gjennomsnittlig befolkning per spiller";
				t['TOTTRTR'] = "Total troppe utviklings tid";
				t['UPDALLV'] = "Oppdater alle byer.  USE WITH MAXIMUM CARE AS THIS CAN LEAD TO A BANNED ACCOUNT !";
				t['LARGEMAP'] = "Stort kart";
				t['CROPFINDER'] = "Crop finder";
				t['112'] = "Vis avstand og tid";
				t['114'] = "KP/dag";
				break;
			case 'ph':
				t['5'] = "Pook Tipunan/Kwartel/Talyer/Kuwadra";
				t['6'] = "Bulwagan ng Baryo/Mansyon ng Bayani/Balutian/Pandayan";
				t['7'] = "Palasyo/Residensya/Akademya/Kaban-yaman";
				t['8'] = "Alyansa";
				t['13'] = "Show \"Gitnang Mapa ng Baryo\" icon";
				t['37'] = "Show resource fields upgrade table";
				t['41'] = "Show buildings upgrade table";
				t['50'] = "Bilang ng Scout para sa \"Piliin Scout\" function";
				t['U.2'] = "Lahi";
				t['QSURE'] = "Sigurado ka ba?";
				t['LOSS'] = "Kawalan";
				t['PROFIT'] = "Pakinabang";
				t['EXTAV'] = "Maari ng Gawin";
				t['PLAYER'] = "Manlalaro";
				t['VILLAGE'] = "Baryo";
				t['POPULATION'] = "Populasyon";
				t['COORDS'] = "Coordinate";
				t['MAPTBACTS'] = "Aksyon";
				t['SAVED'] = "Saved";
				t['YOUNEED'] = "Kailangan mo";
				t['TODAY'] = "ngayon";
				t['TOMORROW'] = "bukas";
				t['DAYAFTERTOM'] = "kinabukasan";
				t['BN_GID12'] = "Pandayan";
				t['BN_GID13'] = "Balutian";
				t['BN_GID16'] = "Pook Tipunan";
				t['BN_GID17'] = "Palengke";
				t['BN_GID19'] = "Kwartel";
				t['BN_GID20'] = "Kuwadra";
				t['BN_GID21'] = "Talyer";
				t['BN_GID22'] = "Akademya";
				t['BN_GID24'] = "Bulwagan ng Baryo";
				t['BN_GID25'] = "Residensya";
				t['BN_GID26'] = "Palasyo";
				t['BN_GID27'] = "Kaban-yaman";
				t['BN_GID37'] = "Mansyon ng Bayani";
				t['SENDRES'] = "Magpadala ng likas-yaman";
				t['BUY'] = "Bumili";
				t['SELL'] = "Alok";
				t['SENDIGM'] = "Sumulat ng Mensahe";
				t['LISTO'] = "Maari na";
				t['ON'] = "ng";
				t['AT'] = "sa";
				t['EFICIENCIA'] = "Kahusayan";
				t['NEVER'] = "Hindi Kailanman";
				t['ALDEAS'] = "Baryo";
				t['TIEMPO'] = "Oras";
				t['OFREZCO'] = "Nag-aalok";
				t['BUSCO'] = "Naghahanap";
				t['TIPO'] = "Uri";
				t['DISPONIBLE'] = "Ito'y Maari lamang";
				t['CUALQUIERA'] = "Kahit Ano";
				t['YES'] = "Oo";
				t['NO'] = "Hindi";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Pinakamatagal na Oras";
				t['SUMMARY'] = "Ulat";
				t['TROPAS'] = "Mga Hukbo";
				t['AT2'] = "Dagdag ng Hukbo";
				t['AT3'] = "Salakay: Normal";
				t['AT4'] = "Salakay: Pagnakaw";
				t['TOTALTROOPS'] = "Kubuuan ng Hukbo";
				t['SELECTALLTROOPS'] = "Piliin lahat ng Hukbo";
				t['PARTY'] = "Kasiyahan";
				t['CPPERDAY'] = "Pananim/Araw";
				t['TOTAL'] = "Kabuuan";
				t['SELECTSCOUT'] = "Piliin ang Scout";
				t['SELECTFAKE'] = "Piliin ang Pekeng Atake";
				t['ALL'] = "Lahat";
				t['SOREP'] = "Ipakita ang Orihinal na Ulat";
				t['AVPPV'] = "Average na Population sa bawat Baryo";
				t['AVPPP'] = "Average na Population sa bawat Manlalaro";
				t['STAT'] = "Mga Estatistika";
				t['RESF'] = "Likas-yaman";
				t['VLC'] = "Gitna ng Baryo";
				t['OVERVIEW'] = "Pananaw";
				t['FORUM'] = "Porum";
				t['ATTACKS'] = "Atake";
				t['NEWS'] = "Ulat";
				t['CENTERMAP'] = "Gitnang Mapa ng Baryo";
				t['SENDTROOPS'] = "Magpadala ng Hukbo";
				t['114'] = "Pananim/Araw";
				break;
			case 'pl':
				t['1'] = "Travian v2.x server";
				t['3'] = "Wymuś obliczanie liczby Legionistów i Falang wg. wersji T3.1<br>(dla mieszanych serwerów T3.1 & T3.5 – zwykle tylko serwery .de)";
				t['4'] = "Rynek";
				t['5'] = "Miejsce zbiórki/koszary/Warsztat/Stajnia";
				t['6'] = "Ratusz/Dwór bohaterów/Kuźnia/Zbrojownia";
				t['7'] = "Pałac/Rezydencja/Akademia/Skarbiec";
				t['8'] = "Sojusz";
				t['9'] = "Pokaż dodatkowe linki w menu po lewej stronie<br>(Traviantoolbox, World Analyser, Travilog, Map, itp.)";
				t['10'] = "Symulator walki link do:<br>(menu z lewej strony)";
				t['12'] = "Pokaż 'dorf1.php' i 'dorf2.php' linki";
				t['13'] = "Pokaż ikonkę \"Centruj mapę na tej osadzie\"";
				t['16'] = "Pokaż rzeczywistą produkcję zboża na liście osad";
				t['17'] = "Pokaż liczbę ludnosci na liście osad";
				t['18'] = "Pokaż dodatkową (2-kolumnową) listę osad jako 'pływające okno'";
				t['20'] = "Pokaż zakładki";
				t['21'] = "Pokaż 'Zakładki' jako 'pływające' okno";
				t['22'] = "Pokaż notatnik";
				t['23'] = "Pokaż 'Notatnik' jako 'pływające' okno";
				t['24'] = "Notatnik - Rozmiar";
				t['25'] = "Notatnik - wysokość";
				t['26'] = "Pokaż kalkulacje handlarza NPC /linki";
				t['27'] = "Używany World Analyser ";
				t['28'] = "Pokaż linki statystyki analysera";
				t['29'] = "Jakiego analizatora map chcesz używać";
				t['30'] = "Pokaż odwołania do mapy dla graczy";
				t['31'] = " Pokaż odwołania do mapy dla sojuszy";
				t['34'] = "Pokaż PK/dzień w tabelce rozbudowy";
				t['35'] = "Pokaż zjadane zboże w tabelce rozbudowy";
				t['37'] = "Pokaż tabelkę rozbudowy surowców";
				t['38'] = "Pokaż kolory poziomu surowców";
				t['39'] = "Pokaż 'Tabelę surowców'";
				t['40'] = "Pokaż 'Tabelę surowców' jako 'pływające' okno";
				t['41'] = "Pokaż tabelkę rozbudowy budynków";
				t['42'] = "Sortowanie budynków wg. nazwy w tabeli rozbudowy osady";
				t['43'] = "Pokaż centrum osady";
				t['44'] = "Pokaż kolory poziomu budynków";
				t['45'] = "Pokaż poziom budynku który jest aktualnie budowany jako migający";
				t['46'] = "Wyświetl dodatkowe informacje dla każdego przybywającego handlarza";
				t['47'] = "Pokaż ostatni transport na rynku";
				t['48'] = "Liczba stron ofert na rynku <br>w zakładce 'Rynek => Kupowanie' Stron<br>(Domyślnie = 1)";
				t['49'] = "Miejsce zbiórki, domyślna akcja";
				t['50'] = "Ilość zwiadowców dla funkcji \"Wybierz zwiadowców\"";
				t['51'] = "Pokaż ostatni atak";
				t['52'] = "Pokaż/użyj współrzędnych ostatniego ataku";
				t['53'] = "Pokaż informację o jednostkach w podpowiedziach";
				t['54'] = "Pokaż odległość i czas dojścia do osady w podpowiedziach";
				t['55'] = "Automatycznie użyj dostępnych jednostek w wewnętrznym symulatorze bitwy";
				t['56'] = "Pokaż zawartość i typ doliny<br>kiedy wskażesz myszką";
				t['57'] = "Pokaż odległości i czasy dojścia jednostek";
				t['58'] = "Pokaż tabelkę graczy/osad/zdobytych dolin";
				t['59'] = "Liczba wiadomości/raportów na stronie  <br>(Domyslnie = 1)";
				t['60'] = "Pokaż ikonkę pozwalającą otwierać wiadomości/raporty<br>w osobnym okienku (pop-up)";
				t['61'] = "Pokaż tabelę 'Usuń wszystko' na stronie z raportami";
				t['62'] = "Pokaż ikonkę \"Wyślij PW\" również dla mnie";
				t['63'] = "Pokaz rozszerzone Raporty Bitewne TB3";
				t['64'] = "Pokaż szczegóły statystyk w raporcie";
				t['65'] = "Kolor: rozbudowa możliwa<br>(Domyślnie  = Brak)";
				t['66'] = "Kolor: poziomu maksymalnego<br>(Domyślnie  = Brak)";
				t['67'] = "Kolor: rozbudowa niemożliwa<br>(Domyślnie  = Brak)";
				t['68'] = "Kolor: rozbudowa przy pomocy NPC<br>(Domyślnie  = Brak)";
				t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
				t['82.L'] = "Zablokuj zakładki (Ukryj usuń, do góry, na dół ikonki)";
				t['82.U'] = "Odblokuj zakładki (Ukryj usuń, do góry, na dół ikonki)";
				t['U.2'] = "Rasa";
				t['U.3'] = "Nazwa Twojej stolicy<br><b>Wejdź do swojego profilu w ustawieniach aby zaktualizować</b>";
				t['U.6'] = "Współrzędne Twojej stolicy<br><b>Wejdź do swojego profilu w ustawieniach aby zaktualizować</b>";
				t['SIM'] = "Symulator Walki";
				t['QSURE'] = "Jesteś pewien?";
				t['LOSS'] = "Strata";
				t['PROFIT'] = "Zysk";
				t['EXTAV'] = "Rozbudowa możliwa";
				t['PLAYER'] = "Gracz";
				t['VILLAGE'] = "Osada";
				t['POPULATION'] = "Populacja";
				t['COORDS'] = "Koordynaty";
				t['MAPTBACTS'] = "Akcje";
				t['SAVED'] = "Zapisane";
				t['YOUNEED'] = "Potrzebujesz";
				t['TODAY'] = "Dzisiaj";
				t['TOMORROW'] = "Jutro";
				t['DAYAFTERTOM'] = "Pojutrze";
				t['BN_GID12'] = "Zbrojownia";
				t['BN_GID13'] = "Kuźnia";
				t['BN_GID16'] = "Miejsce Zbiórki";
				t['BN_GID17'] = "Rynek";
				t['BN_GID19'] = "Koszary";
				t['BN_GID20'] = "Stajnia";
				t['BN_GID21'] = "Warsztat";
				t['BN_GID22'] = "Akademia";
				t['BN_GID24'] = "Ratusz";
				t['BN_GID25'] = "Rezydencja";
				t['BN_GID26'] = "Pałac";
				t['BN_GID27'] = "Skarbiec";
				t['BN_GID37'] = "Dwór bohaterów";
				t['SENDRES'] = "Wyślij surowce";
				t['BUY'] = "Kup";
				t['SELL'] = "Sprzedaj";
				t['SENDIGM'] = "Wyślij PW";
				t['LISTO'] = "Możliwe";
				t['ON'] = "na";
				t['AT'] = "o";
				t['EFICIENCIA'] = "Efektywność";
				t['NEVER'] = "Nigdy";
				t['ALDEAS'] = "Osada(y)";
				t['TIEMPO'] = "Czas";
				t['OFREZCO'] = "Oferuję";
				t['BUSCO'] = "Szukam";
				t['TIPO'] = "Rodzaj";
				t['DISPONIBLE'] = "Tylko możliwe";
				t['CUALQUIERA'] = "Jakikolwiek";
				t['YES'] = "Tak";
				t['NO'] = "Nie";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Zakładki";
				t['ANYADIR'] = "Dodaj";
				t['UBU'] = "Nowa zakładka URL";
				t['UBT'] = "Nowa zakładka Text";
				t['DEL'] = "Usuń";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Maksimum czasu";
				t['ARCHIVE'] = "Archiwum";
				t['SUMMARY'] = "Razem";
				t['TROPAS'] = "Jednostki";
				t['CHKSCRV'] = "Uaktualnij TBeyond";
				t['ACTUALIZAR'] = "Aktualizuj informacje o osadzie";
				t['VENTAS'] = "Zapisz ofertę";
				t['MAPSCAN'] = "Skanuj mapę";
				t['BIC'] = "Pokaż rozszerzone ikony";
				t['SAVE'] = "Zapisz";
				t['AT2'] = "Posiłki";
				t['AT3'] = "Atak: Normalny";
				t['AT4'] = "Atak: Grabież";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normalny (mały)";
				t['NBSB'] = "Duży obraz (duży)";
				t['NBHAX'] = "Automatycznie ustaw wysokość";
				t['NBHK'] = "Domyślna wysokość";
				t['NPCSAVETIME'] = "Zapisz: ";
				t['TOTALTROOPS'] = "Wszystkie jednostki";
				t['SELECTALLTROOPS'] = "Wybierz wszystkie jednostki";
				t['PARTY'] = "Święto";
				t['CPPERDAY'] = "PK/dzień";
				t['SLOT'] = "Miejsce";
				t['TOTAL'] = "Razem";
				t['SELECTSCOUT'] = "Wybierz zwiadowców";
				t['SELECTFAKE'] = "Wybierz fejka";
				t['ALL'] = "Wszystko";
				t['SH2'] = "Jako kolor pól możesz wpisać:<br>- <b>green</b> or <b>red</b> or  <b>orange</b>, etc.<br>- lub kod koloru w HEX np. <b>#004523</b><br>- zostaw puste dla domyślnych kolorów";
				t['SOREP'] = "Pokaż oryginalny raport (do publikacji)";
				t['WSIMO1'] = "Wewnętrzny (wbudowany w grę)";
				t['WSIMO2'] = "Zewnętrzny (zrobiony przez kirilloid.ru)";
				t['NONEWVER'] = "Masz najnowszą wersję";
				t['BVER'] = "Masz wersję beta";
				t['NVERAV'] = "Nowa wersja skryptu jest możliwa do pobrania";
				t['UPDSCR'] = "Uaktualnić skrypt teraz? ?";
				t['CHECKUPDATE'] = "Sprawdzam aktualizację skryptu.<br>Proszę czekać...";
				t['AVPPV'] = "Średnia populacja wg osady";
				t['AVPPP'] = "Średnia populacja wg gracza";
				t['MAX'] = "Maks.";
				t['TOTTRTR'] = "Suma szkolonych jednostek";
				t['UPDALLV'] = "Uaktualnij wszystkie osady. UŻYWAJ TEGO Z MAKSYMALNĄ ROZWAGĄ. MOŻE DOPROWADZIĆ DO ZABLOKOWANIA KONTA !";
				t['LARGEMAP'] = "Duża mapa";
				t['USETHEMPR'] = "Użyj je  (proporcjonalnie)";
				t['USETHEMEQ'] = "Użyj je (równe)";
				t['GSRVT'] = "Serwer gry";
				t['ACCINFO'] = "Informacje o koncie";
				t['NBO'] = "Notatnik";
				t['MNUL'] = "Menu po lewej stronie";
				t['STAT'] = "Statystyki";
				t['RESF'] = "Pola surowców";
				t['VLC'] = "Centrum osady";
				t['MAPO'] = "Opcje mapy";
				t['COLO'] = "Opcje kolorów";
				t['DBGO'] = "Debug options";
				t['NOW'] = "Teraz";
				t['CLOSE'] = "Zamknij";
				t['USETHEM1H'] = "Użyj je (1 godzinna  produkcja)";
				t['OVERVIEW'] = "Ogólne";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Ataki";
				t['NEWS'] = "Nowości";
				t['ADDCRTPAGE'] = "Dodaj bieżącą";
				t['SCRPURL'] = "Strona TBeyond";
				t['SPACER'] = "Odstęp";
				t['MEREO'] = "Wiadomości i raporty";
				t['ATTABLES'] = "Tabela jednostek";
				t['MTW'] = "Niewykorzystane";
				t['MTX'] = "Przekroczenie";
				t['MTC'] = "Bierząca ładowność";
				t['ALFL'] = "Link do zewnętrznego forum<br>(Zostaw puste dla wewnętrznego forum)";
				t['MTCL'] = "Wyczyść wszystko";
				t['CKSORT'] = "Kliknij aby posortować";
				t['MIN'] = "Min";
				t['SVGL'] = "Zapisz również dla innych osad";
				t['VGL'] = "Lista Osad";
				t['UPDATEPOP'] = "Aktualizuj populację";
				t['EDIT'] = "Edytuj";
				t['NPCO'] = "Opcje handlarza NPC";
				t['NEWVILLAGEAV'] = "Data/Czas";
				t['TIMEUNTIL'] = "Pozostało czasu";
				t['CENTERMAP'] = "Centruj mapę na tej osadzie";
				t['SENDTROOPS'] = "Wyślij jednostki";
				t['UPGTB'] = "Tabelka rozbudowy Pola surowców/budynków";
				t['RBTT'] = "Tabela surowców";
				t['USE'] = "Użyj";
				t['RESIDUE'] = "Pozostałe surowce (jeśli wybudujesz)";
				t['RESOURCES'] = "Surowce";
				t['SH1'] = "Otwórz swój profil w celu automatycznego rozpoznania stolicy<br>Wybuduj koszary w celu rozpoznania nacji i przejdź do centrum osady";
				t['RESEND'] = "Wysłać ponownie?";
				t['WSI'] = "Symulator bitwy wbudowany w grę";
				t['TTT'] = "Ogólne podpowiedzi n.t. jednostek/odległości";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Lista Osad";
				t['112'] = "Pokaż odległości i czasy dojścia jednostek";
				t['114'] = "PK/dzień";
				break;
			case 'pt':
				t['1'] = "Travian v2.x server";
				t['2'] = "Remover ad banners";
				t['3'] = "Forçar cálculo da capacidade Legionário & Falange T3.1 <br>(para servers mistos T3.1 & T3.5)";
				t['4'] = "Mercado";
				t['5'] = "Ponto de Reunião Militar/Quartel/Oficina/Cavalariça";
				t['6'] = "Casa do Povo/Mansão do Herói/Fábrica de Armaduras/Ferreiro";
				t['7'] = "Palácio/Residência/Academia/Tesouraria";
				t['8'] = "Aliança";
				t['9'] = "Mostrar links adicionais no Menu à Esquerda<br>(Traviantoolbox, World Analyser, Travilog, Mapa, etc.)";
				t['10'] = "Link para Simulador de Combates<br>(Menu Esquerdo)";
				t['11'] = "Link para o site indicado para postar relatórios";
				t['12'] = "Mostrar links 'dorf1.php' e 'dorf2.php'";
				t['13'] = "Mostrar icon \"Centralizar Mapa nesta Aldeia\"";
				t['15'] = "Mostrar a produção por hora de madeira, de barro e de ferro na Lista de Aldeias";
				t['16'] = "Mostrar Produção de Cereais na Lista de Aldeias";
				t['17'] = "Mostrar População na Lista de Aldeias";
				t['18'] = "Mostrar adicional (2 colunas) na Lista de Aldeias como janela flutuante";
				t['19'] = "Mostrar informação sobre Edifícios a Evoluir e Movimentos de Tropas na Lista de Aldeias";
				t['20'] = "Mostrar Favoritos";
				t['21'] = "Mostrar 'Favoritos' como janela flutuante";
				t['22'] = "Mostrar Bloco de Notas";
				t['23'] = "Mostrar 'Bloco de Notas' como janela flutuante";
				t['24'] = "Tamanho do Bloco de Notas";
				t['25'] = "Altura do Bloco de Notas";
				t['26'] = "Mostrar Assistente de Cálculos/Links do NPC";
				t['27'] = "World Analyser";
				t['28'] = "Mostrar links para Analisador de Estatísticas";
				t['29'] = "Analisador de Mapa";
				t['30'] = "Mostrar links para Mapa para Jogadores";
				t['31'] = "Mostrar links para Mapa para Alianças";
				t['32'] = "Mostrar 'Barra de Pesquisas (Estatísticas)'";
				t['33'] = "Mostrar 'Barra de Pesquisas (Estatísticas)' como janela flutuante";
				t['34'] = "Mostrar informação PsC/dia nas tabelas de evolução";
				t['35'] = "Mostrar Consumo de Cereais na Tabela de Evolução de Edifícios";
				t['36'] = "Mostrar o cálculo 'Até então/Excedente' nas Tabelas de Evolução/Treino";
				t['37'] = "Mostrar Tabela de Evolução de Campos de Recursos";
				t['38'] = "Mostrar Cores dos Níveis de Recursos";
				t['39'] = "Mostrar 'Barra de Recursos'";
				t['40'] = "Mostrar 'Barra de Recursos' como janela flutuante";
				t['41'] = "Mostrar Tabela de Evolução de Edifícios";
				t['42'] = "Ordenar Edifícios por nome na Tabela de Evolução de Edifícios";
				t['43'] = "Mostrar Números no centro";
				t['44'] = "Mostrar Cores dos Níveis dos Edifícios";
				t['45'] = "Mostrar os níveis a piscar quando os Edifícios estão a evoluir";
				t['46'] = "Mostrar informação adicional para cada chegada de mercadores";
				t['47'] = "Mostrar o último transporte de Mercado";
				t['48'] = "N.º de Páginas de Ofertas para Pré-Carregar enquanto 'Mercado => Comprar'<br>(Defeito = 1)";
				t['49'] = "Acção por Defeito no Ponto de Reunião Militar";
				t['50'] = "N.º de Espiões para a Função \"Seleccionar Espiões\"";
				t['51'] = "Mostrar o último ataque";
				t['52'] = "Mostrar/usar as coordenadas do último ataque";
				t['53'] = "Mostrar Informação de Tropas em Tooltips";
				t['54'] = "Mostrar Distâncias e Tempos entre as Aldeias";
				t['55'] = "Auto-preencher com as Tropas disponíveis para o Simulador de Combates interno";
				t['56'] = "Mostrar Informação do Tipo de Vale/Oásis<br>quando o Rato passar por cima";
				t['57'] = "Mostrar Distâncias e Tempos";
				t['58'] = "Mostrar Tabela de Jogadores/Aldeias/Oásis ocupados";
				t['59'] = "N.º Páginas de Relatórios/Mensagens para Pré-Carregar<br>(Defeito = 1)";
				t['60'] = "Mostrar links para abrir as Mensagens e Relatórios numa janela pop-up";
				t['61'] = "Mostrar \"Excluir tudo\" na Tabela da página Relatórios";
				t['62'] = "Mostrar icon \"Enviar IGM\", também para mim";
				t['63'] = "Mostrar Relatório de Batalhas TB3 desenvolvido";
				t['64'] = "Mostrar detalhes no Relatório Estatísticas";
				t['65'] = "Cor de Elevação de Nível Disponível<br>(Defeito = Vazio)";
				t['66'] = "Cor do Nível Máximo<br>(Defeito = Vazio)";
				t['67'] = "Cor de Elevação de Nível Impossível<br>(Defeito = Vazio)";
				t['68'] = "Cor de Elevação de Nível via NPC<br>(Defeito = Vazio)";
				t['69'] = "Console Log Level<br>APENAS PARA PROGRAMADORES OU DEBBUGING<br>(Defeito = 1)";
				t['82.L'] = "Bloquear Favoritos (Mostrar icons: Esconder, Apagar, Mover Acima, Mover Abaixo)";
				t['82.U'] = "Desbloquear Favoritos (Mostrar icons: Apagar, Mover Acima, Mover Abaixo)";
				t['85'] = "Mostrar icons 'Enviar Tropas/Enviar Recursos'";
				t['87'] = "Lembrar a última opção 1x/2x/3x de envio de Mercado (se disponível)";
				t['U.2'] = "Tribo";
				t['U.3'] = "Nome da tua Capital<br><b>Acede ao teu Perfil para actualizar</b>";
				t['U.6'] = "Coordenadas da tua Capital<br><b>Acede ao teu Perfil para actualizar</b>";
				t['SIM'] = "Simulador de Combates";
				t['QSURE'] = "Tens a Certeza?";
				t['LOSS'] = "Perdas";
				t['PROFIT'] = "Lucro";
				t['EXTAV'] = "Podes subir de nível";
				t['PLAYER'] = "Jogador";
				t['VILLAGE'] = "Aldeia";
				t['POPULATION'] = "População";
				t['COORDS'] = "Coordenadas";
				t['MAPTBACTS'] = "Acções";
				t['SAVED'] = "Guardado";
				t['YOUNEED'] = "Precisa de";
				t['TODAY'] = "Hoje";
				t['TOMORROW'] = "Amanhã";
				t['DAYAFTERTOM'] = "Depois de Amanhã";
				t['BN_GID12'] = "Ferreiro";
				t['BN_GID13'] = "Fábrica de Armaduras";
				t['BN_GID16'] = "Ponto de Reunião Militar";
				t['BN_GID17'] = "Mercado";
				t['BN_GID19'] = "Quartel";
				t['BN_GID20'] = "Cavalariça";
				t['BN_GID21'] = "Oficina";
				t['BN_GID22'] = "Academia";
				t['BN_GID24'] = "Casa do Povo";
				t['BN_GID25'] = "Residência";
				t['BN_GID26'] = "Palácio";
				t['BN_GID27'] = "Tesouraria";
				t['BN_GID37'] = "Mansão do Herói";
				t['SENDRES'] = "Enviar Recursos";
				t['BUY'] = "Comprar";
				t['SELL'] = "Vender";
				t['SENDIGM'] = "Enviar IGM";
				t['LISTO'] = "Disponível";
				t['ON'] = "em";
				t['AT'] = "às";
				t['EFICIENCIA'] = "Eficiência";
				t['NEVER'] = "Nunca";
				t['ALDEAS'] = "Aldeia(s)";
				t['TIEMPO'] = "Tempo";
				t['OFREZCO'] = "Ofereço";
				t['BUSCO'] = "Procuro";
				t['TIPO'] = "Tipo";
				t['DISPONIBLE'] = "Apenas Disponíveis";
				t['CUALQUIERA'] = "Qualquer";
				t['YES'] = "Sim";
				t['NO'] = "Não";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Favoritos";
				t['ANYADIR'] = "Adicionar";
				t['UBU'] = "URL de Novo Marcador";
				t['UBT'] = "Novo Marcador de Texto";
				t['DEL'] = "Apagar";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Tempo Máximo";
				t['ARCHIVE'] = "Arquivo";
				t['SUMMARY'] = "Resumo";
				t['TROPAS'] = "Tropas";
				t['CHKSCRV'] = "Actualizar TBeyond";
				t['ACTUALIZAR'] = "Actualizar Informação da Aldeia";
				t['VENTAS'] = "Ofertas Guardadas";
				t['MAPSCAN'] = "Procurar no Mapa";
				t['BIC'] = "Mostrar Icons Avançados";
				t['SAVE'] = "Guardar";
				t['AT2'] = "Reforços";
				t['AT3'] = "Ataque: Normal";
				t['AT4'] = "Ataque: Assalto";
				t['NBSA'] = "Automático";
				t['NBSN'] = "Normal (pequeno)";
				t['NBSB'] = "Ecrã Grande (largo)";
				t['NBHAX'] = "Expandir Altura automaticamente";
				t['NBHK'] = "Altura por defeito";
				t['NPCSAVETIME'] = "Guardar: ";
				t['TOTALTROOPS'] = "Total de Tropas da Aldeia";
				t['SELECTALLTROOPS'] = "Seleccionar Todas as Tropas";
				t['PARTY'] = "Celebrações";
				t['CPPERDAY'] = "PsC/Dia";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Seleccionar Espião";
				t['SELECTFAKE'] = "Seleccionar Fake";
				t['ALL'] = "Todas";
				t['SH2'] = "Nas Cores de Campos pode utilizar:<br>- green or red or orange, etc.<br>- Código de Cor HEX#004523<br>- deixar Vazio para cor por defeito";
				t['SOREP'] = "Mostrar Relatório Original (para postar)";
				t['WSIMO1'] = "Interno (fornecido pelo Jogo)";
				t['WSIMO2'] = "Externo (fornecido por kirilloid.ru)";
				t['NONEWVER'] = "Tens a última Versão disponível";
				t['BVER'] = "Talvez tenhas uma versão Beta";
				t['NVERAV'] = "Uma Nova Versão do Script Está Disponível";
				t['UPDSCR'] = "Actualizar Script Agora?";
				t['CHECKUPDATE'] = "A procurar actualização para o Script.<br>Por Favor Esperar...";
				t['AVPPV'] = "População Média por Aldeia";
				t['AVPPP'] = "População Média por Jogador";
				t['MAX'] = "Máx";
				t['TOTTRTR'] = "Total de Tropas em Treino";
				t['UPDALLV'] = "Actualizar todas as Aldeias. MUITA ATENÇÃO: UTILIZAR COM A MÁXIMA PRECAUÇÃO. PODE LEVAR AO BAN DA CONTA!";
				t['LARGEMAP'] = "Mapa Grande";
				t['USETHEMPR'] = "Usar (Proporcional)";
				t['USETHEMEQ'] = "Usar (Igual)";
				t['GSRVT'] = "Servidor do Jogo";
				t['ACCINFO'] = "Informação da Conta";
				t['NBO'] = "Bloco de Notas";
				t['MNUL'] = "Menu Esquerdo";
				t['STAT'] = "Estatísticas";
				t['RESF'] = "Campos de Recursos";
				t['VLC'] = "Centro da Aldeia";
				t['MAPO'] = "Opções do Mapa";
				t['COLO'] = "Opções de Cores";
				t['DBGO'] = "Opções de Debug";
				t['NOW'] = "Agora";
				t['CLOSE'] = "Fechar";
				t['USETHEM1H'] = "Usar (1 Hora de Produção)";
				t['OVERVIEW'] = "Vista Geral";
				t['FORUM'] = "Fórum";
				t['ATTACKS'] = "Ataques";
				t['NEWS'] = "Notícias";
				t['ADDCRTPAGE'] = "Adicionar Página Actual";
				t['SCRPURL'] = "Página TBeyond";
				t['SPACER'] = "Spacer";
				t['MEREO'] = "Mensagens e Relatórios";
				t['ATTABLES'] = "Tabelas de Tropas";
				t['MTW'] = "Carga desperdiçada";
				t['MTX'] = "Carga em excesso";
				t['MTC'] = "Carga Actual";
				t['ALFL'] = "Link para Fórum Externo<br>(Deixar vazio para Fórum Interno)";
				t['MTCL'] = "Limpar Tudo";
				t['CKSORT'] = "Clique para Ordenar";
				t['MIN'] = "Min";
				t['SVGL'] = "Partilhar Entre Aldeias";
				t['VGL'] = "Lista de Aldeias";
				t['UPDATEPOP'] = "Actualizar População";
				t['EDIT'] = "Editar";
				t['NPCO'] = "Assistente de Opções do NPC";
				t['NEWVILLAGEAV'] = "Data/Hora";
				t['TIMEUNTIL'] = "Tempo de Espera";
				t['CENTERMAP'] = "Centralizar Mapa nesta Aldeia";
				t['SENDTROOPS'] = "Enviar Tropas";
				t['UPGTB'] = "Tabelas de Evolução de Campos de Recursos/Edifícios";
				t['RBTT'] = "Barra de Recursos";
				t['USE'] = "Usar";
				t['RESIDUE'] = "O Excedente se o construíres ";
				t['RESOURCES'] = "Recursos";
				t['SH1'] = "Abrir o Perfil para detectar automaticamente as coordenadas da Capital<br>Construir o Quartel para detectar a Tribo automaticamente e então abrir o Centro da Aldeia";
				t['RESEND'] = "Enviar outra vez ?";
				t['WSI'] = "Simulador de Combates fornecido pelo jogo";
				t['TTT'] = "Tooltips geral para Tropas/Distância";
				t['CROPFINDER'] = "Crop Finder";
				t['VGL2'] = "Lista de Aldeias";
				t['112'] = "Mostrar Distâncias e Tempos";
				t['114'] = "PsC/Dia";
				break;
			case 'ro':
				t['1'] = "Server Travian v2.x";
				t['2'] = "Elimină banere reclame";
				t['3'] = "Utilizează capacitatea de transport din T3.1 (legionari & scutieri)<br>(servere mixte T3.1 & T3.5)";
				t['4'] = "Târg";
				t['5'] = "Adunare/Cazarmă/Atelier/Grajd";
				t['6'] = "Casa de cultură/Reşedinţa eroului/Armurărie/Fierărie";
				t['7'] = "Palat/Vilă/Academie/Trezorerie";
				t['8'] = "Alianţă";
				t['9'] = "Afişează link-uri adiţionale în meniul din stânga<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Link către simulator luptă<br>";
				t['11'] = "Link către site-ul pentru postat rapoarte";
				t['12'] = "Afişează icoanele pentru 'dorf1.php' şi 'dorf2.php'";
				t['13'] = "Afişează icon-ul \"Centrează harta pe acest sat\"";
				t['15'] = "Afişează producţia de lemn, lut, fier pe oră în lista satelor";
				t['16'] = "Afişează producţia efectivă de hrană în lista satelor";
				t['17'] = "Afişează populaţia în lista satelor";
				t['18'] = "Afişează o listă adiţională a satelor (2 coloane)<br> ca fereastră separată (floating)";
				t['19'] = "Afişează informaţii despre clădirile în extindere şi mişcarile de trupe în lista satelor";
				t['20'] = "Afişează link-uri";
				t['21'] = "Afişează 'Link-uri' ca fereastră separată (floating)";
				t['22'] = "Afişează bloc-notes";
				t['23'] = "Afişează 'Bloc-notes' ca fereastră separată (floating)";
				t['24'] = "Lăţime bloc-notes";
				t['25'] = "Înălţime bloc-notes";
				t['26'] = "Afişează calcule/link-uri NPC Assistant";
				t['27'] = "Utilizează World Analyser";
				t['28'] = "Afişează link-uri către World Anlyser";
				t['29'] = "Utilizează \"Map Analyser\"";
				t['30'] = "Afişează link-uri către hartă - jucători";
				t['31'] = "Afişează link-uri către hartă - alianţe";
				t['32'] = "Afişează 'Bară căutare'";
				t['33'] = "Afişează 'Bară căutare' ca fereastră separată (floating)";
				t['34'] = "Afişează PC/zi în tabelele de upgrade";
				t['35'] = "Afişează consumul de hrană în tabelele de upgrade";
				t['36'] = "Afişează calcule 'Resurse la/Rest' în tabelele de <br>upgrade/instruire trupe";
				t['37'] = "Afişează tabel upgrade câmpuri de resurse";
				t['38'] = "Afişează culori nivel câmpuri resurse";
				t['39'] = "Afişează tabela 'Bară resurse'";
				t['40'] = "Afişează 'Bară resurse' ca fereastră separată (floating)";
				t['41'] = "Afişează tabel upgrade clădiri";
				t['42'] = "Sortează după nume clădirile în tabelul upgrade clădiri";
				t['43'] = "Afişează nivel clădiri";
				t['44'] = "Afişează culori nivel clădiri";
				t['45'] = "Nivelul clădirilor aflate în construcţie clipeşte";
				t['46'] = "Afişează informaţii suplimentare pentru fiecare negustor care soseşte";
				t['48'] = "Numărul paginilor de oferte pre-încărcate pe pagina 'Târg => Cumpără'<br>(Standard = 1)";
				t['49'] = "Acţiune standard adunare";
				t['50'] = "Număr de spioni pentru funcţia \"Selectează spioni\"";
				t['53'] = "Afişează informaţii despre trupe în tooltips";
				t['54'] = "Afişează distanţe/timpi către sate în tooltips";
				t['56'] = "Afişează tip celula/info vale părăsită (mousing over)";
				t['57'] = "Afişează distanţe şi timpi de deplasare";
				t['58'] = "Afişează tabel jucători/sate/oaze ocupate";
				t['59'] = "Numărul paginilor de mesaje/rapoarte pre-încărcate<br>(Standard = 1)";
				t['60'] = "Afişează icoane pentru a deschide mesajele/rapoartele într-un pop-up";
				t['61'] = "Afişează tabela \"Sterge toate\" pe pagina de rapoarte";
				t['62'] = "Afişează icon-ul \"Trimite IGM\" şi pentru mine";
				t['63'] = "Afişează rapoarte extinse TB3";
				t['64'] = "Afişează detalii in statistica raport";
				t['65'] = "Culoare upgrade posibil (Nimic = standard)";
				t['66'] = "Culoare nivel maxim (Nimic = standard)";
				t['67'] = "Culoare upgrade imposibil (Nimic = standard)";
				t['68'] = "Culoare upgrade posibil via NPC (Nimic = standard)";
				t['69'] = "Log level consolă (DOAR PENTRU PROGRAMATORI)<br>(Standard = 0)";
				t['82.L'] = "Ascunde icoanele \"Sterge\", \"în sus\", \"în jos\"";
				t['82.U'] = "Afişează icoanele \"Sterge\", \"în sus\", \"în jos\"";
				t['U.2'] = "Rasă";
				t['U.3'] = "Numele capitalei<br><b>Deschide Profilul pentru actualizare automată</b>";
				t['U.6'] = "Coordonatele capitalei<br><b>Deschide Profilul pentru actualizare automată</b>";
				t['SIM'] = "Simulator luptă";
				t['QSURE'] = "Eşti sigur?";
				t['LOSS'] = "Pierderi";
				t['PROFIT'] = "Profit";
				t['EXTAV'] = "Upgrade posibil acum";
				t['PLAYER'] = "Jucător";
				t['VILLAGE'] = "Sat";
				t['POPULATION'] = "Populaţie";
				t['COORDS'] = "Coordonate";
				t['MAPTBACTS'] = "Acţiuni";
				t['SAVED'] = "Salvat";
				t['YOUNEED'] = "Ai nevoie de";
				t['TODAY'] = "azi";
				t['TOMORROW'] = "mâine";
				t['DAYAFTERTOM'] = "poimâine";
				t['BN_GID12'] = "Fierărie";
				t['BN_GID13'] = "Armurărie";
				t['BN_GID16'] = "Adunare";
				t['BN_GID17'] = "Târg";
				t['BN_GID19'] = "Cazarmă";
				t['BN_GID20'] = "Grajd";
				t['BN_GID21'] = "Atelier";
				t['BN_GID22'] = "Academie";
				t['BN_GID24'] = "Casa de cultură";
				t['BN_GID25'] = "Vilă";
				t['BN_GID26'] = "Palat";
				t['BN_GID27'] = "Trezorerie";
				t['BN_GID37'] = "Reşedinţa eroului";
				t['SENDRES'] = "Trimite resurse";
				t['BUY'] = "Cumpară";
				t['SELL'] = "Vinde";
				t['SENDIGM'] = "Trimite mesaj";
				t['LISTO'] = "Upgrade posibil";
				t['ON'] = "în";
				t['AT'] = "la";
				t['EFICIENCIA'] = "Eficienţă";
				t['NEVER'] = "Niciodată";
				t['ALDEAS'] = "Sat(e)";
				t['TIEMPO'] = "Timp";
				t['OFREZCO'] = "Oferă";
				t['BUSCO'] = "Caută";
				t['TIPO'] = "Tip";
				t['DISPONIBLE'] = "Doar cele disponibile";
				t['CUALQUIERA'] = "Oricare";
				t['YES'] = "Da";
				t['NO'] = "Nu";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Link-uri";
				t['ANYADIR'] = "Adaugă";
				t['UBU'] = "URL";
				t['UBT'] = "Text";
				t['DEL'] = "Şterge";
				t['MAPA'] = "Hartă";
				t['MAXTIME'] = "Timp maxim";
				t['ARCHIVE'] = "Arhivă";
				t['SUMMARY'] = "Rezumat";
				t['TROPAS'] = "Trupe";
				t['CHKSCRV'] = "Update TBeyond";
				t['ACTUALIZAR'] = "Actualizează informaţie sat";
				t['VENTAS'] = "Oferte salvate";
				t['MAPSCAN'] = "Scanează harta";
				t['BIC'] = "Afişează icoane suplimentare";
				t['SAVE'] = "Salvează";
				t['AT2'] = "Întăriri";
				t['AT3'] = "Atac: Normal";
				t['AT4'] = "Atac: Raid";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normal (ingust)";
				t['NBSB'] = "Ecran lat (lat)";
				t['NBHAX'] = "Măreşte inălţimea automat";
				t['NBHK'] = "Înălţime normală";
				t['NPCSAVETIME'] = "Timp economisit";
				t['TOTALTROOPS'] = "Total trupe sat";
				t['SELECTALLTROOPS'] = "Selectează toate trupele";
				t['PARTY'] = "Festivităţi";
				t['CPPERDAY'] = "PC/zi";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Total";
				t['SELECTSCOUT'] = "Selectează spioni";
				t['SELECTFAKE'] = "Selectează trupe fake";
				t['ALL'] = "Tot";
				t['SH2'] = "În câmpurile de culori puteţi introduce:<br>- <b>green</b> sau <b>red</b> sau <b>orange</b>, etc.<br>- codul HEX al culorii, ex. <b>#004523</b><br>- loc liber = culoare standard";
				t['SOREP'] = "Afişează raport original (pentru forumuri)";
				t['WSIMO1'] = "Intern (inclus in joc)";
				t['WSIMO2'] = "Extern (pus la dispoziţie de către kirilloid.ru)";
				t['NONEWVER'] = "Ultima versiune disponibilă este instalată";
				t['BVER'] = "Se poate să aveţi o versiune beta instalată";
				t['NVERAV'] = "O versiune nouă a scriptului este disponibilă";
				t['UPDSCR'] = "Doriţi să actualizaţi acum ?";
				t['CHECKUPDATE'] = "Verific existenţa unei versiuni noi a scriptului...";
				t['AVPPV'] = "Populaţie medie/sat";
				t['AVPPP'] = "Populaţie medie/jucător";
				t['TOTTRTR'] = "Total trupe antrenate";
				t['TB3SL'] = "Opţiuni $1";
				t['UPDALLV'] = "Actualizează toate satele.  Utilizează cu maximă atenţie.  Urmarea ar putea fi un cont banat !";
				t['LARGEMAP'] = "Harta mare";
				t['USETHEMPR'] = "Use them (proportional)";
				t['USETHEMEQ'] = "Use them (egal)";
				t['ACCINFO'] = "Informaţii cont";
				t['NBO'] = "Bloc-notes";
				t['MNUL'] = "Meniu stânga";
				t['STAT'] = "Statistică";
				t['RESF'] = "Câmpuri resurse";
				t['VLC'] = "Centrul satului";
				t['MAPO'] = "Opţiuni hartă";
				t['COLO'] = "Opţiuni culori";
				t['DBGO'] = "Opţiuni Debug";
				t['NOW'] = "Acum";
				t['CLOSE'] = "Inchide";
				t['USETHEM1H'] = "Use them (producţia/ora)";
				t['OVERVIEW'] = "Perspectivă";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Atacuri";
				t['NEWS'] = "Stiri";
				t['ADDCRTPAGE'] = "Pagina curentă";
				t['SCRPURL'] = "Pagina TBeyond";
				t['SPACER'] = "Delimitator";
				t['MEREO'] = "Mesaje & Rapoarte";
				t['ATTABLES'] = "Tabele trupe";
				t['MTW'] = "Risipă";
				t['MTX'] = "Excedent";
				t['MTC'] = "Transport actual";
				t['ALFL'] = "Link către forum extern (Forum intern = loc liber)";
				t['MTCL'] = "Sterge tot";
				t['CKSORT'] = "Click pentru sortare";
				t['SVGL'] = "Valabilă în toate satele";
				t['VGL'] = "Lista satelor";
				t['UPDATEPOP'] = "Actualizează populaţia satelor";
				t['EDIT'] = "Modifică";
				t['NPCO'] = "Opţiuni NPC Assistant";
				t['NEWVILLAGEAV'] = "Data/Ora";
				t['TIMEUNTIL'] = "Timp de aşteptare";
				t['CENTERMAP'] = "Centrează harta pe acest sat";
				t['SENDTROOPS'] = "Trimite trupe";
				t['UPGTB'] = "Tabele Upgrade campuri de resurse/clădiri";
				t['RBTT'] = "Bară resurse";
				t['USE'] = "Use";
				t['RESIDUE'] = "Rest în cazul construcţiei ";
				t['RESOURCES'] = "Resurse";
				t['SH1'] = "Deschide Profilul pentru recunoaşterea automată a capitalei/coordonatelor<br>Construieşte cazarma şi deschide centrul satului pentru recunoaşterea automată a rasei";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Lista satelor";
				t['112'] = "Afişează distanţe şi timpi de deplasare";
				t['114'] = "PC/zi";
				break;
			case 'rs':
				t['1'] = "Травиан 2.x сервер";
				t['4'] = "Пијаца";
				t['5'] = "Место окупљања/Касарна/радионица/Штала";
				t['6'] = "Општина/Дворац хероја/Ковачница оклопа/Ковачница оружја";
				t['7'] = "Палата/Резиденција/Академија/Ризница";
				t['8'] = "Савез";
				t['9'] = "Прикажи додатне линкове у менију лево<br>(Traviantoolbox, World Analyser, Travilog, Map, итд.)";
				t['10'] = "Користи следећи симулатор борбе:<br>(у менију лево)";
				t['12'] = "Прикажи линкове до 'dorf1.php' и 'dorf2.php'";
				t['13'] = "Прикажи \"Центритрај мапу на овом селу\" икону";
				t['20'] = "Прикажи линкове";
				t['22'] = "Прикажи бележницу";
				t['24'] = "Величина бележнице";
				t['25'] = "Висина бележнице";
				t['26'] = "Прикажи NPC помоћника";
				t['27'] = "Травиан анализатор";
				t['28'] = "Прикажи анализатор као линк";
				t['37'] = "Прикажи табелу унапређења ресурса";
				t['38'] = "Прикажи нивое ресурса у боји";
				t['41'] = "Прикажи табелу унапређења грађевина";
				t['43'] = "Прикажи бројеве у центру села";
				t['44'] = "Прикажи нивое грађевина у боји";
				t['48'] = "Број страна са понудама ѕа приказ<br>на пијаци => страна ѕа куповину<br>(Основно = 1)";
				t['49'] = "Основна акција на месту окупљања";
				t['50'] = "Број извиђача за<br>\"Извиђање\" функцију";
				t['53'] = "Прикажи информације о јединици кад миш пређе преко ње";
				t['54'] = "Прикажи даљине и времена до села кад миш пређе преко";
				t['56'] = "Прикажи тип поља/информацију о оази<br>док се миш креће преко мапе";
				t['57'] = "Прикази даљине и времена";
				t['58'] = "Прикажи табелу играча/села/освојених долина";
				t['59'] = "Број страна порука/извештаја за приказ<br>(Основно = 1)";
				t['60'] = "Прикажи линк за отварање порука у посебном прозору";
				t['61'] = "Прикажи \"Обриши све\" табелу у извештајима";
				t['62'] = "Прикажи \"Пошаљи поруку\" икону и за мој налог";
				t['64'] = "Прикажи статистику у извештајима";
				t['65'] = "Боја за унапређење могуће<br>(Основна = празно)";
				t['66'] = "Боја за максимални ниво<br>(Основна = празно)";
				t['67'] = "Боја за унапређење није могуће<br>(Основна = празно)";
				t['68'] = "Боја за унапређење помоћу НПЦ<br>(Основна = празно)";
				t['69'] = "Console Log Level<br>САМО ЗА ПРОГРАМЕРЕ или ТРАЖЕЊЕ ГРЕШАКА<br>(Основно = 0)";
				t['82.L'] = "Закључај линкове (Уклони, обриши, горе, доле иконе)";
				t['82.U'] = "Откључај линкове (Уклони, обриши, горе, доле иконе)";
				t['U.2'] = "Племе";
				t['U.3'] = "Назив главног града<br>Идите у профил";
				t['U.6'] = "Координате главног града<br>Идите у профил";
				t['SIM'] = "Симулатор борбе";
				t['QSURE'] = "Да ли сте сигурни?";
				t['LOSS'] = "Губитак";
				t['PROFIT'] = "Добит";
				t['EXTAV'] = "Надоградња могућа";
				t['PLAYER'] = "Играч";
				t['VILLAGE'] = "Село";
				t['POPULATION'] = "Популација";
				t['COORDS'] = "Координате";
				t['MAPTBACTS'] = "Акције";
				t['SAVED'] = "Сачувано";
				t['YOUNEED'] = "Потребно је";
				t['TODAY'] = "данас";
				t['TOMORROW'] = "сутра";
				t['DAYAFTERTOM'] = "прекосутра";
				t['BN_GID12'] = "Ковачница оружја";
				t['BN_GID13'] = "Ковачница оклопа";
				t['BN_GID16'] = "Место окупљања";
				t['BN_GID17'] = "Пијаца";
				t['BN_GID19'] = "Касарна";
				t['BN_GID20'] = "Штала";
				t['BN_GID21'] = "Радионица";
				t['BN_GID22'] = "Академија";
				t['BN_GID24'] = "Општина";
				t['BN_GID25'] = "Резиденција";
				t['BN_GID26'] = "Палата";
				t['BN_GID27'] = "Ризница";
				t['BN_GID37'] = "Дворац хероја";
				t['SENDRES'] = "Пошаљи ресурсе";
				t['BUY'] = "Купи";
				t['SELL'] = "Продај";
				t['SENDIGM'] = "Пошаљи поруку";
				t['LISTO'] = "Доступно";
				t['ON'] = "";
				t['AT'] = "у";
				t['EFICIENCIA'] = "Ефикасност";
				t['NEVER'] = "Никада";
				t['ALDEAS'] = "Село(а)";
				t['TIEMPO'] = "Време";
				t['OFREZCO'] = "Нуди";
				t['BUSCO'] = "Тражи";
				t['TIPO'] = "Однос";
				t['DISPONIBLE'] = "Само доступно";
				t['CUALQUIERA'] = "Све";
				t['YES'] = "Да";
				t['NO'] = "Не";
				t['LOGIN'] = "Пријави се";
				t['MARCADORES'] = "Линкови";
				t['ANYADIR'] = "Додај";
				t['UBU'] = "Адреса новог линка";
				t['UBT'] = "Назив новог линка";
				t['DEL'] = "Обриши";
				t['MAPA'] = "Мапа";
				t['MAXTIME'] = "Максимално време";
				t['ARCHIVE'] = "Архива";
				t['SUMMARY'] = "Збир";
				t['TROPAS'] = "Војска";
				t['CHKSCRV'] = "Унапреди TBeyond";
				t['ACTUALIZAR'] = "Освежи информације о селима";
				t['VENTAS'] = "Сачувај понуду";
				t['MAPSCAN'] = "Претражи мапу";
				t['BIC'] = "Прикажи додатне иконе";
				t['SAVE'] = "Сачувај";
				t['AT2'] = "Појачање";
				t['AT3'] = "Напад";
				t['AT4'] = "Пљачка";
				t['NBSA'] = "Аутоматски";
				t['NBSN'] = "Нормална";
				t['NBSB'] = "Велика";
				t['NBHAX'] = "Аутоматски повећај висину";
				t['NBHK'] = "Основна висина";
				t['NPCSAVETIME'] = "Убрзај за: ";
				t['TOTALTROOPS'] = "Сва војска из села";
				t['SELECTALLTROOPS'] = "Сва војска";
				t['PARTY'] = "Забаве";
				t['CPPERDAY'] = "КП/дан";
				t['SLOT'] = "Место за проширење";
				t['TOTAL'] = "Укупно";
				t['SELECTSCOUT'] = "Извиђање";
				t['SELECTFAKE'] = "Лажни напад";
				t['ALL'] = "Све";
				t['SH2'] = "У поље за избор боје можете унети:<br>- green или red или orange, итд.<br>- или HEX колорни код нпр. #004523<br>- оставите празно за основне боје.";
				t['SOREP'] = "Прикажи оригинални извештај (за постовање)";
				t['WSIMO1'] = "Из игре";
				t['WSIMO2'] = "Са сајта kirilloid.ru";
				t['NONEWVER'] = "Имате последњу верзију скрипта!";
				t['BVER'] = "Можда имате бетаверзију скрипта";
				t['NVERAV'] = "Постоји нова верзија скрипта";
				t['UPDSCR'] = "Да ли унапредим скрипту сада?";
				t['CHECKUPDATE'] = "Проверавам да ли постоји нова верзија.<br>Молим сачекајте...";
				t['AVPPV'] = "Просечна популација по селу";
				t['AVPPP'] = "Просечна популација по играчу";
				t['MAX'] = "Максимум";
				t['TOTTRTR'] = "Укупна број јединица на обуци";
				t['TB3SL'] = "$1 подешавање";
				t['UPDALLV'] = "Освежи сва села. КОРИСТИТИ СА ОПРЕЗОМ, МОГУЋЕ ЈЕ БУДЕТЕ БАНОВАНИ!!!";
				t['LARGEMAP'] = "Велика мапа";
				t['USETHEMPR'] = "Пропорционална подела";
				t['USETHEMEQ'] = "Једнака подела";
				t['GSRVT'] = "Сервер";
				t['NBO'] = "Бележница";
				t['MNUL'] = "Мени са леве стране";
				t['STAT'] = "Статистика";
				t['RESF'] = "Ресурсна поља";
				t['VLC'] = "Центар села";
				t['MAPO'] = "Мапа";
				t['COLO'] = "Боје";
				t['DBGO'] = "Тражење грешака";
				t['NOW'] = "Сада";
				t['CLOSE'] = "Затвори";
				t['USETHEM1H'] = "Једночасовна производња";
				t['OVERVIEW'] = "Преглед";
				t['FORUM'] = "Форум";
				t['ATTACKS'] = "Напади";
				t['NEWS'] = "Вести";
				t['ADDCRTPAGE'] = "Додај тренутну страну као линк";
				t['SCRPURL'] = "TBeyond сајт";
				t['SPACER'] = "Размак";
				t['MEREO'] = "Поруке и извештаји";
				t['ATTABLES'] = "Преглед војске";
				t['MTW'] = "Неискоришћено";
				t['MTX'] = "Има више";
				t['MTC'] = "Тренутно се шаље";
				t['ALFL'] = "Линк до спољног форума<br>(Оставити празно за форум из игре)";
				t['MTCL'] = "Обриши све";
				t['CKSORT'] = "Кликни за сортирање";
				t['MIN'] = "Минимум";
				t['SVGL'] = "Важи за сва села";
				t['VGL'] = "Списак села";
				t['UPDATEPOP'] = "Освежи популацију";
				t['EDIT'] = "Уреди";
				t['NPCO'] = "NPC помоћник";
				t['NEWVILLAGEAV'] = "Датум/Време";
				t['TIMEUNTIL'] = "Време чекања";
				t['CENTERMAP'] = "Центритрај мапу на овом селу";
				t['SENDTROOPS'] = "Пошаљи војску";
				t['USE'] = "Користи";
				t['CROPFINDER'] = "Нађи житнице";
				t['VGL2'] = "Списак села";
				t['112'] = "Прикази даљине и времена";
				t['114'] = "КП/дан";
				break;
			case 'ru':
				t['1'] = "Travian сервер версии v2.x";
				t['2'] = "Убрать рекламу";
				t['3'] = "Заменить расчеты грузоподьемности Легионера и Фаланги T3.1<br>(Для T3.1 и T3.5 серверов)";
				t['4'] = "Рынок";
				t['5'] = "Пункт сбора/Казарма/Мастерская/Конюшня";
				t['6'] = "Ратуша/Таверна/Кузница доспехов/Кузница оружия";
				t['7'] = "Дворец/Резиденция/Академия/Сокровищница";
				t['8'] = "Альянс";
				t['9'] = "Показывать дополнительные ссылки в левом меню<br>(Traviantoolbox, World Analyser, Travilog, Map и т.д.)";
				t['10'] = "Использовать симулятор боя:<br>(левое меню)";
				t['11'] = "Сайт для отправки отчётов";
				t['12'] = "Показывать ссылки на 'dorf1.php' и 'dorf2.php'";
				t['13'] = "Показывать иконку 'Центрировать деревню на карте'";
				t['15'] = "Показывать производство дерева, глины и железа в час";
				t['16'] = "Показывать прибыль зерна";
				t['17'] = "Показывать население";
				t['18'] = "Показывать дополнительный список деревень в плавающем окне";
				t['19'] = "Показывать информацию о зданиях, которые развиваются в данный момент и войска, которые сейчас в походе";
				t['20'] = "Показывать закладки";
				t['21'] = "Показывать закладки в плавающем окне";
				t['22'] = "Показывать блок заметок";
				t['23'] = "Показывать заметки в плавающем окне";
				t['24'] = "Размер поля заметок";
				t['25'] = "Высота поля заметок";
				t['26'] = "Показывать расчёты для NPC помощника / ссылки на NPC помощника";
				t['27'] = "Какой анализатор мира использовать";
				t['28'] = "Показывать ссылки на статистику анализатора";
				t['29'] = "Используемый анализатор карты";
				t['30'] = "Показывать ссылку на карту для игроков";
				t['31'] = "Показывать ссылку на карту для альянсов";
				t['32'] = "Показывать 'Поиск'";
				t['33'] = "Показывать 'Поиск' в плавающем окне";
				t['34'] = "Показывать Единиц Культуры(ЕК)/день в таблицах развития";
				t['35'] = "Показывать потребление зерна в таблицах развития";
				t['36'] = "Показывать расчёты 'К тому времени/Остатки' в таблице развития построек";
				t['37'] = "Показыть таблицу развития ресурсных полей";
				t['38'] = "Показывать уровни ресурсных полей цветами";
				t['39'] = "Показывать таблицу ресурсов";
				t['40'] = "Показывать таблицу ресурсов в плавающем окне";
				t['41'] = "Показывать таблицу развития зданий";
				t['42'] = "Упорядочить здания по названию в таблицах развития";
				t['43'] = "Показывать уровни зданий в центре";
				t['44'] = "Показывать уровни зданий цветами";
				t['45'] = "Уровень строящегося здания будет мигать";
				t['46'] = "Показывать дополнительную информацию для каждого прибывающего торговца";
				t['47'] = "Показывать последний маршрут";
				t['48'] = "Количество страниц предложений отображаемых в разделе 'Рынок => Покупка' (по умолчанию =1)";
				t['49'] = "Действие пункта сбора, по умолчанию:";
				t['50'] = "Количество разведчиков для функции \"Разведать\"";
				t['51'] = "Показывать последнюю атаку";
				t['52'] = "Показывать/использовать координаты для последней атаки";
				t['53'] = "Показывать информацию о войсках в подсказках";
				t['54'] = "Показывать расстояние и время до поселения в подсказках";
				t['55'] = "Автоподстановка имеющихся войск для встроенного симулятора сражений";
				t['56'] = "Показывать тип клетки на карте";
				t['57'] = "Показывать расстояния и время в подсказках";
				t['58'] = "Показать таблицу игроков / деревень / захваченых оазисов";
				t['59'] = "Количество одновременно отображаемых страниц<br>(Стандартно = 1)";
				t['60'] = "Показывать ссылки для открытия в новом окне";
				t['61'] = "Показывать \"Удалить все\" на странице отчётов";
				t['62'] = "Для меня также показывать иконку \"Отправить сообщение\"";
				t['63'] = "Показывать расширенные отчеты боев (TB3)";
				t['64'] = "Показывать подробности в статистике отчетов";
				t['65'] = "Цвет, если развитие возможно<br>(по умолчанию = пусто)";
				t['66'] = "Цвет максимального уровня развития<br>(по умолчанию = пусто)";
				t['67'] = "Цвет, если развитие невозможно из-за нехватки ресурсов<br>(по умолчанию = пусто)";
				t['68'] = "Цвет, когда доступно развитие посредством NPC помощника<br>(по умолчанию = пусто)";
				t['69'] = "Console Log Level<br>ТОЛЬКО ДЛЯ ПРОГРАММИСТОВ И ТЕСТЕРОВ<br>(по умолчанию = 0)";
				t['82.L'] = "Заблокировать закладки (спрятать иконки 'Удалить', 'Переместить вверх', 'Переместить вниз)'";
				t['82.U'] = "Разблокировать закладки (показать иконки 'Удалить', 'Переместить вверх', 'Переместить вниз)'";
				t['85'] = "Показывать иконки 'Отправить войска'/'Отправить ресурсы'";
				t['87'] = "Запоминать последний выбор 1x/2x/3x (если доступно)";
				t['91'] = "Разрешить менять порядок деревень в списке и свойства их отображения";
				t['92.L'] = "Заблокировать список деревень (спрятать иконки 'Переместить вверх', 'Переместить вниз)'";
				t['92.U'] = "Разблокировать список деревень (показать иконки 'Переместить вверх', 'Переместить вниз)'";
				t['U.2'] = "Раса";
				t['U.3'] = "Название вашей Столицы<br>Посетите свой профиль для обновления";
				t['U.6'] = "Координаты вашей Столицы<br>Посетите свой профиль для обновления";
				t['SIM'] = "Симулятор боя";
				t['QSURE'] = "Вы уверены?";
				t['LOSS'] = "Потери";
				t['PROFIT'] = "Прибыль";
				t['EXTAV'] = "Возможно развитие";
				t['PLAYER'] = "Игрок";
				t['VILLAGE'] = "Деревня";
				t['POPULATION'] = "Население";
				t['COORDS'] = "Координаты";
				t['MAPTBACTS'] = "Действия";
				t['SAVED'] = "Сохранено";
				t['YOUNEED'] = "Не хватает";
				t['TODAY'] = "Сегодня";
				t['TOMORROW'] = "Завтра";
				t['DAYAFTERTOM'] = "Послезавтра";
				t['BN_GID12'] = "Кузница оружия";
				t['BN_GID13'] = "Кузница доспехов";
				t['BN_GID16'] = "Пункт сбора";
				t['BN_GID17'] = "Рынок";
				t['BN_GID19'] = "Казарма";
				t['BN_GID20'] = "Конюшня";
				t['BN_GID21'] = "Мастерская";
				t['BN_GID22'] = "Академия";
				t['BN_GID24'] = "Ратуша";
				t['BN_GID25'] = "Резиденция";
				t['BN_GID26'] = "Дворец";
				t['BN_GID27'] = "Сокровищница";
				t['BN_GID37'] = "Таверна";
				t['SENDRES'] = "Послать ресурсы";
				t['BUY'] = "Купить";
				t['SELL'] = "Продать";
				t['SENDIGM'] = "Послать сообщение";
				t['LISTO'] = "Развитие будет возможно";
				t['ON'] = "на";
				t['AT'] = "в";
				t['EFICIENCIA'] = "Эффективность";
				t['NEVER'] = "Никогда";
				t['ALDEAS'] = "Деревни";
				t['TIEMPO'] = "Время";
				t['OFREZCO'] = "Продажа";
				t['BUSCO'] = "Покупка";
				t['TIPO'] = "Соотношение";
				t['DISPONIBLE'] = "Только доступные для покупки";
				t['CUALQUIERA'] = "Все";
				t['YES'] = "Да";
				t['NO'] = "Нет";
				t['LOGIN'] = "Логин";
				t['MARCADORES'] = "Закладки";
				t['ANYADIR'] = "Добавить";
				t['UBU'] = "Добавить адрес (Http://***) в закладки";
				t['UBT'] = "Название закладки";
				t['DEL'] = "Удалить";
				t['MAPA'] = "Карта";
				t['MAXTIME'] = "Макс. время";
				t['ARCHIVE'] = "Архив";
				t['SUMMARY'] = "Суммарно";
				t['TROPAS'] = "Войска";
				t['CHKSCRV'] = "Проверить, не появилась ли новая версия TBeyond";
				t['ACTUALIZAR'] = "Обновить информацию о деревне";
				t['VENTAS'] = "Сохраненные предложения";
				t['MAPSCAN'] = "Сканировать карту";
				t['BIC'] = "Отображение дополнительных иконок";
				t['SAVE'] = "Сохранить";
				t['AT2'] = "Подкрепление";
				t['AT3'] = "Нападение: обычное";
				t['AT4'] = "Нападение: набег";
				t['NBSA'] = "Автоматически";
				t['NBSN'] = "Нормальный (маленький)";
				t['NBSB'] = "Во весь экран (большой)";
				t['NBHAX'] = "Автоподбор высоты";
				t['NBHK'] = "По умолчанию";
				t['NPCSAVETIME'] = "Время: ";
				t['TOTALTROOPS'] = "Собственные войска в деревне";
				t['SELECTALLTROOPS'] = "Выбрать все войска";
				t['PARTY'] = "Праздники";
				t['CPPERDAY'] = "ЕК/день";
				t['SLOT'] = "Слоты";
				t['TOTAL'] = "Всего";
				t['SELECTSCOUT'] = "Выбрать разведку";
				t['SELECTFAKE'] = "Выбрать спам";
				t['ALL'] = "Все";
				t['SH2'] = "В полях ввода цветов можно ввести одно значение:<br>- green (зеленый), red (красный) или orange (оранжевый), и т.д.<br> - HEX-код цвета #004523<br>- оставить пустым для значения по умолчанию";
				t['SOREP'] = "Убрать описание (для отправки)";
				t['WSIMO1'] = "Внутренний (предлагаемый игрой)";
				t['WSIMO2'] = "Внешний (предлагаемый kirilloid.ru)";
				t['NONEWVER'] = "У вас последняя версия";
				t['BVER'] = "Вероятно у Вас установлена бета версия";
				t['NVERAV'] = "Доступна новая версия скрипта";
				t['UPDSCR'] = "Вы хотите обновить скрипт сейчас ?";
				t['CHECKUPDATE'] = "Поиск обновлений скрипта.<br>Пожалуйста, подождите...";
				t['AVPPV'] = "Среднее население среди деревень";
				t['AVPPP'] = "Среднее население среди игроков";
				t['MAX'] = "Максимум";
				t['TOTTRTR'] = "Общее число обучаемых войск";
				t['TB3SL'] = "Настройка $1";
				t['UPDALLV'] = "Обновить все деревни. ИСПОЛЬЗУЙТЕ С КРАЙНЕЙ ОСТОРОЖНОСТЬЮ. ПОТОМУ ЧТО ЭТО МОЖЕТ ПРИВЕСТИ К БАНУ АККАУНТА !";
				t['LARGEMAP'] = "Большая карта";
				t['USETHEMPR'] = "Загрузить ресурсы пропорционально их количеству на складах/амбарах";
				t['USETHEMEQ'] = "Загрузить ресурсы равномерно";
				t['GSRVT'] = "Игровой сервер";
				t['ACCINFO'] = "Информация аккаунта";
				t['NBO'] = "Блок заметок";
				t['MNUL'] = "Меню с левой стороны";
				t['STAT'] = "Статистика";
				t['RESF'] = "Ресурсные поля";
				t['VLC'] = "Центр деревни";
				t['MAPO'] = "Настройки карты";
				t['COLO'] = "Цветовые настройки";
				t['DBGO'] = "Опции отладки скрипта";
				t['NOW'] = "Сейчас";
				t['CLOSE'] = "Закрыть";
				t['USETHEM1H'] = "Загрузить ресурсы пропорционально их часовой прибыли";
				t['OVERVIEW'] = "Обзор";
				t['FORUM'] = "Форум";
				t['ATTACKS'] = "Нападения";
				t['NEWS'] = "Новости";
				t['ADDCRTPAGE'] = "Добавить текущее";
				t['SCRPURL'] = "Страница TBeyond";
				t['SPACER'] = "Разделитель";
				t['MEREO'] = "Сообщения и Отчеты";
				t['ATTABLES'] = "Таблица войск";
				t['MTW'] = "Свободно";
				t['MTX'] = "Перебор";
				t['MTC'] = "Нагружено";
				t['ALFL'] = "Ссылка на внешний форум<br>(Оставить пустым для внутренне-игрового форума)";
				t['MTCL'] = "Очистить все";
				t['CKSORT'] = "Кликните для сортировки";
				t['MIN'] = "Минимум";
				t['SVGL'] = "Общее для всех деревень";
				t['VGL'] = "Список деревень";
				t['UPDATEPOP'] = "Обновить население";
				t['EDIT'] = "Редактировать";
				t['NPCO'] = "Опции NPC помощника";
				t['NEWVILLAGEAV'] = "Дата/Время";
				t['TIMEUNTIL'] = "Осталось времени";
				t['CENTERMAP'] = "Центрировать деревню на карте";
				t['SENDTROOPS'] = "Отправка войск";
				t['UPGTB'] = "Возможности ресурсов/зданий в таблицах развития";
				t['RBTT'] = "Таблица ресурсов";
				t['USE'] = "Использовать";
				t['RESIDUE'] = "Остатки ресурсов, когда построите это";
				t['RESOURCES'] = "Ресурсы";
				t['SH1'] = "Откройте ваш профиль для автоматического определения столицы и ее координат<br>Постройте казарму для автоматического определения расы, а потом откройте центр деревни";
				t['RESEND'] = "Послать";
				t['WSI'] = "Симулятор сражения предлагаемый игрой";
				t['TTT'] = "Подсказки о войсках/расстоянии";
				t['MTR'] = "Коэффициент";
				t['USEMTR'] = "Использовать коэфф.:";
				t['MTRMIN'] = "(не должно быть меньше $1)";
				t['MTRMAX'] = "(не должно быть больше $1)";
				t['FINDREP'] = "Найти последние";
				t['REP1_TT'] = "Победы при атаке, без потерь";
				t['REP2_TT'] = "Победы при атаке, с потерями";
				t['REP3_TT'] = "Проигрыши при атаке";
				t['REP4_TT'] = "Победы при защите, без потерь";
				t['REP5_TT'] = "Победы при защите, с потерями";
				t['REP6_TT'] = "Проигрыши при защите, с потерями";
				t['REP7_TT'] = "Проигрыши при защите, без потерь";
				t['REP8_TT'] = "Прибытие подкрепления";
				t['REP11_TT'] = "Доставка преимущественно древесины";
				t['REP12_TT'] = "Доставка преимущественно глины";
				t['REP13_TT'] = "Доставка преимущественно железа";
				t['REP14_TT'] = "Доставка преимущественно зерна";
				t['REP17_TT'] = "Проигрыши при разведке";
				t['REP21_TT'] = "Приключение";
				t['VLISTUP'] = "Передвинуть деревню выше в списке";
				t['VLISTDOWN'] = "Передвинуть деревню ниже в списке";
				t['VLISTSEP'] = "Вставить/удалить горизонтальный разделитель над текущей деревней";
				t['VLISTEDIT'] = "Настройки отображения деревни";
				t['VLISTOPTIONS'] = "Настройки показа списка деревень";
				t['REPTT'] = "Показать отчёт в отдельном окне";
				t['WMIN'] = "Минимизировать окно";
				t['WMAX'] = "Восстановить размеры окна";
				t['REFRESHP'] = "Обновить страницу";
				t['1H'] = "час";
				t['GENLNK'] = "Улучшения ссылок";
				t['11.TT'] = "Сайт для отправки отчётов";
				t['27.TT'] = "анализатор мира";
				t['29.TT'] = "Анализатор карты";
				t['WSS'] = "Статистика по серверу";
				t['WSP'] = "Информация по игроку";
				t['WSA'] = "Информация по альянсу";
				t['TRAVIANDOPE'] = "Traviandope";
				t['TRAVIANDOPE.TT'] = "Набор инструментов, нет поддержки ру-зоны";
				t['TOOLBOX'] = "Toolbox";
				t['TOOLBOX.TT'] = "Сравнение юнитов, симулятор боя, калькуляторы, генератор подписей для игроков и альянсов";
				t['CRYTOOLS'] = "Cry's Tools";
				t['CRYTOOLS.TT'] = "Аналитика по серверам, альянсам и игрокам. Есть статистика по фарму для закончившихся серверов!";
				t['KIRILLOID'] = "Кириллоид";
				t['KIRILLOID.TT'] = "Куча полезных таблиц и калькуляторов, самый лучший симулятор боя";
				t['CROPFINDER'] = "Поиск зерна";
				t['CROPFINDER.TT'] = "Инструмент для поиска зерновых клеток";
				t['ERRUPDATE'] = "Ошибка при поиске новой версии скрипта!";
				t['TRADEBAL.TT'] = "Узнать баланс торговли с этим игроком";
				t['100'] = "Показывать ссылки на статистику баланса торговли для игроков";
				t['101'] = "Цвет, если развитие невозможно из-за недостаточной вместимости амбаров и/или складов<br>(по умолчанию = пусто)";
				t['102'] = "Показывать количество ресурсных полей в таблице ресурсов";
				t['RESNEED'] = "Для нормального развития не хватает:";
				t['NPCNEED'] = "Для развития через NPC не хватает:";
				t['RESREQ_TT'] = "Для развития требуется: $1";
				t['NPCLNK'] = "&raquo; К NPC-торговцу";
				t['USERES_TT'] = "Разрешить/запретить изменение ресурса '$1' при операциях над всеми ресурсами одновременно";
				t['USETRADERS_TT'] = "При автоматическом распределении ресурсов будет использоваться не более указанного количества торговцев. По умолчанию используются все доступные торговцы.";
				t['USEUNIRES_TT'] = "При автоматическом распределении ресурсов будет загружено не более указанного количества ресурсов. По умолчанию используются все доступные ресурсы.";
				t['USEPPH_TT'] = "Использовать ЧВР этой деревни в качестве максимального количества ресурсов.";
				t['USEPPHALL_TT'] = "Использовать ЧВР всех деревень в качестве максимального количества ресурсов.";
				t['STAT_DISMISS'] = "Статистика по отпускаемым войскам";
				t['STAT_REMAINS'] = "Статистика по остающимся войскам";
				t['SELECTALL'] = "Отметить все";
				t['EVENT'] = "Событие";
				t['ARRP'] = "$1 - график прихода/расхода ($2)";
				t['ARRP_TT'] = "Показать/скрыть таблицу прихода/расхода ресурса $1";
				t['VGL2'] = "Дополнительный список деревень";
				t['112'] = "Показывать расстояние (когда возможно)";
				t['114'] = "Показывать производство ЕК в день";
				t['117'] = "Количество колонок деревень в списке";
				t['118'] = "Показывать всплывающие подсказки";
				t['CELHINTS'] = "Щелкните, чтобы зайти в ратушу.|Щелкните при нажатой кнопке Shift, чтобы запустить праздник.";
				t['DUP_TRADERS_TT'] = "Послать такой же транспорт еще раз";
				t['REPREAD_TT'] = "Прочитанный отчёт";
				t['119'] = "Идентификатор мира для GetterTools";
				t['TCOST'] = "Стоимость обучения";
				t['TAVGDUR'] = "Ср.время";
				t['120'] = "Включить улучшения интерфейса для создания/редактирования торговых путей";
				t['EDITROUTES_TT'] = "Отключить улучшенный интерфейс";
				break;
			case 'si':
				t['1'] = "Travian v2.x server";
				t['2'] = "Odstrani reklame";
				t['3'] = "Vsili T3.1 kapaciteto za Legionarje in Falange<br>(za različne T3.1 in T3.5 serverje)";
				t['4'] = "Tržnica";
				t['5'] = "Zbirališče/Barake/Konjušnica/Izdelovalec oblegovalnih naprav";
				t['6'] = "Mestna hiša/Herojeva residenca<br>Izdelovalec oklepov/Izdelovalec orožja";
				t['7'] = "Palača/Rezidenca/Akademija/Zakladnica";
				t['8'] = "Aliansa";
				t['9'] = "Dodatne povezave v levem meniju<br>(Traviantoolbox, World Analyser, Travilog, Map.)";
				t['10'] = "Simulator bitk:<br>(levi meni)";
				t['12'] = "Prikaži 'dorf1' in 'dorf2' povezave";
				t['13'] = "\"Centriraj zemljevid\" ikona";
				t['16'] = "Efektivna proizvodnja žita v tabeli naselij";
				t['17'] = "Populacija v listi naselij";
				t['18'] = "Dodatna (stolpca) v listi naselij kot plavajoče okno";
				t['19'] = "Prikaži informacije o zgradbah in premikanju enot v listi naselij";
				t['20'] = "Prikaži povezave";
				t['21'] = "'Zaznamki' kot kot plavajoče okno";
				t['22'] = "Prikaži beležko";
				t['23'] = "'Beležka' as kot plavajoče okno";
				t['24'] = "Velikost";
				t['25'] = "Višina";
				t['26'] = "NPC izračune/povezave";
				t['27'] = "Uporabi World Analyser";
				t['28'] = "Povezave Analyser statistike";
				t['29'] = "Uporabi Map Analyser";
				t['30'] = "Povezave do mape za uporabnike";
				t['31'] = "Povezave do mape za alianse";
				t['32'] = "Prikaži 'Iskanje'";
				t['33'] = "'Iskalnik' kot plavajoče okno";
				t['34'] = "Prikaži KT/Dan v tabeli nadgradenj";
				t['35'] = "Poraba žita v tabeli nadgradenj";
				t['36'] = "'Dokler/Ostanek' v tabelah nadgradi/uri";
				t['37'] = "Tabela nadgradenj";
				t['38'] = "Barvne stopnje";
				t['39'] = "'Diagram surovin' tabela";
				t['40'] = "'Diagram surovin' tabela kot plavajoče okno";
				t['41'] = "Tabela nadgradenj";
				t['42'] = "Razporedi zgradbe po imenu v tabeli nadgradenj";
				t['43'] = "Stopnje";
				t['44'] = "Barvne stopnje";
				t['45'] = "Utripanje stopenj zgradb, ki se nadgrajujejo";
				t['46'] = "Dodatne informacije za vsakega prihajajočega trgovca";
				t['48'] = "Število strani ponudb, ki se naj naložijo:<br>medtem ko ste na \"Tržnici => Kupi\" strani<br>(Privzeto = 1)";
				t['49'] = "Privzeta izbira Zbirališča";
				t['50'] = "Število skavtov za \"Skavti\" funkcijo";
				t['53'] = "Prikaži informacije o enoti, ki je v vasi<br>(Ko greste z miško na enoto)";
				t['54'] = "Razdalje in časi do vasi";
				t['56'] = "Prikaži tip polja/info oaze<br>med premikanjem miške po mapi";
				t['57'] = "Razdalje in časi";
				t['58'] = "Tabela Igralcev/Vasi/Okupiranih pokrajin";
				t['59'] = "Število strani Sporočil/Poročil, ki se naj naložijo<br>(Privzeto = 1)";
				t['60'] = "Ikona za odpiranje sporočil v novem oknu (Pop-up)";
				t['61'] = "\"Izbriši Vse\" tabela na strani poročil";
				t['62'] = "\"Pošlji IGM\" ikona tudi za mene";
				t['63'] = "Napredna TB3 poročila";
				t['64'] = "Podrobnosti pri poročilih";
				t['65'] = "Barva: Nadgradnja možna<br>(Prazno = privzeto)";
				t['66'] = "Barva: Najvišja stopnja<br>(Prazno = privzeto)";
				t['67'] = "Barva: Nadgradnja ni možna<br>(Prazno = privzeto)";
				t['68'] = "Barva: Nadgradnja možna preko NPC Trgovanja<br>(Prazno = privzeto)";
				t['69'] = "Konzola (Za stopnje)<br>SAMO ZA PROGRAMERJE ALI RAZHROŠČEVANJE<br>(Privzeto = 0)";
				t['82.L'] = "Zakleni povezave";
				t['82.U'] = "Odkleni povezave";
				t['U.2'] = "Pleme";
				t['U.3'] = "Ime metropole";
				t['U.6'] = "Koordinate metropole";
				t['SIM'] = "Simulator bitk";
				t['QSURE'] = "Ali ste prepričani?";
				t['LOSS'] = "Izguba";
				t['PROFIT'] = "Profit";
				t['EXTAV'] = "Nadgradnja možna";
				t['PLAYER'] = "Igralec";
				t['VILLAGE'] = "Naselbine";
				t['POPULATION'] = "Populacija";
				t['COORDS'] = "Koordinate";
				t['MAPTBACTS'] = "Možnosti";
				t['SAVED'] = "Shranjeno";
				t['YOUNEED'] = "Manjka";
				t['TODAY'] = "Danes";
				t['TOMORROW'] = "Jutri";
				t['DAYAFTERTOM'] = "Pojutrišnjem";
				t['BN_GID12'] = "Izdelovalec orožja";
				t['BN_GID13'] = "Izdelovalec oklepov";
				t['BN_GID16'] = "Zbirališče";
				t['BN_GID17'] = "Tržnica";
				t['BN_GID19'] = "Barake";
				t['BN_GID20'] = "Konjušnica";
				t['BN_GID21'] = "Izdelovalec oblegovalnih naprav";
				t['BN_GID22'] = "Akademija";
				t['BN_GID24'] = "Mestna hiša";
				t['BN_GID25'] = "Rezidenca";
				t['BN_GID26'] = "Palača";
				t['BN_GID27'] = "Zakladnica";
				t['BN_GID37'] = "Herojeva residenca";
				t['SENDRES'] = "Pošlji surovine";
				t['BUY'] = "Kupi";
				t['SELL'] = "Ponudi";
				t['SENDIGM'] = "Pošlji sporočilo";
				t['LISTO'] = "Dovolj";
				t['ON'] = "";
				t['AT'] = "ob";
				t['EFICIENCIA'] = "Izkoristek";
				t['NEVER'] = "Nikoli";
				t['ALDEAS'] = "Vas(i)";
				t['TIEMPO'] = "Čas";
				t['OFREZCO'] = "Ponuja";
				t['BUSCO'] = "Išče";
				t['TIPO'] = "Tip";
				t['DISPONIBLE'] = "Samo možne ponudbe";
				t['CUALQUIERA'] = "Karkoli";
				t['YES'] = "Da";
				t['NO'] = "Ne";
				t['LOGIN'] = "Prijava";
				t['MARCADORES'] = "Povezave";
				t['ANYADIR'] = "Dodaj";
				t['UBU'] = "Cilj povezave";
				t['UBT'] = "Ime povezave";
				t['DEL'] = "Izbriši";
				t['MAPA'] = "Zemljevid";
				t['MAXTIME'] = "Maksimalen čas";
				t['ARCHIVE'] = "Arhiv";
				t['SUMMARY'] = "Pregled";
				t['TROPAS'] = "Enote";
				t['CHKSCRV'] = "Posodobi skripto";
				t['ACTUALIZAR'] = "Posodobi informacije o naseljih";
				t['VENTAS'] = "Shranjene ponudbe";
				t['MAPSCAN'] = "Preglej mapo";
				t['BIC'] = "Dodatne ikone";
				t['SAVE'] = "Shrani";
				t['AT2'] = "Okrepitve";
				t['AT3'] = "Napad:  Polni napad";
				t['AT4'] = "Napad:  Roparski pohod";
				t['NBSA'] = "Auto";
				t['NBSN'] = "Normalna (majhna)";
				t['NBSB'] = "Velik zaslon (velika)";
				t['NBHAX'] = "Samodejno prilagajaj velikost";
				t['NBHK'] = "Privzeta višina";
				t['NPCSAVETIME'] = "Prihrani: ";
				t['TOTALTROOPS'] = "Skupno število enot";
				t['SELECTALLTROOPS'] = "Vse enote";
				t['PARTY'] = "Festivali";
				t['CPPERDAY'] = "KT/Dan";
				t['SLOT'] = "Reže";
				t['TOTAL'] = "Vsota";
				t['SELECTSCOUT'] = "Skavti";
				t['SELECTFAKE'] = "Fake";
				t['ALL'] = "Vse";
				t['SH2'] = "V polja za barvo lahko vnesete:<br>- npr. green(zelena) ali red(rdeča) ali orange(oranžna)<br>- HEX kodo kot #004523<br>- pustite prazno za privzete barve";
				t['SOREP'] = "Prikaži originalno poročilo (za pošiljanje)";
				t['WSIMO1'] = "Notranji (ponujen v igri)";
				t['WSIMO2'] = "Zunanji (ponujen pri kirilloid.ru)";
				t['NONEWVER'] = "Skripte ni treba posodobiti";
				t['BVER'] = "Lahko, da imate beta različico";
				t['NVERAV'] = "Nova različica skripte je na voljo";
				t['UPDSCR'] = "Posodobi skripto";
				t['CHECKUPDATE'] = "Preverjam za posodobitev.<br>Prosim počakajte...";
				t['AVPPV'] = "Povprečna populacija naselja";
				t['AVPPP'] = "Povprečna populacija igralca";
				t['MAX'] = "Maksimalno";
				t['TOTTRTR'] = "Skupno število enot v postopku";
				t['TB3SL'] = "$1 Nastavitve";
				t['UPDALLV'] = "Osveži vsa naselja.";
				t['LARGEMAP'] = "Velik zemljevid";
				t['USETHEMPR'] = "Uporabi (izmenično)";
				t['USETHEMEQ'] = "Uporabi (enako)";
				t['GSRVT'] = "Tip Serverja";
				t['ACCINFO'] = "Informacije o računu";
				t['NBO'] = "Beležka";
				t['MNUL'] = "Meni na levi strani";
				t['STAT'] = "Statistika";
				t['RESF'] = "Surovinska polja";
				t['VLC'] = "Center naselja";
				t['MAPO'] = "Možnosti zemljevida";
				t['COLO'] = "Barve";
				t['DBGO'] = "Možnosti razhroščevanja";
				t['NOW'] = "Sedaj";
				t['CLOSE'] = "Zapri";
				t['USETHEM1H'] = "Uporabi (1 urna proizvodnja)";
				t['OVERVIEW'] = "Pregled";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Napadi";
				t['NEWS'] = "Novice";
				t['ADDCRTPAGE'] = "Dodaj trenutno stran";
				t['SCRPURL'] = "TBeyond stran";
				t['SPACER'] = "Ločilna črta";
				t['MEREO'] = "Sporočila in Poročila";
				t['ATTABLES'] = "Tabela enot";
				t['MTW'] = "Ostane";
				t['MTX'] = "Preseženo";
				t['MTC'] = "Skupaj";
				t['ALFL'] = "Povezava do zunanjega Foruma<br>(Pusti prazno za notranji Forum)";
				t['MTCL'] = "Počisti vse";
				t['CKSORT'] = "Razvrsti";
				t['MIN'] = "Minimalno";
				t['SVGL'] = "Shrani za vse vasi";
				t['VGL'] = "Naselja";
				t['UPDATEPOP'] = "Posodobi populacijo";
				t['EDIT'] = "Uredi";
				t['NPCO'] = "Možnosti NPC trgovanja";
				t['NEWVILLAGEAV'] = "Datum/Čas";
				t['TIMEUNTIL'] = "Čas čakanja";
				t['CENTERMAP'] = "Centriraj zemljevid";
				t['SENDTROOPS'] = "Pošlji enote";
				t['UPGTB'] = "Tabele surovinskih polj/zgradb";
				t['RBTT'] = "Diagram surovin";
				t['USE'] = "Uporabi";
				t['RESIDUE'] = "Ostanek, če zgradiš";
				t['RESOURCES'] = "Surovine";
				t['SH1'] = "Odpri Profil za samodejno odkrvanje metropole/koordinat<br>Zgradite Barake za samodejno odkrivanje plemena in potem odprite Center naselja";
				t['CROPFINDER'] = "Iskalec Žita";
				t['VGL2'] = "Naselja";
				t['112'] = "Razdalje in časi";
				t['114'] = "KT/Dan";
				break;
			case 'sk':
				t['1'] = "Travian v2.x server";
				t['2'] = "Odstrániť reklamné bannery";
				t['3'] = "Vypočitať kapacitu vojakov T3.1 Legionárov & Falangov<br>(pre mixované T3.1 & T3.5 servery)";
				t['4'] = "Trhovisko";
				t['5'] = "Zhromaždisko/Kasárne/Dielňa/Stájňa";
				t['6'] = "Radnica/Hrdinský dvor/Výzbroj/Kováč";
				t['7'] = "Palác/Rezidencia/Akadémia/Pokladnica";
				t['8'] = "Aliancia";
				t['9'] = "Ukáž prídavné linky v ľavom menu<br>(Traviantoolbox, World Analyser, Travilog, Mapu, atď.)";
				t['10'] = "Link na bojový simulátor:<br>(ľavé menu)";
				t['11'] = "Link na poslanie spravodajských správ";
				t['12'] = "Ukáž 'dorf1.php' a 'dorf2.php' linky";
				t['13'] = "Ukáž ikonu\" vycentruj mapu na dedinu ";
				t['15'] = "Ukáž produkciu drevo, hliny, železo v zozname dedín";
				t['16'] = "Ukáž produkciu obilia v zozname dedín";
				t['17'] = "Ukazovať populáciu v zozname dedín";
				t['18'] = "Ukáž ďalšie 2 stĺpy zoznamu dedín posuvne ";
				t['19'] = "Ukáž informácie o budovách vo výstavbe a a pohybe jednotie v zozname dedín";
				t['20'] = "Ukáž záložky";
				t['21'] = "Zobraziť 'záložky' ako posuvne okno";
				t['22'] = "Zobraziť ikony 'poslať jednotky/suroviny' v zoznamu dediny";
				t['23'] = "Zobraziť 'poznámkový blok' ako posuvne okno";
				t['24'] = "Zobraziť produkciu obilia v zozname dedine";
				t['25'] = "Výška poznámkového bloku";
				t['26'] = "Ukáž kalkulačku/linky NPC asistenta";
				t['27'] = "Analyzátor";
				t['28'] = "Ukáž link na analyzátor ";
				t['29'] = "Mapy k použitiu";
				t['30'] = "Zobraziť odkazy na mapu pre hráča";
				t['31'] = "Zobraziť odkazy na mapu pre alianciu";
				t['32'] = "Ukáž Tabuľku 'Vyhľadávanie'";
				t['33'] = "Ukáž Tabuľku 'Vyhľadávanie' ako posuvné okno";
				t['34'] = "Ukáž KB/deň v tabuľkách rozšírení";
				t['35'] = "Ukáž spotrebu obilia v tabuľkách rozšírení";
				t['36'] = "Ukáž výpočet 'Do/Zostáva' v tabuľkách rozšírení/tréningov";
				t['37'] = "Ukáž tabuľku rozšírení pre surovinové polia";
				t['38'] = "Ukáž úroveň surovinových polí farebne";
				t['39'] = "Ukáž 'Tabuľku surovín'";
				t['40'] = "Zobraziť 'Tabuľku surovín' ako posuvne okno";
				t['41'] = "Ukáž tabuľku pre rozšírenia budov";
				t['42'] = "Zobraziť KB/deň v tabuľke stavieb";
				t['43'] = "Zobraziť spotrebu obilia v tabuľke stavieb";
				t['44'] = "Ukáž úroveň budov farebne";
				t['45'] = "Ukázať blikajúce úroveň budovy ktorá sa rozširuje?";
				t['46'] = "Ukáž rozširujúce informácie pri každom príchode obchodníka";
				t['47'] = "Ukáž posledný transport obchodníkom";
				t['48'] = "Počet kontrolovaných stránok na trhovisku => Nákupných stránok<br>(Prednastavené = 1)";
				t['49'] = "Prednastavená akcia zhromaždiska";
				t['50'] = "Niesu špehovia \"Vyberte funkciu špeha";
				t['51'] = "Ukáž posledný útok";
				t['52'] = "Ukáž/použi súradnice posledného útoku";
				t['53'] = "Ukáž informácie o vojakoch v bublinách";
				t['54'] = "Ukáž vzdialenosť a čas od dediny v bublinách";
				t['55'] = "Vo vojnovom simulátory automatcky doplň";
				t['56'] = "Ukáž typ dediny/oázi keď na ňu prejdeš kurzorom";
				t['57'] = "Ukáž vzdialenosť a čas od dediny v bublinách";
				t['58'] = "Ukáž tabuľku s hráčmi/dedinami/okupovanými oázami";
				t['59'] = "Počet správ/hlásení stránka na preload<br>(Prednastavené = 1)";
				t['60'] = "Ukáž link na otvorenie správy vo vyskakovacom okne";
				t['61'] = "Ukáž \"Vymazať všetky\" tabuľky na stránke s hláseniami";
				t['62'] = "Ukáž \" v pošli správu\" ikonu aj mne";
				t['63'] = "Ukáž TB3 rozšírené Hlásenie vojny";
				t['64'] = "Ukáž detaily v štatistikách hlásení";
				t['65'] = "Farba, rozšírenia<br>(Prednastavené = Prázdne)";
				t['66'] = "Farba, maximálnej úrovne<br>(Prednastavené = Prázdne)";
				t['67'] = "Farba, ak rozšírenie nieje možné<br>(Prednastavené = Prázdne)";
				t['68'] = "Farba, rozšírenia cez NPC obchod<br>(Prednastavené = Prázdne)";
				t['69'] = "Výrečnosť výpisov konzoly.<br>!!!Len pre programátorov alebo na odstránenie chýb!!!<br>(Prednastavené = 0)";
				t['82.L'] = "Zamkni záložku (Skry vymaž, posuň hore/dole ikony)";
				t['82.U'] = "Odomkni záložky (Ukáž vymaž, posuň hore/dole ikony)";
				t['85'] = "Ukáž ikonky 'Poslať jednotky/suroviny'";
				t['87'] = "Zapamätať si 1x/2x/3x nastavenia obchodu (pokiaľ je dostupne)";
				t['91'] = "Prispôsobiť zoznam dedín";
				t['92.L'] = "Zamknúť zoznam dedín (Rozmiestnenie)";
				t['92.U'] = "Odomknúť zoznam dedín (Rozmiestnenie)";
				t['U.2'] = "Kmeň";
				t['U.3'] = "Meno tvojej hlavnej dediny<br>Pozri svoj profil pre načítanie";
				t['U.6'] = "Súradnice hlavnej dediny.<br>Pozri svoj profil pre načítanie";
				t['SIM'] = "Vojnový simulátor";
				t['QSURE'] = "Si si istý?";
				t['LOSS'] = "Strata";
				t['PROFIT'] = "Zisk";
				t['EXTAV'] = "Môžeš stavať";
				t['PLAYER'] = "Hráč";
				t['VILLAGE'] = "Dedina";
				t['POPULATION'] = "Populácia";
				t['COORDS'] = "Súradnice";
				t['MAPTBACTS'] = "Akcie";
				t['SAVED'] = "Uložené";
				t['YOUNEED'] = "Potrebuješ";
				t['TODAY'] = "dnes";
				t['TOMORROW'] = "zajtra";
				t['DAYAFTERTOM'] = "pozajtra";
				t['BN_GID12'] = "Kováč";
				t['BN_GID13'] = "Zbrojnica";
				t['BN_GID16'] = "Zhromaždište";
				t['BN_GID17'] = "Trh";
				t['BN_GID19'] = "Kasárne";
				t['BN_GID20'] = "Stajňa";
				t['BN_GID21'] = "Dielňa";
				t['BN_GID22'] = "Akadémia";
				t['BN_GID24'] = "Radnica";
				t['BN_GID25'] = "Rezidencia";
				t['BN_GID26'] = "Palác";
				t['BN_GID27'] = "Pokladnica";
				t['BN_GID37'] = "Hrdinský dvor";
				t['SENDRES'] = "Pošli suroviny";
				t['BUY'] = "Kúpiť";
				t['SELL'] = "Predať";
				t['SENDIGM'] = "Pošli správu";
				t['LISTO'] = "Môžeš stavať";
				t['ON'] = "Dňa";
				t['AT'] = "o";
				t['EFICIENCIA'] = "Efektívnosť";
				t['NEVER'] = "Nikdy";
				t['ALDEAS'] = "Počet dedín";
				t['TIEMPO'] = "Čas";
				t['OFREZCO'] = "Ponuka";
				t['BUSCO'] = "Vyhľadať";
				t['TIPO'] = "Typ";
				t['DISPONIBLE'] = "Len dostupné";
				t['CUALQUIERA'] = "Hocijaká";
				t['YES'] = "ÁNO";
				t['NO'] = "NIE";
				t['LOGIN'] = "Prihlásiť";
				t['MARCADORES'] = "Záložka";
				t['ANYADIR'] = "Pridať";
				t['UBU'] = "Adresa záložky";
				t['UBT'] = "Názov novej záložky";
				t['DEL'] = "Vymazať";
				t['MAPA'] = "Mapa";
				t['MAXTIME'] = "Maximálny čas";
				t['ARCHIVE'] = "Archivovať";
				t['SUMMARY'] = "Hlásenie";
				t['TROPAS'] = "Vojsko";
				t['CHKSCRV'] = "Aktualizovať";
				t['ACTUALIZAR'] = "Aktualizovať informácie o dedine";
				t['VENTAS'] = "Uložiť ponuky";
				t['MAPSCAN'] = "Skenovať mapu";
				t['BIC'] = "Ukáž rozširujúce ikony";
				t['SAVE'] = "Uložené";
				t['AT2'] = "Podpora";
				t['AT3'] = "Normálny útok ";
				t['AT4'] = "Lúpež";
				t['NBSA'] = "Automatická";
				t['NBSN'] = "Normálna (malá)";
				t['NBSB'] = "Veľká";
				t['NBHAX'] = "Automatické rozšírenie výšky";
				t['NBHK'] = "Prednastavená výška";
				t['NPCSAVETIME'] = "Ušetriš:";
				t['TOTALTROOPS'] = "Všetky jednotky vycvičené v tejto dedine";
				t['SELECTALLTROOPS'] = "Vybrať všetky jednotky";
				t['PARTY'] = "Oslavy";
				t['CPPERDAY'] = "KB/denne";
				t['SLOT'] = "Slot";
				t['TOTAL'] = "Spolu";
				t['SELECTSCOUT'] = "Vyber počet špehov";
				t['SELECTFAKE'] = "Vyber jednotky na fake";
				t['ALL'] = "Všetko";
				t['SH2'] = "Môžeš vložiť farby :<br>- green alebo red alebo orange, atď. Farby zadávajte len v Angličtine<br>- Alebo v HEX. Napr.  #004523.<br>- Nechajte prázdne ak chcete mať prednastavené farby";
				t['SOREP'] = "Ukáž originálne správy";
				t['WSIMO1'] = "Interný (poskytovaný hrou)";
				t['WSIMO2'] = "Externý (poskytnutý kirilloid.ru)";
				t['NONEWVER'] = "Máš poslednú verziu";
				t['BVER'] = "Máš testovaciu verziu";
				t['NVERAV'] = "Nová verzia je dostupná";
				t['UPDSCR'] = "Aktualizovať skript teraz?";
				t['CHECKUPDATE'] = "Kontrolujem aktualizácie...";
				t['AVPPV'] = "Priemerná populácia na dedinu";
				t['AVPPP'] = "Priemerná populácia na hráča";
				t['MAX'] = "Maximum";
				t['TOTTRTR'] = "Všetci vojaci vo výcviku";
				t['TB3SL'] = "$1 Nastavenia";
				t['UPDALLV'] = "Aktualizovať informácia o všetkých dediny. POUŽÍVAJ S MAXIMÁLNOU OSTRAHOU<br>LEBO TO MÔŽE VIESŤ K ZRUŠENIU ÚČTU !";
				t['LARGEMAP'] = "Veľká mapa";
				t['USETHEMPR'] = "Použi ich (proporčne)";
				t['USETHEMEQ'] = "Použi ich (rovným dielom)";
				t['GSRVT'] = "Server hry";
				t['ACCINFO'] = "Informácie o účte";
				t['NBO'] = "Poznámkový blok";
				t['MNUL'] = "Menu na ľavom boku";
				t['STAT'] = "Štatistika";
				t['RESF'] = "Surovinové polia";
				t['VLC'] = "Centrum dediny";
				t['MAPO'] = "Nastavenia mapy";
				t['COLO'] = "Nastavenia farieb";
				t['DBGO'] = "Nastavenia v ladení";
				t['NOW'] = "Teraz";
				t['CLOSE'] = "Zavrieť";
				t['USETHEM1H'] = "Použiť (1 h. produkcia)";
				t['OVERVIEW'] = "Náhľad";
				t['FORUM'] = "Fórum";
				t['ATTACKS'] = "Útok";
				t['NEWS'] = "Noviny";
				t['ADDCRTPAGE'] = "Pridať túto stránku";
				t['SCRPURL'] = "TBeyond stránka";
				t['SPACER'] = "Oddeľovač";
				t['MEREO'] = "Správy & Hlásenia";
				t['ATTABLES'] = "Tabuľka jednotiek";
				t['MTW'] = "Obchodníci ešte unesú";
				t['MTX'] = "Presahuje o";
				t['MTC'] = "Zaťaženie obchodníka";
				t['ALFL'] = "Link na externé fórum<br>(Nechaj prázdne pre interné forum)";
				t['MTCL'] = "Vyčistiť všetko";
				t['CKSORT'] = "Klikni pre rozriediť";
				t['MIN'] = "Minimum";
				t['SVGL'] = "Pre všetky dediny";
				t['VGL'] = "Zoznam dedín";
				t['UPDATEPOP'] = "Aktualizovať populáciu";
				t['EDIT'] = "Uprav";
				t['NPCO'] = "Nastavenia NPC asistenta";
				t['NEWVILLAGEAV'] = "Dátum/čas";
				t['TIMEUNTIL'] = "Čas vyčkávania";
				t['CENTERMAP'] = "Vycentruj mapu na túto dedinu ";
				t['SENDTROOPS'] = "Poslať jednotky";
				t['UPGTB'] = "Tabuľka vylepšení surovinových polí/budov";
				t['RBTT'] = "Tabuľka surovín";
				t['USE'] = "Použiť";
				t['RESIDUE'] = "Ak vybuduješ zostane ti ";
				t['RESOURCES'] = "Suroviny";
				t['SH1'] = "Otvor svoj profil pre automatické zistenie Hlavnej dediny a súradníc<br>Vybuduj kasárne pre automatické zistenie kmeňa a otvor stred dediny";
				t['RESEND'] = "Poslať znovu?";
				t['WSI'] = "Vojnový simulátor prevádzkovaný hrou";
				t['TTT'] = "Všeobecné nápoveda v bublinke o jednotkách a vzdialenosti";
				t['MTR'] = "Pomer";
				t['USEMTR'] = "Pomer:";
				t['MTRMIN'] = "(musí byť najmenej $1)";
				t['MTRMAX'] = "(musí byť najviac $1)";
				t['FINDREP'] = "Nájdi posledné";
				t['REP1_TT'] = "Útok si vyhral bez strát";
				t['REP2_TT'] = "Útok si vyhral zo stratami";
				t['REP3_TT'] = "Útok si prehral";
				t['REP4_TT'] = "Obranu si vyhral bez strát";
				t['REP5_TT'] = "Obranu si vyhral so stratami";
				t['REP6_TT'] = "Obranu si prehral so stratami";
				t['REP7_TT'] = "Obranu si prehral bez strát";
				t['VLISTUP'] = "Posunúť hore";
				t['VLISTDOWN'] = "Posunúť dole";
				t['VLISTSEP'] = "Vlož/odstráň horizontálny oddeľovač";
				t['VLISTEDIT'] = "Vlastnosti dediny";
				t['VLISTOPTIONS'] = "Nastavenia zoznamu dedín";
				t['REPTT'] = "Ukáž tento výpis v samostatnom okne";
				t['WMIN'] = "Minimalizovať";
				t['WMAX'] = "Maximalizovať";
				t['REFRESHP'] = "Aktualizovať";
				t['1H'] = "1h";
				t['GENLNK'] = "Všeobecné odkazy na vylepšenia";
				t['27.TT'] = "Analyzátor sveta";
				t['29.TT'] = "Analyzátor mapy";
				t['WSS'] = "Štatistiky servera";
				t['WSP'] = "Štatistiky hráčov";
				t['WSA'] = "Štatistiky aliancií";
				t['TRAVIANDOPE.TT'] = "Analyzátor mapy, hráčov a aliancií";
				t['TOOLBOX'] = "Nástroje";
				t['TOOLBOX.TT'] = "Porovnávanie jednotiek, Bojový simulátor, Kalkulátory, Podpisy používateľov a aliancií";
				t['CRYTOOLS'] = "Cryieho nástroje";
				t['CRYTOOLS.TT'] = "Cryieho nástroje a novinky";
				t['KIRILLOID.TT'] = "Veľa užitočných tabuliek a výpočtov";
				t['CROPFINDER'] = "Vyhľadávač obilia";
				t['CROPFINDER.TT'] = "Vyhľadávanie obilných fárm";
				t['ERRUPDATE'] = "Aktualizácia zlyhala";
				t['TRADEBAL.TT'] = "Zisti obchodné bilancie tohto hráča";
				t['100'] = "Ukáž linky na zobrazenie obchodných bilancií hráčov";
				t['101'] = "Farba ak rozšírenie nieje možné (nemáš dostatočnú kapacitu sýpky/skladiska)<br>(Prednastavené = Prázdne)";
				t['102'] = "Ukáž úroveň surovinových polí v karte surovín";
				t['RESNEED'] = "Na rozšírenie potrebuješ:";
				t['NPCNEED'] = "Na rozšírenie cez NPC potrebuješ:";
				t['RESREQ_TT'] = "Na rozšírenie potrebuješ: $1";
				t['NPCLNK'] = "&raquo; Pre NPC obchod";
				t['USERES_TT'] = "Povoliť/zakázať pracovať s $1 keď súčasne používaš všetky suroviny.";
				t['USETRADERS_TT'] = "Nepoužívaj viac než toto množstvo obchodníkov keď rozvážaš suroviny.";
				t['USEUNIRES_TT'] = "Nepoužívaj viac než toto množstvo surovín keď rozvážaš suroviny.";
				t['USEPPH_TT'] = "Použi hodinovú produkciu tejto dediny ako maximálne množstvo prenosu.";
				t['USEPPHALL_TT'] = "Použi hodinovú produkciu všetkých dedín ako maximálne množstvo prenosu.";
				t['STAT_DISMISS'] = "Štatistiky stratených vojakov";
				t['STAT_REMAINS'] = "Štatistiky ostávajúcich vojakov";
				t['SELECTALL'] = "Vybrať všetko";
				t['EVENT'] = "Udalosť";
				t['ARRP'] = "$1 priebeh príchodu ($2)";
				t['ARRP_TT'] = "Ukáž/skry štatistiku príchodov $1";
				t['VGL2'] = "Zoznam dedín";
				t['112'] = "Ukáž vzdialenosť a čas";
				t['114'] = "KB/denne";
				t['117'] = "Počet riadkov v zozname dedín";
				t['118'] = "Ukáž nápovedy";
				t['CELHINTS'] = "Klikni na otvorenie radnice|Shift-klik na usporiadanie osláv";
				t['DUP_TRADERS_TT'] = "Poslať rovnaké suroviny ešte raz";
				break;
			case 'th':
				t['4'] = "ตลาด";
				t['5'] = "จุดระดมพล/ค่ายทหาร/ห้องเครื่อง/โรงม้า";
				t['6'] = "ศาลากลาง/คฤหาสน์ของฮีโร่/คลังแสง/ช่างตีเหล็ก";
				t['7'] = "พระราชวัง/ที่พักอาศัย/สถานศึกษา/คลังสมบัติ";
				t['8'] = "พันธมิตร";
				t['10'] = "ใช้ลิ้งค์จำลองการต่อสู้:<br>(เมนูด้านซ้าย)";
				t['12'] = "แสดงลิ้งค์ 'dorf1.php' และ 'dorf2.php'";
				t['13'] = "แสดงไอคอน \"ไปยังกลางแผนที่\"";
				t['20'] = "แสดงบุ๊คมาร์ค";
				t['22'] = "แสดงกล่องข้อความ";
				t['24'] = "ขนาดกล่องข้อความ";
				t['25'] = "กล่องข้อความ height";
				t['27'] = "ใช้ World Analyser";
				t['28'] = "แสดงลิ้งค์ analyser statistic";
				t['48'] = "Number of offer pages to preload<br>while on the 'Market => Buy' page<br>(ปกติ = 1)";
				t['50'] = "จำนวนของหน่วยสอดแนมสำหรับ<br>ฟังก์ชัน \"เลือกหน่วยสอดแนม\"";
				t['53'] = "แสดงข้อมูลกองกำลังใน tooltips";
				t['54'] = "แสดงระยะทางและเวลาไปถึงหมู่บ้านใน tooltips";
				t['56'] = "แสดงข้อมูล ประเภทของcellหรือโอเอซิส<br>ขณะที่เมาส์อยู่บนแผนที่";
				t['57'] = "แสดงระยะทางและเวลา";
				t['59'] = "Number of message/report pages to preload<br>(Default = 1)";
				t['61'] = "แสดงตาราง \"ลบทั้งหมด\" บนหน้ารายงาน";
				t['62'] = "แสดงไอคอน \"ส่ง IGM\"";
				t['65'] = "Color upgrade available<br>(ปกติ = ว่าง)";
				t['66'] = "Color max level<br>(ปกติ = ว่าง)";
				t['67'] = "Color upgrade not possible<br>(ปกติ = ว่าง)";
				t['68'] = "Color upgrade via NPC<br>(ปกติ = ว่าง)";
				t['69'] = "Console Log Level<br>สำหรับ PROGRAMMERS หรือ DEBUGGING เท่านั้น<br>(ปกติ = 0)";
				t['82.L'] = "ล็อคบุ๊คมาร์ค (ซ่อนปุ่ม ลบ, เลื่อนขึ้น, เลื่อนลง, แก้ไข)";
				t['82.U'] = "ปลดล็อคบุ๊คมาร์ค (แสดงปุ่ม ลบ, เลื่อนขึ้น, เลื่อนลง, แก้ไข)";
				t['U.2'] = "เผ่า";
				t['U.3'] = "ชื่อเมืองหลวงของคุณ<br>Visit your Profile for an update";
				t['U.6'] = "พิกัดของเมืองหลวง<br>Visit your Profile for an update";
				t['SIM'] = "จำลองการต่อสู้";
				t['QSURE'] = "แน่ใจนะ?";
				t['LOSS'] = "ความเสียหาย";
				t['PROFIT'] = "กำไร";
				t['EXTAV'] = "พร้อมขยาย";
				t['PLAYER'] = "ผู้เล่น";
				t['VILLAGE'] = "หมู่บ้าน";
				t['POPULATION'] = "ประชากร";
				t['MAPTBACTS'] = "การดำเนินการ";
				t['SAVED'] = "Saved";
				t['YOUNEED'] = "คุณต้องการ";
				t['TODAY'] = "วันนี้";
				t['TOMORROW'] = "วันพรุ่งนี้";
				t['DAYAFTERTOM'] = "วันมะรืนนี้";
				t['BN_GID12'] = "ช่างตีเหล็ก";
				t['BN_GID13'] = "คลังแสง";
				t['BN_GID16'] = "จุดรวมกำลังพล";
				t['BN_GID17'] = "ตลาดสินค้า";
				t['BN_GID19'] = "ค่ายทหาร";
				t['BN_GID20'] = "โรงม้า";
				t['BN_GID21'] = "ห้องเครื่อง";
				t['BN_GID22'] = "สถานศึกษา";
				t['BN_GID24'] = "ศาลากลาง";
				t['BN_GID25'] = "ที่พักอาศัย";
				t['BN_GID26'] = "พระราชวัง";
				t['BN_GID27'] = "คลังสมบัติ";
				t['BN_GID37'] = "คฤหาสน์ของฮีโร่";
				t['SENDRES'] = "ส่งทรัพยากร";
				t['BUY'] = "ซื้อ";
				t['SELL'] = "ขาย";
				t['SENDIGM'] = "ส่ง IGM";
				t['LISTO'] = "พร้อม";
				t['ON'] = "วันที่";
				t['AT'] = "ณ เวลา";
				t['EFICIENCIA'] = "ประสิทธิผล";
				t['NEVER'] = "ไม่มีทาง";
				t['ALDEAS'] = "หมู่บ้าน";
				t['TIEMPO'] = "เวลา";
				t['OFREZCO'] = "สิ่งที่เสนอ";
				t['BUSCO'] = "สิ่งที่ต้องการ";
				t['TIPO'] = "รูปแบบ";
				t['DISPONIBLE'] = "พร้อมเท่านั้น";
				t['CUALQUIERA'] = "ทั้งหมด";
				t['YES'] = "ใช่";
				t['NO'] = "ไม่ใช่";
				t['LOGIN'] = "เข้าสู่ระบบ";
				t['MARCADORES'] = "บุ๊คมาร์ค";
				t['ANYADIR'] = "เพิ่ม";
				t['UBU'] = "URL บุ๊คมาร์คใหม่";
				t['UBT'] = "ข้อความบุ๊คมาร์คใหม่";
				t['DEL'] = "ลบ";
				t['MAPA'] = "แผนที่";
				t['MAXTIME'] = "เวลาสูงสุด";
				t['ARCHIVE'] = "เอกสารสำคัญ";
				t['SUMMARY'] = "สรุป";
				t['TROPAS'] = "กองกำลัง";
				t['CHKSCRV'] = "ปรับปรุง TBeyond";
				t['ACTUALIZAR'] = "ปรังปรุงข้อมูลหมู่บ้าน";
				t['VENTAS'] = "Saved Offers";
				t['MAPSCAN'] = "Scan แผนที่";
				t['BIC'] = "แสดง extended icons";
				t['SAVE'] = "บันทึก";
				t['AT2'] = "ส่งกองกำลังเสริม";
				t['AT3'] = "โจมตี: ปกติ";
				t['AT4'] = "โจมตี: ปล้น";
				t['NBSA'] = "อัตโนมัติ";
				t['NBSN'] = "ปกติ (เล็ก)";
				t['NBSB'] = "จอขนาดใหญ่ (ใหญ่)";
				t['NBHAX'] = "ขยายความสูงอัตโนมัติ";
				t['NBHK'] = "ความสูงปกติ";
				t['NPCSAVETIME'] = "ประหยัดเวลา: ";
				t['TOTALTROOPS'] = "กองกำลังของหมู่บ้านทั้งหมด";
				t['SELECTALLTROOPS'] = "เลือกกองกำลังทั้งหมด";
				t['PARTY'] = "การเฉลิมฉลอง";
				t['CPPERDAY'] = "CP/วัน";
				t['SLOT'] = "ช่อง";
				t['TOTAL'] = "รวม";
				t['SELECTSCOUT'] = "เลือกหน่วยสอดแนม";
				t['SELECTFAKE'] = "เลือกโจมตีหลอก";
				t['ALL'] = "ทั้งหมด";
				t['SOREP'] = "แสดงรายงานแบบเดิม (for posting)";
				t['WSIMO1'] = "ภายใน (provided by the game)";
				t['WSIMO2'] = "ภายนอก (provided by kirilloid.ru)";
				t['UPDSCR'] = "ปรับปรุง script เดี๋ยวนี้?";
				t['CHECKUPDATE'] = "กำลังปรับปรุง script. กรุณารอสักครู่...";
				t['AVPPV'] = "ประชากรเฉลี่ยต่อหมู่บ้าน";
				t['AVPPP'] = "ประชากรเฉลี่ยต่อผู้เล่น";
				t['MAX'] = "สูงสุด";
				t['LARGEMAP'] = "แผนที่ขนาดใหญ่";
				t['ACCINFO'] = "ข้อมูลบัญชี";
				t['NBO'] = "กล่องข้อความ";
				t['MNUL'] = "เมนูด้านซ้าย";
				t['STAT'] = "สถิติ";
				t['RESF'] = "พื้นที่ทรัพยากร";
				t['VLC'] = "ศูนย์กลางหมู่บ้าน";
				t['NOW'] = "เดี๋ยวนี้";
				t['CLOSE'] = "ปิด";
				t['OVERVIEW'] = "ภาพรวม";
				t['FORUM'] = "ฟอรัม";
				t['ATTACKS'] = "โจมตี";
				t['NEWS'] = "ข่าว";
				t['ADDCRTPAGE'] = "เพิ่มหน้าปัจจุบัน";
				t['SCRPURL'] = "หน้า TBeyond";
				t['SPACER'] = "คั่น";
				t['MEREO'] = "ข่าวสาร & รายงาน";
				t['ATTABLES'] = "Troop tables";
				t['MTW'] = "ไร้ประโยชน์";
				t['MTX'] = "มากมาย";
				t['MTC'] = "Current load";
				t['ALFL'] = "Link to external forum<br>(Leave empty for internal forum)";
				t['MTCL'] = "ล้างทั้งหมด";
				t['CKSORT'] = "คลิกเพื่อจัดเรียง";
				t['MIN'] = "ต่ำสุด";
				t['SVGL'] = "แบ่งระหว่างหมู่บ้าน";
				t['VGL'] = "รายชื่อหมู่บ้าน";
				t['UPDATEPOP'] = "ปรับปรุงประชากร";
				t['EDIT'] = "แก้ไข";
				t['NEWVILLAGEAV'] = "วันที่/เวลา";
				t['TIMEUNTIL'] = "เวลาที่รอ";
				t['CENTERMAP'] = "ไปยังกลางแผนที่";
				t['SENDTROOPS'] = "ส่งกองกำลัง";
				t['USE'] = "ใช้";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "รายชื่อหมู่บ้าน";
				t['112'] = "แสดงระยะทางและเวลา";
				t['114'] = "CP/วัน";
				break;
			case 'tr':
				t['1'] = "Travian v2.x sunucusu";
				t['3'] = "T3.1 Lejyoner & Phalanx kapasite hesaplayıcıyı zorla<br>(karışık T3.1 & T3.5 sunucuları için)";
				t['4'] = "Pazar yeri";
				t['5'] = "Askeri Üs/Kışla/Tamirhane/Ahır";
				t['6'] = "Belediye/Kahraman Kışlası/Silah Dökümhanesi/Zırh Dökümhanesi";
				t['7'] = "Saray/Köşk/Akademi/Hazine Binası";
				t['8'] = "Birlik";
				t['9'] = "Sol menüde ek bağlantılar göster<br>(Traviantoolbox, World Analyser, Travilog, Map, benzeri.)";
				t['10'] = "Savaş simülatörü kullanımı:<br>(sol menü)";
				t['12'] = "'dorf1.php' ve 'dorf2.php' bağlantılarını göster";
				t['13'] = "\"Bu köyü haritada ortala\" simgesini göster";
				t['15'] = "Saatlik odun, tuğla, demir üretimini köy listesinde göster";
				t['16'] = "Köy listesinde net tahıl üretimini göster";
				t['17'] = "Köy listesinde nüfusu göster";
				t['18'] = "Kayan pencere olarak ek köy listesini göster (2 sütunlu)";
				t['19'] = "Köy listesinde asker hareketleri ve inşaat bilgilerini göster";
				t['20'] = "Yerimlerini göster";
				t['21'] = "'Kullanıcı Yerimleri'ni kayan pencere olarak göster";
				t['22'] = "Not defterini göster";
				t['23'] = "'Not Defteri'ni kayan pencere olarak göster";
				t['24'] = "Not defteri boyutu";
				t['25'] = "Not defteri yüksekliği";
				t['26'] = "NPC Asistanı hesaplayıcısını/bağlantılarını göster";
				t['27'] = "İstatistik sitesi kullanımı";
				t['28'] = "Bağlantılarda istatistik bağlantısını göster";
				t['29'] = "Kullanıcılacak harita analizi sitesi";
				t['30'] = "Oyuncular için harita bağlantısını göster";
				t['31'] = "Birlikler için harita bağlantısını göster";
				t['32'] = "'Arama Çubuğu'nu göster";
				t['33'] = "'Arama Çubuğu'nu kayan pencere olarak göster ";
				t['34'] = "Geliştirme tablosunda KP/gün bilgisini göster";
				t['35'] = "Geliştirme tablosunda tahıl tüketimini göster";
				t['37'] = "Kaynak alanlarını geliştirme tablosunu göster";
				t['38'] = "Kaynak düzeyleri renklerini göster";
				t['39'] = "'Hammadde Grafiği'ni göster";
				t['40'] = "'Hammadde Grafiği'ni kayan pencere olarak göster";
				t['41'] = "Binaların geliştirme tablosunu göster";
				t['42'] = "Geliştirme tablosunda binaları isme göre sırala";
				t['43'] = "Orta numaraları göster";
				t['44'] = "Bina düzeyleri renklerini göster";
				t['45'] = "Binalar için yükseltilen seviyeyi parlat";
				t['46'] = "Her pazarcı gelişi için ilave bilgi göster";
				t['47'] = "Son pazar naklini göster";
				t['48'] = "'Pazar Yeri=> Satın al' sayfasındayken<br>önyüklenen sayfa sayısı<br>(Varsayılan= 1 ya da Boş ; Maks = 5)";
				t['49'] = "Askeri üs varsayılan eylemi";
				t['50'] = "\"Casus seç\" işlevi için casus sayısı";
				t['53'] = "Araç ipuçları bölümünde asker bilgisini göster";
				t['54'] = "Araç ipuçlarında köye ulaşım süresini ve uzaklığı göster";
				t['56'] = "Haritada fare ile üzerine gelindiğinde<br>köy türünü göster/vadi bilgisini göster";
				t['57'] = "Mesafe ve süreyi göster";
				t['58'] = "Haritada oyuncu/köy/fethedilmiş vahalar tablosunu göster";
				t['59'] = "Önyüklenen Mesaj/Rapor sayfası sayısı<br>(Default = 1)";
				t['60'] = "Açılır pencerede mesaj/rapor açma bağlantısını göster";
				t['61'] = "Raporlar sayfasına \"Tümünü sil\" tablosu ekle";
				t['62'] = "\"IGM Gönder\" simgesini benim için de göster";
				t['63'] = "TB3 geliştirilmiş Savaş Raporlarını göster";
				t['64'] = "Rapor İstatistiklerinde detayları göster";
				t['65'] = "Geliştirme olanaklı rengi<br>(Varsayılan = Boş)";
				t['66'] = "En üst düzey rengi<br>(Varsayılan = Boş)";
				t['67'] = "Geliştirme olanaklı değil rengi<br>(Varsayılan = Boş)";
				t['68'] = "NPC üzerinden geliştirme rengi<br>(Varsayılan = Boş)";
				t['69'] = "Konsolun Kayıt Düzeyi<br>PROGRAMCILAR VE SORUN GİDERME İÇİN<br>(Varsayılan = 0)";
				t['82.L'] = "Yerimlerini kitle (Sil, yukarı taşı, aşağı taşı simgelerini gizler)";
				t['82.U'] = "Yerimleri kilidini aç (Sil, yukarı taşı, aşağı taşı simgelerini gösterir)";
				t['U.2'] = "Irk";
				t['U.3'] = "Merkez Köyün Adı<br>Değiştirmeyin,onun yerine Profilinizi ziyaret edin";
				t['U.6'] = "Merkez Köyün koordinatları<br>Değiştirmeyin,onun yerine Profilinizi ziyaret edin";
				t['SIM'] = "Savaş Simülatörü";
				t['QSURE'] = "Emin misiniz?";
				t['LOSS'] = "Kayıp";
				t['PROFIT'] = "Kazanç";
				t['EXTAV'] = "Geliştirilebilir";
				t['PLAYER'] = "Oyuncu";
				t['VILLAGE'] = "Köy";
				t['POPULATION'] = "Nüfus";
				t['COORDS'] = "Koordinatlar";
				t['MAPTBACTS'] = "Eylemler";
				t['SAVED'] = "Kaydedildi";
				t['YOUNEED'] = "İhtiyacınız olan";
				t['TODAY'] = "bugün";
				t['TOMORROW'] = "yarın";
				t['DAYAFTERTOM'] = "ertesi gün";
				t['BN_GID12'] = "Silah dökümhanesi";
				t['BN_GID13'] = "Zırh dökümhanesi";
				t['BN_GID16'] = "Askeri üs";
				t['BN_GID17'] = "Pazar yeri";
				t['BN_GID19'] = "Kışla";
				t['BN_GID20'] = "Ahır";
				t['BN_GID21'] = "Tamirhane";
				t['BN_GID22'] = "Akademi";
				t['BN_GID24'] = "Belediye";
				t['BN_GID25'] = "Köşk";
				t['BN_GID26'] = "Saray";
				t['BN_GID27'] = "Hazine Binası";
				t['BN_GID37'] = "Kahraman kışlası";
				t['SENDRES'] = "Hammdde gönder";
				t['BUY'] = "Satın al";
				t['SELL'] = "Sat";
				t['SENDIGM'] = "Genel mesaj gönder";
				t['LISTO'] = "Mümkün";
				t['ON'] = "";
				t['AT'] = "";
				t['EFICIENCIA'] = "Verimlilik";
				t['NEVER'] = "Hiç bir zaman";
				t['ALDEAS'] = "Köy(ler)";
				t['TIEMPO'] = "Süre";
				t['OFREZCO'] = "Önerilen";
				t['BUSCO'] = "İstenilen";
				t['TIPO'] = "Oran";
				t['DISPONIBLE'] = "Sadece olanaklı olanlar";
				t['CUALQUIERA'] = "Hiçbiri";
				t['YES'] = "Evet";
				t['NO'] = "Hayır";
				t['LOGIN'] = "Giriş";
				t['MARCADORES'] = "Yerimleri";
				t['ANYADIR'] = "Ekle";
				t['UBU'] = "Yeni yerimi adresi";
				t['UBT'] = "Yeni yerimi yazısı";
				t['DEL'] = "Sil";
				t['MAPA'] = "Harita";
				t['MAXTIME'] = "En fazla süre";
				t['ARCHIVE'] = "Arşiv";
				t['SUMMARY'] = "Özet";
				t['TROPAS'] = "Destekler";
				t['CHKSCRV'] = "TBeyond u güncelle";
				t['ACTUALIZAR'] = "Köy bilgisini güncelle";
				t['VENTAS'] = "Kayıtlı Teklifler";
				t['MAPSCAN'] = "Haritayı Tara";
				t['BIC'] = "Ek simgeleri göster";
				t['SAVE'] = "Kaydet";
				t['AT2'] = "Destek";
				t['AT3'] = "Saldırı: Normal";
				t['AT4'] = "Saldırı: Yağma";
				t['NBSA'] = "Oto";
				t['NBSN'] = "Normal (küçük)";
				t['NBSB'] = "geniş ekran (büyük)";
				t['NBHAX'] = "Yüksekliği otomatik genişlet";
				t['NBHK'] = "Varsayılan yükseklik";
				t['NPCSAVETIME'] = "Kazanılan zaman: ";
				t['TOTALTROOPS'] = "Köydeki toplam asker";
				t['SELECTALLTROOPS'] = "Tüm askerleri seç";
				t['PARTY'] = "Festivaller";
				t['CPPERDAY'] = "KP/gün";
				t['SLOT'] = "Boşluk";
				t['TOTAL'] = "Toplam";
				t['SELECTSCOUT'] = "Casus seç";
				t['SELECTFAKE'] = "Sahte saldırı seç";
				t['ALL'] = "Tümü";
				t['SH2'] = "renk alanına şunları girebilirsiniz:<br>- green ya da red ya da orange, vb.<br>- HEX renk kodları, örneğin #004523<br>- varsayılan renkler için boş bırakın";
				t['SOREP'] = "Özgün raporu göster (foruma aktarmak için)";
				t['WSIMO1'] = "Oyunun kendi hesaplayıcısı (oyun tarafından sağlanan)";
				t['WSIMO2'] = "Harici (kirilloid.ru tarafından sağlanan)";
				t['NONEWVER'] = "Son sürüme sahipsiniz";
				t['BVER'] = "Beta sürümüne sahip olabilirsiniz";
				t['NVERAV'] = "Betiğin(script) yeni sürümü var";
				t['UPDSCR'] = "Betik şimdi güncellensin mi ?";
				t['CHECKUPDATE'] = "Betik güncellemesi denetleniyor.<br>Lütfen bekleyin...";
				t['AVPPV'] = "Köy başına ortalama nüfus";
				t['AVPPP'] = "Oyuncu başına ortalama  nüfus";
				t['MAX'] = "En fazla";
				t['TOTTRTR'] = "Eğitimdeki asker sayısı";
				t['TB3SL'] = "$1 Ayarları";
				t['UPDALLV'] = "Tüm köyleri güncelle. DİKKATLİ KULLANIN, HESABINIZ CEZA ALABİLİR!";
				t['LARGEMAP'] = "Büyük harita";
				t['USETHEMPR'] = "Bunları kullan (oransal)";
				t['USETHEMEQ'] = "Bunları kullan (eş miktarda)";
				t['GSRVT'] = "Oyun sunucusu";
				t['ACCINFO'] = "Hesap Bilgisi";
				t['NBO'] = "Not defteri";
				t['MNUL'] = "Soldaki menü";
				t['STAT'] = "İstatistikler";
				t['RESF'] = "Hammadde alanları";
				t['VLC'] = "Köy merkezi";
				t['MAPO'] = "Harita ayarları";
				t['COLO'] = "Renk seçenekleri";
				t['DBGO'] = "Sorun giderme seçenekleri";
				t['NOW'] = "Şimdi";
				t['CLOSE'] = "Kapat";
				t['USETHEM1H'] = "Bunları Kullan (1 saatlik üretim)";
				t['OVERVIEW'] = "Genel bakış";
				t['FORUM'] = "Forum";
				t['ATTACKS'] = "Saldırılar";
				t['NEWS'] = "Haberler";
				t['ADDCRTPAGE'] = "Bu sayfayı yerimine ekle";
				t['SCRPURL'] = "TBeyond sayfası";
				t['SPACER'] = "Ayırıcı";
				t['MEREO'] = "Mesajlar & Raporlar";
				t['ATTABLES'] = "Asker tablosu";
				t['MTW'] = "Artan";
				t['MTX'] = "Aşan";
				t['MTC'] = "Güncel yük";
				t['ALFL'] = "Harici forumun adresi<br>(Dahili forum için boş bırakın)";
				t['MTCL'] = "Tümünü temizle";
				t['CKSORT'] = "Sıralamak için tıklayın";
				t['MIN'] = "En az";
				t['SVGL'] = "Köyler arasında paylaştır";
				t['VGL'] = "Köy Listesi";
				t['UPDATEPOP'] = "Nüfusu güncelle";
				t['EDIT'] = "Düzenle";
				t['NPCO'] = "NPC Asistanı ayarları";
				t['NEWVILLAGEAV'] = "Tarih/Zaman";
				t['TIMEUNTIL'] = "Bekleme süresi";
				t['CENTERMAP'] = "Bu köyü haritada ortala";
				t['SENDTROOPS'] = "Asker gönder";
				t['UPGTB'] = "Hammadde alanlarını ve binaları geliştirme tablosu";
				t['RBTT'] = "Hammadde Grafiği";
				t['USE'] = "Kullan";
				t['RESIDUE'] = "İnşa edilmesi halinde kalan";
				t['RESOURCES'] = "Kaynaklar";
				t['CROPFINDER'] = "Tarla bulucu";
				t['VGL2'] = "Köy Listesi";
				t['112'] = "Mesafe ve süreyi göster";
				t['114'] = "KP/gün";
				break;
			case 'ua':
				t['1'] = "Сервер Travian 2.x версії";
				t['4'] = "Ринок";
				t['5'] = "Пункт збору/Казарма/Майстерня/Стайня";
				t['6'] = "Ратуша/Таверна/Кузня обладунків/Кузня зброї";
				t['7'] = "Палац/Резиденція/Академія/Скарбниця";
				t['8'] = "Альянс";
				t['9'] = "Показувати додаткові посилання в лівому меню<br>(Traviantoolbox, World Analyser, Travilog, Map і т.д.)";
				t['10'] = "Використовувати симулятор бою:<br>(ліве меню)";
				t['12'] = "Показувати посилання на 'dorf1.php' и 'dorf2.php'";
				t['13'] = "Показувати іконку \"Центрувати поселення на карті\"";
				t['16'] = "Показувати прибуток зерна у списку поселень";
				t['17'] = "Показувати населення в списку поселень";
				t['18'] = "Показати додатковий (2 колонки) список поселень у плаваючому вікні";
				t['19'] = "Показувати інформацію про будівлі, що розвиваються в даний час і війська, які зараз у поході в списку поселень";
				t['20'] = "Показувати закладки";
				t['21'] = "Показувати \"Закладки\" в плаваючому вікні";
				t['22'] = "Показувати поле заміток";
				t['23'] = "Показувати \"Замітки\" в плаваючому вікні";
				t['24'] = "Розмір поля заміток";
				t['25'] = "Висота поля заміток";
				t['26'] = "Показувати розрахунки NPC-асистента/ посилання";
				t['27'] = "Який аналізатор світу використовувати?";
				t['28'] = "Показувати посилання на статистику аналізатора";
				t['29'] = "Використати аналізатор карти";
				t['30'] = "Показувати посилання на карту для користувачів";
				t['31'] = "Показувати посилання до карти для альянсів";
				t['32'] = "Показати \"Пошук\"";
				t['33'] = "Показувати \"Пошук\" в плаваючому вікні";
				t['34'] = "Показувати одиниці культури/день в таблиці модернізації";
				t['35'] = "Показувати споживання зерна у таблиці модернізації";
				t['36'] = "Показувати \"До тих пір/Залишок\" підрахунок в таблицях модернізації";
				t['37'] = "Показувати таблицю розвитку ресурсних полів";
				t['38'] = "Показувати рівні ресурсних полів кольорами";
				t['39'] = "Показувати таблицю \"Ресурси\"";
				t['40'] = "Показувати таблицю \"Ресурси\" у плаваючому вікні";
				t['41'] = "Показувати таблицю развитку споруд";
				t['42'] = "Сортувати за назвою будівлі у таблиці модернізації";
				t['43'] = "Показувати рівні споруд в центрі";
				t['44'] = "Показувати рівні споруд кольорами";
				t['45'] = "Блимання рівня споруди, що будується";
				t['48'] = "Кількість сторінок, які відображатимуться в розділі<br>'Ринок => Купівля' сторінок<br>(за замовчуванням =1)";
				t['49'] = "Дії пункту збору за замовчуванням:";
				t['50'] = "Кількість розвідників для функції \"Розвідка\"";
				t['53'] = "Показувати інформацію про війска в підказках";
				t['54'] = "Показувати відстань і час до поселення у підказках";
				t['56'] = "Показувати тип клітинки <br>під час пересування мишки над картою ";
				t['57'] = "Показувати відстань і час";
				t['58'] = "Показати таблицю гравців / поселень / захоплених оазисів";
				t['59'] = "Кількість сторінок для перезавантаження <br>(за замовчуванням = 1)";
				t['60'] = "Показувати посилання для відкриття в новому вікні";
				t['61'] = "Показувати \"Видалити всі\" на сторінці звітів";
				t['62'] = "Для мене також показувати іконку \"Відправити повідомлення\"";
				t['63'] = "Показувати розширені звіти боїв (TB3)";
				t['64'] = "Показувати подробиці в статистиці звітів";
				t['65'] = "Колір, коли доступний розвиток<br>(за замовчуванням = порожнє)";
				t['66'] = "Колір максимального рівня<br>(за замовчуванням = порожнє)";
				t['67'] = "Колір, коли розвиток не доступний<br>(за замовчуванням = порожнє)";
				t['68'] = "Колір, коли доступний розвиток за допомогою NPC-асистента<br>(за замовчуванням = порожнє)";
				t['69'] = "Console Log Level<br>ТІЛЬКИ ДЛЯ ПРОГРАМІСТІВ ЧИ ВІДЛАДЧИКІВ<br>(за замовчуванням = 0)";
				t['82.L'] = "Заблокувати закладки (Приховати видалити, рухати вверх, рухати вниз іконки)";
				t['82.U'] = "Розблокувати закладки (Приховати видалити, рухати вверх, рухати вниз іконки)";
				t['U.2'] = "Раса";
				t['U.3'] = "Назва твоєї столиці<br>Відвідай свій профіль для обновлення";
				t['U.6'] = "Координати твоєї столиці<br>Відвідай свій профіль для обновлення";
				t['SIM'] = "Симулятор бою";
				t['QSURE'] = "Ви впевнені?";
				t['LOSS'] = "Втрати";
				t['PROFIT'] = "Прибуток";
				t['EXTAV'] = "Розвиток доступний";
				t['PLAYER'] = "Гравець";
				t['VILLAGE'] = "Поселення";
				t['POPULATION'] = "Населення";
				t['COORDS'] = "Координати";
				t['MAPTBACTS'] = "Дії";
				t['SAVED'] = "Збережено";
				t['YOUNEED'] = "Не вистачає";
				t['TODAY'] = "сьогодні";
				t['TOMORROW'] = "завтра";
				t['DAYAFTERTOM'] = "післязавтра";
				t['BN_GID12'] = "Кузня зброї";
				t['BN_GID13'] = "Кузня обладунків";
				t['BN_GID16'] = "Пункт збору";
				t['BN_GID17'] = "Ринок";
				t['BN_GID19'] = "Казарма";
				t['BN_GID20'] = "Стайня";
				t['BN_GID21'] = "Майстерня";
				t['BN_GID22'] = "Академія";
				t['BN_GID24'] = "Ратуша";
				t['BN_GID27'] = "Скарбниця";
				t['BN_GID37'] = "Таверна";
				t['BUY'] = "Купити";
				t['SELL'] = "Продати";
				t['SENDIGM'] = "Відправити повідомлення";
				t['LISTO'] = "Доступний";
				t['ON'] = "на";
				t['AT'] = "о";
				t['EFICIENCIA'] = "Ефективність";
				t['NEVER'] = "Ніколи";
				t['ALDEAS'] = "Поселення";
				t['TIEMPO'] = "Час";
				t['OFREZCO'] = "Продаж";
				t['BUSCO'] = "Купівля";
				t['TIPO'] = "Співвідношення";
				t['DISPONIBLE'] = "Лише доступні";
				t['CUALQUIERA'] = "Всі";
				t['YES'] = "Так";
				t['NO'] = "Ні";
				t['LOGIN'] = "Логін";
				t['MARCADORES'] = "Закладки";
				t['ANYADIR'] = "Додати";
				t['UBU'] = "Додати адресу (http://***) в закладки";
				t['UBT'] = "Назва закладки";
				t['DEL'] = "Видалити";
				t['MAPA'] = "Карта";
				t['MAXTIME'] = "Максимальний час";
				t['ARCHIVE'] = "Архів";
				t['SUMMARY'] = "Сумарно";
				t['TROPAS'] = "Відправити  військо";
				t['CHKSCRV'] = "Оновити TBeyond";
				t['ACTUALIZAR'] = "Оновити інформацію про поселення";
				t['VENTAS'] = "Збережені пропозиції";
				t['MAPSCAN'] = "Сканувати карту";
				t['BIC'] = "Відображення іконок";
				t['SAVE'] = "Зберегти";
				t['AT2'] = "Підкріплення";
				t['AT3'] = "Напад: звичайний";
				t['AT4'] = "Напад: розбійницький набіг";
				t['NBSA'] = "Автоматично";
				t['NBSN'] = "Нормальний (маленький)";
				t['NBSB'] = "Великий екран (великий)";
				t['NBHAX'] = "Автоматичне збільшення висоти";
				t['NBHK'] = "Висота за замовчуванням";
				t['NPCSAVETIME'] = "Час: ";
				t['TOTALTROOPS'] = "Власні війська в поселенні";
				t['SELECTALLTROOPS'] = "Вибрати все військо";
				t['PARTY'] = "Свята";
				t['CPPERDAY'] = "Од.культ./день";
				t['SLOT'] = "Комірка";
				t['TOTAL'] = "Загалом";
				t['SELECTSCOUT'] = "Відправити розвідника";
				t['SELECTFAKE'] = "Відправити спам";
				t['ALL'] = "Всі";
				t['SH2'] = "В полях введення кольорів можна ввести:<br>- green(зелений) чи red(червоний) чи  orange(оранжевий), і т.д.<br>- HEX-код кольору #004523<br>- залишити порожнім для значення за замовчуванням";
				t['SOREP'] = "Прибрати опис(для відправлення)";
				t['WSIMO1'] = "Внутрішній (travian.com.ua)";
				t['WSIMO2'] = "Зовнішній (kirilloid.ru)";
				t['NONEWVER'] = "В тебе остання версія";
				t['BVER'] = "Ви можете мати бета-версію";
				t['NVERAV'] = "Доступна нова версія скрипта";
				t['UPDSCR'] = "Ви хочече обновити скрипт зараз?";
				t['CHECKUPDATE'] = "Пошук обновлень скрипта.<br>Будь ласка, зачекайте...";
				t['AVPPV'] = "Середня кількість населення на поселення";
				t['AVPPP'] = "Середня кількість населення на гравця";
				t['MAX'] = "Максимум";
				t['TOTTRTR'] = "Загальна кількість військ для навчання";
				t['TB3SL'] = "Налаштування $1";
				t['UPDALLV'] = "Оновити всі поселення";
				t['LARGEMAP'] = "Велика карта";
				t['USETHEMPR'] = "Використовувати (пропорційно). ";
				t['USETHEMEQ'] = "Використовувати (рівномірно).";
				t['GSRVT'] = "Ігровий сервер";
				t['ACCINFO'] = "Інформація про акаунт";
				t['NBO'] = "Поле заміток";
				t['MNUL'] = "Меню з лівого боку";
				t['STAT'] = "Статистика";
				t['RESF'] = "Ресурсні поля";
				t['VLC'] = "Центр поселення";
				t['MAPO'] = "Налаштування карти";
				t['COLO'] = "Опції кольорів";
				t['DBGO'] = "Опції відладки";
				t['NOW'] = "Вже";
				t['CLOSE'] = "Закрити";
				t['USETHEM1H'] = "Використовувати (годинний видобуток).";
				t['OVERVIEW'] = "Огляд";
				t['FORUM'] = "Форум";
				t['ATTACKS'] = "Напади";
				t['NEWS'] = "Новини";
				t['ADDCRTPAGE'] = "Додати поточну";
				t['SCRPURL'] = "Сторінка TBeyond";
				t['SPACER'] = "Spacer";
				t['MEREO'] = "Повідомлення і Звіти";
				t['ATTABLES'] = "Таблиці військ";
				t['MTW'] = "Марнування";
				t['MTX'] = "Перевищення";
				t['MTC'] = "Завантажено";
				t['ALFL'] = "Посилання на зновнішній форум<br>(Залишити порожнім для внутрішнього форуму)";
				t['MTCL'] = "Очистити все";
				t['CKSORT'] = "Сортування";
				t['MIN'] = "Мінімум";
				t['SVGL'] = "Розподілити між поселеннями";
				t['VGL'] = "Список поселень";
				t['UPDATEPOP'] = "Оновити населення";
				t['EDIT'] = "Редагувати";
				t['NPCO'] = "Опції NPC-асистента";
				t['NEWVILLAGEAV'] = "Дата/Час";
				t['TIMEUNTIL'] = "Час очікування";
				t['CENTERMAP'] = "Центрувати карту на цьому поселенні";
				t['SENDTROOPS'] = "Відправлення війск";
				t['UPGTB'] = "Можливості полів/будівель в таблицях модернізації";
				t['RBTT'] = "Таблиця \"Ресурси\"";
				t['USE'] = "Використати";
				t['RESIDUE'] = "Залишок після розвитку ";
				t['RESOURCES'] = "Ресурси";
				t['CROPFINDER'] = "Пошук зерна";
				t['VGL2'] = "Список поселень";
				t['112'] = "Показувати відстань і час";
				t['114'] = "Од.культ./день";
				break;
			case 'vn':
				t['1'] = "Travian v2.x server";
				t['2'] = "Hủy bỏ quảng cáo biểu ngữ";
				t['3'] = "Force T3.1 Legionnaire & Phalanx capacity calculation<br>(for mixed T3.1 & T3.5 servers)";
				t['4'] = "Chợ";
				t['5'] = "Binh trường/Doanh trại/Xưởng/Chuồng ngựa";
				t['6'] = "Tòa thị chính/Lâu đài tướng/Lò luyện giáp/Lò rèn";
				t['7'] = "Cung điện/Dinh thự/Học viện/Kho bạc";
				t['8'] = "Liên minh";
				t['9'] = "Hiện thị các liên kết mở rộng bên menu trái<br>(Traviantoolbox, World Analyser, Travilog, Map, etc.)";
				t['10'] = "Liên kết trận giả để sử dụng:";
				t['11'] = "Liên kết để sử dụng cho các trang web đăng tải các báo cáo";
				t['12'] = "Hiện các liên kết 'dorf1.php' and 'dorf2.php'";
				t['13'] = "Hiện thị biểu tưởng \"Trung tâm bản đồ\"";
				t['15'] = "Hiển thị gỗ, đất sét, sắt sản xuất cho mỗi giờ trong danh sách làng";
				t['16'] = "Hiện thị sản lượng thực sự trong danh sách làng";
				t['17'] = "Hiện thị dân số trong danh sách làng";
				t['18'] = "Hiện thị thêm danh sách  làng (2 cột) như là cửa sổ di chuyển được";
				t['19'] = "Hiện thị thông tin về tiến độ xây dựng kiến trúc và di chuyển lính ở danh sách làng";
				t['20'] = "Hiện thị bookmarks";
				t['21'] = "Hiện thị 'User Bookmarks' như là cửa sổ di chuyển được";
				t['22'] = "Hiện bảng ghi chú";
				t['23'] = "Hiện thị 'Bảng ghi chú' như là cửa sổ di chuyển được";
				t['24'] = "Kích thước bảng ghi chú";
				t['25'] = "Chiều cao bảng ghi chú";
				t['26'] = "Hiện thị các liên kết/tính toán NPC trợ giúp";
				t['27'] = "Sử dụng bộ phân tích thế giới";
				t['28'] = "Hiện thị liên kết thông kê bộ phân tích";
				t['29'] = "Bộ phân tích bản đồ để sử dụng";
				t['30'] = "Hiện thị các liên kết tới bản đồ cho các user";
				t['31'] = "Hiện thị các liên kết tới bản đồ cho các liên minh";
				t['32'] = "Hiện thị 'Thanh tìm kiếm'";
				t['33'] = "Hiện thị 'Thanh tìm kiếm' như là cửa sổ di chuyển được";
				t['34'] = "Hiện thị thông tin CP/ngày trong bảng nâng cấp";
				t['35'] = "Hiện thị tiêu thụ trong bảng nâng cấp";
				t['36'] = "Hiện thị tính toán 'Đến khi/Còn lại' trong bảng nâng cấp/huấn luyện";
				t['37'] = "Hiện thị bảng nâng cấp tài nguyên";
				t['38'] = "Hiện thị màu cấp của tài nguyên";
				t['39'] = "Hiện thị bảng 'Tóm tắt tài nguyên'";
				t['40'] = "Hiện thị bảng 'Tóm tắt tài nguyên' như là cửa sổ có thể di chuyển được";
				t['41'] = "Hiện thị bảng nâng cấp kiến trúc";
				t['42'] = "Sắp xếp kiến trúc theo tên trong bảng nâng cấp";
				t['43'] = "Hiện thị số ở giữa";
				t['44'] = "Hiện thị màu cấp của kiến trúc";
				t['45'] = "Hiện thị nhấp nháy cấp độ kiến trúc đang được nâng cấp";
				t['46'] = "Hiển thị thông tin bổ sung cho tất cả các thương gia đến";
				t['48'] = "Số lượng trang được tải đặt trước<br>trong khi giao dịch trên trang 'Chợ => Mua'<br>(Mặc định = 1)";
				t['49'] = "Hoạt động mặc định của binh trường";
				t['50'] = "Số lượng trinh sát sử dụng cho chức năng \"Lựa chọn trinh sát\"";
				t['53'] = "Hiện thị thông tinh lính trong tooltips";
				t['54'] = "Hiện thị khoảng cách và thời gian tới làng trong tooltips";
				t['56'] = "Hiện thị ô thông tin loại/ốc đảo<br>khi di chuột qua bản đồ";
				t['57'] = "Hiện thị khoảng cách và thời gian";
				t['58'] = "Hiện thị bảng người chơi/làng/ốc đảo đầy";
				t['59'] = "Số tin nhắn/trang báo cáo để tải trước<br>(Default = 1)";
				t['60'] = "Hiện thị liên kết để mở tin nhắn/báo cáo trong cửa sổ pop-up";
				t['61'] = "Hiện thị bảng \"Xóa tất cả\" trên trang Báo cáo";
				t['62'] = "Cũng hiện thị biểu tưởng \"Gửi IGM\"";
				t['63'] = "Hiện thị Báo cáo trận đánh tăng cường TB3";
				t['64'] = "Hiện thị chi tiết trong Thống kê";
				t['65'] = "Màu nâng cấp<br>(Mặc định = Rỗng)";
				t['66'] = "Màu cấp lớn nhất<br>(Mặc định = Rỗng)";
				t['67'] = "Màu nâng cấp chưa khi chưa đủ<br>(Mặc định = Rỗng)";
				t['68'] = "Màu nâng cấp bằng NPC<br>(Mặc định = Rỗng)";
				t['69'] = "Console Log Level<br>ONLY FOR PROGRAMMERS OR DEBUGGING<br>(Default = 0)";
				t['82.L'] = "Khóa bookmarks (Ẩn các biểu tưởng xóa, di chuyển lên, di chuyển xuống)";
				t['82.U'] = "Mở khóa bookmarks (Hiện các biểu tưởng xóa, di chuyển lên, di chuyển xuống)";
				t['U.2'] = "Chủng tộc";
				t['U.3'] = "Tên thủ đô<br><b>Xem Profile cho cập nhật</b>";
				t['U.6'] = "Tọa độ thủ đô<br><b>Xem Profile cho cập nhật</b>";
				t['SIM'] = "Trận giả";
				t['QSURE'] = "Bạn có chắc chắn không?";
				t['LOSS'] = "Thất bại";
				t['PROFIT'] = "Tiền lãi";
				t['EXTAV'] = "Mở rộng";
				t['PLAYER'] = "Người chơi";
				t['VILLAGE'] = "Làng";
				t['POPULATION'] = "Dân số";
				t['COORDS'] = "Tọa độ";
				t['MAPTBACTS'] = "Công việc";
				t['SAVED'] = "Đã ghi";
				t['YOUNEED'] = "Bạn cần";
				t['TODAY'] = "hôm nay";
				t['TOMORROW'] = "ngày mai";
				t['DAYAFTERTOM'] = "ngày kia";
				t['BN_GID12'] = "Lò rèn";
				t['BN_GID13'] = "Lò luyện giáp";
				t['BN_GID16'] = "Gửi lính";
				t['BN_GID17'] = "Chợ";
				t['BN_GID19'] = "Doanh trại";
				t['BN_GID20'] = "Chuồng ngựa";
				t['BN_GID21'] = "Xưởng";
				t['BN_GID22'] = "Học viện";
				t['BN_GID24'] = "Tòa thị chính";
				t['BN_GID25'] = "Dinh thự";
				t['BN_GID26'] = "Cung điện";
				t['BN_GID27'] = "Kho bạc";
				t['BN_GID37'] = "Lâu đài tướng";
				t['SENDRES'] = "Gửi tài nguyên";
				t['SELL'] = "Bán";
				t['SENDIGM'] = "Gửi IGM";
				t['LISTO'] = "Có sẵn";
				t['ON'] = "bật";
				t['AT'] = "lúc";
				t['EFICIENCIA'] = "Efficiency";
				t['NEVER'] = "Never";
				t['ALDEAS'] = "Làng";
				t['TIEMPO'] = "Thời gian";
				t['OFREZCO'] = "Tặng";
				t['BUSCO'] = "Tìm kiếm";
				t['TIPO'] = "Loại";
				t['DISPONIBLE'] = "Chỉ có sẵn";
				t['CUALQUIERA'] = "Bất kỳ";
				t['YES'] = "Có";
				t['NO'] = "Không";
				t['LOGIN'] = "Login";
				t['MARCADORES'] = "Bookmarks";
				t['ANYADIR'] = "Thêm";
				t['UBU'] = "New Bookmark URL";
				t['UBT'] = "New Bookmark Text";
				t['DEL'] = "Xóa";
				t['MAPA'] = "Bản đồ";
				t['MAXTIME'] = "Thời gian tối đa";
				t['ARCHIVE'] = "Lưu trữ";
				t['SUMMARY'] = "Tóm tắt";
				t['TROPAS'] = "Lính";
				t['CHKSCRV'] = "Cập nhật TBeyond";
				t['ACTUALIZAR'] = "Cập  nhật thông tin làng";
				t['VENTAS'] = "Đề nghị đã lưu";
				t['MAPSCAN'] = "Tìm bản đồ";
				t['BIC'] = "Hiện thị các biểu tượng mở rộng";
				t['SAVE'] = "Ghi";
				t['AT2'] = "Tiếp viện";
				t['AT3'] = "Tấn công: Bình thường";
				t['AT4'] = "Tấn công: Cướp bóc";
				t['NBSA'] = "Tự động";
				t['NBSN'] = "Bình thường (nhỏ)";
				t['NBSB'] = "Màn hình lớn (lớn)";
				t['NBHAX'] = "Chiều cao mở rộng tự động";
				t['NBHK'] = "Chiều cao mặc định";
				t['NPCSAVETIME'] = "Ghi: ";
				t['TOTALTROOPS'] = "Tổng lính trong làng";
				t['SELECTALLTROOPS'] = "Chọn tất cả lính";
				t['PARTY'] = "Lễ";
				t['CPPERDAY'] = "CP/ngày";
				t['SLOT'] = "Vị trí";
				t['TOTAL'] = "Tổng";
				t['SELECTSCOUT'] = "Lựa chọn trinh thám";
				t['SELECTFAKE'] = "Lựa chọn giả";
				t['ALL'] = "Tất cả";
				t['SH2'] = "Trong các trường màu, bạn có thể chọn:<br>- <b>xanh lá cây</b> or <b>đỏ</b> or  <b>da cam</b>, etc.<br>- mã HEX giống như <b>#004523</b><br>- leave empty for the default color";
				t['SOREP'] = "Hiện thị báo cáo gốc (cho thông báo)";
				t['WSIMO1'] = "Nội địa (do game cung cấp)";
				t['WSIMO2'] = "Bên ngoài (do kirilloid.ru cung cấp)";
				t['NONEWVER'] = "Phiên bản mới đã có";
				t['BVER'] = "Bạn có thể sử dụng bảng beta";
				t['NVERAV'] = "Phiên bản mới của script đã có";
				t['UPDSCR'] = "Bạn có muốn cập nhật phiên bản mới không ?";
				t['CHECKUPDATE'] = "Đang kiểm tra phiên bản mới.<br>Xin chờ...";
				t['AVPPV'] = "Bình quân dân số trên một làng";
				t['AVPPP'] = "Bình quân dân số trên một người chơi";
				t['MAX'] = "Lớn nhất";
				t['TOTTRTR'] = "Tổng lính đang huấn luyện";
				t['TB3SL'] = "$1 Cài đặt";
				t['UPDALLV'] = "Cập nhật tất cả các làng.  USE WITH MAXIMUM CARE AS THIS CAN LEAD TO A BANNED ACCOUNT !";
				t['LARGEMAP'] = "Bản đồ lớn";
				t['USETHEMPR'] = "Sử dụng chúng (tỷ lệ)";
				t['USETHEMEQ'] = "Sử dụng (bằng)";
				t['GSRVT'] = "Game server";
				t['ACCINFO'] = "Thông tin tài khoản";
				t['NBO'] = "Bảng ghi chú";
				t['MNUL'] = "Menu hiện thị bên trái";
				t['STAT'] = "Thống kê";
				t['RESF'] = "Ruộng tài nguyên";
				t['VLC'] = "Trung tâm làng";
				t['MAPO'] = "Tùy chỉnh bản đồ";
				t['COLO'] = "Tùy chỉnh màu";
				t['DBGO'] = "Debug options";
				t['NOW'] = "Bây giờ";
				t['CLOSE'] = "Đóng";
				t['USETHEM1H'] = "Sử dụng (1 giờ sản lượng)";
				t['OVERVIEW'] = "Tổng quát";
				t['FORUM'] = "Diễn đàn";
				t['ATTACKS'] = "Tấn công";
				t['NEWS'] = "Tin tức";
				t['ADDCRTPAGE'] = "Thêm trang đang xem vào bookmarks";
				t['SCRPURL'] = "TBeyond trang";
				t['SPACER'] = "Dấu cách";
				t['MEREO'] = "Tin nhắn & Báo cáo";
				t['ATTABLES'] = "Các bảng lính";
				t['MTW'] = "Wasted";
				t['MTX'] = "Exceeding";
				t['MTC'] = "Tải hiện tại";
				t['ALFL'] = "Liên kết tới diễn đàn ngoài<br>(Để trống là mặc định diễn đàn của game)";
				t['MTCL'] = "Xóa tất cả";
				t['CKSORT'] = "Click để sắp xếp";
				t['MIN'] = "Ít nhất";
				t['SVGL'] = "Chia sẽ các làng ở giữa";
				t['VGL'] = "Danh sách làng";
				t['UPDATEPOP'] = "Cập nhật dân số";
				t['EDIT'] = "Sửa";
				t['NPCO'] = "Tùy chỉnh NPC trợ giúp";
				t['NEWVILLAGEAV'] = "Ngày/Thời gian";
				t['TIMEUNTIL'] = "Thời gian chờ";
				t['CENTERMAP'] = "Trung tâm bản đồ";
				t['SENDTROOPS'] = "Gửi lính";
				t['UPGTB'] = "Bảng nâng cấp Ruộng tài nguyên/kiến trúc";
				t['RBTT'] = "Tóm tắt tài nguyên";
				t['USE'] = "Sử dụng";
				t['RESIDUE'] = "Còn lại nếu bạn xây dựng kiến trúc này";
				t['RESOURCES'] = "Tài nguyên";
				t['SH1'] = "Mở profile của bạn để tự động phát hiện thủ đô/tọa độ<br>Xây dựng doanh trại để tự động phát hiện chủng tộc và sau đó mở trung tâm làng";
				t['CROPFINDER'] = "Crop finder";
				t['VGL2'] = "Danh sách làng";
				t['112'] = "Hiện thị khoảng cách và thời gian";
				t['114'] = "CP/ngày";
				break;
			}
		}
	}
	function repairLanguage() {
		if (!t['80']) {
			t['80'] = t['53'];
		}
		if (!t['81']) {
			t['81'] = t['54'];
		}
		if (!t['86']) {
			t['86'] = t['28'] + " &<br>" + t['30'];
		}
		delete t['BN_GID13'];
	}
	function dummy() {
		return;
	};
	function getRndTime(maxrange) {
		return Math.floor(maxrange * (0.6 + 0.4 * Math.random()));
	};
	function basename(path) {
		return path.replace(/.*\//, "");
	};
	function arrayByN(a, n) {
		var b = cloneArray(a);
		for (var i in b) {
			b[i] *= n;
		};
		return b;
	};
	function arrayAdd(a, b) {
		if (!a)
			return cloneArray(b);
		if (!b)
			return cloneArray(a);
		var c = new Array();
		for (var i = 0; i < Math.max(a.length, b.length); c[i] = a[i] + b[i++]);
		return c;
	};
	function dF(s) {
		var s1 = unescape(s.substr(0, s.length - 1));
		var ts = '';
		for (i = 0; i < s1.length; i++)
			ts += String.fromCharCode(s1.charCodeAt(i) - s.substr(s.length - 1, 1));
		return ts;
	};
	function arrayToInt(arr) {
		var h = 0;
		for (var i in arr) {
			h += arr[i];
		};
		return h;
	};
	function $ls(aX) {
		return aX.toLocaleString();
	};
	function getNewdidFromLink(aLink) {
		aLink.search(/\?newdid=(\d+)/);
		return RegExp.$1;
	};
	function setOfferFilter(aOffer, aFilter) {
		$at(aOffer, [['style', 'display:none;'], ["filtro" + aFilter, "on"]]);
	};
	function isPostNPC() {
		return $xf('//p/following-sibling::*/img[starts-with(@class,"r")] | //p[@class="txt_menue"]/following-sibling::*/img[starts-with(@class,"r")] | //p[@class="txt_menue"]/following-sibling::*/img[@class="res"]', 'r').snapshotLength == 8;
	};
	function toJSvoid() {
		aX = $xf("//a[@href='#']", 'l');
		for (var i = 0; i < aX.snapshotLength; i++)
			aX.snapshotItem(i).href = jsVoid;
	};
	function insertNPCHistoryLink() {
		var bname = getQueryParameters(urlNow, NPCbacklinkName);
		if (!bname)
			bname = "Go back";
		var div = $g(ID_MID2);
		div.innerHTML += '<p>&nbsp;<a href="#" onclick="window.history.go(-2)"> &laquo; ' + bname + '</a></p>';
	};
	function pauseScript(ms) {
		var ms1 = getRndTime(ms);
		var aDate = new Date();
		var crtDate = new Date();
		do {
			crtDate = new Date();
		} while (crtDate - aDate < ms1);
	};
	function getLanguageAndPlusStatus() {
		var iP = $g("logo");
		var ahref;
		if (iP) {
			if (iP.nodeName == "A") {
				if (iP.firstChild && iP.firstChild.className == "logo_plus")
					TB3O.plAc = true;
				ahref = iP.getAttribute('href');
				TB3O.M35 = 2;
			} else if (iP.nodeName == "IMG") {
				if (iP.className && (iP.className == "plus" || iP.className == "logo_plus"))
					TB3O.plAc = true;
				ahref = iP.parentNode.getAttribute('href');
				TB3O.M35 = 1;
			};
			if (ahref) {
				aLang = ahref.split(".");
				TB3O.lng = aLang[aLang.length - 1].replace("/", "");
			};
			ahref = null;
		} else {
			iP = $xf("//img[contains(@src, 'plus.gif')]");
			if (iP) {
				iP.src.search(/\/img\/([^\/]+)\//);
				TB3O.lng = RegExp.$1.substring(0, 2);
			};
			if ($xf("//img[contains(@src, 'travian1.gif')]"))
				TB3O.plAc = true;
		};
		iP = null;
		ahref = null;
	};
	function img(ref, ld) {
		var imgPath = '';
		if (TB3O.T35 == true)
			imgPath = (!ld ? TB3O.localGP + "img/" + ref : TB3O.localGP + "img/lang/" + TB3O.lng + '/' + ref);
		else
			imgPath = (!ld ? TB3O.localGP + "img/un/" + ref : TB3O.localGP + "img/" + TB3O.lng + '/' + ref);
		return imgPath;
	};
	function getCrtLocation() {
		crtLocTitle = '';
		var locX;
		if (crtPage.indexOf('dorf3') != -1) {
			TB3O.xCrt = actV.vx;
			TB3O.yCrt = actV.vy;
			crtLocTitle = T("ALDEAS") + " (" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
		} else {
			locX = $xf("//h1");
			locXx = $xf("//span[@id='x']");
			locXy = $xf("//span[@id='y']");
			if (locXx)
				TB3O.xCrt = parseInt10(locXx.textContent);
			if (locXy)
				TB3O.yCrt = parseInt10(locXy.textContent);
			if (locX && !locXx && !locXy) {
				aH = new Array();
				theName = locX.textContent;
				ipLast = theName.lastIndexOf(")");
				if (ipLast + 1 == theName.length || ipLast + 2 == theName.length) {
					if (ipLast > 0)
						theName = theName.substring(0, ipLast + 1);
					ipLast = theName.lastIndexOf("(");
					if (ipLast != -1) {
						aH[0] = theName.substring(0, ipLast);
						aH[1] = theName.substr(ipLast + 1);
					} else
						aH[0] = theName;
					crtLocTitle = aH[0];
					if (aH.length > 1) {
						strXY = aH[1].replace(")", "").replace(" ", "").replace(" ", "");
						aCoord = strXY.split("|");
						TB3O.xCrt = parseInt10(aCoord[0]);
						TB3O.yCrt = parseInt10(aCoord[1]);
						crtLocTitle += " (" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
					} else {
						TB3O.xCrt = actV.vx;
						TB3O.yCrt = actV.vy;
						strXY = "(" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
						if (crtLocTitle.indexOf(strXY) == -1)
							crtLocTitle += " " + strXY;
					};
				} else {
					TB3O.xCrt = actV.vx;
					TB3O.yCrt = actV.vy;
					crtLocTitle = theName + " (" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
				};
			} else {
				if (locX != null) {
					crtLocTitle = locX.textContent;
					strXY = "(" + TB3O.xCrt + "|" + TB3O.yCrt + ")";
					if (crtLocTitle.indexOf(strXY) == -1)
						crtLocTitle += " " + strXY;
				};
			};
		};
		TB3O.BrT = crtLocTitle.replace(/\n/g, "");
		document.title += " - " + TB3O.BrT;
		return true;
	};
	function fillinNPCfields(aURL) {
		var sumRes = parseInt10(document.getElementById('org4').innerHTML);
		var rm1 = parseInt10(getQueryParameters(aURL, 'r1'));
		var rm2 = parseInt10(getQueryParameters(aURL, 'r2'));
		var rm3 = parseInt10(getQueryParameters(aURL, 'r3'));
		var rm4 = parseInt10(getQueryParameters(aURL, 'r4'));
		rm1_0 = rm1;
		rm2_0 = rm2;
		rm3_0 = rm3;
		rm4_0 = rm4;
		while (rm1_0 + rm2_0 + rm3_0 + rm4_0 + rm1 + rm2 + rm3 + rm4 < sumRes) {
			rm1_0 += rm1;
			rm2_0 += rm2;
			rm3_0 += rm3;
			rm4_0 += rm4;
		}
		urlNPCback = addQueryParameter(NPCURL, 'bid', getQueryParameters(window.location.href, 'bid'));
		urlNPCback = addQueryParameter(urlNPCback, 'r1', rm1_0);
		urlNPCback = addQueryParameter(urlNPCback, 'r2', rm2_0);
		urlNPCback = addQueryParameter(urlNPCback, 'r3', rm3_0);
		urlNPCback = addQueryParameter(urlNPCback, 'r4', rm4_0);
		document.getElementById("submitText").innerHTML += "<br><a href='" + urlNPCback + "'>Increse same Distribute resources :</a>";
		if (aURL.indexOf('&' + NPCResources) != NPCURL.length)
			return false;
		var needed = getQueryParameters(aURL, NPCResources).split(',');
		var inputs = document.getElementsByName('m2[]');
		for (var i = 0; i < 4; i++) {
			inputs[i].value = needed[i];
		};
		unsafeWindow.calculateRest();
	};
	function getTroopsToBeTrained() {
		var xp = $xf('//input[starts-with(@id, "inputTroopNo_")]', 'r');
		if (xp.snapshotLength > 0) {
			var inputs = new Array();
			for (var i = 0; i < xp.snapshotLength; i++) {
				var f = xp.snapshotItem(i).value;
				inputs.push(f.length == 0 || isNaN(f) ? 0 : parseInt10(f));
			};
			return inputs;
		} else
			return;
	};
	function parseURL(aURL) {
		var urlParts = aURL.split('?', 2);
		if (urlParts.length == 1)
			urlParts[1] = '';
		var parts = {
			path : urlParts[0],
			query : urlParts[1]
		};
		return parts;
	};
	function getQueryParameters(aURL, param) {
		var urlParts = parseURL(aURL).query.split('&');
		for (var i = 0; i < urlParts.length; i++) {
			var ki = urlParts[i].split('=');
			if (ki[0] == param)
				return decodeURIComponent(ki[1]);
		};
	};
	function addQueryParameter(aURL, param, aVal) {
		var add_pair = param + '=' + encodeURIComponent(aVal);
		var added = false;
		var urlParts = parseURL(aURL);
		var pairs = urlParts.query.split('&');
		for (var i = 0; i < pairs.length; i++) {
			var ki = pairs[i].split('=');
			if (ki[0] == param) {
				pairs[i] = add_pair;
				added = true;
				break;
			};
		};
		if (!added)
			pairs.push(add_pair);
		return urlParts.path + '?' + pairs.join('&');
	};
	function NPCUpdate() {
		var arrTrain = null;
		xpNeeded = $xf("//*[@id='npcXX_1']", 'r');
		if (xpNeeded.snapshotLength != 0)
			NPCAssistant(1, xpNeeded, arrTrain);
		if (TB3O.isTtB == true && document.getElementsByName('s1').length > 0)
			arrTrain = getTroopsToBeTrained();
		xpNeeded = $xf('//*[starts-with(@id, "npc_tt_r")]', 'r');
		if (xpNeeded.snapshotLength == 0)
			xpNeeded = $xf('//*[starts-with(@id,"NPCTT")]', 'r');
		if (xpNeeded.snapshotLength != 0)
			NPCAssistant(2, xpNeeded, arrTrain);
	};
	function NPCAssistant(typeNPC, xpNeeded, arrTrain) {
		for (var i = 0; i < xpNeeded.snapshotLength; i++) {
			td = xpNeeded.snapshotItem(i);
			var arrayRes;
			if (typeNPC == 1)
				arrayRes = getRequiredRes(td);
			else if (typeNPC == 2)
				arrayRes = arrTtT[i].aRes;
			if (arrayRes == null || arrayRes.length < 4)
				continue;
			needRes = new Array();
			needResTotal = 0;
			for (var j = 0; j < 4; j++) {
				needRes.push(arrTrain ? arrayRes[j] * arrTrain[i] : arrayRes[j]);
				needResTotal += arrayRes[j];
			};
			neededTotal = (arrTrain && arrTrain[i] != 0 ? needResTotal * arrTrain[i] : needResTotal);
			container_id = 'npcXX_' + typeNPC + '_' + i;
			container = $g(container_id);
			if (container == null) {
				if (td.nodeName == "DIV")
					td = td.parentNode;
				td.innerHTML += '<br>';
				if (needResTotal > 20000 && typeNPC == 2)
					td.innerHTML += "<br>";
				td.innerHTML += '<div id="' + container_id + '" class="npc-general"> </div>';
				container = $g(container_id);
			};
			r = crtResUnits[4] - neededTotal;
			r_s = '[' + r + ']';
			if (r < 0)
				r_s = '<span class="npc-red">[' + r + ']</span>';
			else if (r > 0)
				r_s = '<span class="npc-green">[+' + r + ']</span>';
			container.innerHTML = '<b>' + T("TOTAL") + '</b>: ' + neededTotal + ' ' + r_s;
			dtNow = new Date();
			dtEstimated = new Date();
			if (neededTotal > 0 && r < 0) {
				sEst = Math.ceil(Math.abs(r) / (prodPerHour[5] / 3600));
				dtEstimated.setTime(dtNow.getTime() + (sEst * 1000));
				formatDtEstimated = (dtEstimated.getDate() < 10 ? '0' + dtEstimated.getDate() : dtEstimated.getDate()) + '.' +
				(dtEstimated.getMonth() < 9 ? '0' + (dtEstimated.getMonth() + 1) : (dtEstimated.getMonth() + 1)) +
				(dtNow.getFullYear() < dtEstimated.getFullYear() ? dtEstimated.getYear() : '');
				if (dtEstimated.getDate() == dtNow.getDate() && dtEstimated.getMonth() == dtNow.getMonth())
					formatDtEstimated = "";
				else
					formatDtEstimated = '&nbsp;' + formatDtEstimated;
				formatTimeEstimated = (dtEstimated.getHours() < 10 ? '0' + dtEstimated.getHours() : dtEstimated.getHours()) + ':' +
				(dtEstimated.getMinutes() < 10 ? '0' + dtEstimated.getMinutes() : dtEstimated.getMinutes());
				container.innerHTML += ' | ' + T('LISTO') + '<span class="npc-red">' + formatDtEstimated + '&nbsp;' + '</span>' + T('AT') + '&nbsp;' + '<span class="npc-red">' + formatTimeEstimated + '</span>';
			};
			var time_saved = 0;
			if (neededTotal > 0) {
				for (var j = 0; j < 4; j++) {
					PpMt = prodPerHour[j] / 60;
					mUntilNPC = (dtEstimated.getTime() - dtNow.getTime()) / 1000 / 60;
					resAtNPCtime = parseInt10(crtResUnits[j]) + (mUntilNPC * PpMt);
					deficitUntilNPC = needRes[j] - resAtNPCtime;
					if (deficitUntilNPC <= 0)
						continue;
					if (PpMt <= 0) {
						time_saved = null;
						break;
					};
					diffCalc = Math.ceil(deficitUntilNPC / PpMt);
					if (diffCalc > time_saved)
						time_saved = diffCalc;
				};
			};
			if (time_saved == null) {
				container.innerHTML += ' | &#8734;';
			} else if (r < 0) {}
			else if (time_saved > 0) {
				diffHours = Math.floor(time_saved / 60);
				if (diffHours < 10)
					diffHours = "0" + diffHours;
				diffMinutes = time_saved % 60;
				if (diffMinutes < 10)
					diffMinutes = "0" + diffMinutes;
				delta_str = T('NPCSAVETIME') + '&nbsp;' + diffHours + ':' + diffMinutes + ' h';
				if (diffHours < 1)
					delta_str = '<span class="npc-red">' + delta_str + '</span>';
				container.innerHTML += ' | ' + delta_str;
			};
			if (arrTrain) {
				maxY = Math.floor(crtResUnits[4] / needResTotal);
				container.innerHTML += ' | ' + T('MAX') + '. ';
				aLink = $a(maxY, [['href', jsVoid]]);
				aLink.addEventListener('click', clickOnNPCAssistant(i, maxY), false);
				container.appendChild(aLink);
			};
			if (neededTotal > 0 && r >= 0 && (time_saved > 0 || time_saved == null) && TB3O.bIsNPCAvailable) {
				var urlNPCback = addQueryParameter(NPCURL, 'bid', getQueryParameters(window.location.href, 'id'));
				if (!getQueryParameters(window.location.href, 'id')) {
					urlNPCback = addQueryParameter(NPCURL, 'bid', getQueryParameters(window.location.href, 'gid'));
				};
				for (var urli = 0; urli < needRes.length; urli++) {
					urlNPCback = addQueryParameter(urlNPCback, 'r' + (urli + 1), needRes[urli]);
				};
				container.innerHTML += '&nbsp;<a href="' + urlNPCback + '"> &raquo; NPC</a>';
			};
		};
		function clickOnNPCAssistant(i, maxY) {
			return function () {
				aI = $g("inputTroopNo_" + (i + 1));
				if (aI)
					aI.value = maxY;
			};
		};
	};
	function calculateResourceTime(need, pW, aLnk, cpB, ccB) {
		var maxTime = 0;
		var boolTb = false;
		var aTb = $t([['class', 'rNt'], ['style', 'width:' + pW + '%;']]);
		for (var i = 0; i < 4; i++) {
			restante = parseInt10(need[i]) - crtResUnits[i];
			var sfz = restante > 100000 ? 'font-size:6pt;' : '';
			if (restante > 0) {
				tiempo = -1;
				if (prodPerHour[i] != 0)
					tiempo = Math.round(restante / (prodPerHour[i] / 3600));
				if (tiempo < 0 || capacity[i] - parseInt10(need[i]) < 0) {
					maxTime = 'Infinity';
					aCell = $c(gIc["r" + (i + 1)], [['class', 'center']]);
					bCell = $c(' ' + restante + ' ', [['id', 'timeout' + i], ['style', sfz]]);
					cCell = $c(' ' + T('NEVER') + ' ', [['style', sfz]]);
					boolTb = true;
				} else {
					if (tiempo > maxTime && maxTime != 'Infinity')
						maxTime = tiempo;
					tiempo = formatTimeSpan(tiempo + 5, 0);
					aCell = $c(gIc["r" + (i + 1)], [['class', 'center']]);
					bCell = $c(' ' + restante + ' ', [['id', 'timeout' + i], ['style', sfz]]);
					cCell = $c(' ' + tiempo + ' ', [['id', 'timeouta'], ['style', sfz]]);
					boolTb = true;
				};
				if (boolTb) {
					aRow = $r();
					aRow.appendChild(aCell);
					aRow.appendChild(bCell);
					aRow.appendChild(cCell);
					aTb.appendChild(aRow);
					aCell = null;
					bCell = null;
					cCell = null;
				};
			};
		};
		if (maxTime == 'Infinity') {
			xRow = $r();
			xRow.appendChild($c(T('LISTO'), [['colspan', "2"]]));
			xRow.appendChild($c(T('NEVER')));
			aTb.appendChild(xRow);
			boolTb = true;
		} else if (maxTime > 0) {
			tiempo2 = formatTimeSpan(maxTime + 5, 0);
			aDate = new Date();
			aDate.setTime(aDate.getTime() + (maxTime * 1000));
			xRow = $r();
			txtDate = formatDateTimeRelative(maxTime, 0);
			xRow.appendChild($c(T('LISTO'), [['colspan', '2']]));
			xRow.appendChild($c(txtDate));
			aTb.appendChild(xRow);
			if (TB3O.O[36] == '1') {
				uthen = new Array(4);
				residue = new Array(4);
				for (var i = 0; i < 4; i++) {
					uthen[i] = crtResUnits[i] + Math.round(maxTime * prodPerHour[i] / 3600);
					residue[i] = uthen[i] - parseInt10(need[i]);
				};
				uiHTML = createCRrows(T('RESOURCES') + " " + txtDate, uthen);
				riHTML = createCRrows(T('RESIDUE') + txtDate, residue);
				aTb.innerHTML += uiHTML;
				aTb.innerHTML += riHTML;
			};
			boolTb = true;
		};
		if (aLnk && boolTb == false) {
			var aRow = $r();
			aRow.appendChild($c('<a href="' + aLnk + '">' + T('EXTAV') + '</a>', [['class', 'center']]));
			aTb.appendChild(aRow);
			boolTb = true;
		};
		if (cpB && TB3O.O[34] == '1') {
			aTb.appendChild(getCpcRow(cpB, "cp"));
			boolTb = true;
		};
		if (ccB && TB3O.O[35] == '1') {
			aTb.appendChild(getCpcRow(ccB, "cc"));
			boolTb = true;
		};
		if (boolTb == true)
			return aTb;
		else
			return null;
		function getCpcRow(x, y) {
			var cxR = $r();
			switch (y) {
			case 'cp':
				strIn = T('CPPERDAY');
				tColor = 'color:blue;';
				break;
			case 'cc':
				strIn = gIc["r5"];
				tColor = 'color:red;';
				break;
			};
			cxR.appendChild($c(strIn + ": " + x[0] + " " + (docDir[0] == 'right' ? '←' : '→') + " " + x[1], [['class', 'center'], ['colspan', '3'], ['style', tColor]]));
			return cxR;
		};
		function createCRrows(aTitle, aV) {
			var cTb = $t();
			var xR = $r();
			xR.appendChild($c(aTitle, [['style', 'border-top:1px solid silver;'], ['colspan', '3']]));
			cTb.appendChild(xR);
			for (var i = 0; i < 4; i++) {
				var yR = $r();
				yR.appendChild($c(gIc["r" + (i + 1)], [['class', 'center']]));
				yR.appendChild($c(aV[i], [['colspan', '2']]));
				cTb.appendChild(yR);
			};
			return cTb.innerHTML;
		};
	};
	function addTimeToTrainSelectedTroops() {
		var aTb = $g("selecttraintroops");
		var arrInputs = $xf("//*[starts-with(@id, 'inputTroopNo_')]", 'l');
		var arrAddCells = $xf("//*[starts-with(@id, 'TtT_')]", 'l');
		var tCC = 0;
		var tTtT = 0;
		var sT = 0;
		var gHTML = '';
		for (var i = 0; i < arrInputs.snapshotLength; i++) {
			var vTtT = parseInt10(arrInputs.snapshotItem(i).value);
			if (isNaN(vTtT))
				vTtT = 0;
			if (!isNaN(vTtT)) {
				var bTb = $t([['class', 'tb3tbnb']]);
				var xCell = arrAddCells.snapshotItem(i);
				var xaRow = $r([['class', 'tb3rnb']]);
				var xbRow = $r([['class', 'tb3rnb']]);
				var tT = toSeconds(arrTtT[i].tTime) * vTtT;
				tTtT += tT;
				var xaCell = $c(formatTimeSpan(tT, 0), [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
				tCC += uc[arrTtT[i].tType][9] * vTtT;
				var xbCell = $c(gIc["r5"] + " " + uc[arrTtT[i].tType][9] * vTtT, [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
				xaRow.appendChild(xaCell);
				xbRow.appendChild(xbCell);
				xCell.innerHTML = '';
				bTb.appendChild(xaRow);
				bTb.appendChild(xbRow);
				xCell.appendChild(bTb);
				sT += parseInt10(vTtT);
				imgName = 'class="unit u' + arrTtT[i].tType + '" src="' + xGIF + '"';
				if (TB3O.T35 == false)
					imgName = "src='" + gIc["u" + arrTtT[i].tType] + "'";
				gHTML += "<img " + imgName + "> " + vTtT;
				if (i < arrInputs.snapshotLength - 1)
					gHTML += " | ";
				if (vTtT != 0) {
					var ix = $g('trNPC_' + (i + 1));
					if (ix)
						removeElement(ix);
					var ex = calculateResourceTime(arrayByN(arrTtT[i].aRes, vTtT), "100");
					if (ex) {
						$at(ex, [['id', 'trNPC_' + (i + 1)]]);
						var nC = aTb.rows[i + 1].cells.length;
						var xNode = (nC > 4 ? aTb.rows[i + 1].cells[1] : aTb.rows[i + 1].cells[0]);
						xNode.appendChild(ex);
					};
				};
			};
		};
		var aRow = $g('aRselecttraintroops');
		if (!aRow) {
			var csp = aTb.rows[0].cells[0].getAttribute("colspan");
			var aCell = $c("", [['id', 'gTtT'], ['colspan', csp]]);
			aRow = $r([['id', 'aRselecttraintroops']]);
			aRow.appendChild(aCell);
			aRow.appendChild($c(sT, [['id', 'sTtT']]));
			aRow.appendChild($c(""));
			aRow.appendChild($c("", [['id', 'tTtT']]));
			aTb.appendChild(aRow);
		} else {
			var aCell = $g("gTtT");
			if (aCell)
				aCell.innerHTML = '';
			var bCell = $g("sTtT");
			if (bCell)
				bCell.innerHTML = sT;
			var dCell = $g("tTtT");
			if (dCell)
				dCell.innerHTML = '';
		};
		aCell.innerHTML = gHTML;
		var tTb = $t([['class', 'tb3tbnb']]);
		var taRow = $r([['class', 'tb3rnb']]);
		var tbRow = $r([['class', 'tb3rnb']]);
		var taCell = $c(formatTimeSpan(tTtT, 0), [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
		var tbCell = $c(gIc["r5"] + " " + tCC, [['class', 'tb3cnb'], ['style', 'font-size:8pt;']]);
		taRow.appendChild(taCell);
		tbRow.appendChild(tbCell);
		tTb.appendChild(taRow);
		tTb.appendChild(tbRow);
		if (dCell)
			dCell.appendChild(tTb);
	};
	function fillinwarsim() {
		if (TB3O.O[55] != '1')
			return;
		var aTb = $xf("//table[@id='attacker'] | //table[@class='fill_in']");
		if (!aTb)
			return;
		if (TB3O.VillagesInfo[actV.vNewdid].pop)
			TB3O.AVP = TB3O.VillagesInfo[actV.vNewdid].pop;
		TB3O.hOffBonus = getGMcookie("heroV", false);
		if (TB3O.hOffBonus == "false") {
			setGMcookie("heroV", "0", false);
			TB3O.hOffBonus = 0;
		};
		tTc = getGMcookieV2("Troops");
		if (tTc && tTc[actV.vNewdid])
			eT = tTc[actV.vNewdid];
		else
			return;
		var aI = aTb.getElementsByTagName("INPUT");
		if (aI.length > 0) {
			j = 1;
			for (var i = 0; i < aI.length; i++) {
				if (aI[i].name == "a1_" + j) {
					aI[i].value = (eT[j - 1] > 0 ? eT[j - 1] : "");
					j += 1;
				} else if (aI[i].name == "ew1")
					aI[i].value = TB3O.AVP;
				else if (aI[i].name = "h_off_bonus" & aI[i].value != "")
					aI[i].value = TB3O.hOffBonus;
			};
		};
		aTb = null;
		aI = null;
	};
	var mouseOffset = null;
	var iMouseDown = false;
	var lMouseState = false;
	var dragObject = null;
	var curTarget = null;
	function mouseCoords(ev) {
		return {
			x : ev.pageX,
			y : ev.pageY
		};
	};
	function getMouseOffset(target, ev) {
		var docPos = getPosition(target);
		var mousePos = mouseCoords(ev);
		return {
			x : mousePos.x - docPos.x,
			y : mousePos.y - docPos.y
		};
	};
	function mouseDown(ev) {
		var target = ev.target;
		iMouseDown = true;
		if (target.getAttribute('DragObj'))
			return false;
	};
	function getPosition(e) {
		var dx = 0;
		var dy = 0;
		while (e.offsetParent) {
			dx += e.offsetLeft + (e.currentStyle ? (parseInt10(e.currentStyle.borderLeftWidth)).NaN0() : 0);
			dy += e.offsetTop + (e.currentStyle ? (parseInt10(e.currentStyle.borderTopWidth)).NaN0() : 0);
			e = e.offsetParent;
		};
		dx += e.offsetLeft + (e.currentStyle ? (parseInt10(e.currentStyle.borderLeftWidth)).NaN0() : 0);
		dy += e.offsetTop + (e.currentStyle ? (parseInt10(e.currentStyle.borderTopWidth)).NaN0() : 0);
		return {
			x : dx,
			y : dy
		};
	};
	function mouseMove(ev) {
		var target = ev.target;
		var mousePos = mouseCoords(ev);
		if (dragObject) {
			oSpos = dragObject.style.position;
			dragObject.style.position = 'absolute';
			if ((mousePos.y - mouseOffset.y) > -10) {
				dragObject.style.top = (mousePos.y - mouseOffset.y) + 'px';
			}
			dragObject.style.left = (mousePos.x - mouseOffset.x) + 'px';
			dragObject.style.position = oSpos;
		};
		lMouseState = iMouseDown;
		return false;
	};
	function mouseUp(ev) {
		if (dragObject) {
			var dOx = dragObject.style.left;
			var dOy = dragObject.style.top;
			var strXY = (dOx + "|" + dOy).replace("px", '').replace("px", '');
			switch (dragObject.id) {
			case "resbarTT":
				TB3O.O[75] = strXY;
				break;
			case "userbookmarksTT":
				TB3O.O[76] = strXY;
				break;
			case "noteblockTT":
				TB3O.O[77] = strXY;
				break;
			case "vl2tableTT":
				TB3O.O[78] = strXY;
				break;
			case "searchbarTT":
				TB3O.O[79] = strXY;
				break;
			case "resupgTT":
				TB3O.O[88] = strXY;
				break;
			case "bupgTT":
				TB3O.O[89] = strXY;
				break;
			case "mapTableTT":
				TB3O.O[90] = strXY;
				break;
			case "mr_tooltip":
				TB3O.O[104] = strXY;
				break;
			};
			setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
		};
		dragObject = null;
		iMouseDown = false;
	};
	function makeDraggable(parent, item) {
		document.addEventListener('mousemove', mouseMove, false);
		document.addEventListener('mousedown', mouseDown, false);
		document.addEventListener('mouseup', mouseUp, false);
		if (!parent || !item)
			return;
		item.addEventListener('mousedown', function (ev) {
			dragObject = parent;
			mouseOffset = getMouseOffset(parent, ev);
			document.body.appendChild(parent);
			return false;
		}, false);
	};
	function setTravianStyles() {
		var acss = '';
		acss += 'div.build .gid16 #raidList .lastRaid {width:28%;}' + 'div.build .gid16 #raidList .lastRaid .tbMsgPop {padding-' + docDir[0] + ':5px;}' + 'div#content.reports table#overview:not(.reportSurround) td.sub div {padding-' + docDir[0] + ': 45px; padding-' + docDir[1] + ': 30px;}' + 'div#content.reports table#overview td.sub a.tbMsgPop {padding-' + docDir[0] + ':5px;}' + 'div#content.messages table#overview td.subject a { margin-' + docDir[1] + ':15px; }' + 'div#content.messages table#overview a.tbInject.tbMsgPop img {height: auto; width: auto; vertical-align: middle; position: relative;top:0px; margin-top:-15px;top:-2px;}' + 'div#content.messages div#message a.tbInject.tbMsgPop {position: static; float:none !important; padding-' + docDir[0] + ':5px;}' + 'div#mr_tooltip  div#content {padding-left: 0px; padding-right: 0px; padding-top: 20px;}' + 'div#mr_tooltip  div.paper {position: static;}' +
		((TB3O.O[45] === '1') ? 'div.village1 .underConstruction, div.village2 .underConstruction  {text-decoration: blink !important;}' : '') + 'div.village1 div.level, div.village2 div#village_map div#levels div' + '{font-family:Arial, Helvetica, Verdana, sans-serif; font-size:9pt; font-weight:bold; color:' + TB3O.CNc[0] + ';line-height:15px !important;' + 'border:1px solid black; -moz-border-radius:2em; border-radius:2em; ' + 'padding-top:3px; text-align:center; position:absolute; width:21px; height:18px; cursor:pointer;' + 'background-image:none;margin-top:-2px;}' +
		((TB3O.ServerInfo.version > 4.0) ? 'a#logo{left:73px;}' : '#navigation {margin-left:-70px !important;}') + 'div#build.gid17 table#trading_edit td.res {padding: 0 0 0 7px;}' + 'div#build.gid17 table#trading_edit td.res table.tbSendRes td {padding: 3px 3px;}' + 'div#build.gid17 table#trading_edit td.res table.tbSendRes {width: ' + ((TB3O.ServerInfo.version > 4.0) ? 342 : 340) + 'px;  background-color: transparent; border: 1px solid silver;}' + 'div#build.gid17 table#trading_edit td.res table.tbSendRes input {margin: -moz-initial;margin:initial;}' + 'div#build.gid17 table#trading_edit td.res table.tbSendRes img {margin-right: auto;}' + 'div#build.gid17 div.destination {float:' + docDir[1] + '; width:280px; margin-top:-75px;margin-bottom:15px;}' + '.traderCount img {vertical-align:middle;}' + 'div#build div.action div.details input.text {width: 30px;}' + '#ingameManual {width:85px !important; height:100px !important;}' + '#mapContainer .ruler, #mapContainer .toolbar {z-index: 998;}';
		GM_addStyle(acss);
	}
	function setTBStyles() {
		var acss = '';
		acss += 'table.tb3tb {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px;}' + 'table.tb3tb tr, table.tb3tb td {border:1px solid silver;}' + 'table.tb3tbnb {border-collapse:collapse; border:0px none white; font-size:8pt; text-align:center; padding:2px; margin:1px; background-color:' + TB3O.DFc[1] + ';}' + 'table.tb3tbnb tr, table.tb3tbnb td, table.tb3tbnb td.tb3cnb {border:0px none white;}' + 'tr.tb3rh  {background-color:#ECECEC; text-align:center; border:1px solid silver;}' + 'tr.tb3rhb  {background-color:#ECECEC; text-align:center; border:1px solid silver; font-weight:bold;}' + 'tr.tb3rhnb  {background-color:#ECECEC; text-align:center;}' + 'tr.tb3r   {border-collapse:collapse; border:1px solid silver; text-align:center;}' + 'tr.tb3rnb  {border-collapse:collapse; border:0px none white; text-align:center; white-space:nowrap;}' + 'tr.cbgx td, td.cbgx, th.cbgx {background-color:#FFFFC0; border-collapse:collapse; border:1px solid silver; padding:2px; text-align:center;}' + 'td.tb3chbb  {border:1px solid silver; background-color:#ECECEC; padding:2px; font-weight:bold; font-size:10pt;}' + 'td.tb3chb  {border:1px solid silver; background-color:#ECECEC; padding:2px; font-weight:bold;}' + 'td.tb3ch  {border:1px solid silver; background-color:#ECECEC; padding:2px; text-align:center;}' + 'td.tb3chnb  {border:0px none white; background-color:#ECECEC; padding:2px; text-align:center;}' + 'td.tb3c  {border:1px solid silver; background-color:transparent; padding:2px; border-collapse:collapse;}' + 'td.tb3cnb  {border:0px none transparent; background-color:transparent; text-align:center; padding:2px;}' + 'td.tb3cbt  {border-top:1px solid silver; font-size:8pt; color:#000000; text-align:center;}' + 'td.tb3name          {text-align:' + docDir[0] + ';}' + 'div.CNBT {font-family:Arial, Helvetica, Verdana, sans-serif; font-size:9pt; font-weight:bold; color:' + TB3O.CNc[0] + ';line-height:15px;text-align:center;' + 'border:1px solid black; -moz-border-radius:2em; border-radius:2em; width:21px; height:18px; padding-top:3px;}' + 'div.CN  {border:1px solid #CCCCCC; -moz-border-radius:2em; border-radius:2em;}' + 'div#tbver {z-index:1997; position:absolute; ' + docDir[0] + ':5px; top:3px; width:450px;' + '           font-size:12px; font-weight:normal; color:#FFFFFF; direction:ltr;}' + 'div#tbver a {font-weight:bold; color:#00FF00;}' +
		((TB3O.ServerInfo.version > 4.0) ? 'div#tbver {font-size:11px; width:180px; z-index:auto;}' + '#tbver .tbExTime, #tbver .tbTVer {display:block; color: black;}' + '#tbver .tbExTime {margin-top: 5px;}' : '#tbver .tbTVer {border-left:1px solid; margin-' + docDir[0] + ': 5px; padding-' + docDir[0] + ': 5px;}') + 'table.tbUpgTable {width:682px; table-layout: fixed; border-collapse:collapse; border:1px solid silver; background-color:' + TB3O.DFc[1] + '; font-size:8pt; padding:2px; text-align:' + docDir[0] + '; empty-cells:show; line-height:16px;}' + 'table.tbUpgTable table {background-color:transparent; border-collapse:collapse; border:0px none transparent; font-size:8pt; padding:2px; margin:1px; text-align:' + docDir[1] + '; vertical-align:top;}' + 'table.tbUpgTable tr {background-color:transparent; border-collapse:collapse; border:0px none transparent; font-size:8pt; padding:2px; margin:1px; text-align:' + docDir[1] + '; vertical-align:top;}' + 'table.tbUpgTable td {background-color:transparent; border:0px none transparent; font-size:8pt; text-align:' + docDir[1] + '; padding:2px; vertical-align:top;}' + 'table.tbUpgTable td.center {text-align:center; vertical-align:middle;}' + 'table.tbUpgTable td.tb3uthc {background-color:#ECECEC; border:1px solid silver; vertical-align:middle; font-weight:normal; text-align:center; width:25%; height:18px;}' + 'table.tbUpgTable td.tb3utbc {background-color:transparent; border:1px solid silver; margin:0px; text-align:center; vertical-align:top; width:25%; height:18px;}' + 'table.tbUpgTable a {font-size:8pt; font-weight:bold;}' + 'table.tbUpgTable div.tbImgCnt {text-align:' + docDir[0] + ';}' + 'table.tbUpgTable div.CNBT {position:relative; top:-31px;' + docDir[0] + ':9px; z-index:100;}' + 'table.tbUpgTable a < div {width:0%;}' + 'table#tb_bldupg a img.building {margin-left:-10px;width:110px;}' + 'div#resupgTT table#tb_resupg,' + 'div#bupgTT   table#tb_bldupg {margin-top:1px;}' + 'table.rNt {background-color:transparent; border-collapse:collapse; border:0px none transparent; padding:2px; vertical-align:top;}' + 'table.tbUpgTable table.rNt {margin:1px;}' + 'table.rNt * {font-size:8pt !important; text-align:' + docDir[1] + ' !important;}' + 'table.rNt .tbMany * {font-size:7pt !important;}' + 'table.rNt tr, table.rNt th, table.rNt td {background-color:transparent; padding:2px; vertical-align:top;}' + 'table.rNt tr {border-collapse:collapse; border:0px none transparent; margin:1px;}' + 'table.rNt th {border-top:1px solid silver;}' + 'table.tbUpgTable table.rNt tr:first-child th {border-top:0px;}' + 'table.rNt td {border:0px none transparent;}' + 'table.rNt td.center {text-align:center !important; vertical-align:middle;}' + 'table.rNt .tbCC, table.rNt .tbCP {text-align:' + docDir[0] + ' !important;}' + 'table.rNt .tbCC *, table.rNt .tbCP * {vertical-align:middle;}' + 'table.rNt .tbCC {color:red;}' + 'table.rNt .tbCP {color:blue;}' + 'table.rNt .tbCapReached {color:red; text-decoration: blink;}' + '.tbInject table.rNt {width:40%;}' + 'table#mapTable {width:682px; border-collapse:collapse; border:1px solid silver; background-color:' + TB3O.DFc[1] + '; font-size:8pt; margin:0px; padding:0px; text-align:center; empty-cells:show; line-height:16px;}' + 'table#mapTable thead td {border:1px solid silver; background-color:#ECECEC; font-size:9pt; font-weight:bold; text-align:center; padding:1px; cursor:default; vertical-align:middle;}' + 'table#mapTable thead td.tb3mthcp {cursor:pointer;}' + 'table#mapTable td {border:1px solid silver; background-color:transparent; padding:1px; margin:0px; font-size:8pt; font-weight:normal; text-align:center; vertical-align:middle;}' + 'table#mapTable td.tb3mtcu {font-weight:bold; color:blue;}' + 'table#mapTable td.tb3mtcp {padding-' + docDir[1] + ':10px; color:black; text-align:' + docDir[1] + ';}' + 'div#updDiv {position:absolute; top:200px; ' + docDir[0] + ':120px; display:block; padding:16px 4px; z-index:50; clear:both; border:2px solid #C0C0C0; background-color:black; color:yellow; font-weight:bold;}' + 'table#userbookmarks {border-collapse:collapse; border:0px none transparent; background-color:' + TB3O.DFc[1] + '; line-height:16px;}' + 'table#userbookmarks tr {text-align:' + docDir[0] + '; vertical-align:middle; padding:0 0 0 2px; margin:0px; white-space:nowrap; border-collapse:collapse; border:0px none transparent;}' + 'table#userbookmarks td {border:0px none transparent; background-color:' + TB3O.DFc[1] + '; text-align:' + docDir[0] + '; font-size:13px; font-weight:normal; color:black; padding:2px; vertical-align:middle;}' + 'table#userbookmarks td.noact {width:10px;}' + 'table#userbookmarks td.act {width:10px; color:#FF8000;}' + 'table#userbookmarks img {cursor:pointer;}' + 'table#userbookmarks span {padding:0 0 0 4px;}' + 'table#mkls {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px; line-height:18px;}' + 'table#mkls tr {background-color:transparent;}' + 'table#mkls td {background-color:transparent; border:1px solid silver; font-weight:normal; font-size:8pt; color:black; text-align:' + docDir[1] + '; vertical-align:middle; padding:2px 3px 2px 3px; white-space:nowrap;}' + 'table#mkls td.mklshh {background-color:#ECECEC; text-align:center; width:16%;}' + 'table#mkls td.mklsc {text-align:center;}' + 'table#br_table, table#br_table tr {background-color:transparent; border:1px solid #C2C2C2; text-align:center; padding:0px; margin:0px; border-collapse:collapse; width:100%;}' + 'table#br_table td {background-color: transparent; border:1px solid #C2C2C2; font-size:8pt; text-align:' + docDir[1] + '; padding:2px 7px 2px 2px; margin:0px;}' + 'table#br_table td.tb3cbrh1 {background-color:#F3F3F3; font-size:10pt; font-weight:bold; color:#000000; text-align:center;}' + 'table#br_table td.tb3cbrh2 {background-color:#F3F3F3; font-size:10pt; font-weight:bold; color:#FF8000; text-align:center;}' + 'table#br_table td.tb3cbrh3 {background-color:#F3F3F3; font-size:10pt; font-weight:bold; color:#71D000; text-align:center;}' + 'table#br_table td.tb3cbrc {text-align:center;}' + 'table#br_table td.tb3cbrb {font-weight:bold;}' + 'table#br_table td.tb3cbrr {color:red;}' + 'table#br_table td.tb3cbrg {color:darkgreen;}' + 'table#br_table td.tb3cbrbr {font-weight:bold; color:red;}' + 'table#br_table td.tb3cbrbg {font-weight:bold; color:darkgreen;}' + 'div.tbTip {text-align:center; font-size:8pt; font-weight:normal; line-height:16px; padding:3px 5px;}' + 'div.tbTip hr {margin-top:10px; margin-bottom:5px;}' + 'div.tbTip .tbTitle {font-weight:bold;}' + 'div.tbTip + div.tbTip {margin-top:5px;}' + 'div.tbTip table {border-collapse:collapse; border:0px none transparent; padding:2px;' + 'font-weight:normal; font-size:8pt; text-align:' + docDir[1] + ';  background-color:transparent; empty-cells:show; line-height:16px; white-space:nowrap;}' + 'div.tbTip table tr {border:0px none transparent;}' + 'div.tbTip table td, div.tbTip table th {background-color:transparent; border:0px none transparent; font-weight:normal; font-size:8pt; text-align:' + docDir[1] + '; color:black; padding:2px; margin:0px; vertical-align:middle;}' + 'div.tbTip table th {font-weight:bold; text-align:center;font-size:10pt;}' + 'div.tbTip table td.tbIco {text-align:' + docDir[0] + '; width:40px;}' + 'div.tbTip table td.tbVal {text-align:' + docDir[1] + ';}' + 'div.tbTip table td.center {text-align:center;}' + 'table.tbAttDefInfo thead th {font-weight:bold; text-align:center; font-size:8pt; background-color:transparent; background-image:none; }' + 'table.tbAttDefInfo td.tbIco {text-align:' + docDir[0] + '; width:40px;}' + 'table.tbAttDefInfo td.tbVal {text-align:' + docDir[1] + ';}' + 'table.tbAttDefInfo tfoot td {text-align:' + docDir[0] + '; font-size:8pt;}' + 'table.tbAttDefInfo2 {margin:0px;}' + 'table.tbAttDefInfo2 tr {text-align:' + docDir[0] + ';}' + 'table.tbAttDefInfo2 td span.tbVal {padding-' + docDir[0] + ':20px; padding-' + docDir[1] + ':3px;}' + 'table.tbAttDefInfo2 td {padding:3px 7px;}' + 'table.tbAttDefInfo2 td img {float:' + docDir[0] + ';}' + 'table.tbAttDefInfo2 td *, table.tbAttDefInfo2 th * {vertical-align:middle;}' + 'table.tbDistInfo {border-collapse:collapse; empty-cells:show; white-space:nowrap;}' + 'table.tbDistInfo td {vertical-align:middle !important;}' + 'table.tbDistInfo * {vertical-align:middle;}' + 'table.tbDistInfo,' + 'table.tbDistInfo tr,' + 'table.tbDistInfo td {border:0px none transparent;background-color:transparent;text-align:' + docDir[1] + ';}' + 'table.tbDistInfo td {padding:2px;}' + 'table.tbDistInfo td[class*="tbMerc"] {color:blue;}' + 'table.tbDistInfo td.tbDist {color:blue;}' + 'table.tbDistInfo td.tbCenter {text-align:center; padding: 2px 0px;}' + 'table.tbDistInfo td.tbTravelT img {padding-' + docDir[1] + ':3px;}' + 'table.tbDistInfo td.tbArrivalT img {padding-' + docDir[1] + ':7px;}' + 'table.tbDistInfo td.tbArrivalT {padding-' + docDir[0] + ':7px;}' + 'table.tbDistInfo td.tbIco {text-align:' + docDir[0] + '; padding-' + docDir[0] + ':2px; padding-' + docDir[1] + ':10px;}' + 'table.tbDistInfo td.tbIco.tbMercRet {text-align:center}' + 'table.tbDistInfo td.tbTitle {font-size:10pt !important; font-weight:bold; color:green; border-bottom:1px solid grey;}' + 'table#tb_distTT.tbDistInfo { padding:2px; margin:1px; font-weight:normal; font-size:8pt; line-height:16px; }' + 'table#tb_distTT.tbDistInfo td {margin:0px; font-size:11px;}' + '#trading_edit + #tb_unitsdest { position: relative; float: ' + docDir[1] + '; border: 1px solid silver; margin-right: 65px; margin-top: -48px; width: 270px; }' + '#trading_edit + #tb_unitsdest tr.tbInfo td { font-size:11px; }' + 'table#tb_unitstime {margin-top:15px;width:350px;}' + 'table#tb_unitstime.tbDistInfo tr.tbInfo td {margin:0px; font-size:11px;}' + 'table#tb_unitstime.tbDistInfo td.tbEmpty {width:30px;}' + 'table.tbResBar    {border-collapse:collapse; border:1px solid silver; background-color:' + TB3O.DFc[1] + '; width:auto; margin:0px;  white-space:nowrap;}' + 'table.tbResBar *  {vertical-align:middle !important; line-height:13px !important; font-weight:normal; font-size:8pt !important;}' + 'table.tbResBar tr {border-collapse:collapse; border:0px none transparent; padding:0px !important;}' + 'table.tbResBar td {border:1px solid silver; padding:2px !important;}' + 'table.tbResBar tr.tb3pph {border-top:2px solid silver; border-bottom:2px solid silver; background-color:#ECECEC;}' + 'table.tbResBar td.tb3c {text-align: center !important; background-color:' + TB3O.DFc[1] + '; margin:1px; width:auto; }' + 'table.tbResBar td.tb3c span  {text-align: right !important;}' + 'table.tbResBar tr.tb3pph td.tb3c, table.tbResBar tr.tb3pph td.tb3ctotv {background-color:#ECECEC;}' + 'table.tbResBar td.lr       {background-color:transparent;text-align:' + docDir[1] + ' !important; padding:1px !important;}' + 'table.tbResBar td.tb3ttf   {text-align:' + docDir[1] + ' !important;padding:0px 1px !important;font-size:7pt !important;}' + 'table.tbResBar td.tb3ttf.tbInfinity {font-size:12pt !important; text-align:center !important;}' + 'table.tbResBar td.tb3cvn   {text-align:center !important; font-weight:bold; color:blue; background-color:#E9EEFC;}' + 'table.tbResBar td.tb3chtot {text-align:center !important; font-weight:bold; border-' + docDir[0] + ':2px solid silver; background-color:#FFFFC0; }' + 'table.tbResBar td.tb3ctot  {text-align:' + docDir[1] + ' !important;border-' + docDir[0] + ':2px solid silver; background-color:#FFFFC0; }' + 'table.tbResBar td.tb3ctotv {text-align:' + docDir[1] + ' !important;}' + 'table.tbResBar td.tb3cresbar {border:1px solid silver; background-color:' + TB3O.DFc[1] + '; padding:0px !important; height:17px;}' + 'table.tbResBar td.tb3cresbar .rbrtb {width:100px !important;}' + 'div#resbarTT table#tb_resbar {margin-top:1px;}' + 'table.rbrtb {border-collapse:collapse; border:0px none transparent; background-color:transparent; float:left; height:100%; width:100% !important;}' + 'table.rbrtb tr.rbrtbr,' + 'table.rbrtb td {border-collapse:collapse !important; border:0px none transparent !important; padding:0px !important;}' + 'table#vl2table {border-collapse:collapse; border:0 none transparent; background-color:' + TB3O.DFc[1] + '; text-align:center; padding:2px; margin:0px; white-space:nowrap; vertical-align:middle;}' + 'table#vl2table td {border:0 none transparent; background-color:transparent; text-align:' + docDir[0] + '; padding:2px; margin:0px; font-weight:normal; font-size:8pt; line-height:12px;}' + 'table#vl2table td.tbIco {padding:0px 2px; text-align:' + docDir[0] + '; padding-' + docDir[1] + ':0px;}' + 'table#vl2table td.tbIco img.tbiCP {background-position:-3px; width:10px;}' + 'table#vl2table td.tbVal {text-align:' + docDir[1] + ';}' + 'table#vl2table td.tbActive {background-color: #E7F0CA;}' + 'table#vl2table td.tbMark0  {padding-' + docDir[0] + ': 6px; padding-' + docDir[1] + ': 4px;}' + 'table#vl2table td.tbMark0.tbActive {color:#FF8000;}' + 'table#vl2table td.tbEmpty {width:10px;}' + 'table#vl2table td.tbCoord {direction:ltr;max-width:60px;}' + 'table#vl2table td.tbDist {color:blue;}' + 'table#vl2table td.tbName.tbActive a, table#vl2table td.tbCoord.tbActive a {color:black;}' + 'table#vl2table td.tbName a, table#vl2table td.tbCoord a {color:dimgray;}' + 'table#vl2table td.tbTool {padding:0px 1px;width:16px;max-width:16px;min-width:16px;text-align:center;}' + 'table#vl2table td.tb3sep {border-top: 2px inset gray;}' + 'form#searchform   {padding:10px; border:1px solid #C0C0C0;}' + 'form#searchform * {font-size:8pt; margin:2px;}' + 'form#searchform select#searchtype {padding:0px;}' + 'div#searchbarTT form#searchform {margin-top:18px;}' + 'div.fldiv {position:absolute; display:block; padding:1px; z-index:50; clear:both; border:1px solid #C0C0C0; background-color:' + TB3O.DFc[1] + '; z-index:1000;}' + 'div.dragdiv {text-align:center; font-weight:bold; height:18px; float:' + docDir[0] + '; cursor: pointer; border-bottom:1px solid #C0C0C0; background-color:#ECECEC; z-index:1000; vertical-align:middle;}' + 'div.mmdiv {height:18px; float:' + docDir[0] + '; cursor: pointer; border-bottom:1px solid #C0C0C0; background-color:' + TB3O.DFc[1] + '; width:25px;}' + 'div.closediv {height:18px; float:' + docDir[1] + '; cursor: pointer; border-bottom:1px solid #C0C0C0; background-color:' + TB3O.DFc[1] + '; width:25px;}' + 'p.delacc {position:absolute; display:block; padding:4px; z-index:2; border:1px solid #00C000; background-color:#FEFFE3; width:130px; text-align:center; ' + docDir[1] + ':0px; top:0px;}' + 'p.delacc span {color:orange;}' + 'table#noteblock {border-collapse:collapse; border:0px none white; text-align:center; padding:2px; margin:1px; background-color:' + TB3O.DFc[1] + ';}' + 'table#noteblock tr {background-color:transparent; border:0px none transparent;}' + 'table#noteblock td {border:0px none transparent; background-color:transparent; text-align:center; padding:2px;}' + '#noteblockcontent {border:1px solid silver; padding:0px 2px 0px 2px; overflow:auto; font-size:10pt; white-space:nowrap;}' + 'table#sell td.tbOfferG {background-color:#D0F0F0;}' + 'table#sell td.tbOption {height:20px;}' + 'table#sell td.tbOption input[type="text"]{width:25px;}' + 'table#sell td.tbOption input[type="checkbox"]{margin-top:3px;' + (docDir[0] === 'right' ? 'margin-right:0px' : 'margin-right:3px') + '; margin-bottom:3px;' + (docDir[0] === 'right' ? 'margin-left:3px' : 'margin-left:0px') + '; padding:0px;}' + 'table#sell td.tbOption span img {vertical-align:middle; padding-bottom:3px;}' + 'table#tb_offers {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; color:black; line-height:18px;}' + 'table#tb_offers thead td   {background-color:#F3F3F3; text-align:center; width:13%;}' + 'table#tb_offers thead *    {font-weight:bold}' + 'table#tb_offers tr         {background-color:transparent;}' + 'table#tb_offers tr.tbOfferG td {background-color:#D0F0F0;}' + 'table#tb_offers td         {border:1px solid silver; text-align:' + docDir[1] + '; vertical-align:middle;  white-space:nowrap;}' + 'table#tb_offers td.tbRatio {width:6%;}' + 'table#tb_offers td.tbVal   {text-align:left;}' + 'table#tb_offers td.soffc   {text-align:center;}' + 'table#tb_offers td.tbSave  {text-align:center; padding-top:3px;}' + '.tbSendRes td.tbInject {text-align:center;}' + '.tbSendRes td.tbInject, .tbSendRes td.tbInject * {vertical-align:middle !important;}' + '.tbSendRes td.tbUseThem {padding:0px !important;}' + '.tbSendRes td.tbTool    {padding-top:0px !important; padding-bottom:0px !important;}' + '.tbSendRes td.tbInject a.tbQCarry {white-space:nowrap;}' + '.tbSendRes td.tbInject a.tbMCap   {border-bottom:1px dotted;}' + '#tb_usetraders {width: 20px;}' + '#trading_edit span.tbUseTradersCtrl a * {vertical-align:middle;}' + '#trading_edit span.tbUseTradersCtrl {position: relative;top: -2px;}' + 'h4 .tbRollDown {float:' + docDir[1] + ';}' + 'table.traders .tbiDup {float:' + docDir[1] + ';}' + 'table.tbIncomingMerc tbody.tbInject * {vertical-align:middle;}' + 'table.tbIncomingMerc td.tbArrivalRes {padding:0px !important;}' + 'table.tbIncomingMerc td.tbArrivalRes table {border-collapse:collapse; border-color:silver; height:100%;}' + 'table.tbIncomingMerc td.tbArrivalRes table td {border-color:silver; width:20%; padding-' + docDir[1] + ':2px !important; font-size:8pt;}' + 'table.tbIncomingMerc td.tbOver,' + 'table.tbIncomingMerc td.tbUnder {padding:2px !important; padding-' + docDir[0] + ':27px !important; font-size:8pt;}' + 'td.tbOver,' + 'td.tbUnder {font-weight:bold; color:white;}' + 'td.tbOver  {background-color:darkgreen;}' + 'td.tbUnder {background-color:red;}' + 'table.tbIncomingMerc td.tbCapReached {color:red; text-decoration: blink;}' + 'table#tb_arrm_progress, ' + 'table#tb_arrm  {border-collapse:collapse; border:1px solid silver; margin-bottom:15px;}' + 'table#tb_arrm th, table#tb_arrm_progress th,' + 'table#tb_arrm td, table#tb_arrm_progress td {border:1px solid silver; text-align:center; padding:2px;}' + 'table#tb_arrm th, table#tb_arrm_progress th {background-color:#F3F3F3; font-weight:bold; background-image:none; height:18px;}' + 'table#tb_arrm td.cbgx {font-weight:bold;}' + 'table#tb_arrm td.tbTotal {font-weight:bold; width:17%;}' + 'table#tb_arrm .tbTimeout.tbOver.tbSoon,' + 'table#tb_arrm .tbTimeout.tbUnder.tbSoon {color:white; text-decoration: blink;}' + 'table#tb_arrm .tbTimeout.tbOver.tbDecrease,' + 'table#tb_arrm .tbTimeout.tbUnder.tbDecrease {color:white;}' + 'table#tb_arrm .tbTimeout.tbOver.tbCapReached,' + 'table#tb_arrm .tbTimeout.tbUnder.tbCapReached {color:yellow;}' + 'table#tb_arrm .tbRollDown {float:' + docDir[1] + ';margin-left:-13px;}' + 'table#tb_arrm_progress td {line-height:14px; font-size:8pt; padding:2px 4px; text-align:' + docDir[1] + ';}' + 'table#tb_arrm_progress td * {vertical-align:middle;}' + 'table#tb_arrm_progress td.tbTravelT  {max-width:60px;}' + 'table#tb_arrm_progress td.tbEvent img {margin:0px 4px;}' + 'table#tb_arrm_progress td.tbEvent img.tbiMerc {margin:0px;}' + 'table#tb_arrm_progress td.tbEvent.tbOver, table#tb_arrm_progress td.tbEvent.tbUnder {text-align:center; background-color:' + TB3O.DFc[1] + ';}' + 'table#tb_arrm_progress td.tbFillPerc {max-width:30px; padding:2px;}' + 'table#tb_arrm_progress td.tbCapReached {color:red; text-decoration: blink;}' + 'table#tb_arrm_progress td.tb3cresbar {padding:0px; min-width:100px;height:18px;}' + 'table#tb_arrm_progress th.tbTitle {font-weight:bold; padding: 0px; background-color:#F5FFF0;}' + 'table.tbTrainContract {width:100%; border-collapse:collapse; border:0px none white;}' + 'table.tbTrainContract td.tbOrg {white-space:nowrap;}' + 'table.tbTrainContract td.tbContainer {width:100%;}' + 'table.tbTrainQuick {display:inline-table; vertical-align:bottom; margin-bottom: 2px; width:100%; height:16px; border-collapse:collapse; border:0px none white;}' + 'table.tbTrainQuick td {width:17%; text-align:center;}' + 'table.tbTrainQuick td.tbSep  {width:3%; font-weight: bold;}' + 'table.tbTrainQuick td.tbQDel {width:6%;}' + 'table.tbTrainQuick td.tbQAdd {padding:0px 2px;}' + 'table.tbTrainQuick td.tbQSet {width:20%;padding:0px 1px;}' + 'table.tbTrainQuick td.tbQMax .a {font-weight:bold;}' + 'table.tbTrainQuick .CN.a {font-weight:normal; font-size:11px; color:darkgreen; text-shadow: 0px 0px 2px white;}' + 'table.tbTrainQuick .CN.a:hover {text-shadow: 0px 0px 2px lightgreen;}' + 'table.tbTrainingSummary td.desc img {margin-' + docDir[1] + ':5px; position:relative; top:3px;}' + 'table.tbTrainingSummary td img { margin-' + docDir[1] + ':4px;}' + 'table.tbTrainingSummary td.avg {width:10%;}' + 'table.tbTrainingSummary td.dur {width:20%;}' + 'table.tbTrainingSummary td.fin {width:25%;}' + 'table.tbTrainingSummary tr.cbgx td {border:0px;font-weight:bold;}' + 'table#TB3S {width:801px; border-collapse:collapse; border:1px solid silver; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; }' + 'table#TB3S tr.srh {background-color:#ECECEC; text-align:center; border:1px solid silver;}' + 'table#TB3S td {border:1px solid silver; background-color:transparent; padding:2px; border-collapse:collapse; text-align:' + docDir[0] + ';}' + 'table#TB3S .srst td {padding-' + docDir[0] + ':18px; background-color:#ECECEC; font-size:110%; font-weight:bold; color:darkblue; line-height:19px;}' + 'table#TB3S .srst input {position: absolute;' + docDir[0] + ':0px;}' + 'table#TB3S td.srsc1 {padding-' + docDir[0] + ':2em;}' + 'table#TB3S td.srsc2 {padding-left:4px; padding-right:4px;}' + 'table#TB3S td.tbCol1 {background-color:#ECECEC; text-align:center; width:60%; font-weight:bold; font-size:120%;}' + 'table#TB3S td.tbCol2 {background-color:#ECECEC; text-align:center; width:20%;}' + 'table#TB3S td.tbCol3 {background-color:#ECECEC; text-align:center; width:20%;}' + 'table#TB3S span {font-weight: bold; }' + 'table#TB3S input[name="alfl"],' + 'table#TB3S input[name="marcadores"],' + 'table#TB3S input[name="ventas"] {width:98%;}' + 'table#cptable {width:100%; border-collapse:collapse; border:1px solid silver; padding:2px; margin:1px;}' + 'table#cptable * {text-align:center !important;  font-size:8pt !important;}' + 'table#cptable tr, table#cptable td {border-collapse:collapse; border:1px solid silver; padding:2px; }' + 'table#cptable thead td {background-color:#ECECEC; font-weight:bold;}' + 'table#cptable td.CG {background-color:#C8FFC8;}' + 'table#cptable td.CR {background-color:#FFE1E1;}' + 'table#mbuyf {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:1px;}' + 'table#mbuyf tr {border-collapse:collapse; border:1px solid silver; text-align:center;}' + 'table#mbuyf td {border:1px solid silver; background-color:transparent; padding:2px; border-collapse:collapse;}' + 'table#mbuyf td.sf {background-color:#FFE4B5;}' + 'table.allvtroops, table.allvtroops tr td {border-collapse:collapse; border:1px solid silver; text-align:center; padding:2px;}' + 'table.allvtroops tr th {border-collapse:collapse; border:1px solid silver; text-align:' + docDir[0] + '; padding:2px 7px; width:20%;}' + 'table.tbSendTroopsMenu {width:auto;}' + 'table.tbSendTroopsMenu td {text-align:' + docDir[0] + '; font-size:8pt;}' + 'table.tbSendTroopsMenu td * {vertical-align:middle;}' + 'table.tbSendTroopsMenu span.none {font-weight: bold;}' + 'input#tb_selectscoutnumber {width:30px;}' + 'input[id^="tb_faketroop"] {margin-' + docDir[1] + ':10px;}' + 'table#tb_sendtroopstat {margin-bottom:15px;}' + 'table#tb_traintroopstat {margin-top:15px;}' + 'table#stla {width:100%; border-collapse:collapse; border:1px solid silver; font-weight:normal; font-size:8pt; color:black; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:0px; margin:0px; line-height:18px;}' + 'table#stla {margin-bottom:15px;}' + 'table#stla tr {background-color:transparent;}' + 'table#stla td {border:1px solid silver; font-size:8pt; text-align:' + docDir[1] + '; vertical-align:middle; padding:1px 2px 1px 2px; white-space:nowrap;}' + 'table#stla td.stlahh {background-color:#ECECEC; text-align:center; width:5%;}' + 'table#stla td.stlahh1 {background-color:#ECECEC; text-align:center; width:10%;}' + 'table#stla td.stlahh2 {background-color:#ECECEC; text-align:center;}' + 'table#stla td.stlac {background-color:transparent; text-align:center;}' + 'table.troop_details a.tbTool {text-align:center;}' + 'table.troop_details .tbUpDown {float:' + docDir[1] + ';margin-' + docDir[0] + ':2px;}' + 'table.troop_details tr.tbInject td {padding-top:3px; padding-bottom:3px;}' + 'table.troop_details tr.tbInject a {font-size:8pt;vertical-align:middle;}' + 'table.troop_details tr.tbInject a.tbMany {font-size:7pt;}' + 'table.tbAttDefInfo2 + table.tbAttDefInfo2 {margin-top:15px; margin-bottom:15px;}' + 'table#tb_dismisstroopsdist {width:50%; margin-top:15px;}' + 'table#dorf3table    {width:100%; border-collapse:collapse; border:1px solid silver; text-align:center; font-size:10pt; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:0px; }' + 'table#dorf3table tr {margin:1px;}' + 'table#dorf3table td {border:1px solid silver;}' + 'table#dorf3table tr.tb3sep  {border-top: 2px inset gray;}' + 'table#dorf3table th *    {vertical-align: middle; color:black;}' + 'table#dorf3table td input {vertical-align: middle;}' + 'table#dorf3table td.tb3name {width:150px; text-align:' + docDir[0] + '; white-space: nowrap; overflow:hidden;text-overflow:ellipsis;}' + 'table#dorf3table td.tbMerc  {text-align:center;}' + 'table#dorf3table td.tbInfinity {font-size:14pt;}' + 'table#dorf3table td.tbEmpty {height:2px;}' + 'table#dorf3table tr.tbTotal td {font-weight:bold;}' + 'table#dorf3table tr.tbTotal td.tbTitle {text-align:center;}' + 'table#dorf3table td.tbWait {padding:0px;}' + 'table#dorf3table.tb3d3_2 td.tb3name {max-width:110px;}' + 'table#dorf3table.tb3d3_2 td.tb3cnb  {font-size:8pt; text-align:' + docDir[1] + ';}' + 'table#dorf3table.tb3d3_2 td.tbMerc  {font-size:8pt;}' + 'table#dorf3table.tb3d3_3 td.tb3name {max-width:150px;}' + 'table#dorf3table.tb3d3_5 td.tb3name {max-width:110px;}' + 'table#dorf3table.tb3d3_5 td.tb3cnb  {font-size:8pt; color:black; }' + 'table#dorf3table.tb3d3_5 td.tb3none {color:lightgrey;}' + 'tr#aRselecttraintroops {border-collapse:collapse; background-color:' + TB3O.DFc[1] + ';}' + 'tr#aRselecttraintroops td {border:0px none transparent; background-color:transparent; text-align:center; padding:0px 2px 0px 7px;}' + '#tb_searchreports {margin-top:14px;}' + '#tb_searchreports * {vertical-align:middle;}' + '#tb_searchreports img {padding-left:2px; padding-right:2px}' + 'table#tb_delreptable {width:100%; border-collapse:collapse; border:1px solid silver; font-size:8pt; text-align:center; background-color:' + TB3O.DFc[1] + '; padding:2px; margin:14px 0px 0px 0px;}' + 'table#tb_delreptable tr {border:1px solid silver;}' + 'table#tb_delreptable td {border:1px solid silver; padding:2px; text-align:center;}' + 'table#tb_delreptable tr.r1 {background-color:#ECECEC;  border:1px solid silver;}' + 'table#tb_delreptable tr.r1 .tbTool img {float:' + docDir[1] + '}' + 'table#tb_delreptable tr.r2 td {}' + 'table#tb_delreptable tr.r2 img {padding-left:2px; padding-right:2px}' + 'table#tb_TITT th {text-align:center; font-size:8pt; font-weight:bold;}' + 'table#tb_TITT th img {vertical-align:middle;}' + 'table#tb_TITT td {padding: 2px; font-size: 8pt; text-align:' + docDir[1] + '}' + 'table#tb_TITT td.ico {text-align:' + docDir[0] + ';}' + 'table#tb_TITT td.tb3r1 {border-bottom:1px silver solid;}' + 'table#tb_TITT td.tb3c1,' + 'table#tb_TITT td.tb3c2 {border-' + docDir[1] + ':1px silver solid;}' + 'table.tbCost thead th {font-size:8pt;}' + 'table.tbCost td.tbIco {width:22px;}' + 'table.tbCost tr.tbTotal {border-top:1px silver solid;}' + 'table.tbCost tr.tbTotal td {font-weight:bold;}' + 'table#tb_MITT img.tbPrefix {padding-' + docDir[1] + ':5px;}' + 'table#tb_MITT td.tbTitle {text-align:center;}' + 'table#tb_MITT td.tbTotal {padding-' + docDir[0] + ':15px;}' + 'table#tb_BiPTM    {width:100px; border-collapse:collapse; border:1px solid silver; margin:0px; background-color:' + TB3O.DFc[1] + ';}' + 'table#tb_BiPTM tr {border:0px none transparent;}' + 'table#tb_BiPTM td {border:1px solid silver; font-size:8pt; padding:4px; white-space:nowrap; text-align:' + docDir[0] + ';}' + 'table#tb_BiPTM td.tbTitle {text-align:center;}' + 'table#tb_BiPTM td img {vertical-align:middle; margin-bottom:2px; margin-' + docDir[1] + ':4px;}' + 'a.tbTool img {margin:0px !important;}' + 'div.tbToolbar {display:inline;}' + 'div.tbWait {width: 100%; text-align:center;}' + '.tbRollDown {cursor:pointer; width: 11px; height:11px; line-height:11px; font-size:8px; text-align:center; display: inline-block; color:#787878; background-color:#F0F0F0; border:1px solid #71D000; -moz-border-radius:2em; border-radius:2em;}' + '.tbRollDown:hover {border-color:#787878; }' + '.tbUpDown {height:17px; width:8px; position:relative; display:inline;}' + '.tbUpDown img {position:absolute !important; cursor:pointer; ' + docDir[0] + ':0px !important; margin:0px !important; padding: 0px !important;}' + '.tbUpDown img.tbiUp   {top:0px !important;}' + '.tbUpDown img.tbiDown {top:9px !important;}' + '.tbUpDown.tbBuiltin {width:9px;}' + '.tbUpDown.tbBuiltin {top:-9px;vertical-align:middle;}' + '.tbUpDown.tbBuiltin img {border-color:#CCCCCC; border-width:1px; border-' + docDir[0] + '-style:solid;}' + '.tbUpDown.tbBuiltin img.tbiDown {top:8px !important; border-top-style:solid;}' + 'div#tb_tooltip {position:absolute; display:none; padding:2px; z-index:9000; border:1px solid #00C000; background-color:#FFFFCC; -moz-border-radius:5px; border-radius:5px;}' + 'div.npc-general {margin:3px 0 0; font-size:7pt; float:none;} ' + 'span.npc-red {color:#DD0000;} ' + 'span.npc-green {color:#009900;}' + 'td.desc, td.desc div, td.desc span {font-size:8pt;}' + 'a.tbInject img {display:inline; border:0px none white; }' + 'a.tbInject.tbExtStat img {margin:0px 2px -2px 3px;}' + 'a.tbInject.tbExtMap img {margin:0px 2px -1px 3px;}' + 'a.tbInject.tbMail img {margin:3px 0px 1px 3px;}' + 'a.tbInject.tbAttDef img {vertical-align: middle;}' + 'a.tbInject.tbRes img {vertical-align: middle;}' + 'a.tbInject.tbMsgPop {line-height: inherit; height: inherit; position:relative; float:' + docDir[1] + ' !important; margin:0px !important;}' + '#userbookmarks a.tbInject.tbMsgPop {position: static; float:none !important; padding-' + docDir[0] + ':5px; vertical-align: middle;}' + '.tbTimeout {color:darkgreen;}' + '.tbTimeout.tbDecrease {color:red;}' + '.tbTimeout.tbSoon     {color:red;}' + '.tbTimeout.tbCapReached {color:red; text-decoration: blink;}' + '.tbFillPerc.tbSoon,' + '.tbFillPerc.tbCapReached {text-decoration: blink;}' + '.tbSelected * {background-color:#ECECEC !important;}' + 'td.ratio_l  { background-color:#FFE1E1; color:red;}' + 'td.ratio_e  {}' + 'td.ratio_g  { background-color:#C8FFC8; color:darkgreen;}' + '.tbMany  {font-size:7pt !important;}' + '.tbCount.tbNew {color:green;}' + 'div.tbBullet {display: inline-block; border:1px solid black; -moz-border-radius:2em; border-radius:2em; margin:0 2px; }' + 'div.tbSmall {width:8px; height:8px; margin:2px;}' + 'div.tbGreat {width:12px; height:12px; }' + '.tbUpg   {background-color:' + TB3O.CNc[1] + ' !important;}' + '.tbMax   {background-color:' + TB3O.CNc[2] + ' !important;}' + '.tbNoRes {background-color:' + TB3O.CNc[3] + ' !important;}' + '.tbNPCUpg{background-color:' + TB3O.CNc[4] + ' !important;}' + '.tbNoCap {background-color:' + TB3O.CNc[5] + ' !important;}' +
		((TB3O.O[45] === '1') ? '.tbUpgNow {text-decoration: blink !important;}' : '') + 'img.tbiIn {width:12px; height:12px; background-image: url(' + image['dist' + docDir[1].substr(0, 1)] + ');}' + 'img.tbiCP {width:18px; height:12px; background-image: url(' + image['cp'] + ');}' + 'img.tbiHourglass {width:18px; height:12px; background-image: url(' + image['hourglass'] + ');}' + 'img.tbiCentermap {width:16px; height:16px; background-image: url(' + image['centermap'] + ');}' + 'img.tbiMerc {width:10px; height:12px; background-image: url(' + image['merchant'] + ');}' + 'img.tbiIV   {width:12px; height:12px; background-image: url(' + image['iv'] + ');}' + 'img.tbiOV   {width:12px; height:12px; background-image: url(' + image['ov'] + ');}' + 'img.tbiAttacks  {width:10px; height:10px; background-image: url(' + image['attacks'] + ');}' + 'img.tbiDup  {width:16px; height:16px; background-image: url(' + image['dup'] + ');}';
		acss += 'img.tbiMr1, img.tbiMr2, img.tbiMr3, img.tbiMr4 {height: 12px; width: 18px; background-image: url(' + image['mapinfo'] + ');}' + 'img.tbiMr2 {background-position: -18px 0;}' + 'img.tbiMr3 {background-position: -36px 0;}' + 'img.tbiMr4 {background-position: -54px 0;}' + 'div[id^="tb_map_info_"] {position:relative;}' + 'div[id^="tb_map_info_"] img {position:absolute;z-index:1;top:2px;left:2px;}' + 'div[id^="tb_map_info_"] img.tbMo13 {top:2px;left:2px;z-index:1;}' + 'div[id^="tb_map_info_"] img.tbMo23 {top:2px;left:12px;z-index:1;}' + 'div[id^="tb_map_info_"] img.tbMo33 {top:10px;left:6px;z-index:2;}' + 'div[id^="tb_map_info_"] img.tbMo22 {left:8px;z-index:1;}';
		acss += '.tb3BI img   {width:70px; height:' + '67' + 'px;}' + '.tb3BI       {float:' + docDir[0] + ';background-repeat:no-repeat;}' + '.tb3BI       {margin-top:10px;}' + '.tb3BI:hover {background-position:bottom;}' + '#n7.tb3BI       {background-image: url(' + image['militargs'] + ');}' + '#n7.tb3BI:hover {background-image: url(' + image['militar'] + ');}' + '#n8.tb3BI       {background-image: url(' + image['alliancegs'] + ');}' + '#n8.tb3BI:hover {background-image: url(' + image['alliance'] + ');}' + '#n9.tb3BI       {background-image: url(' + image['setup'] + ');position:relative;}' + '#n9.tb3BI img   {height:52px;}' + '#n9.tb3BI:hover {background-position:0px -67px;}' + '#n10.tb3BI      {background-image: url(' + image['militar2gs'] + ');}' + '#n10.tb3BI:hover{background-image: url(' + image['militar2'] + ');}' + '#n11.tb3BI      {background-image: url(' + image['miscgs'] + ');}' + '#n11.tb3BI:hover{background-image: url(' + image['misc'] + ');}' + '#n12.tb3BI      {background-image: url(' + image['mercadogs'] + ');}' + '#n12.tb3BI:hover{background-image: url(' + image['mercado'] + ');}';
		acss += '.MsgPageOff {visibility:hidden; display:none; position:absolute; top:-100px; left:-100px;}' + '.OuterMsgPageOn {position:absolute; top:0px; left:0px; visibility:visible; width:100%; height:100%; background-color:#000000; z-index:1998; opacity:0.75;}' + '.InnerMsgPageOn {position: absolute; left:50%; top:0px; padding: 30px 0px; visibility:visible; opacity:1; z-index:1999;}';
		GM_addStyle(acss);
	}
	function parseInt10(str, defv) {
		var v = parseInt(str, 10);
		if (isNaN(v) && defv !== undefined) {
			v = defv;
		}
		return v;
	}
	function parseSeparatedInt10(str, defv) {
		str = str.replace(/[\s,.'"]/g, '');
		return parseInt10(str, defv);
	}
	function toSeconds(hTime) {
		var p = hTime.split(":");
		return (p.length === 3) ? (p[0] * 3600) + (p[1] * 60) + (p[2] * 1) : Number.NaN;
	}
	function toTimeStamp(dt) {
		return (dt instanceof Date) ? dt.getTime() : dt;
	}
	function toDate(tt) {
		return (tt instanceof Date) ? tt : new Date(tt);
	}
	function getTimeSpan(date1, date2) {
		return (date1 === null || date2 === null) ? null : (toTimeStamp(date1) - toTimeStamp(date2)) / 1000;
	}
	function to2Str(n) {
		return (n > 9 ? n : '0' + n);
	}
	function formatTimeSpan(sec, aFormat) {
		var h,
		m,
		s,
		d,
		ht;
		if (sec === Infinity || sec === -Infinity) {
			ht = String.fromCharCode(0x221E);
		} else if (isIntValid(sec) && sec > -1) {
			h = Math.floor(sec / 3600);
			m = Math.floor(sec / 60) % 60;
			s = parseInt(sec % 60);
			ht = "";
			switch (aFormat) {
			case 1:
				d = Math.floor(h / 24);
				h = h - d * 24;
				ht += d + ", ";
				break;
			case 2:
				h = h % 24;
				break;
			}
			ht += h + ":" + to2Str(m) + ":" + to2Str(s);
		} else {
			ht = "0:00:0?";
		}
		return ht;
	}
	function formatDateTime(dtNow, aD, aFormat) {
		var timeR = '';
		if (aD === null) {
			timeR += T('AT') + " 00:00:0?"
		} else if (aD === Infinity) {
			timeR += T('NEVER');
		} else {
			dtNow = toDate(dtNow);
			aD = toDate(aD);
			switch (aFormat) {
			case 0:
				var h = ((aD.getTime() - dtNow.getTime()) / 1000 / 3600) + dtNow.getHours() + (dtNow.getMinutes() / 60);
				if (h < 24) {
					timeR = "";
				} else if (h < 48) {
					timeR = T('TOMORROW');
				} else if (h < 72) {
					timeR = T('DAYAFTERTOM');
				} else {
					timeR = T('ON') + " " + to2Str(aD.getDate()) + "/" + to2Str((aD.getMonth() + 1));
				}
				break;
			case 1:
				var day = aD.getDate();
				var month = aD.getMonth();
				if (day !== dtNow.getDate() || month !== dtNow.getMonth()) {
					timeR = to2Str(day) + "/" + to2Str(month + 1);
				}
				break;
			}
			if (timeR !== "") {
				timeR += " ";
			}
			timeR += T('AT') + " " + to2Str(aD.getHours()) + ":" + to2Str(aD.getMinutes());
			if (aFormat !== 0) {
				timeR += ":" + to2Str(aD.getSeconds());
			}
		}
		return timeR;
	}
	function _ifHelper(f, args) {
		var i;
		for (i = 1; i < args.length - 1; i += 2) {
			if (f(args[0], args[i])) {
				return args[i + 1];
			}
		}
		if (args.length % 2 === 0) {
			return args[args.length - 1];
		}
	}
	function ifEqual(v) {
		return _ifHelper(function (n1, n2) {
			return n1 == n2;
		}, arguments);
	}
	function ifGreater(v) {
		return _ifHelper(function (n1, n2) {
			return n1 > n2;
		}, arguments);
	}
	function isSomeOf(v) {
		var i;
		for (i = 1; i < arguments.length; ++i) {
			if (v === arguments[i]) {
				return true;
			}
		}
		return false;
	}
	function forEach(lst, cb) {
		if (lst) {
			var i,
			len;
			if (lst.snapshotItem) {
				for (i = 0, len = lst.snapshotLength; i < len; ++i) {
					cb(lst.snapshotItem(i), i, lst);
				}
			} else if (lst.iterateNext) {
				var item,
				next = lst.iterateNext;
				for (i = 0; item = next(); ++i) {
					cb(item, i, lst);
				}
			} else if (typeof lst.length !== 'undefined') {
				for (i = 0, len = lst.length; i < len; ++i) {
					cb(lst[i], i, lst);
				}
			} else if (typeof lst === "object") {
				for (i in lst) {
					cb(lst[i], i, lst);
				}
			}
		}
	}
	function convertToArray(lst) {
		var arr = [];
		forEach(lst, function (item) {
			arr.push(item)
		});
		return arr;
	}
	function countIf(lst, cb) {
		var count = 0;
		function counterCB(item, i, lst) {
			if (cb(item, i, lst)) {
				++count;
			}
		}
		forEach(lst, counterCB);
		return count;
	}
	function join(lst, sep) {
		var str = "";
		var bFirst = true;
		function joinCB(item) {
			if (!bFirst) {
				str += sep;
			}
			bFirst = false;
			str += item;
		}
		forEach(lst, joinCB);
		return str;
	}
	function compare(m, n) {
		return m == n ? 0 : (m > n ? 1 : -1);
	}
	function compareNumbers(m, n) {
		return m - n;
	}
	function trimBlanks(s) {
		var l = 0;
		var r = s.length - 1;
		while (l < s.length && s[l] === ' ') {
			l++;
		}
		while (r > l && s[r] === ' ') {
			r -= 1;
		}
		return s.substring(l, r + 1);
	}
	function trimWhitespaces(s) {
		if (!trimWhitespaces.re) {
			trimWhitespaces.re = /^\s*(.*?)\s*$/;
		}
		if (trimWhitespaces.re.exec(s)) {
			s = RegExp.$1;
		}
		return s;
	}
	function removeInvisibleChars(str) {
		return str.replace(/[\u200E\u200F\u202A\u202B\u202C\u202D\u202E]/g, '');
	}
	function decodeHTMLEntities(str) {
		if (!decodeHTMLEntities.element) {
			decodeHTMLEntities.element = document.createElement('div');
		}
		decodeHTMLEntities.element.innerHTML = str;
		str = removeInvisibleChars(decodeHTMLEntities.element.innerHTML);
		decodeHTMLEntities.element.textContent = '';
		return str;
	}
	function bind(f, boundArgs) {
		return function () {
			return f.apply(this, boundArgs);
		};
	}
	function bindMethod(o, f, boundArgs) {
		return function () {
			return f.apply(o, boundArgs);
		};
	}
	function bind2(f, boundArgs) {
		return function () {
			var i,
			args = [];
			for (i = 0; i < boundArgs.length; i++) {
				args.push(boundArgs[i]);
			}
			for (i = 0; i < arguments.length; i++) {
				args.push(arguments[i]);
			}
			return f.apply(this, args);
		};
	}
	function xbindMethod2(o, f) {
		var i,
		args = [];
		for (i = 2; i < arguments.length; i++) {
			args.push(arguments[i]);
		}
		return function () {
			return f.apply(o, args.concat(convertToArray(arguments)));
		};
	}
	shuffle = function (v) {
		for (var j, x, i = v.length; i; j = parseInt(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
		return v;
	}
	function cloneArray(v) {
		return v.slice();
	}
	function fillArray(a, v) {
		var i = a.length;
		while (i--) {
			a[i] = v;
		}
		return a;
	}
	function accumulateArray(a1, a2) {
		var len = a1.length
			var i;
		for (i = 0; i < a1.length; ++i) {
			if (a2[i] !== undefined) {
				a1[i] += a2[i];
			}
		}
		return a1;
	}
	function cloneObject(obj) {
		if (obj !== null && typeof(obj) === 'object') {
			var prop_name;
			var dest_obj = (obj instanceof Array) ? [] : {};
			for (prop_name in obj) {
				dest_obj[prop_name] = cloneObject(obj[prop_name]);
			}
			return dest_obj;
		}
		return obj;
	}
	function cloneUndefinedProperties(src_obj, dest_obj) {
		var prop,
		prop_name;
		var destUpdated = false;
		for (prop_name in src_obj) {
			if (src_obj.hasOwnProperty(prop_name)) {
				prop = src_obj[prop_name];
				if (prop !== null && typeof(prop) === "object") {
					if (!dest_obj.hasOwnProperty(prop_name)) {
						dest_obj[prop_name] = (prop instanceof Array) ? [] : {};
						destUpdated = true;
					}
					if (cloneUndefinedProperties(prop, dest_obj[prop_name])) {
						destUpdated = true;
					}
				} else {
					if (!dest_obj.hasOwnProperty(prop_name)) {
						dest_obj[prop_name] = prop;
						destUpdated = true;
					}
				}
			}
		}
		return destUpdated;
	}
	function removeUndefinedProperties(src_obj, dest_obj) {
		var prop_name,
		src_prop,
		dest_prop;
		for (prop_name in dest_obj) {
			if (prop_name in src_obj) {
				src_prop = src_obj[prop_name];
				dest_prop = dest_obj[prop_name];
				if (typeof(src_prop) === "object" && typeof(dest_prop) === "object") {
					if (!src_prop instanceof Array && !dest_prop instanceof Array) {
						removeUndefinedProperties(src_prop, dest_prop);
					}
				}
			} else {
				delete dest_obj[prop_name];
			}
		}
	}
	function parseUri(str) {
		if (!parseUri.options) {
			parseUri.options = {
				strictMode : false,
				key : ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "hash", "anchor", "hashbang"],
				q : {
					key : "query",
					name : "queryKey",
					parser : /(?:^|&)([^&=]*)=?([^&]*)/g
				},
				h : {
					key : "hashbang",
					name : "hashKey",
					parser : /(?:^|&)([^&=]*)=?([^&]*)/g
				},
				parser : {
					strict : /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(([^!]*)(?:!(.*)?)?))?)/,
					loose : /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(([^!]*)(?:!(.*)?)?))?)/
				}
			};
		}
		function subparse(uri, rules) {
			uri[rules.name] = {};
			uri[rules.key].replace(rules.parser, function ($0, $1, $2) {
				if ($1)
					uri[rules.name][$1] = $2;
			});
		}
		var o = parseUri.options,
		m = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
		uri = {},
		i = 16;
		while (i--)
			uri[o.key[i]] = m[i] || "";
		subparse(uri, o.q);
		subparse(uri, o.h);
		return uri;
	}
	function combineUri(uri) {
		function combineCollection(collection) {
			var s = "";
			var p;
			for (p in collection) {
				if (s) {
					s += "&";
				}
				s += p + "=" + collection[p];
			}
			return s;
		}
		uri.query = combineCollection(uri.queryKey);
		uri.hashbang = combineCollection(uri.hashKey);
		uri.hash = "";
		if (uri.anchor) {
			uri.hash += uri.anchor;
		}
		if (uri.hashbang) {
			uri.hash += "!" + uri.hashbang;
		}
		var str = uri.protocol;
		if (str) {
			str += ":";
		}
		if (uri.authority) {
			str += "//" + uri.authority;
		}
		return str + uri.path + (uri.query ? "?" + uri.query : "") + (uri.hash ? "#" + uri.hash : "");
	}
	function isStrValid(s) {
		return typeof(s) === "string" && s.length > 0;
	}
	function isIntValid(v) {
		return v !== null && isFinite(v);
	}
	function scanIntRE(str, re) {
		var v = Number.NaN;
		if (str !== undefined && str.search(re) !== -1) {
			v = parseInt10(RegExp.$1);
		}
		return v;
	}
	function scanIntAny(str) {
		return scanIntRE(str, /(\d+)/);
	}
	function scanIntWithoutLetter(str) {
		return scanIntRE(str, /^\W*(\d+)/);
	}
	function scanIntWithPrefix(prefix, str) {
		return scanIntRE(str, "(?:\\s+|^)" + prefix + "(\\d+)");
	}
	function Timer() {
		this.timer = null;
	}
	Timer.prototype.isActive = function () {
		return Boolean(this.timer)
	}
	Timer.prototype.cancel = function () {
		if (this.timer) {
			clearTimeout(this.timer);
			this.timer = null;
		}
	}
	Timer.prototype.set = function () {
		this.timer = setTimeout.apply(null, arguments);
	}
	Timer.prototype.interval = function () {
		this.timer = setInterval.apply(null, arguments);
	}
	function validateInputInt(input, min, max) {
		var value = 0;
		if (input.value !== "") {
			value = Number(input.value);
			if (max !== undefined && (isNaN(value) || value > max)) {
				value = max;
			} else if (min !== undefined && (isNaN(value) || value < min)) {
				value = min;
			}
			if (isNaN(value)) {
				input.value = "";
				value = 0;
			} else {
				input.value = value;
			}
		}
		return value;
	}
	function isDOMNode(node) {
		return typeof(node) === "object" && typeof(node.nodeType) === "number" && typeof(node.nodeName) === "string" && typeof(node.tagName) === "string";
	};
	function __getDOMNode(node) {
		if (typeof node === "string" || typeof node === "number") {
			node = document.createTextNode(node);
		}
		return node;
	}
	function __isLikeToArray(o) {
		return (o instanceof Array || (typeof o === "object" && 'length' in o && !isDOMNode(o)));
	}
	function addChildren(node, children) {
		if (children) {
			if (__isLikeToArray(children)) {
				var i;
				for (i = 0; i < children.length; i++) {
					addChildren(node, children[i]);
				}
			} else {
				node.appendChild(__getDOMNode(children));
			}
		}
	}
	function removeChildren(node) {
		if (node) {
			node.innerHTML = "";
		}
	}
	function replaceChildren(node, children) {
		removeChildren(node);
		addChildren(node, children);
	}
	function removeElement(node) {
		if (node && node.parentNode) {
			node.parentNode.removeChild(node);
		}
	}
	function replaceElement(oldnode, newnode) {
		if (oldnode) {
			var parent = oldnode.parentNode;
			if (parent) {
				if (__isLikeToArray(newnode)) {
					var i;
					var next = oldnode.nextSibling;
					parent.removeChild(oldnode);
					for (i = 0; i < newnode.length; i++) {
						parent.insertBefore(__getDOMNode(newnode[i]), next);
					}
				} else {
					parent.replaceChild(newnode, oldnode);
				}
			}
		}
	}
	function moveElement(node, dest) {
		removeElement(node);
		dest.appendChild(node);
	}
	function insertBefore(node, referenceNode) {
		node.parentNode.insertBefore(referenceNode, node);
	}
	function insertAfter(node, referenceNode) {
		node.parentNode.insertBefore(referenceNode, node.nextSibling);
	}
	function insertFirst(parent, node) {
		parent.insertBefore(node, parent.firstChild);
	}
	function insertLast(parent, node) {
		parent.insertBefore(node, null);
	}
	function hasAncestor(node, ancestor) {
		return (node.compareDocumentPosition(ancestor) & 0x08) !== 0;
	}
	function getDocument(node) {
		while (node && node.nodeType !== 9) {
			node = node.parentNode;
		}
		return node;
	}
	function display(node, bShow) {
		if (node) {
			node.style.display = (bShow) ? '' : 'none';
		}
	}
	function show(node) {
		display(node, true);
	}
	function hide(node) {
		display(node, false);
	}
	function TAG(node) {
		var tag = node.tagName;
		return tag ? tag.toUpperCase() : tag;
	}
	function getTextContent(node, sep) {
		var i;
		var str = "";
		var texts = $xf(".//text()", 'l', node);
		if (sep === undefined) {
			sep = " ";
		}
		for (i = 0; i < texts.snapshotLength; ++i) {
			if (i > 0) {
				str += sep;
			}
			str += texts.snapshotItem(i).nodeValue;
		}
		return str;
	}
	function $g(aID, aDoc) {
		if (!aDoc) {
			aDoc = document;
		}
		return (aID !== '' ? aDoc.getElementById(aID) : null);
	}
	function $n(name, aDoc) {
		if (!aDoc) {
			aDoc = document;
		}
		var elems = aDoc.getElementsByName(name);
		return (elems.length) ? elems[0] : null;
	}
	function $nth_tag(parent, tag, n) {
		if (n === undefined) {
			n = 0;
		}
		var elems = parent.getElementsByTagName(tag);
		return (elems.length > n) ? elems[n] : null;
	}
	function $xf(xpath, xpt, startnode, aDoc) {
		if (!aDoc) {
			aDoc = getDocument(startnode);
			if (!aDoc) {
				aDoc = document;
			}
		}
		if (!startnode) {
			startnode = document;
		}
		var xpres = XPathResult.FIRST_ORDERED_NODE_TYPE;
		switch (xpt) {
		case 'i':
			xpres = XPathResult.UNORDERED_NODE_ITERATOR_TYPE;
			break;
		case 'l':
			xpres = XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE;
			break;
		case 'r':
			xpres = XPathResult.ORDERED_NODE_SNAPSHOT_TYPE;
			break;
		case 'n':
			xpres = XPathResult.NUMBER_TYPE;
			break;
		}
		var result = aDoc.evaluate(xpath, startnode, null, xpres, null);
		var ret = result;
		switch (result.resultType) {
		case XPathResult.FIRST_ORDERED_NODE_TYPE:
			ret = result.singleNodeValue;
			break;
		case XPathResult.NUMBER_TYPE:
			ret = result.numberValue;
			break;
		}
		return ret;
	}
	function $xClass(cls) {
		return "contains(concat(' ',@class,' '),' " + cls + " ')";
	}
	function $at(aElem, attributes) {
		function processAttribute(aElem, name, value) {
			if (value !== null && value !== undefined && value !== "") {
				if (name === 'class' && value.charAt(0) === '+') {
					addClass(aElem, value.slice(1));
				} else {
					if (name.toUpperCase() === 'TITLE') {
						try {
							aElem.wrappedJSObject.setTip(value);
						} catch (e) {
							aElem.setAttribute(name, value);
							aElem.setAttribute('alt', value);
						}
					} else if (name.charAt(0) === '#') {
						setTBAttribute(aElem, name.slice(1), value);
					} else {
						aElem.setAttribute(name, value);
					}
				}
			} else {
				aElem.removeAttribute(name);
			}
		}
		function processEventListener(aElem, type, listener, useCapture) {
			aElem.addEventListener(type, listener, useCapture);
		}
		if (attributes) {
			var xi;
			for (xi = 0; xi < attributes.length; xi++) {
				var attribute = attributes[xi];
				if (attribute instanceof Array) {
					if (attribute.length === 2) {
						processAttribute(aElem, attribute[0], attribute[1]);
					} else if (attribute.length === 3) {
						processEventListener(aElem, attribute[0], attribute[1], attribute[2]);
					}
				} else if (xi === 0) {
					if (attributes.length === 2) {
						processAttribute(aElem, attribute, attributes[1]);
					} else if (attribute.length === 3) {
						processEventListener(aElem, attribute, attributes[1], attributes[2]);
					}
					break;
				}
			}
		}
	}
	function $e(aType, attributes, content) {
		var node = document.createElement(aType);
		if (!(attributes instanceof Array) && !(attributes === null || attributes === undefined)) {
			content = attributes;
			attributes = null;
		}
		$at(node, attributes);
		if (content !== null && content !== undefined) {
			if (typeof content === "object") {
				addChildren(node, content);
			} else if (content !== "") {
				node.innerHTML = content;
			}
		}
		return node;
	}
	function $txt(data) {
		return document.createTextNode(data);
	}
	function $t(att, content) {
		return $e("table", att, content);
	}
	function $th(att, content) {
		return $e("th", att, content);
	}
	function $r(att, content) {
		return $e("tr", att, content);
	}
	function $c(iHTML, att) {
		return $e("td", att, iHTML);
	}
	function $td(att, content) {
		return $e("td", att, content);
	}
	function $img(att) {
		var aImg = document.createElement("img");
		$at(aImg, att);
		return aImg;
	}
	function $a(iHTML, att) {
		return $e("a", att, iHTML);
	}
	function $lnk(att, content) {
		return $e("a", att, content);
	}
	function $action(att, content, onClick) {
		var aLink = $lnk(att, content);
		aLink.href = jsVoid;
		aLink.addEventListener("click", onClick, false);
		return aLink;
	}
	function $i(att) {
		var aInput = document.createElement("input");
		$at(aInput, att);
		return aInput;
	}
	function $div(att, content) {
		return $e("div", att, content);
	}
	function $span(att, content) {
		return $e("span", att, content);
	}
	function getClasses(str) {
		return (str instanceof Array) ? str : str.split(" ");
	}
	function hasClass(ex, cls) {
		var classes,
		i;
		if (cls) {
			if (ex.className) {
				classes = getClasses(ex.className);
				for (i = 0; i < classes.length; ++i) {
					if (classes[i] === cls) {
						return true;
					}
				}
			}
		}
		return false;
	}
	function hasAnyClass(ex, cls) {
		if (cls) {
			if (ex.className) {
				var i,
				j;
				var classes = getClasses(ex.className);
				var checked_classes = getClasses(cls);
				var bFound = false;
				for (i = 0; i < classes.length; ++i) {
					for (j = 0; j < checked_classes.length; ++j) {
						if (classes[i] === checked_classes[j]) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}
	function addClass(ex, cls) {
		if (cls) {
			if (!hasClass(ex, cls)) {
				if (ex.className) {
					ex.className += " " + cls;
				} else {
					ex.className = cls;
				}
			}
		}
	}
	function delClass(ex, cls) {
		if (cls) {
			if (ex.className) {
				var i,
				j;
				var classes = getClasses(ex.className);
				var checked_classes = getClasses(cls);
				var bFound = false;
				for (i = 0; i < classes.length; ++i) {
					for (j = 0; j < checked_classes.length; ++j) {
						if (classes[i] === checked_classes[j]) {
							classes.splice(i, 1);
							--i;
							bFound = true;
							break;
						}
					}
				}
				if (bFound) {
					ex.className = classes.join(" ");
				}
			}
		}
	}
	function toggleClass(ex, cls) {
		if (hasClass(ex, cls)) {
			delClass(ex, cls);
		} else {
			addClass(ex, cls);
		}
	}
	function ifClass(ex, cond, cls) {
		if (cond) {
			addClass(ex, cls);
		} else {
			delClass(ex, cls);
		}
	}
	function fireChangeEvent(ex) {
		if (ex) {
			var event = document.createEvent("Events");
			event.initEvent("change", true, false);
			ex.dispatchEvent(event);
		}
	}
	function getX(element) {
		var e;
		var x = 0;
		for (e = element; e; e = e.offsetParent) {
			x += e.offsetLeft;
		}
		for (e = element.parentNode; e && e !== document.body; e = e.parentNode) {
			x -= e.scrollLeft;
		}
		return x;
	}
	function getY(element) {
		var e;
		var y = 0;
		for (e = element; e; e = e.offsetParent) {
			y += e.offsetTop;
		}
		for (e = element.parentNode; e && e !== document.body; e = e.parentNode) {
			y -= e.scrollTop;
		}
		return y;
	}
	function createHTMLDocument(text) {
		if (typeof DOMParser != "undefined") {
			console.log('using DOMParser');
			var doc = (new DOMParser()).parseFromString(text, "text/html");
			console.log(doc);
			return doc;
		} else if (typeof ActiveXObject != "undefined") {
			var doc = new ActiveXObject("MSXML2.DOMDocument");
			doc.loadXML(text);
			return doc;
		} else {
			var url = "data:text/xml;charset=utf-8," + escape(text);
			var request = new XMLHttpRequest();
			request.open("GET", url, false);
			request.send(null);
			return request.responseXML;
		}
	}
	function ajaxRequest(url, aMethod, param, onSuccess, onFailure) { ;
		var aR = new XMLHttpRequest();
		aR.onreadystatechange = onReadyStateChange;
		aR.open(aMethod, url, true);
		if (aMethod === 'POST') {
			aR.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
		}
		aR.send(param);
		function onReadyStateChange() {
			if (aR.readyState === 4) {
				if (aR.status === 200) {
					onSuccess(aR);
				} else if (onFailure) {
					onFailure(aR);
				}
			}
		}
	}
	function ajaxLoadDocument(url, onSuccess, onFailure) {
		ajaxRequest(url, "GET", null, function (resp) {
			var xhr_doc = createHTMLDocument(resp.responseText);
			console.log(xhr_doc);
			onSuccess(xhr_doc);
		}, onFailure);
	}
	function AJAXSequencer(options) {
		this._options = options || {};
		this._queue = [];
		if (this._options.load_policy === undefined) {
			this._options.load_policy = "immediately";
		}
		if (this._options.process_policy === undefined) {
			this._options.process_policy = "immediately";
		}
	}
	AJAXSequencer.prototype._getStat = function () {
		var stats = [0, 0, 0, 0, 0, 0, 0];
		var id,
		length;
		for (id = 0, length = this._queue.length; id < length; ++id) {
			++stats[this._queue[id].state];
		}
		return stats;
	}
	AJAXSequencer.prototype._onProgress = function (eventType, id) {
		if (this._options.onprogress) {
			var stats = this._getStat();
			this._options.onprogress({
				eventType : eventType,
				state : this._queue[id].state,
				old_state : this._queue[id].old_state,
				cnt_total : this._queue.length,
				cnt_wait : stats[0],
				cnt_requested : stats[1],
				cnt_done : stats[2] + stats[3] + stats[4] + stats[5] + stats[6]
			});
		}
	}
	AJAXSequencer.prototype._changeState = function (eventType, id, newState) {
		var q = this._queue[id];
		q.old_state = q.state;
		q.state = newState;
		this._onProgress(eventType, id);
	}
	AJAXSequencer.prototype._processDocument = function (id, xhr_doc) {
		var q = this._queue[id];
		var handler = q.onload || this._options.onload;
		var bResult = handler(xhr_doc);
		this._changeState("processed", id, (bResult) ? 3 : 4);
	}
	AJAXSequencer.prototype._checkQueue = function () {
		var stats = this._getStat();
		var total = this._queue.length;
		var processed = stats[3] + stats[4] + stats[5] + stats[6];
		if (total === processed) {
			var handler = this._options.oncomplete;
			if (handler) {
				handler(total === stats[3]);
			}
		} else if (total === (stats[2] + processed)) {
			var id,
			length;
			for (id = 0; id < total; ++id) {
				var q = this._queue[id];
				if (q.state === 2) {
					this._processDocument(id, q.doc);
				}
			}
			this._checkQueue();
		}
	}
	AJAXSequencer.prototype._onSuccess = function (id, xhr_doc) {
		var q = this._queue[id];
		if (q.state === 1) {
			this._changeState("loaded", id, 2);
			if (this._options.process_policy === "immediately") {
				this._processDocument(id, xhr_doc);
			} else {
				q.doc = xhr_doc;
			}
		}
		this._checkQueue();
	}
	AJAXSequencer.prototype._onFailure = function (id) {
		var q = this._queue[id];
		if (q.state === 1) {
			this._changeState("failed", id, 5);
			var handler = q.onfail || this._options.onfail;
			if (handler) {
				handler();
			}
		}
		this._checkQueue();
	}
	AJAXSequencer.prototype._processQueue = function () {
		var bImm = (this._options.load_policy === "immediately");
		var id,
		length;
		for (id = 0, length = this._queue.length; id < length; ++id) {
			var q = this._queue[id];
			if (q.state === 0 && bImm) {
				ajaxLoadDocument(q.url, xbindMethod2(this, this._onSuccess, id), xbindMethod2(this, this._onFailure, id));
				this._changeState("requested", id, 1);
			}
		}
	}
	AJAXSequencer.prototype.load = function (url, onSuccess, onFailure) {
		var id = this._queue.push({
				url : url,
				onload : onSuccess,
				onfail : onFailure,
				state : 0
			}) - 1;
		this._onProgress("queued", id);
		this._processQueue();
	}
	AJAXSequencer.prototype.cancel = function () {
		var id,
		length;
		for (id = 0, length = this._queue.length; id < length; ++id) {
			var state = this._queue[id].state;
			if (state === 0 || state === 1 || state === 2) {
				this._changeState("cancelled", id, 6);
			}
		}
		this._checkQueue();
	}
	function Persistence(serializer, storage) {
		this.serializer = serializer;
		this.storage = storage;
	}
	Persistence.prototype.__composePersistentName = function (NS, aName) {
		return ((NS === undefined || NS === null) ? "" : NS) + '_' + aName;
	};
	Persistence.prototype.loadValue = function (NS, aName, defValue) {
		var key = this.__composePersistentName(NS, aName);
		var item = this.storage.getItem(key);
		var val = defValue;
		if (item !== null) {
			try {
				val = this.serializer.deserialize(item);
			} catch (e) {}

		}
		return val;
	};
	Persistence.prototype.loadObject = function (NS, aName, defValue) {
		if (defValue === undefined) {
			defValue = {};
		}
		var v = this.loadValue(NS, aName, defValue);
		if (!v || typeof(v) !== "object") {
			v = defValue;
		}
		return v;
	};
	Persistence.prototype.saveValue = function (NS, aName, aValue) {
		var key = this.__composePersistentName(NS, aName);
		this.storage.setItem(key, this.serializer.serialize(aValue));
	};
	Persistence.prototype.saveObject = function (NS, aName, aValue, aKey) {
		if (aKey === undefined || aKey === null) {
			this.saveValue(NS, aName, aValue);
		} else if (aKey) {
			var cV = this.loadObject(NS, aName);
			if (aValue === undefined || aValue === null) {
				delete cV[aKey];
			} else {
				cV[aKey] = aValue;
			}
			this.saveValue(NS, aName, cV);
		}
	};
	Persistence.prototype.drop = function (NS, aName) {
		var key = this.__composePersistentName(NS, aName);
		this.storage.removeItem(key);
	};
	function composeGMcookieName(aName, addNewDid) {
		nC = (addNewDid && addNewDid == true ? TB3O.gServer + '_' + TB3O.UserID + '_' + actV.vNewdid + '_' + aName : TB3O.gServer + '_' + TB3O.UserID + '_' + aName);
		return nC;
	};
	function getGMcookie(aName, addNewDid) {
		return decodeURIComponent(GM_getValue(composeGMcookieName(aName, addNewDid), false));
	};
	function deleteGMcookie(aName, addNewDid) {
		nc = composeGMcookieName(aName, addNewDid);
		GM_deleteValue(nc);
	};
	function setGMcookie(aName, aValue, addNewDid) {
		if (TB3O.UserID != '0' && TB3O.UserID != 0) {
			var nc = composeGMcookieName(aName, addNewDid);
			if (aValue)
				GM_setValue(nC, encodeURIComponent(aValue));
			else
				GM_setValue(nC, false);
			nc = null;
		};
	};
	function addGMcookieValue(aName, values, addNewDid) {
		var nV = '';
		for (var i = 0; i < values.length; i++) {
			if (values[i] != '') {
				nV += values[i];
				if (i != values.length - 1)
					nV += '$';
			} else
				return;
		};
		var valC = getGMcookie(aName, addNewDid);
		if (valC != "false" && valC != '')
			valC += "$$" + nV;
		else
			valC = nV;
		setGMcookie(aName, valC, addNewDid);
		nV = null;
		valC = null;
	};
	function removeGMcookieValue(aName, indexNo, reloadPage, aFunctionToRunAfter, addNewDid) {
		return function () {
			if (confirm(T('DEL') + ". " + T('QSURE'))) {
				var valC = getGMcookie(aName, addNewDid);
				if (valC != "false" && valC != '') {
					valC = valC.split("$$");
					valC.splice(indexNo, 1);
					valC = valC.join("$$");
					setGMcookie(aName, valC, addNewDid);
					removeElement($xf("//*[@id='" + aName + "']"));
					if (reloadPage)
						history.go(0);
					else
						aFunctionToRunAfter();
				};
			};
		};
	};
	var persistence = new Persistence({
			serialize : JSON.stringify,
			deserialize : JSON.parse
		}, {
			getItem : function (key) {
				var val = GM_getValue(key);
				return (val === undefined) ? null : val;
			},
			setItem : GM_setValue,
			removeItem : GM_deleteValue
		});
	persistence.getUserSpecificNS = function () {
		return TB3O.gServer + '_' + TB3O.UserID;
	};
	persistence.getVillageSpecificNS = function (villageId) {
		return this.getUserSpecificNS() + "_" + ((villageId === undefined) ? TB3O.ActiveVillageId : villageId);
	};
	function loadPersistentUserValue(aName, defValue) {
		return persistence.loadValue(persistence.getUserSpecificNS(), aName, defValue);
	}
	function savePersistentUserValue(aName, aValue) {
		return persistence.saveValue(persistence.getUserSpecificNS(), aName, aValue)
	}
	function loadPersistentUserObject(aName, defValue) {
		return persistence.loadObject(persistence.getUserSpecificNS(), aName, defValue);
	}
	function savePersistentUserObject(aName, aValue, aKey) {
		return persistence.saveObject(persistence.getUserSpecificNS(), aName, aValue, aKey)
	}
	function loadPersistentVillageObject(aName, defValue, villageId) {
		return persistence.loadObject(persistence.getVillageSpecificNS(villageId), aName, defValue);
	}
	function savePersistentVillageObject(aName, aValue, aKey, villageId) {
		return persistence.saveObject(persistence.getVillageSpecificNS(villageId), aName, aValue, aKey)
	}
	function PersistentVillageCashe(aName) {
		this.n = aName;
		this.o = {};
	}
	PersistentVillageCashe.prototype.load = function (villageId) {
		var info = this.o[villageId];
		if (!info) {
			info = loadPersistentVillageObject(this.n, {}, villageId);
			this.o[villageId] = info;
		}
		return info;
	}
	PersistentVillageCashe.prototype.flush = function (villageId) {
		savePersistentVillageObject(this.n, this.o[villageId], null, villageId);
	}
	function getGMcookieV2(aName, defValue) {
		if (defValue === undefined) {
			defValue = {};
		}
		return persistence.loadValue(persistence.getUserSpecificNS(), aName, defValue);
	}
	function setGMcookieV2(aName, aValue, aKey) {
		return savePersistentUserObject(aName, aValue, aKey)
	}
	function __expand(s, args, base) {
		if (s !== undefined) {
			if (args.length > base) {
				s = s.replace(/[$](\d+)/g, function (str, no) {
						return (no - 1 < args.length - base) ? args[no - 1 + base] : str;
					});
			}
		}
		return s;
	}
	function T(name) {
		var s = __expand(t[name], arguments, 1);
		if (s === undefined) {
			s = '---';
		}
		return s;
	}
	function TX(name, index) {
		var s = t[name];
		if (s !== undefined) {
			s = __expand(s.split("|", index + 1)[index], arguments, 2);
		}
		if (s === undefined) {
			s = '---';
		}
		return s;
	}
	T.saveLocaleString = function (name, str) {
		if (t[name] === undefined) {
			t[name] = str;
		}
		persistence.saveObject(TB3O.lng, "i18n", str, name);
	};
	T.loadLocalization = function () {
		function applyCollection(colLoc) {
			var name;
			for (name in colLoc) {
				if (colLoc.hasOwnProperty(name) && !t.hasOwnProperty(name)) {
					t[name] = colLoc[name];
				}
			}
		}
		applyCollection(persistence.loadObject(arAvLang[TB3O.O[0]], "i18n"));
		if (arAvLang[TB3O.O[0]] !== TB3O.lng) {
			applyCollection(persistence.loadObject(TB3O.lng, "i18n"));
		}
	};
	function I(name, attr) {
		var pre_att;
		var imgNode = null;
		if (I.images_attributes) {
			pre_att = I.images_attributes[name];
		}
		if (!pre_att) {
			var imgHTML = gIc[name];
			if (imgHTML) {
				var div = $e("div", imgHTML);
				imgNode = div.removeChild(div.firstChild);
				$at(imgNode, attr);
			} else {
				var src = image[name];
				if (src) {
					pre_att = [['src', src]];
				} else {
					pre_att = [['class', name], ['src', xGIF]];
				}
			}
		}
		return imgNode ? imgNode : $img(pre_att.concat(attr));
	}
	function setTBAttribute(node, name, value) {
		return node.setAttributeNS("http://userscripts.org/scripts/show/98310", name, value);
	}
	function getTBAttribute(node, name) {
		return (node.hasAttributeNS("http://userscripts.org/scripts/show/98310", name)) ? node.getAttributeNS("http://userscripts.org/scripts/show/98310", name) : null;
	}
	function loadSeparators() {
		var aPositions = getGMcookieV2("VillagesSep"),
		aSeparators = [],
		i;
		if (!aPositions.length) {
			aPositions = [];
		}
		for (i = 0; i < aPositions.length; ++i) {
			if (aPositions[i]) {
				aSeparators[aPositions[i]] = 1;
			}
		}
		return aSeparators;
	}
	function saveSeparators(aSeparators) {
		var aPositions = [],
		i;
		for (i = 0; i < aSeparators.length; ++i) {
			if (aSeparators[i]) {
				aPositions[aPositions.length] = i;
			}
		}
		setGMcookieV2("VillagesSep", aPositions);
	}
	function getServerTimeNow() {
		var dtNow = new Date();
		dtNow.setTime(dtNow.getTime() - TB3O.localTimeOffset);
		return dtNow;
	}
	function getDesiredTimeNow() {
		var dtNow = new Date();
		dtNow.setTime(dtNow.getTime() - TB3O.localTimeOffset + TB3O.desiredTimeOffset);
		return dtNow;
	}
	function getDesiredTime(dt) {
		return (dt === null) ? null : new Date(toTimeStamp(dt) + TB3O.desiredTimeOffset);
	}
	function __formatDateTimeRelative(dtNow, dtBase, secs, aFormat) {
		return formatDateTime(dtNow, (secs === null) ? null : toDate(dtBase).getTime() + (secs * 1000), aFormat);
	}
	function formatDateTimeRelativeToNow(secs, aFormat) {
		var dtNow = getDesiredTimeNow();
		return __formatDateTimeRelative(dtNow, dtNow, secs, aFormat);
	}
	function formatDateTimeRelativeToBase(dtBase, secs, aFormat) {
		return __formatDateTimeRelative(getDesiredTimeNow(), dtBase, secs, aFormat);
	}
	function formatDateTimeRelative(secs, aFormat) {
		return __formatDateTimeRelative(getDesiredTimeNow(), getDesiredTime(TB3O.serverTime), secs, aFormat);
	}
	function getBuildingMaxLevel(villageId, gid) {
		var maxLevel;
		switch (gid) {
		case 1:
		case 2:
		case 3:
		case 4: {
				var bIsCapital = (TB3O.U[5] == villageId);
				if (!bIsCapital) {
					maxLevel = 10;
				} else {
					if (TB3O.O[1] === "1") {
						maxLevel = 12;
					} else {
						maxLevel = 100;
					}
				}
				break;
			}
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			maxLevel = 5;
			break;
		case 23:
		case 35:
			maxLevel = 10;
			break;
		case 27:
			maxLevel = 20;
			break;
		case 40:
			maxLevel = 100;
			break;
		default:
			maxLevel = 20;
		}
		return maxLevel;
	}
	function getAvailability(cost, resourcesInfo, bIsNPCAvailable) {
		var state = 1;
		var nResTot = 0;
		var nEPpHTot = 0;
		var rneed = [0, 0, 0, 0, 0];
		var rt = Array(5);
		var maxTimeToProduce = 0;
		var timeToProduceForNPC = 0;
		var rest,
		ri;
		for (ri = 0; ri < 4; ++ri) {
			rest = cost[ri] - resourcesInfo.Res[ri];
			rneed[ri] = cost[ri];
			rneed[4] += cost[ri];
			if (rest <= 0) {
				rt[ri] = [0, 0];
			} else {
				var timeToProduce = getSecondsToProduce(rest, resourcesInfo.EPpH[ri]);
				if (resourcesInfo.Cap[ri] < cost[ri]) {
					timeToProduce = maxTimeToProduce = timeToProduceForNPC = Infinity;
					state = 3;
				} else {
					if (state === 1) {
						state = 0;
					}
					if (maxTimeToProduce < timeToProduce) {
						maxTimeToProduce = timeToProduce;
					}
				}
				rt[ri] = [Math.ceil(rest), timeToProduce];
			}
			nResTot += Math.floor(resourcesInfo.Res[ri]);
			nEPpHTot += resourcesInfo.EPpH[ri];
		}
		rest = rneed[4] - nResTot;
		if (state === 0 && rest <= 0 && bIsNPCAvailable) {
			state = 2;
		}
		if (state === 0) {
			timeToProduceForNPC = (bIsNPCAvailable) ? getSecondsToProduce(rest, nEPpHTot) : Infinity;
		}
		rt[4] = [rest > 0 ? rest : 0, timeToProduceForNPC];
		if ((state === 0 || state === 2) && resourcesInfo.EPpH[3] < 0 && isFinite(maxTimeToProduce)) {
			ri = 3;
			rest = cost[ri] - (resourcesInfo.Res[ri] + resourcesInfo.EPpH[ri] / 3600 * maxTimeToProduce);
			if (rest > 0) {
				maxTimeToProduce = Infinity;
			}
		}
		return [state, maxTimeToProduce, timeToProduceForNPC, rneed, rt];
	}
	function getAvailabilityRefreshTimeout(av, idx) {
		var refreshTimeout = Infinity;
		function getTimeout(n) {
			if (idx === n || idx === undefined) {
				var timeout = av[n];
				if (timeout > 0 && timeout < refreshTimeout) {
					refreshTimeout = timeout;
				}
			}
		}
		getTimeout(1);
		getTimeout(2);
		return refreshTimeout;
	}
	function getBuildingAvailability(villageId, resourcesInfo, gid, crtLvl, bIsNPCAvailable) {
		var retArr;
		var bData = bCost[gid];
		var cost;
		if (bData) {
			cost = bData[crtLvl];
		}
		if (crtLvl > getBuildingMaxLevel(villageId, gid) || !cost) {
			retArr = [4, 0, 0, [], []];
		} else {
			retArr = getAvailability(cost, resourcesInfo, bIsNPCAvailable);
		}
		return retArr;
	}
	function getNPCAvailability(villageId) {
		return TB3O.bIsNPCAvailable && isBuildingPresent(villageId, 17);
	}
	function getBuildingsAvailability(arrBA, idMin, idMax, villageId, arrB, resourcesInfo) {
		var refreshTimeout = Infinity;
		var timeout;
		var id,
		refreshId = 0;
		var bIsNPCAvailable = getNPCAvailability(villageId);
		for (id = idMin; id <= idMax; ++id) {
			if (arrB[id]) {
				var gid = arrB[id][0];
				var crtLevel = arrB[id][1];
				arrBA[id] = getBuildingAvailability(villageId, resourcesInfo, gid, crtLevel + 1, bIsNPCAvailable);
				timeout = arrBA[id][1];
				if (timeout > 0 && timeout < refreshTimeout) {
					refreshTimeout = timeout;
					refreshId = id;
				}
				timeout = arrBA[id][2];
				if (timeout > 0 && timeout < refreshTimeout) {
					refreshTimeout = timeout;
					refreshId = id;
				}
			}
		}
		return refreshTimeout;
	}
	function formatCoords(x, y) {
		return "(" + x + "|" + y + ")";
	}
	function normalizeCoord(v) {
		if (v < -400) {
			v += 801;
		} else if (v > 400) {
			v -= 801;
		}
		return v;
	}
	function xy2id(x, y) {
		return (1 + (normalizeCoord(parseInt10(x)) + 400) + (801 * Math.abs(normalizeCoord(parseInt10(y)) - 400)));
	}
	function id2xy(vid) {
		var arrXY = [];
		var ivid = parseInt10(vid);
		arrXY[0] = (ivid % 801 ? (ivid % 801) - 401 : 400);
		arrXY[1] = 400 - (ivid - 401 - arrXY[0]) / 801;
		return arrXY;
	}
	function isXYValid(x, y) {
		if (x !== '' && y !== '') {
			return (isIntValid(x) && isIntValid(y) && x >= -400 && x <= 400 && y >= -400 && y <= 400);
		}
		return false;
	}
	function getDistance(sx1, sy1, sx2, sy2) {
		var x1 = parseInt10(sx1);
		var y1 = parseInt10(sy1);
		var x2 = parseInt10(sx2);
		var y2 = parseInt10(sy2);
		var dX = Math.min(Math.abs(x2 - x1), Math.abs(801 - Math.abs(x2 - x1)));
		var dY = Math.min(Math.abs(y2 - y1), Math.abs(801 - Math.abs(y2 - y1)));
		var dist = Math.sqrt(Math.pow(dX, 2) + Math.pow(dY, 2));
		return dist;
	}
	function getTroopTime(uix, arX) {
		var unitSpeed = uc[arX[3] + uix][8];
		return Math.round(arX[0] * 3600 / unitSpeed / arX[4] +
			arX[1] * 3600 / unitSpeed / arX[4] / arX[2]);
	}
	function getMerchantTime(qDist, xRace) {
		return Math.round(qDist * 3600 / TB3O.MerchantsSpeed[xRace] / TB3O.nMerchantSpeedFactor[TB3O.nServerType]);
	}
	function getEventTimeStamp(ttServer, str) {
		return (str.search(/(\d+:\d\d:\d\d)/) !== -1) ? ttServer + toSeconds(RegExp.$1) * 1000 : null;
	}
	function getNewdidFromChild(aParent) {
		var vNewdid = 0;
		var vLinkNodes = aParent.getElementsByTagName("a");
		if (vLinkNodes.length) {
			vNewdid = getNewdidFromLink(vLinkNodes[0].getAttribute('href'));
		}
		return vNewdid;
	}
	function setVillageRes(villageId, aDoc, ttServer) {
		var resourcesInfo = getResourcesInfo2(villageId, aDoc, ttServer);
		if (resourcesInfo.dUpd) {
			TB3O.VillagesInfo[villageId].r = resourcesInfo;
		}
		return !!resourcesInfo.dUpd;
	}
	function getArrowChar() {
		return (docDir[0] == 'right' ? '\u21D0' : '\u21D2')
	}
	function MerchantUnderwayInfo(ownerId, ownerName, recepientId, recepientName, srcMapId, destMapId, ttArrival, res, xn) {
		this.Res = res;
		this.ttArrival = ttArrival;
		this.s_id = srcMapId;
		this.d_id = destMapId;
		this.xn = xn;
		this.own_id = ownerId;
		this.rec_id = recepientId;
		this.own_n = ownerName;
		this.rec_n = recepientName;
		return this;
	}
	function MerchantsUnderwayInfo() {
		this.i = [];
		this.o = [];
		this.r = [];
		this.ttUpd = undefined;
		return this;
	}
	function UnitsCountInfo() {
		this.ut = fillArray(new Array(11), 0);
		this.ttUpd = undefined;
		return this;
	}
	function TroopDetailsInfo(hostMapId, hostVName, oasisMapId, targetMapId, targetVName, group, cmd, ownerId, ownerName, ttArrival, racex, units, cc, res) {
		if (res) {
			this.Res = res;
		}
		if (ttArrival) {
			this.ttArrival = ttArrival;
		}
		if (isIntValid(hostMapId)) {
			this.h_id = hostMapId;
			this.h_vn = hostVName;
		}
		if (isIntValid(oasisMapId)) {
			this.o_id = oasisMapId;
		}
		if (isIntValid(targetMapId)) {
			this.t_id = targetMapId;
			this.t_vn = targetVName;
		}
		this.gr = group;
		if (cmd !== undefined) {
			this.cmd = cmd;
		}
		if (ownerId) {
			this.own_uid = ownerId;
			this.own_un = ownerName;
		}
		this.rx = racex;
		this.u = units;
		if (isIntValid(cc)) {
			this.cc = cc;
		}
		return this;
	}
	function RallyPointInfo() {
		this.t = [];
		this.grc = [0, 0, 0, 0];
		this.ttUpd = undefined;
		return this;
	}
	function walkRallyPointInfo(villageId, rallyPointInfo, filter, handler) {
		var i,
		seqn = 0;
		var villageInfo = TB3O.VillagesInfo[villageId];
		var mapId = xy2id(villageInfo.x, villageInfo.y);
		if (!filter) {
			filter = {};
		}
		for (i = 0; i < rallyPointInfo.t.length; ++i) {
			var info = cloneObject(rallyPointInfo.t[i]);
			if (filter.group === undefined || filter.group === 0 || filter.group === info.gr) {
				if (info.gr === 3) {
					if (info.h_id === mapId && info.o_id === undefined) {
						info.h_vid = villageId;
					}
				}
				handler(seqn, info);
				++seqn;
			}
		}
	}
	function CulturePointsInfo(cp) {
		this.cp = cp;
		this.ttUpd = undefined;
		return this;
	}
	function CelebrationEvent(aName, dEnd) {
		this.name = trimBlanks(aName);
		this.ttEnd = toTimeStamp(dEnd);
		return this;
	}
	function TownHallInfo() {
		this.evA = [];
		this.ttUpd = undefined;
		return this;
	}
	function TrainingEvent(aName, dEnd, troopInfo, dFirst) {
		this.name = trimBlanks(aName);
		this.tri = troopInfo;
		this.ttEnd = toTimeStamp(dEnd);
		if (dFirst) {
			this.ttFirst = toTimeStamp(dFirst);
		}
		return this;
	}
	function TrainingInfo() {
		this.evA = [];
		this.ttUpd = undefined;
		return this;
	}
	function getSecondsToTrainUnit(ttStart, trainingEvent) {
		var secs;
		var count = trainingEvent.tri[1];
		if (trainingEvent.ttFirst && count > 1) {
			secs = (trainingEvent.ttEnd - trainingEvent.ttFirst) / (count - 1) / 1000;
		} else {
			secs = (trainingEvent.ttEnd - ttStart) / count / 1000;
		}
		return secs;
	}
	function getTrainingInfoCollStats(trainingInfoColl, ttCurrent) {
		function compareByEventTime(item1, item2) {
			return compare(item1[0], item2[0]);
		}
		var i,
		j,
		gid;
		var arrTroopsNext = [];
		var arrTroopsTotal = [];
		var arrBuildingsUsage = [];
		for (gid in trainingInfoColl) {
			var buldingTroopsTotal = [];
			var trainingInfo = trainingInfoColl[gid];
			var ttStart = trainingInfo.ttUpd;
			var ttEnd;
			gid = parseInt10(gid);
			for (i = 0; i < trainingInfo.evA.length; ++i) {
				var trainingEvent = trainingInfo.evA[i];
				var secs = getSecondsToTrainUnit(ttStart, trainingEvent);
				var msecs = secs * 1000;
				var ttFirst = trainingEvent.ttFirst;
				var tix = trainingEvent.tri[0];
				var count = trainingEvent.tri[1];
				var countForAvg = count;
				var durForAvg;
				var name = trainingEvent.name;
				var ttNextUnitTrained = 0;
				var remainsCount = 0;
				ttEnd = trainingEvent.ttEnd;
				var dur = (ttEnd - ttStart) / 1000;
				if (!ttFirst) {
					ttFirst = ttStart + msecs;
					durForAvg = dur;
				} else {
					countForAvg -= 1;
					durForAvg = (ttEnd - ttFirst) / 1000;
				}
				if (ttCurrent < ttFirst) {
					ttNextUnitTrained = ttFirst;
					remainsCount = count;
				} else if (ttCurrent < ttEnd) {
					ttNextUnitTrained = ttFirst + Math.ceil((ttCurrent - ttFirst) / msecs) * msecs;
					remainsCount = Math.round((ttEnd - ttNextUnitTrained) / msecs) + 1;
				}
				if (ttNextUnitTrained) {
					for (j = 0; j < arrTroopsNext.length; ++j) {
						if (arrTroopsNext[j][1] === tix) {
							if (ttNextUnitTrained < arrTroopsNext[j][0]) {
								arrTroopsNext[j][0] = ttNextUnitTrained;
								arrTroopsNext[j][2] = name;
								arrTroopsNext[j][3] = gid;
							}
							break;
						}
					}
					if (j === arrTroopsNext.length) {
						arrTroopsNext.push([ttNextUnitTrained, tix, name, gid]);
					}
				}
				if (remainsCount) {
					for (j = 0; j < buldingTroopsTotal.length; ++j) {
						if (buldingTroopsTotal[j][0][0] === tix) {
							buldingTroopsTotal[j][0][1] += remainsCount;
							break;
						}
					}
					if (j === buldingTroopsTotal.length) {
						buldingTroopsTotal.push([[tix, remainsCount], name]);
					}
					for (j = 0; j < arrTroopsTotal.length; ++j) {
						if (arrTroopsTotal[j][3][0] === tix) {
							if (ttEnd > arrTroopsTotal[j][0]) {
								arrTroopsTotal[j][0] = ttEnd;
							}
							arrTroopsTotal[j][1] += dur;
							if (countForAvg) {
								arrTroopsTotal[j][2][0] += durForAvg;
								arrTroopsTotal[j][2][1] += countForAvg;
							}
							arrTroopsTotal[j][3][1] += remainsCount;
							break;
						}
					}
					if (j === arrTroopsTotal.length) {
						arrTroopsTotal.push([ttEnd, dur, (countForAvg) ? [durForAvg, countForAvg] : [0, 0], [tix, remainsCount], name]);
					}
				}
				ttStart = ttEnd;
			}
			if (buldingTroopsTotal.length > 0) {
				arrBuildingsUsage.push([ttEnd, gid, buldingTroopsTotal]);
			}
		}
		for (j = 0; j < arrTroopsTotal.length; ++j) {
			arrTroopsTotal[j][2] = (arrTroopsTotal[j][2][1] === 0) ? null : arrTroopsTotal[j][2][0] / arrTroopsTotal[j][2][1];
		}
		arrTroopsNext.sort(compareByEventTime);
		arrTroopsTotal.sort(compareByEventTime);
		arrBuildingsUsage.sort(compareByEventTime);
		var result = {
			troopsNext : arrTroopsNext,
			troopsTotal : arrTroopsTotal,
			buildingsUsage : arrBuildingsUsage
		};
		return result;
	}
	function UpgradingEvent(aName, dEnd, tix, txtLvl, lvl) {
		this.name = trimBlanks(aName);
		this.ttEnd = toTimeStamp(dEnd);
		this.tix = tix;
		this.txtLvl = txtLvl;
		this.lvl = lvl;
	}
	function UpgradeInfo() {
		this.evA = [];
		this.uul = fillArray(new Array(8), 0);
		this.ttUpd = undefined;
		return this;
	}
	function getCrtServer() {
		TB3O.fullServerName = crtUrl.host;
		TB3O.gServer = TB3O.fullServerName.replace(/\.travian\./, '');
		return;
	}
	function saveCapitalInfo(mapId, name) {
		if (mapId) {
			TB3O.U[5] = '';
			TB3O.U[4] = mapId.toString();
			TB3O.U[3] = name;
			var xy = id2xy(mapId);
			TB3O.U[6] = xy[0] + "|" + xy[1];
		} else {
			TB3O.U[5] = '-';
			TB3O.U[4] = '-';
			TB3O.U[3] = '-';
			TB3O.U[6] = "0|0";
		}
		savePlayerInfo();
	}
	function getCapitalId() {
		var villageInfo = getVillageInfoByMapId(TB3O.VillagesInfo, TB3O.U[4]);
		if (villageInfo) {
			TB3O.U[5] = villageInfo.id;
			savePlayerInfo();
		} else {
			saveCapitalInfo();
		}
	}
	function setRace(tix) {
		TB3O.U[7] = tix;
		TB3O.U[1] = getRaceFromTroopIndex(tix);
		savePlayerInfo();
	}
	function getRaceFromBarracks() {
		ajaxRequest(bksLnk, 'GET', null, function (ajaxResp) {
			if (ajaxResp.responseText.search(/unit u(\d+)/) !== -1) {
				var xV = parseInt10(RegExp.$1);
				if (!isNaN(xV)) {
					setRace(xV);
				}
			}
		});
	}
	function getServerTime(aDoc) {
		var dServerTime;
		var dNow = new Date();
		dNow.setMilliseconds(0);
		var ttNow = dNow.getTime();
		TB3O.localTimeOffset = 0;
		var tp1 = $g("tp1", aDoc);
		if (tp1) {
			var p = tp1.textContent.split(":");
			if (p.length === 3) {
				dServerTime = new Date(dNow.getFullYear(), dNow.getMonth(), dNow.getDate(), p[0], p[1], p[2]);
				var ttServer = dServerTime.getTime();
				if (ttServer - ttNow > 43200000) {
					ttServer -= 86400000;
				} else if (ttNow - ttServer > 43200000) {
					ttServer += 86400000;
				}
				dServerTime.setTime(ttServer);
				TB3O.localTimeOffset = ttNow - ttServer;
			}
		}
		return dServerTime ? dServerTime : dNow;
	}
	function getServerLanguage() {
		var crtServerX = crtUrl.host.split(".");
		var strFirst = crtServerX[0];
		var strLast = crtServerX[crtServerX.length - 1];
		var lng = '';
		if (strLast === "net") {
			lng = "es";
		} else if (strLast === "at") {
			lng = "de";
		} else if (strLast === "org") {
			if (strFirst === "research") {
				lng = "en";
			} else {
				lng = "de";
			}
		} else if (strLast === "uk" || strLast === "us") {
			lng = "en";
		} else if (strLast === "com") {
			if (strFirst.indexOf("arabia") !== -1) {
				lng = "ae";
			} else {
				lng = "en";
			}
		} else if (strLast === "cl" && strLast === "mx") {
			lng = "ar";
		} else if (strLast === "asia") {
			lng = "th";
		}
		if (lng === '') {
			lng = strLast;
		}
		return lng;
	}
	function getServerType() {
		var strFirst = crtUrl.host.split(".")[0];
		var strFirst2 = strFirst.slice(-2);
		var nServerType = 0;
		var speed = TB3O.ServerInfo.speed;
		if (strFirst2 === "x3" || strFirst.indexOf("speed") !== -1 || strFirst.indexOf("vip") !== -1 || strFirst.indexOf("research") !== -1 || speed === 3) {
			nServerType = 1;
		} else if (strFirst2 === "x2" || isSomeOf(crtUrl.host, "t1.travian.com", "ty2.travian.com", "finals.travian.com") || speed === 2) {
			nServerType = 2;
		} else if (strFirst2 === "x4" || speed === 4) {
			nServerType = 4;
		} else if (strFirst2 === "x5" || speed === 5) {
			nServerType = 3;
		} else if (strFirst2 === "x8" || speed === 8) {
			nServerType = 5;
		}
		return nServerType;
	}
	function eventResZeroCountdown(aCell) {
		var aRowNode = aCell.parentNode;
		if (aRowNode) {
			var aTb = $xf("./ancestor::table[@class='rNt']", 'f', aRowNode);
			removeElement(aRowNode);
			if (aTb) {
				var bIsEmpty = !$xf(".//td[contains(@class,'timeout')]", 'f', aTb);
				if (bIsEmpty) {
					var bIsInjected = !!$xf("./ancestor::*[@class='tbInject']", 'f', aTb);
					if (bIsInjected) {
						replaceElement(aTb, $txt(T('EXTAV')));
					}
				}
			}
		}
	}
	function eventResCapReached(aCell) {
		var aRowNode = aCell.parentNode;
		if (aRowNode) {
			addClass(aRowNode, "tbCapReached");
		}
	}
	function eventResThresholdCrossing(aCell) {
		var aRowNode = aCell.parentNode;
		if (aRowNode) {
			toggleClass(aRowNode, "tbMany");
		}
	}
	function uiCreateResAndTimeTable(BA, resourcesInfo, aLnk, cpB, ccB, options) {
		var aTb;
		var ri;
		var boolTb = false;
		var rt = BA[4];
		var cost = BA[3];
		var maxTime = BA[1];
		function addResourceRow(aTb, ri, restante, tiempo) {
			var bAdded = false;
			if (restante > 0) {
				var aCell,
				rCell;
				var cap = 0;
				var strClass = (restante >= 100000) ? "tbMany" : "";
				if (ri <= 3) {
					cap = cost[ri];
					if (resourcesInfo.EPpH[ri] >= 0) {
						cap -= resourcesInfo.Cap[ri];
						if (restante === cap) {
							if (strClass !== "") {
								strClass += " ";
							}
							strClass += "tbCapReached";
						}
					}
				}
				if (isFinite(tiempo) && tiempo > 0) {
					aCell = uiSetTimeSpan($td(), tiempo, {
							format : 0
						});
				} else {
					aCell = $td(null, T('NEVER'));
				}
				aTb.appendChild($r([['class', strClass]], [$td([['class', 'center']], getResourceImage(ri)), rCell = $td([['class', 'timeout' + ri], ['title', T("RESREQ_TT", cost[ri])]], restante), aCell]));
				if (cap > 0) {
					setTBAttribute(rCell, "cap", cap);
				}
				bAdded = true;
			}
			return bAdded;
		}
		function addTimeRow(aTb, maxTime) {
			var bAdded = false;
			if (!isFinite(maxTime)) {
				aTb.appendChild($r(null, [$td([['colspan', '3']], T('LISTO') + " " + T('NEVER'))]));
				bAdded = true;
			} else if (maxTime > 0) {
				var txtDate = formatDateTimeRelative(maxTime, 0);
				aTb.appendChild($r(null, [$td([['colspan', '3']], T('LISTO') + " " + txtDate.toLowerCase())]));
				bAdded = true;
			}
			return bAdded;
		}
		function addCpcRow(aTb, x, y) {
			var titleNode,
			strClass;
			switch (y) {
			case 'cp':
				titleNode = I("cp");
				strClass = "tbCP";
				break;
			case 'cc':
				titleNode = I("r5");
				strClass = "tbCC";
				break;
			}
			var delta = x[1] - x[0];
			aTb.appendChild($r(null, $td([['class', strClass], ['colspan', '3']], [titleNode, $span(": " + x[0] + " " + getArrowChar() + " " + x[1] + (delta > 0 ? " (+" + delta + ")" : ""))])));
		}
		function addCRrows(aTb, aTitle, aV) {
			var ri;
			aTb.appendChild($r(null, $th([['colspan', '3']], aTitle)));
			for (ri = 0; ri < 4; ri++) {
				aTb.appendChild($r(null, [$td([['class', 'center']], I("r" + (ri + 1))), $td([['colspan', '2']], aV[ri])]));
			}
		}
		if (!options) {
			options = {};
		}
		if (options.NPCLink === undefined) {
			options.NPCLink = options.NPC;
		}
		aTb = $t([['class', 'rNt']]);
		if (options.NPC) {
			if (rt[4][0] > 0) {
				aTb.appendChild($r(null, $th([['colspan', '3']], T('NPCNEED'))));
				addResourceRow(aTb, 4, rt[4][0], rt[4][1]);
				addTimeRow(aTb, rt[4][1]);
				boolTb = true;
			} else if (BA[0] === 2 && options.NPCLink) {
				var id = options.id;
				if (!id) {
					id = crtUrl.queryKey.id;
				}
				var urlNPCback = parseUri(NPCURL);
				if (id) {
					urlNPCback.queryKey.bid = id;
				}
				for (ri = 0; ri < 4; ++ri) {
					if (cost[ri] > 0) {
						urlNPCback.queryKey['r' + (ri + 1)] = cost[ri];
					}
				}
				aTb.appendChild($r(null, $td([['class', 'center'], ['colspan', '3']], $e("a", [['href', combineUri(urlNPCback)]], T('NPCLNK')))));
				boolTb = true;
			}
		}
		if (options.top_title || boolTb) {
			aTb.appendChild($r(null, $th([['colspan', '3']], T('RESNEED'))));
		}
		for (ri = 0; ri < 4; ++ri) {
			boolTb |= addResourceRow(aTb, ri, rt[ri][0], rt[ri][1]);
		}
		boolTb |= addTimeRow(aTb, maxTime);
		if (isFinite(maxTime) && maxTime > 0) {
			if (TB3O.O[36] === "1") {
				var uthen = floorResources(getActualResourcesAfterMs(resourcesInfo, maxTime * 1000).res);
				var residue = subResources(uthen, cost);
				var txtDate = formatDateTimeRelative(maxTime, 0).toLowerCase();
				addCRrows(aTb, T('RESOURCES') + " " + txtDate, uthen);
				addCRrows(aTb, T('RESIDUE') + " " + txtDate, residue);
			}
		}
		if (aLnk && !boolTb) {
			aTb.appendChild($r(null, $td([['class', 'center']], $a(T('EXTAV'), [['href', aLnk]]))));
			boolTb = true;
		}
		if (cpB && TB3O.O[34] === "1") {
			addCpcRow(aTb, cpB, "cp");
		}
		if (ccB && TB3O.O[35] === "1") {
			addCpcRow(aTb, ccB, "cc");
		}
		return (boolTb) ? aTb : null;
	}
	function uiCreateBuildingResAndTimeTable(arrBA, resourcesInfo, gid, id, crtLevel) {
		var opt = {
			NPC : (TB3O.O[103] === "1" && TB3O.bIsNPCInVillage),
			id : id
		};
		var aTB = uiCreateResAndTimeTable(arrBA[id], resourcesInfo, "build.php?id=" + id, [bCost[gid][crtLevel][4], bCost[gid][crtLevel + 1][4]], [bCost[gid][crtLevel][5], bCost[gid][crtLevel + 1][5]], opt);
		return aTB;
	}
	function getCNClass(nState) {
		return ["tbNoRes", "tbUpg", "tbNPCUpg", "tbNoCap", "tbMax"][nState];
	}
	function uiCreateCNDiv(lvl, nState, bAlreadyBuilt) {
		var sClass = getCNClass(nState);
		var aDiv = $div(['class', 'CNBT ' + sClass], lvl);
		if (bAlreadyBuilt) {
			aDiv.className += " tbUpgNow";
		}
		return aDiv;
	}
	function uiModifyContracts() {
		var i;
		var resourcesInfo = TB3O.ActiveVillageInfo.r;
		var contracts = $xf("//div[@id='" + ID_CONTENT + "']//*[not(self::div and contains(@class,'details'))]/div[contains(@class,'showCosts')]", 'l');
		for (i = 0; i < contracts.snapshotLength; i++) {
			var contract = contracts.snapshotItem(i);
			var cost = getRequiredRes(contract);
			if (cost) {
				var av = getAvailability(cost, resourcesInfo, TB3O.bIsNPCInVillage);
				var aTb = uiCreateResAndTimeTable(av, resourcesInfo, null, null, null, {
						top_title : true,
						NPC : (TB3O.O[26] === "1" && TB3O.bIsNPCInVillage),
						NPCLink : false
					});
				if (aTb) {
					var injectedContainer;
					var xC = contract.parentNode;
					var tag = TAG(xC);
					if (tag === "TR") {
						injectedContainer = $td();
						var aR = $r([['class', 'tb3rnb']]);
						aR.appendChild(injectedContainer);
						xC.parentNode.appendChild(aR);
					} else if (tag === "FORM" || tag === "DIV") {
						injectedContainer = $e("p");
						insertAfter(contract, injectedContainer);
					}
					injectedContainer.className = "tbInject";
					injectedContainer.appendChild(aTb);
				}
			}
		}
	}
	function DestinationPicker(fSearch, fCreate) {
		var xyD = [$xf("//form[@name='snd']//input[@name='x']"), $xf("//form[@name='snd']//input[@name='y']")];
		var x,
		y;
		var lastX,
		lastY;
		var self = this;
		this.setXY = function (newX, newY) {
			xyD[0].value = newX;
			xyD[1].value = newY;
			fireChangeEvent(xyD[0]);
			fireChangeEvent(xyD[1]);
		}
		this.uiRefresh = function () {
			var oD = $g("tb_unitsdest");
			if (oD) {
				removeChildren(oD);
			} else {
				var container = fSearch();
				if (container) {
					container.appendChild(oD = $div([['id', 'tb_unitsdest'], attrInject$]));
				}
			}
			if (oD) {
				if (isXYValid(x, y)) {
					var aTb = fCreate(x, y);
					if (aTb) {
						oD.appendChild(aTb);
						oD.style.display = "";
					}
				} else {
					oD.style.display = "hidden";
				}
			}
		}
		function captureDestination() {
			x = parseInt10(xyD[0].value);
			y = parseInt10(xyD[1].value);
			if (lastX !== x || lastY !== y) {
				lastX = x;
				lastY = y;
				self.uiRefresh();
				uiRefreshVL_Distance(x, y);
			}
		}
		if (xyD[0] && xyD[1]) {
			xyD[0].addEventListener('change', captureDestination, false);
			xyD[0].addEventListener('keyup', captureDestination, false);
			xyD[1].addEventListener('change', captureDestination, false);
			xyD[1].addEventListener('keyup', captureDestination, false);
			captureDestination();
		}
	}
	function $df(dWidth, posX, posY, strTitle, sCookieN, divID, boolShowMinMax, content) {
		var wCMM = 25;
		var iPx = parseInt10(posX);
		if (iPx < -dWidth / 2)
			iPx = -dWidth / 2;
		var iPy = parseInt10(posY);
		if (iPy < -dWidth / 2)
			iPy = -dWidth / 2;
		if (boolShowMinMax === true)
			wCMM *= 2;
		var fDiv = $div([['id', divID], ['class', 'fldiv'], ['style', 'width:' + dWidth + 'px; top:' + iPy + 'px; left:' + iPx + 'px; -moz-border-radius:5px;border-radius:5px;']]);
		if (strTitle === '?')
			strTitle = "<img src='" + image["search"] + "'</img>";
		var dragDiv = $div([['id', 'dragDiv_' + sCookieN], ['class', 'dragdiv'], ['style', 'width:' + (dWidth - wCMM) + 'px;']], strTitle);
		if (boolShowMinMax === true) {
			var xi = 70;
			switch (sCookieN) {
			case "resbar":
				xi = 70;
				break;
			case "userbookmarks":
				xi = 71;
				break;
			case "noteblock":
				xi = 72;
				break;
			case "vl2table":
				xi = 73;
				break;
			case "searchbar":
				xi = 74;
				break;
			}
			var mmDiv = $div([['id', 'mmdiv_' + sCookieN], ['class', 'mmdiv']]);
			var strImgMM = (TB3O.O[xi] === '0' ? 'bMax' : 'bMin');
			mmDiv.appendChild(uiCreateTool(strImgMM, T(TB3O.O[xi] === '0' ? 'WMAX' : 'WMIN'), minmaxDiv));
		}
		var closeDiv = $div([['class', 'closediv']]);
		closeDiv.appendChild(uiCreateTool("bClose", T('CLOSE'), fcloseDiv));
		makeDraggable(fDiv, dragDiv);
		fDiv.appendChild(dragDiv);
		if (mmDiv)
			fDiv.appendChild(mmDiv);
		fDiv.appendChild(closeDiv);
		document.body.appendChild(fDiv);
		if (content) {
			fDiv.appendChild(content);
			adjustFloatDiv(content, dWidth - 1, sCookieN);
		}
		return fDiv;
		function minmaxDiv() {
			removeElement($g(divID));
			switch (sCookieN) {
			case "resbar":
				TB3O.O[70] = (TB3O.O[70] == '0' ? '1' : '0');
				uiCreateResBarWidget();
				break;
			case "userbookmarks":
				TB3O.O[71] = (TB3O.O[71] == '0' ? '1' : '0');
				showUserBookmarks();
				break;
			case "noteblock":
				TB3O.O[72] = (TB3O.O[72] == '0' ? '1' : '0');
				showNoteBlock();
				break;
			case "vl2table":
				TB3O.O[73] = (TB3O.O[73] == '0' ? '1' : '0');
				uiCreate2ndVillageListWidget();
				break;
			case "searchbar":
				TB3O.O[74] = (TB3O.O[74] == '0' ? '1' : '0');
				uiCreateSearchBarWidget();
				break;
			}
			setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
		}
		function fcloseDiv() {
			$g(divID).style.display = "none";
			switch (sCookieN) {
			case "resbar":
				TB3O.O[39] = '0';
				break;
			case "userbookmarks":
				TB3O.O[20] = '0';
				break;
			case "noteblock":
				TB3O.O[22] = '0';
				break;
			case "vl2table":
				TB3O.O[18] = '0';
				break;
			case "searchbar":
				TB3O.O[32] = '0';
				break;
			case "resupg":
				TB3O.O[37] = '0';
				break;
			case "bupg":
				TB3O.O[41] = '0';
				break;
			case "maptable":
				TB3O.O[58] = '0';
				break;
			}
			setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
		}
	}
	function uiFloatWindow_Remove(windowId) {
		removeElement($g(windowId));
	}
	function uiFloatWindow_SetContent(windowId, content) {}
	function adjustFloatDiv(theTB, xmin, idDrag) {
		var wCMM,
		dragDiv;
		if (xmin < theTB.offsetWidth) {
			xmin = theTB.offsetWidth;
		}
		if (parseInt10(theTB.parentNode.style.width) !== xmin) {
			theTB.parentNode.style.width = xmin + 'px';
			dragDiv = $g('dragDiv_' + idDrag);
			if (dragDiv) {
				wCMM = 25;
				if ($g('mmdiv_' + idDrag)) {
					wCMM *= 2;
				}
				dragDiv.style.width = (xmin - wCMM) + 'px';
			}
		}
		return;
	}
	function uiCreateTool(imgTag, tooltip, onClick) {
		var tool = $lnk([['class', 'tbTool'], ['href', jsVoid]]);
		var attr = null;
		if (tooltip) {
			attr = [['title', tooltip]];
		}
		tool.appendChild(I(imgTag, attr));
		if (onClick) {
			tool.addEventListener("click", onClick, false);
		}
		return tool;
	}
	function uiToolbar_AddTools(toolbar, tools, bWithoutSep) {
		var tool;
		for (tool in tools) {
			if (tools[tool] && tools[tool]['appendChild']) {
				if (toolbar.hasChildNodes() && !bWithoutSep) {
					var toolsep = $e("SPAN", " | ");
					toolsep.className = "tbToolSep";
                    console.log(toolbar);
                    console.log(toolsep);
					toolbar.appendChild(toolsep);
				}
                console.log(tools);
                console.log(tool);
				toolbar.appendChild(tools[tool]);
			}
		}
		return toolbar;
	}
	function uiToolbar_Create(id, tools, bWithoutSep) {
		var toolbar = $div();
		toolbar.className = "tbToolbar";
		if (id) {
			toolbar.id = id;
		}
		return uiToolbar_AddTools(toolbar, tools, bWithoutSep);
	}
	function Tooltip(id, delay) {
		this.delay = delay;
		this.id = id;
		this.ttD = null;
	}
	Tooltip.prototype.init = function () {
		if (!this.ttD) {
			this.ttD = $g(this.id);
			if (!this.ttD) {
				this.ttD = $div();
				this.ttD.id = this.id;
				document.body.appendChild(this.ttD);
			}
		}
	};
	Tooltip.prototype.addToElement = function (node, contentGenerator) {
		var timer = null;
		var self = this;
		var lastMouseEvent;
		var wH,
		wW;
		function cancelTimer() {
			if (timer) {
				clearTimeout(timer);
				timer = null;
			}
		}
		function showTip() {
			timer = null;
			var content = contentGenerator(lastMouseEvent);
			if (content) {
				removeChildren(self.ttD);
				self.ttD.appendChild(content);
				self.ttD.style.display = 'block';
				onMouseMove();
			}
		}
		function onMouseMove(e) {
			if (!e) {
				e = lastMouseEvent;
			} else {
				lastMouseEvent = e;
			}
			if (self.ttD && self.ttD.style.display !== 'none') {
				var x,
				y;
				var dx = 8;
				var dy = 8;
				var dH = self.ttD.clientHeight;
				var dW = self.ttD.clientWidth;
				if ((e.clientY + dy + dH) > wH) {
					y = e.clientY - dy - dH;
					if (y < 0) {
						y = 0;
					}
				} else {
					y = e.clientY + dy;
				}
				y += window.pageYOffset;
				if (docDir[0] === 'left') {
					if ((e.clientX + dx + dW) > wW) {
						x = e.clientX - dx - dW;
					} else {
						x = e.clientX + dx;
					}
				} else {
					if ((e.clientX - dx - dW) < 0) {
						x = e.clientX + dx;
					} else {
						x = e.clientX - dx - dW;
					}
				}
				x += window.pageXOffset;
				self.ttD.style.top = y + "px";
				self.ttD.style.left = x + "px";
			}
		}
		function onMouseOver(e) {
			self.init();
			cancelTimer();
			timer = setTimeout(showTip, self.delay);
			document.addEventListener("mousemove", onMouseMove, false);
			lastMouseEvent = e;
			wH = document.documentElement.clientHeight;
			wW = document.documentElement.clientWidth;
		}
		function onMouseOut(e) {
			self.init();
			cancelTimer();
			self.ttD.style.display = 'none';
			lastMouseEvent = null;
			document.removeEventListener("mousemove", onMouseMove, false);
		}
		node.addEventListener("mouseover", onMouseOver, false);
		node.addEventListener("mouseout", onMouseOut, false);
	};
	TB3O.Tooltip = new Tooltip("tb_tooltip", TB3O.Timeouts.tooltip);
	function uiAddTooltip(node, contentGenerator) {
		TB3O.Tooltip.addToElement(node, contentGenerator);
	}
	function uiCreateModalWindow() {
		var innerPane = $g('InnerMsgPage');
		if (!innerPane) {
			var div = $div(null, [$div([['id', 'OuterMsgPage'], ['class', 'MsgPageOff']]), innerPane = $div([['id', 'InnerMsgPage'], ['class', 'MsgPageOff']]), ]);
			insertFirst(document.body, div);
		}
		return innerPane;
	}
	function uiDisplayModalWindow(aState) {
		scroll(0, 0);
		var outerPane = $g('OuterMsgPage');
		var innerPane = $g('InnerMsgPage');
		if (outerPane && innerPane) {
			if (aState) {
				outerPane.className = 'OuterMsgPageOn';
				innerPane.className = 'InnerMsgPageOn';
				var D = document;
				var height = Math.max(Math.max(D.body.scrollHeight, D.documentElement.scrollHeight), Math.max(D.body.offsetHeight, D.documentElement.offsetHeight), Math.max(D.body.clientHeight, D.documentElement.clientHeight));
				$at(outerPane, [['style', 'height:' + height + 'px;']]);
				$at(innerPane, [['style', 'margin-left:-' + innerPane.firstChild.clientWidth / 2 + 'px;']]);
			} else {
				outerPane.className = 'MsgPageOff';
				innerPane.className = 'MsgPageOff';
			}
		}
	}
	function uiHideModalWindow() {
		uiDisplayModalWindow(false);
	}
	function uiCreateUpDownControl(buddy, delta) {
		function cancelTimer() {
			uiCreateUpDownControl.repeats = 0;
			if (uiCreateUpDownControl.timer) {
				clearTimeout(uiCreateUpDownControl.timer);
				uiCreateUpDownControl.timer = null;
			}
		}
		function doChanges(delta) {
			var v = (buddy.value === "") ? 0 : Number(buddy.value);
			if (!isNaN(v)) {
				v += delta;
				if (Math.abs(delta) < 1) {
					v = v.toFixed(Math.round(-Math.log(Math.abs(delta)) * Math.LOG10E));
				}
				buddy.value = v;
				var e = document.createEvent("Events");
				e.initEvent("change", true, false);
				buddy.dispatchEvent(e);
			}
		}
		function onDelay() {
			++uiCreateUpDownControl.repeats;
			doChanges(uiCreateUpDownControl.delta);
			var delay = ifGreater(uiCreateUpDownControl.repeats, 15, 100, 10, 150, 6, 200, 3, 250, 400);
			uiCreateUpDownControl.timer = setTimeout(onDelay, delay);
		}
		function onMouseDown(delta, e) {
			cancelTimer();
			if (e.button === 0) {
				uiCreateUpDownControl.delta = delta;
				uiCreateUpDownControl.timer = setTimeout(onDelay, 600);
			}
		}
		function onClick(delta) {
			if (!uiCreateUpDownControl.repeats) {
				doChanges(delta);
			}
			cancelTimer();
		}
		function onMouseWheel(e) {
			var movement = e.detail / -3;
			onClick(movement * delta, buddy);
			e.stopPropagation();
			e.preventDefault();
			return false;
		}
		function onBuddyFocused(e) {
			window.addEventListener('DOMMouseScroll', onMouseWheel, false);
			document.addEventListener('mousewheel', onMouseWheel, false);
		}
		function onBuddyBlur(e) {
			window.removeEventListener('DOMMouseScroll', onMouseWheel, false);
			document.removeEventListener('mousewheel', onMouseWheel, false);
		}
		delta = delta || 1;
		var up = I("arrow_up8", [['title', '+' + delta], ['class', 'tbiUp'], ['click', bind(onClick, [+delta]), false], ['mousedown', bind2(onMouseDown, [+delta]), false]]);
		var down = I("arrow_down8", [['title', '-' + delta], ['class', 'tbiDown'], ['click', bind(onClick, [-delta]), false], ['mousedown', bind2(onMouseDown, [-delta]), false]]);
		var ctrl = $div([['class', 'tbUpDown']], [up, down]);
		buddy.addEventListener('focus', onBuddyFocused, false);
		buddy.addEventListener('blur', onBuddyBlur, false);
		return ctrl;
	}
	function uiAddBuiltinUpDownControl(buddy, delta) {
		var ctrl = uiCreateUpDownControl(buddy, delta);
		ctrl.className += " tbBuiltin";
		insertAfter(buddy, ctrl);
		var styles = window.getComputedStyle(buddy, null);
		ctrl.style.lineHeight = styles.lineHeight;
		buddy.style['padding' + DOMdocDir[1]] = (parseInt10(styles['padding' + DOMdocDir[1]]) + 9) + 'px';
		ctrl.style[docDir[0]] = (-9 - parseInt10(styles['border' + DOMdocDir[1] + 'Width']) - parseInt10(styles['margin' + DOMdocDir[1]])) + 'px';
		return ctrl;
	}
	function uiCreateRollDownControl(bOpened, title, onChange) {
		function sendEvent(target, bOpened) {
			var e = document.createEvent("Events");
			e.initEvent("change", true, false);
			e.opened = bOpened;
			return target.dispatchEvent(e);
		}
		function onClick(e) {
			var newState = !e.target.getState();
			e.target.setState(newState);
			sendEvent(e.target, newState);
		}
		var ctrl = $span(['class', 'tbRollDown']);
		ctrl.getState = function () {
			var state = hasClass(this, 'tbOpened');
			if (!state && !hasClass(this, 'tbClosed')) {
				state = undefined;
			}
			return state;
		}
		ctrl.setState = function (bOpened) {
			delClass(this, 'tbOpened tbClosed');
			addClass(this, bOpened ? 'tbOpened' : 'tbClosed');
			this.textContent = bOpened ? '\u25BC' : '\u25BA';
			var t = title;
			if (t instanceof Array) {
				t = title[bOpened ? 1 : 0];
			}
			$at(this, ['title', t])
		}
		ctrl.setState(bOpened);
		ctrl.addEventListener('click', onClick, false);
		if (onChange) {
			ctrl.addEventListener('change', onChange, false);
		}
		return ctrl;
	}
	function VillageInfo() {
		this.name = '';
		this.id = 0;
		this.x = null;
		this.y = null;
		this.type = undefined;
		this.pop = undefined;
		this.mark = '\u2022';
		this.markt = 0;
		this.posInListOrg = null;
		this.posInListCur = null;
		this.BiP = [];
		this.TM = [];
		this.b = [];
		this.mCap = TB3O.DefaultMerchantsCapacity[TB3O.U[1]] * TB3O.nMerchantCapacityFactor[TB3O.nServerType];
		this.uci = new UnitsCountInfo();
		this.cpi = new CulturePointsInfo(2);
		this.thi = new TownHallInfo();
		this.upi = new UpgradeInfo();
		this.r = new ResourcesInfo();
		this.r.Res = [750, 750, 750, 750];
		this.r.Cap = [800, 800, 800, 800];
		return this;
	}
	function initVillageBiP(info, aBiP) {
		info.BiP = aBiP;
	}
	function initVillageTM(info, aTM) {
		info.TM = aTM;
	}
	function loadVillagesInfo() {
		var villagesInfo = loadPersistentUserObject('VillagesInfo', {});
		var villageId,
		villageInfo;
		var defVillageInfo = new VillageInfo();
		for (villageId in villagesInfo) {
			villageInfo = villagesInfo[villageId];
			cloneUndefinedProperties(defVillageInfo, villageInfo);
			removeUndefinedProperties(defVillageInfo, villageInfo);
		}
		return villagesInfo;
	}
	function saveVillagesInfo(villagesInfo) {
		savePersistentUserObject('VillagesInfo', villagesInfo);
	}
	function reconcileEvents(evA, ttCurrent) {
		var i;
		for (i = 0; i < evA.length && ttCurrent >= evA[i].ttEnd; ++i)
			continue;
		if (i > 0) {
			evA.splice(0, i);
		}
	}
	function reconcileVillagesInfo(villagesInfo) {
		var villageId,
		i,
		ttCurrent = toTimeStamp(getServerTimeNow());
		for (villageId in villagesInfo) {
			var villageInfo = villagesInfo[villageId];
			var arrBip = villageInfo.BiP;
			for (i = 0; i < arrBip.length; ) {
				if (ttCurrent >= arrBip[i].endTime && arrBip[i].endTime !== null) {
					arrBip.splice(i, 1);
				} else {
					++i;
				}
			}
			var arrTM = villageInfo.TM;
			for (i = 0; i < arrTM.length; ) {
				if (ttCurrent >= arrTM[i].fT && arrTM[i].fT !== null) {
					arrTM.splice(i, 1);
				} else {
					++i;
				}
			}
			reconcileEvents(villageInfo.thi.evA, ttCurrent);
			reconcileEvents(villageInfo.upi.evA, ttCurrent);
		}
	}
	function getNormalizedCustomVillagesOrder() {
		var mapPos2Id = [];
		var aUnPosId = [];
		var i,
		pos,
		villageId;
		for (villageId in TB3O.VillagesInfo) {
			pos = parseInt10(TB3O.VillagesInfo[villageId].posInListCur);
			if (!isNaN(pos) && mapPos2Id[pos] === undefined)
				mapPos2Id[pos] = villageId;
			else
				aUnPosId[aUnPosId.length] = villageId;
		}
		for (pos = 0; pos < mapPos2Id.length; ++pos) {
			if (mapPos2Id[pos] === undefined)
				mapPos2Id.splice(pos, 1);
		}
		aUnPosId.sort(function (id1, id2) {
			return TB3O.VillagesInfo[id1].posInListOrg - TB3O.VillagesInfo[id2].posInListOrg;
		});
		for (i = 0; pos < TB3O.VillagesCount; ++pos, ++i) {
			mapPos2Id[pos] = aUnPosId[i];
		}
		return mapPos2Id;
	}
	function getVillagesOrder(villagesInfo, prefferedOrder) {
		var bCustomOrder = (TB3O.O[91] === "1" || prefferedOrder === "custom") && prefferedOrder !== "original";
		var orderedIds = [];
		var pos,
		villageId,
		villageInfo;
		for (villageId in villagesInfo) {
			villageInfo = villagesInfo[villageId];
			pos = bCustomOrder ? villageInfo.posInListCur : villageInfo.posInListOrg;
			orderedIds[pos] = villageId;
		}
		if (prefferedOrder === "random") {
			shuffle(orderedIds);
		}
		return orderedIds;
	}
	function getVillagesMapIdDict(villagesInfo) {
		var villageId,
		villageInfo,
		mapId;
		var mapIdDict = {};
		for (villageId in villagesInfo) {
			villageInfo = villagesInfo[villageId];
			mapId = xy2id(villageInfo.x, villageInfo.y);
			mapIdDict[mapId] = villageId;
		}
		return mapIdDict;
	}
	function getVillageInfoByMapId(villagesInfo, mapId) {
		var villageId,
		villageInfo;
		if (mapId) {
			for (villageId in villagesInfo) {
				villageInfo = villagesInfo[villageId];
				if (mapId == xy2id(villageInfo.x, villageInfo.y)) {
					return villageInfo;
				}
			}
		}
		return null;
	}
	function getActualVillageCP(villageInfo) {
		var cp;
		if (villageInfo.cpi.ttUpd) {
			cp = villageInfo.cpi.cp;
		} else {
			cp = getBuildingsCP(villageInfo.b);
		}
		return cp;
	}
	function getActualVillagePopulation(villageInfo) {
		var pop;
		if (villageInfo.pop !== undefined) {
			pop = villageInfo.pop;
		} else {
			pop = getBuildingsCropConsumption(villageInfo.b);
		}
		return pop;
	}
	function getTotalPopulation() {
		var villageId;
		var pop = 0;
		for (villageId in TB3O.VillagesInfo) {
			pop += getActualVillagePopulation(TB3O.VillagesInfo[villageId]);
		}
		return pop;
	}
	function getBuildingIdByGid(b, gid) {
		var id;
		for (id = 1; id < b.length; ++id) {
			if (b[id] && b[id][0] === gid) {
				return id;
			}
		}
		return null;
	}
	function getBuildingsTotalCost(b, costIndex) {
		var val = 0;
		var id;
		for (id = 1; id < b.length; ++id) {
			if (b[id]) {
				var cost = bCost[b[id][0]];
				var maxlvl = Math.min(b[id][1], cost.length - 1);
				val += cost[maxlvl][costIndex];
			}
		}
		return val;
	}
	function getBuildingsCP(b) {
		return getBuildingsTotalCost(b, 4);
	}
	function getBuildingsCropConsumption(b) {
		return getBuildingsTotalCost(b, 5);
	}
	function getBuildingIconName(gid) {
		return (gid ? "g" + gid + "Icon " : "") + "gebIcon";
	}
	function getBuildingIcon(gid) {
		return I(getBuildingIconName(gid));
	}
	function isBuildingPresent(villageId, gid) {
		var b = TB3O.VillagesInfo[villageId].b;
		var id = getBuildingIdByGid(b, gid);
		return (!!id && b[id][1] > 0);
	}
	function canBuildingTrainUnits(gid) {
		return isSomeOf(gid, 19, 20, 21, 25, 26, 29, 30, 36);
	}
	function BuildingInfo(title, name, id, gid, lvl, xy, imgSrc, imgClass) {
		this.title = title;
		this.name = name;
		this.id = id;
		this.gid = gid;
		this.xy = xy;
		this.lvl = lvl;
		this.uplvl = lvl;
		this.imgSrc = imgSrc;
		this.imgClass = imgClass;
		return this;
	}
	function BuildingsInfo() {
		this._ = [];
	}
	BuildingsInfo.prototype.sortByName = function () {
		this._.sort(function (d1, d2) {
			var res = compare(d1.name, d2.name);
			if (res === 0) {
				res = d1.lvl - d2.lvl;
			}
			return res;
		});
	};
	BuildingsInfo.prototype.getInfoById = function (id) {
		var i,
		info = null;
		for (i = 0; i < this._.length; ++i) {
			if (this._[i].id === id) {
				info = this._[i];
				break;
			}
		}
		return info;
	};
	BuildingsInfo.prototype.syncWithBiP = function (arrBiP) {
		var i;
		for (i = 0; i < this._.length; ++i) {
			var gid = this._[i].gid;
			var crtLevel = this._[i].lvl;
			if (gid > 0 && crtLevel >= 0) {
				this._[i].uplvl = getNewUpgradeLevel(arrBiP, this._[i].name, crtLevel);
			}
		}
	};
	BuildingsInfo.prototype.exportB = function (arrB, bGetNewLevel) {
		var i;
		for (i = 0; i < this._.length; ++i) {
			var id = this._[i].id;
			var gid = this._[i].gid;
			var crtLevel = this._[i].lvl;
			if (gid > 0 && crtLevel >= 0) {
				arrB[id] = [gid, bGetNewLevel ? this._[i].uplvl : crtLevel];
			} else {
				delete arrB[id];
			}
		}
	};
	function getCommonBuildingInfo(gid, villageId, aDoc) {
		var info = scanBuildingNameLevel(aDoc);
		if (info) {
			T.saveLocaleString("BN_GID" + gid, info[0]);
		}
		return true;
	}
	function processBuilding(gid) {
		getCommonBuildingInfo(gid, TB3O.ActiveVillageId, document);
	}
	function TravianMenu(container, active, items) {
		this.container = container;
		this.active = active;
		this.items = items;
	}
	TravianMenu.prototype.countLinks = function () {
		var i,
		aLinks = 0;
		for (i = 0; i < this.items.length; ++i) {
			if (this.items[i][1] !== "") {
				++aLinks;
			}
		}
		return aLinks;
	};
	TravianMenu.prototype.countLockedItems = function () {
		var i,
		locks = 0;
		for (i = 0; i < this.items.length; ++i) {
			if (this.items[i][2]) {
				++locks;
			}
		}
		return locks;
	};
	function __searchAndParseMenu(aDoc, cls) {
		var menuItems = [];
		var ssMenu = $xf("//div[@id='" + ID_CONTENT + "']//div[" + $xClass(cls) + "]/div[" + $xClass('container') + "]", 'l', aDoc, aDoc);
		var i,
		iActive;
		var goldItemsTotal = 0;
		for (i = 0; i < ssMenu.snapshotLength; ++i) {
			var label = "";
			var aElem = ssMenu.snapshotItem(i);
			if (hasClass(aElem, "active")) {
				iActive = i;
			}
			var goldItem = hasClass(aElem, "gold");
			if (goldItem) {
				++goldItemsTotal;
			}
			var aLink = $nth_tag(aElem, "a");
			var href = (aLink) ? aLink.getAttribute('href') : "";
			var aSpan = $nth_tag(aElem, "span");
			if (aSpan) {
				label = aSpan.textContent;
			} else if (aLink) {
				label = aLink.textContent;
			}
			menuItems.push([trimWhitespaces(label), href, goldItem ? 1 : 0]);
		}
		return (menuItems.length > 0) ? new TravianMenu(ssMenu.snapshotItem(0).parentNode, iActive, menuItems) : null;
	}
	function searchAndParseTabMenu(aDoc) {
		return __searchAndParseMenu(aDoc, 'tabNavi');
	}
	function searchAndParseSubMenu(aDoc) {
		return __searchAndParseMenu(aDoc, 'subNavi');
	}
	TravianMenu.prototype.getItemNode = function (i) {
		var ssMenuItem = $xf("./div[" + $xClass('container') + "][" + (i + 1) + "]", 'f', this.container, document);
		return ssMenuItem;
	};
	TravianMenu.prototype.uiModify = function () {
		var ssMenu = $xf("./div[" + $xClass('container') + "]", 'l', this.container, document);
		var i;
		for (i = 0; i < ssMenu.snapshotLength && i < this.items.length; ++i) {
			var aElem = ssMenu.snapshotItem(i);
			if (hasClass(aElem, "active") && i !== this.active) {
				delClass(aElem, "active");
				addClass(aElem, "normal");
			} else if (hasClass(aElem, "normal") && i === this.active) {
				delClass(aElem, "normal");
				addClass(aElem, "active");
			}
			ifClass(aElem, this.items[i][2], "gold");
			var href = this.items[i][1];
			var aLink = $nth_tag(aElem, "a");
			if (aLink) {
				aLink.href = href;
			} else {
				var aSpan = $nth_tag(aElem, "span");
				if (aSpan) {
					var parentNode = aSpan.parentNode;
					parentNode.removeChild(aSpan);
					parentNode.appendChild($lnk(['href', href], aSpan));
				}
			}
		}
	};
	function $d(iHTML, att) {
		return $e("div", att, iHTML);
	}
	function ajaxNDV2(aR) {
		return $d(aR.responseText);
	}
	function getResourcesResCap(resourcesInfo, aDoc, ttServer) {
		var ri,
		aNode,
		resIppH,
		validCount = 0;
		for (ri = 0; ri < 4; ++ri) {
			aNode = $g('l' + (ri + 1), aDoc);
			if (aNode) {
				resIppH = aNode.textContent.split("/");
				resourcesInfo.Res[ri] = parseSeparatedInt10(resIppH[0]);
				if (resIppH.length > 1) {
					resourcesInfo.Cap[ri] = parseSeparatedInt10(resIppH[1]);
				}
				++validCount;
			}
		}
		if (TB3O.ServerInfo.version > 4.0) {
			aNode = $g("stockBarWarehouse", aDoc);
			resourcesInfo.Cap[0] = resourcesInfo.Cap[1] = resourcesInfo.Cap[2] = parseSeparatedInt10(aNode.textContent);
			aNode = $g("stockBarGranary", aDoc);
			resourcesInfo.Cap[3] = parseSeparatedInt10(aNode.textContent);
		}
		if (validCount === 4) {
			resourcesInfo.dUpd = new Date(ttServer);
		}
		return resourcesInfo;
	}
	function getResourcesInfo2(villageId, aDoc, ttServer) {
		function getResourcesInfo40(resourcesInfo, aDoc, ttServer) {
			var ri,
			aNode,
			resIppH;
			var reEPpH = /: *([+-]?\d+)/;
			var res = $g("res", aDoc);
			if (res) {
				for (aNode = res.firstChild, ri = 0; aNode; aNode = aNode.nextSibling) {
					if (TAG(aNode) === "LI") {
						if (reEPpH.exec(aNode.title) && ri <= 3) {
							resourcesInfo.EPpH[ri] = parseInt10(RegExp.$1);
							resourcesInfo.PpH[ri] = (resourcesInfo.EPpH[ri] > 0) ? resourcesInfo.EPpH[ri] : 0;
						}
						++ri;
					}
				}
				aNode = $g('l5', aDoc);
				if (aNode) {
					resIppH = aNode.textContent.split("/");
					if (resIppH.length > 1) {
						resourcesInfo.PpH[3] = parseInt10(resIppH[1]);
					}
				}
			}
		}
		function getResourcesInfo42(resourcesInfo, aDoc, ttServer) {
			var ri,
			xi,
			aNode;
			var rawData = []
			var reEPpH = /: *([+-]?\d+)/;
			var nodeList = $xf("//ul[@id='stockBar']//a", 'l', aDoc, aDoc);
			if (nodeList.snapshotLength < 5) {
				resourcesInfo.dUpd = undefined;
			} else {
				for (xi = 0; xi < nodeList.snapshotLength; ++xi) {
					aNode = nodeList.snapshotItem(xi);
					if(aNode.title=='')
						rawData.push(parseInt(window.wrappedJSObject.resources.production["l" + (xi + 1)]));
					else
						if (reEPpH.exec(decodeHTMLEntities(aNode.title))) {
							rawData.push(parseInt10(RegExp.$1));
						}
				}
				for (ri = 0; ri < 3; ++ri) {
					resourcesInfo.EPpH[ri] = resourcesInfo.PpH[ri] = rawData[ri];
				}
				resourcesInfo.EPpH[3] = rawData[4];
				resourcesInfo.PpH[3] = rawData[3] + getActualVillagePopulation(TB3O.VillagesInfo[villageId]);
				resourcesInfo.PpH[3] = Math.max(resourcesInfo.PpH[3], resourcesInfo.EPpH[3]);
			}
		}
		var resourcesInfo = new ResourcesInfo();
		getResourcesResCap(resourcesInfo, aDoc, ttServer);
		if (TB3O.ServerInfo.version > 4.0) {
			getResourcesInfo42(resourcesInfo, aDoc, ttServer);
		} else {
			getResourcesInfo40(resourcesInfo, aDoc, ttServer);
		}
		return resourcesInfo;
	}
	function getResourcesTitles() {
		function getResourceTitle(i, id) {
			var aNode = $g(id);
			if (aNode) {
				var resImg = aNode.previousElementSibling;
				if (resImg) {
					t['RES' + i] = resImg.alt;
				}
			}
		}
		var i;
		for (i = 1; i <= 5; ++i) {
			getResourceTitle(i, 'l' + i);
		}
		if (TB3O.ServerInfo.version > 4.0) {
			getResourceTitle(5, 'stockBarFreeCrop');
		}
	}
	function ResourcesInfo() {
		this.PpH = [0, 0, 0, 0];
		this.EPpH = [0, 0, 0, 0];
		this.Res = [0, 0, 0, 0];
		this.Cap = [0, 0, 0, 0];
		this.dUpd = undefined;
		return this;
	}
	function accumulateResources(res1, res2) {
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			res1[ri] += res2[ri];
		}
		return res1;
	}
	function subResources(res1, res2) {
		var ri;
		var res3 = new Array(4);
		for (ri = 0; ri < 4; ++ri) {
			res3[ri] = res1[ri] - res2[ri];
		}
		return res3;
	}
	function totalResources(res) {
		var ri;
		var tot = 0;
		for (ri = 0; ri < 4; ++ri) {
			tot += res[ri];
		}
		return tot;
	}
	function floorResources(res) {
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			res[ri] = Math.floor(res[ri]);
		}
		return res;
	}
	function countResources(res, count) {
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			res[ri] *= count;
		}
		return res;
	}
	function getResourceImage(ri) {
		return I("r" + (ri === 4 ? 0 : ri + 1));
	}
	function cloneResourcesInfo(r) {
		var resourcesInfo = new ResourcesInfo();
		if (r.dUpd !== undefined) {
			resourcesInfo.dUpd = new Date(r.dUpd.getTime());
		}
		resourcesInfo.Res = cloneArray(r.Res);
		resourcesInfo.PpH = cloneArray(r.PpH);
		resourcesInfo.EPpH = cloneArray(r.EPpH);
		resourcesInfo.Cap = cloneArray(r.Cap);
		return resourcesInfo;
	}
	function getCumulativeResources(r, addRes) {
		var ri;
		var res = new Array(4);
		var ru = [0, 0, 0, 0];
		var ro = [0, 0, 0, 0];
		var ev = [null, null, null, null];
		for (ri = 0; ri < 4; ++ri) {
			var v = r.Res[ri] + addRes[ri];
			if (v < 0) {
				ru[ri] = v;
				ev[ri] = false;
				v = 0;
			} else if (v > r.Cap[ri]) {
				ro[ri] = v - r.Cap[ri];
				ev[ri] = true;
				v = r.Cap[ri];
			}
			res[ri] = v;
		}
		return {
			res : res,
			A : {
				ru : ru,
				ro : ro,
				ev : ev
			}
		};
	}
	function getActualResourcesAfterMs(r, tms) {
		var ri;
		var addRes = new Array(4);
		for (ri = 0; ri < 4; ++ri) {
			addRes[ri] = (isFinite(tms) && tms > 0) ? r.EPpH[ri] / 3600000 * tms : 0;
		}
		return getCumulativeResources(r, addRes);
	}
	function getSecondsToFill(resourcesInfo, ri) {
		var ttFill;
		var EPpS = resourcesInfo.EPpH[ri] / 3600;
		if (EPpS >= 0) {
			ttFill = (resourcesInfo.Cap[ri] - resourcesInfo.Res[ri]) / EPpS;
		} else {
			ttFill =  - (resourcesInfo.Res[ri] / EPpS);
		}
		return Math.floor(ttFill);
	}
	function getSecondsToProduce(need, ePpH) {
		return (ePpH <= 0) ? Infinity : Math.ceil(need / (ePpH / 3600));
	}
	function getActualResourcesInfo(r, doFloor, ttCurrent) {
		var tmsElapsed;
		var resourcesInfo = new ResourcesInfo();
		if (r.dUpd !== undefined) {
			resourcesInfo.dUpd = toDate(ttCurrent);
			tmsElapsed = ttCurrent - r.dUpd.getTime();
			resourcesInfo.Res = getActualResourcesAfterMs(r, tmsElapsed).res;
			resourcesInfo.PpH = cloneArray(r.PpH);
			resourcesInfo.EPpH = cloneArray(r.EPpH);
			resourcesInfo.Cap = cloneArray(r.Cap);
			if (doFloor) {
				floorResources(resourcesInfo.Res);
			}
		}
		return resourcesInfo;
	}
	function getActualResourcesInfoNow(r, doFloor) {
		return getActualResourcesInfo(r, doFloor, toTimeStamp(getServerTimeNow()));
	}
	function getCumulativeResourcesInfo(resourcesInfo, ttAccumulate, resToAccumulate, prevState) {
		function fillStateTTF(r, st, ttMax, stA) {
			var ttStart = r.dUpd.getTime();
			var ri;
			for (ri = 0; ri < 4; ++ri) {
				if (ttStart < st.ttf[ri]) {
					if (stA && stA.ev[ri] !== null) {
						st.ttf[ri] = ttStart;
						st.ev[ri] = stA.ev[ri];
					} else {
						var ttToFill = ttStart + getSecondsToFill(r, ri) * 1000;
						if (ttToFill <= ttMax) {
							if (r.EPpH[ri] > 0) {
								if (ttToFill < st.ttf[ri]) {
									st.ttf[ri] = ttToFill;
									st.ev[ri] = true;
								}
							} else if (r.EPpH[ri] < 0) {
								if (ttToFill > st.ttf[ri] || !isFinite(st.ttf[ri])) {
									st.ttf[ri] = ttToFill;
									st.ev[ri] = false;
								}
							}
						}
					}
				}
			}
		}
		function fillStateRUO(r, st, ar) {
			var ri;
			for (ri = 0; ri < 4; ++ri) {
				r.Res[ri] = ar.res[ri];
				st.ru[ri] += ar.A.ru[ri];
				st.ro[ri] += ar.A.ro[ri];
			}
		}
		var ar;
		var tms = ttAccumulate - resourcesInfo.dUpd.getTime();
		var state = {
			BA : {},
			AA : {}

		};
		if (prevState) {
			state.BA.ru = cloneArray(prevState.AA.ru);
			state.BA.ro = cloneArray(prevState.AA.ro);
			state.BA.ttf = cloneArray(prevState.AA.ttf);
			state.BA.ev = cloneArray(prevState.AA.ev);
		} else {
			state.BA.ru = [0, 0, 0, 0];
			state.BA.ro = [0, 0, 0, 0];
			state.BA.ttf = [Infinity, Infinity, Infinity, Infinity];
			state.BA.ev = [null, null, null, null];
		}
		if (tms > 0) {
			ar = getActualResourcesAfterMs(resourcesInfo, tms);
			fillStateTTF(resourcesInfo, state.BA, ttAccumulate);
			fillStateRUO(resourcesInfo, state.BA, ar);
		}
		state.AA.ru = cloneArray(state.BA.ru);
		state.AA.ro = cloneArray(state.BA.ro);
		state.AA.ttf = cloneArray(state.BA.ttf);
		state.AA.ev = cloneArray(state.BA.ev);
		resourcesInfo.dUpd.setTime(ttAccumulate);
		ar = getCumulativeResources(resourcesInfo, resToAccumulate);
		state.A = ar.A;
		fillStateRUO(resourcesInfo, state.AA, ar);
		fillStateTTF(resourcesInfo, state.AA, Infinity, state.A);
		return state;
	}
	function getResInfoTotals() {
		var tPpH = new ResourcesInfo();
		var villageId,
		resourcesInfo;
		var ri;
		for (villageId in TB3O.VillagesInfo) {
			resourcesInfo = TB3O.VillagesInfo[villageId].r;
			if (resourcesInfo.dUpd !== undefined) {
				for (ri = 0; ri < 4; ++ri) {
					tPpH.PpH[ri] += resourcesInfo.PpH[ri];
					tPpH.EPpH[ri] += resourcesInfo.EPpH[ri];
					tPpH.Res[ri] += resourcesInfo.Res[ri];
					tPpH.Cap[ri] += resourcesInfo.Cap[ri];
				}
			}
		}
		return tPpH;
	}
	function getResourcesFromString(str) {
		var Res = [0, 0, 0, 0];
		var bResValid = false;
		if (!getResourcesFromString.re) {
			var sResPattern = "(\\d+)";
			var sSepPattern = "[ \u00A0\n\t|]+";
			getResourcesFromString.re = new RegExp(sResPattern + sSepPattern + sResPattern + sSepPattern + sResPattern + sSepPattern + sResPattern);
		}
		if (getResourcesFromString.re.exec(str)) {
			var inRes = [RegExp.$1, RegExp.$2, RegExp.$3, RegExp.$4];
			var ri;
			bResValid = true;
			for (ri = 0; ri < 4; ri++) {
				Res[ri] = parseInt10(inRes[ri]);
				if (!isFinite(Res[ri])) {
					bResValid = false;
					break;
				}
			}
		}
		return bResValid ? Res : null;
	}
	function isCapReached(res, EPpH, cap) {
		return ((EPpH < 0 && res === 0) || (EPpH >= 0 && res === cap));
	}
	function setResClasses(e, secs, EPpH, res, cap) {
		ifClass(e, (EPpH < 0), 'tbDecrease');
		ifClass(e, (secs > 0 && secs < 7200), 'tbSoon');
		if (res !== undefined && cap !== undefined) {
			ifClass(e, isCapReached(res, EPpH, cap), 'tbCapReached');
		} else {
			ifClass(e, (secs <= 0), 'tbCapReached');
		}
		return e;
	}
	function setResTimeClasses(e, secs, EPpH, res, cap) {
		ifClass(e, (!isFinite(secs)), 'tbInfinity');
		return setResClasses(e, secs, EPpH, res, cap);
	}
	function uiSetTimeSpan(e, secs, options) {
		if (!options) {
			options = {};
		}
		var format = options.format;
		if (format !== undefined) {
			if (options.dtNow && options.dtEvent) {
				e.title = formatDateTime(options.dtNow, options.dtEvent, format);
			} else {
				e.title = formatDateTimeRelative(secs, format);
			}
		}
		e.textContent = formatTimeSpan(secs, 0);
		ifClass(e, (secs !== 0 && isFinite(secs)), 'timeouta');
		return e;
	}
	function uiSetTimeSpanByDate(e, dtNow, dtEvent, options) {
		if (options) {
			options.dtNow = dtNow;
			options.dtEvent = dtEvent;
		}
		return uiSetTimeSpan(e, getTimeSpan(dtEvent, dtNow), options);
	}
	function __uiSetTimeout(e, secs, options) {
		addClass(e, 'tbTimeout');
		return uiSetTimeSpan(e, secs, options);
	}
	function uiSetTimeout(e, secs, EPpH, options) {
		setResTimeClasses(e, secs, EPpH);
		return __uiSetTimeout(e, secs, options);
	}
	function uiSetTimeToFill(e, resourcesInfo, ri, options) {
		var secs = getSecondsToFill(resourcesInfo, ri);
		setResTimeClasses(e, secs, resourcesInfo.EPpH[ri], resourcesInfo.Res[ri], resourcesInfo.Cap[ri]);
		return __uiSetTimeout(e, secs, options);
	}
	function uiSetTimeoutByDate(e, dtNow, dtEvent, EPpH, options) {
		if (options) {
			options.dtNow = dtNow;
			options.dtEvent = dtEvent;
		}
		return uiSetTimeout(e, getTimeSpan(dtEvent, dtNow), EPpH, options);
	}
	function getBackColorForResourceBar(p, EPpH) {
		if (EPpH < 0) {
			p = 100 - p;
		}
		return (p < 90 ? "rgb(" + parseInt10(p / 90 * 255) + "," + (100 + p) + ",0)" : "rgb(255," + parseInt10((100 - p) / (100 - 90) * 170) + ",0)");
	}
	function getForeColorForResourceBar(p, EPpH) {
		if (EPpH < 0) {
			p = 100 - p;
		}
		return ((p > 60 && p < 90) ? 'black' : TB3O.DFc[1]);
	}
	function getFillPercent(resourcesInfo, ri) {
		var fillPercent = Math.round(resourcesInfo.Res[ri] / resourcesInfo.Cap[ri] * 100);
		if (fillPercent > 100) {
			fillPercent = 100;
		}
		return fillPercent;
	}
	function uiSetFillPercent(e, resourcesInfo, ri) {
		var fillPercent = getFillPercent(resourcesInfo, ri);
		var EPpH = resourcesInfo.EPpH[ri];
		addClass(e, 'tbFillPerc');
		setResClasses(e, getSecondsToFill(resourcesInfo, ri), EPpH, resourcesInfo.Res[ri], resourcesInfo.Cap[ri]);
		e.textContent = fillPercent + "%";
		e.style.color = getBackColorForResourceBar(fillPercent, EPpH);
		return e;
	}
	function uiSetEffectiveCropPpH(e, val, bUseLocale) {
		var cpph = parseInt10(val);
		var strCpph = bUseLocale ? $ls(cpph) : cpph.toString();
		var cpphColor = "black";
		if (cpph > 0) {
			strCpph = "+" + strCpph;
			cpphColor = "darkgreen";
		} else if (cpph < 0) {
			cpphColor = "red";
		}
		e.textContent = strCpph;
		e.style.color = cpphColor;
	}
	function getTroopIndexTitleFromImg(tImg) {
		var tix = Number.NaN; {
			var imgCN = tImg.className;
			if (imgCN && imgCN.indexOf("unit") !== -1 && imgCN.search(/u(\d+)/) !== -1) {
				tix = parseInt10(RegExp.$1);
			}
		}
		return [tix, tImg.title];
	}
	function getTroopImage(tix) {
		return (isIntValid(tix)) ? I("u" + tix) : I("uhero");
	}
	function getUnitImage(uix) {
		var img = null;
		if (TB3O.U[1] !== '') {
			img = getTroopImage(uix + TB3O.U[7]);
		}
		return img;
	}
	function getRaceIndexFromTroopIndex(tix) {
		return Math.floor(tix / 10);
	}
	function getRaceFromTroopIndex(tix) {
		return avRace[getRaceIndexFromTroopIndex(tix)];
	}
	function getScoutTroopIndex(race) {
		return ifEqual(race, 'Romans', 4, 'Teutons', 14, 'Gauls', 23, 0);
	}
	function getTroopIndexFromRace(race) {
		return ifEqual(race, 'Teutons', 11, 'Gauls', 21, 1);
	}
	function getTroopNoByIndex(troopsInfo, tix) {
		var troopNo;
		for (troopNo = 0; troopNo < troopsInfo.length; ++troopNo) {
			if (troopsInfo[troopNo][0] === tix) {
				return troopNo;
			}
		}
		return undefined;
	}
	function calcTroopsTotals(troopsInfo) {
		var tNinfo = [0, 0, 0, 0, 0, 0, 0, 0, Infinity, 0];
		var i,
		j;
		for (i = 0; i < troopsInfo.length; i++) {
			var tix = troopsInfo[i][0];
			var count = troopsInfo[i][1];
			if (count > 0) {
				if (isIntValid(tix)) {
					for (j = 0; j <= 9; ++j) {
						if (j === 8) {
							var speed = uc[tix][8] * TB3O.nTroopSpeedFactor[TB3O.nServerType];
							tNinfo[8] = Math.min(tNinfo[8], speed);
						} else {
							tNinfo[j] += count * uc[tix][j];
						}
					}
				} else {
					tNinfo[9] += count * 6;
				}
			}
		}
		return tNinfo;
	}
	function getUnitsCountInfoTotals() {
		var villageId;
		var sumTT = fillArray(new Array(11), 0);
		for (villageId in TB3O.VillagesInfo) {
			var unitsCountInfo = TB3O.VillagesInfo[villageId].uci;
			if (unitsCountInfo.ttUpd) {
				accumulateArray(sumTT, unitsCountInfo.ut);
			}
		}
		return sumTT;
	}
	function getTroopInfoFromUnitCount(race, uix, unitCount) {
		return [getTroopIndexFromRace(race) + uix, unitCount];
	}
	function getTroopsInfoFromUnitsCount(race, arrUnits) {
		var troopsInfo = [];
		var i,
		tix = getTroopIndexFromRace(race);
		for (i = 0; i < 11; ++i) {
			if (arrUnits[i] > 0) {
				troopsInfo.push([tix + i, arrUnits[i]]);
			}
		}
		return troopsInfo;
	}
	function adaptDataToGameVersion() {
		if (!I.images_attributes) {
			I.images_attributes = {};
		}
		var iC = I.images_attributes;
		iC["clock"] = [['class', 'clock'], ['src', xGIF]];
		iC["bau"] = [['class', 'bau'], ['src', image["bau"]]];
		gIc["r1"] = '<img class="r1" src="' + xGIF + '" title="' + T('RES1') + '" alt="' + T('RES1') + '">';
		gIc["r2"] = '<img class="r2" src="' + xGIF + '" title="' + T('RES2') + '" alt="' + T('RES2') + '">';
		gIc["r3"] = '<img class="r3" src="' + xGIF + '" title="' + T('RES3') + '" alt="' + T('RES3') + '">';
		gIc["r4"] = '<img class="r4" src="' + xGIF + '" title="' + T('RES4') + '" alt="' + T('RES4') + '">';
		gIc["r41"] = '<img class="r4" src="' + xGIF + '" title="' + T('SENDRES') + '" alt="' + T('SENDRES') + '">';
		gIc["r5"] = '<img class="r5" src="' + xGIF + '" title="' + T('RES5') + '" alt="' + T('RES5') + '">';
		gIc["clock"] = '<img class="clock" src="' + xGIF + '">';
		gIc["capacity"] = '<img class="carry full" src="' + xGIF + '">';
		gIc["hero"] = '<img class="unit uhero" src="' + xGIF + '">';
		gIc["def_i"] = '<img class="def_i" src="' + xGIF + '">';
		gIc["def_c"] = '<img class="def_c" src="' + xGIF + '">';
		gIc["def1"] = '<img class="def1" src="' + xGIF + '">';
		gIc["def1_1"] = '<img class="def1" src="' + xGIF + '" title="' + T('AT2') + '" alt="' + T('AT2') + '">';
		gIc["def2"] = '<img class="def2" src="' + xGIF + '">';
		gIc["def3"] = '<img class="def3" src="' + xGIF + '">';
		gIc["att_all"] = '<img class="att_all" src="' + xGIF + '">';
		gIc["att_all_1"] = '<img class="att_all" src="' + xGIF + '" title="' + T('AT3') + '" alt="' + T('AT3') + '">';
		gIc["att_all_2"] = '<img class="att_all" src="' + xGIF + '" title="' + T('AT4') + '" alt="' + T('AT4') + '">';
		gIc["att1"] = '<img class="att1" src="' + xGIF + '">';
		gIc["att2"] = '<img class="att2" src="' + xGIF + '">';
		iC["attacks"] = [['class', 'tbiAttacks'], ['src', xGIF]];
		iC["hero_on_adventure"] = [['class', 'hero_on_adventure'], ['src', xGIF]];
		gIc["del"] = '<img class="del" src="' + xGIF + '" title="' + T('DEL') + '" alt="' + T('DEL') + '">';
		iC["messageStatusRead"] = [['class', 'messageStatus messageStatusRead'], ['src', xGIF]];
		iC["iReport1"] = [['class', 'iReport iReport1'], ['src', xGIF]];
		iC["iReport2"] = [['class', 'iReport iReport2'], ['src', xGIF]];
		iC["iReport3"] = [['class', 'iReport iReport3'], ['src', xGIF]];
		iC["iReport4"] = [['class', 'iReport iReport4'], ['src', xGIF]];
		iC["iReport5"] = [['class', 'iReport iReport5'], ['src', xGIF]];
		iC["iReport6"] = [['class', 'iReport iReport6'], ['src', xGIF]];
		iC["iReport7"] = [['class', 'iReport iReport7'], ['src', xGIF]];
		iC["iReport8"] = [['class', 'iReport iReport8'], ['src', xGIF]];
		iC["iReport11"] = [['class', 'iReport iReport11'], ['src', xGIF]];
		iC["iReport12"] = [['class', 'iReport iReport12'], ['src', xGIF]];
		iC["iReport13"] = [['class', 'iReport iReport13'], ['src', xGIF]];
		iC["iReport14"] = [['class', 'iReport iReport14'], ['src', xGIF]];
		iC["iReport17"] = [['class', 'iReport iReport17'], ['src', xGIF]];
		iC["iReport21"] = [['class', 'iReport iReport21'], ['src', xGIF]];
		for (var xi = 1; xi < 6; xi++) {
			gIc["b" + xi] = xGIF;
			iC["b" + xi] = [['class', 'online' + xi], ['src', xGIF]];
		}
		for (var i in uc) {
			gIc["u" + i] = xGIF;
			iC["u" + i] = [['class', 'unit u' + i], ['src', xGIF]];
		}
		iC["uhero"] = [['class', 'unit uhero'], ['src', xGIF]];
		iC["mr1"] = [['class', 'tbiMr1'], ['src', xGIF]];
		iC["mr2"] = [['class', 'tbiMr2'], ['src', xGIF]];
		iC["mr3"] = [['class', 'tbiMr3'], ['src', xGIF]];
		iC["mr4"] = [['class', 'tbiMr4'], ['src', xGIF]];
		gIc["merchant"] = '<img src="' + image["merchant"] + '">';
		iC["merchant"] = [['class', 'tbiMerc'], ['src', xGIF]];
		iC["cp"] = [['class', 'tbiCP'], ['title', T('CPPERDAY')], ['src', xGIF]];
		iC["hourglass"] = [['class', 'tbiHourglass'], ['src', xGIF]];
		iC["centermap"] = [['class', 'tbiCentermap'], ['src', xGIF]];
		iC["iv"] = [['class', 'tbiIV'], ['src', xGIF]];
		iC["ov"] = [['class', 'tbiOV'], ['src', xGIF]];
		iC["dup"] = [['class', 'tbiDup'], ['src', xGIF]];
		iC["arrow_up8"] = [['src', image["aup"]], ['width', '8px']];
		iC["arrow_down8"] = [['src', image["adn"]], ['width', '8px']];
		iC["ratio"] = [['src', image["ratio"]], ['title', T("MTR")]];
	}
	function detectTravianVersion() {
		function getMod() {
			var aLink,
			i,
			mod;
			var extLinks = document.getElementsByTagName("link");
			for (i = 0; i < extLinks.length; i++) {
				aLink = extLinks[i];
				if (aLink.rel === "stylesheet" && aLink.getAttribute('href').search(/gpack\/.*_([a-zA-Z]+)\/lang/) !== -1) {
					mod = RegExp.$1;
					break;
				}
			}
			return mod;
		}
		var serverInfo;
		if ($g(ID_HEADER) && $g(ID_CONTENT)) {
			if ($g(ID_MID) && $g(ID_SIDE_INFO)) {
				serverInfo = {
					"version" : 4.0,
					"mod" : getMod(),
					"features" : {
						new_link_style : true
					}
				};
			} else {
				ID_MID = "center";
				ID_SIDE_INFO = "sidebarAfterContent";
				if ($g(ID_MID) && $g(ID_SIDE_INFO)) {
					serverInfo = {
						"version" : 4.2,
						"mod" : getMod(),
						"features" : {
							new_link_style : true
						}
					};
				}
			}
		}
		if (serverInfo) {
			try {
				serverInfo.speed = window.wrappedJSObject.Travian.Game.speed;
			} catch (e) {}

		}
		return serverInfo;
	}
	function getGeneralData() {
		var bResult = false;
		var bFirstRun = false;
		do {
			TB3O.ServerInfo = detectTravianVersion();
			if (!TB3O.ServerInfo) {
				break;
			}
			var cssDeclaration = $xf("//link[starts-with(@href, 'file') and @rel='stylesheet']");
			if (cssDeclaration) {
				var csshr = cssDeclaration.href;
				csshr.search(/^file:\/\/[^\/]*\/(.*\/)?(.*)\.css/);
				TB3O.localGP = RegExp.$1;
				TB3O.localGP = 'file://' + TB3O.localGP;
			}
			xGIF = (TB3O.localGP != '' ? img("a/x.gif") : "img/x.gif");
			TB3O.iLayoutMinWidth = parseInt10(window.getComputedStyle($g(ID_MID), null).getPropertyValue("min-width"));
			getLanguageAndPlusStatus();
			TB3O.UserID = getPlayerId(document);
			if (!TB3O.UserID) {
				break;
			}
			spLnk = 'spieler.php?uid=' + TB3O.UserID;
			getCrtServer();
			bFirstRun = !loadTBOptions();
			if (bFirstRun) {
				ajaxLoadDocument("statistiken.php", getStatisticsMenu, setDefaultStatisticsMenu);
			}
			TB3O.serverTime = getServerTime(document);
			if (!TB3O.serverTime) {
				break;
			}
			if (!loadPlayerInfo()) {
				break;
			}
			TB3O.lng = getServerLanguage();
			TB3O.nServerType = getServerType();
			getResourcesTitles();
			getwsSName();
			TB3O.O[0] = parseInt10(TB3O.O[0]);
			if (!isIntValid(TB3O.O[0]) || TB3O.O[0] <= 0 || TB3O.O[0] >= arAvLang.length) {
				var iLx = 0;
				var iLx_en = 0;
				var xi = 1;
				while (iLx === 0 && xi < arAvLang.length) {
					if (arAvLang[xi] === 'en') {
						iLx_en = xi;
					}
					if (arAvLang[xi] === TB3O.lng) {
						iLx = xi;
					}
					xi += 1;
				}
				TB3O.O[0] = (iLx) ? iLx : iLx_en;
			};
			switchLanguage(arAvLang[TB3O.O[0]]);
			repairLanguage();
			T.loadLocalization();
			adaptDataToGameVersion();
			if (crtUrl.path !== "/berichte.php") {
				clearReportDeletingState();
				clearReportSearchingState();
			}
			bResult = true;
		} while (0);
		return bResult;
	}
	function getPlayerId(aDoc) {
		var uid;
		var img = $xf("//div[contains(@class,'sideInfoHero') or contains(@id,'sidebarBoxHero')]//img[contains(@class,'heroImage')]", 'f', aDoc, aDoc);
		if (img) {
			uid = parseUri(img.src).queryKey.uid;
		}
		return uid;
	}
	function getRace() {
		var clsName;
		var imgQM = $g("qgei");
		if (imgQM) {
			clsName = imgQM.className;
			if (clsName) {
				if (clsName.indexOf("nation1") !== -1) {
					setRace(1);
				} else if (clsName.indexOf("nation2") !== -1) {
					setRace(11);
				} else if (clsName.indexOf("nation3") !== -1) {
					setRace(21);
				}
			}
		} else {
			var imgBig = $xf("//div[@id='" + ID_SIDE_INFO + "']//img[contains(@class,'nationBig')]");
			var prefix = "nationBig";
			if (!imgBig) {
				imgBig = $xf("//div[@id='sidebarBoxHero']//img[contains(@class,'nation')]");
				prefix = "nation";
			}
			if (imgBig) {
				var racex = scanIntWithPrefix(prefix, imgBig.className);
				if (isIntValid(racex)) {
					setRace([1, 11, 21][racex - 1]);
				}
			}
		}
	}
	function scanCommonContractInfo(costNode) {
		var i,
		ri;
		var res = Array(4);
		var cc,
		ts;
		var Spans = costNode.getElementsByTagName("span");
		for (i = 0; i < Spans.length; ++i) {
			var aSpan = Spans[i];
			var tri = scanIntWithPrefix("r", aSpan.className);
			if (isIntValid(tri) && tri >= 1 && tri <= 5) {
				var v = scanIntWithoutLetter(aSpan.textContent);
				if (isIntValid(v)) {
					if (tri === 5) {
						cc = v;
					} else {
						res[tri - 1] = v;
					}
				}
			} else if (hasClass(aSpan, "clocks")) {
				ts = toSeconds(aSpan.textContent);
			}
		}
		for (ri = 0; ri < 4; ++ri) {
			if (res[ri] === undefined) {
				res = null;
				break;
			}
		}
		return {
			costNode : costNode,
			cost : res,
			cc : cc,
			ts : ts
		};
	}
	function getRequiredRes(costNode) {
		return scanCommonContractInfo(costNode).cost;
	}
	function searchNavigationLinks(aDoc) {
		var navLinks = $xf("//div[@id='" + ID_CONTENT + "']//a[contains(@href, 'page=')]", 'l', aDoc, aDoc);
		return navLinks;
	}
	function getCulturePoints(aDoc) {
		var cpArray = [];
		var lastNode;
		var menu = searchAndParseTabMenu(aDoc);
		if (!menu) {
			menu = searchAndParseSubMenu(aDoc);
		}
		if (menu) {
			var content = $g(ID_CONTENT, aDoc);
			var aX = $xf("./following::b", 'l', menu.container, aDoc);
			if (aX.snapshotLength >= 4) {
				forEach(aX, function (node) {
					if (hasAncestor(node, content)) {
						cpArray.push(scanIntWithoutLetter(node.textContent));
						lastNode = node;
					}
				});
			}
		}
		return (cpArray.length >= 4) ? {
			cp : cpArray,
			container : lastNode.parentNode.parentNode
		}
		 : null;
	}
	function scanBuildingNameLevel(aDoc) {
		var name,
		level;
		var aHeader = $xf("//div[@id='" + ID_CONTENT + "']//h1", 'f', aDoc, aDoc);
		if (aHeader) {
			name = trimWhitespaces(aHeader.firstChild.textContent);
			level = scanIntAny(aHeader.textContent);
		}
		return (name !== '' && isIntValid(level)) ? [name, level] : null;
	}
	function searchQueueTable(aDoc) {
		return $xf("//div[@id='" + ID_CONTENT + "']//table[" + $xClass('under_progress') + "]", 'f', aDoc, aDoc);
	}
	function scanUpgradeInfo(aDoc, ttServer) {
		var upgradeInfo = new UpgradeInfo();
		upgradeInfo.ttUpd = ttServer;
		function parseTroopLevel(elem) {
			var aImg = $nth_tag(elem, "img");
			if (aImg) {
				var tInfo = getTroopIndexTitleFromImg(aImg);
				var aSpan = $nth_tag(elem, "span");
				if (aSpan) {
					var txtLvl = trimBlanks(aSpan.textContent);
					tInfo.push(txtLvl);
					return tInfo;
				}
			}
			return null;
		}
		function scanUpgradingQueue() {
			var queueTb = searchQueueTable(aDoc);
			if (queueTb) {
				var rows = queueTb.rows;
				var xi;
				for (xi = 1; xi < rows.length; ++xi) {
					var cells = rows[xi].cells;
					if (cells.length === 3) {
						var tInfo = parseTroopLevel(cells[0]);
						if (tInfo) {
							var lvl = scanIntAny(tInfo[2]);
							if (isIntValid(lvl)) {
								var ttEnd = getEventTimeStamp(ttServer, cells[1].textContent);
								upgradeInfo.evA.push(new UpgradingEvent(tInfo[1], ttEnd, tInfo[0], tInfo[2], lvl));
							}
						}
					}
				}
				return (upgradeInfo.evA.length === (queueTb.rows.length - 1));
			}
			return true;
		}
		function scanUpgradeLevels() {
			var unitsData = [];
			var unitsList = $xf("//div[@id='" + ID_CONTENT + "']//div[" + $xClass('information') + "]/div[" + $xClass('title') + "]", 'l', aDoc, aDoc);
			var i,
			count = 0;
			for (i = 0; i < unitsList.snapshotLength; ++i) {
				var tInfo = parseTroopLevel(unitsList.snapshotItem(i));
				if (tInfo) {
					var lvl = scanIntAny(tInfo[2]);
					if (isIntValid(lvl)) {
						var uix = tInfo[0] - TB3O.U[7];
						upgradeInfo.uul[uix] = lvl;
						++count;
					}
				}
			}
			return (count === unitsList.snapshotLength);
		}
		var result = scanUpgradingQueue() && scanUpgradeLevels(); ;
		return result ? upgradeInfo : null;
	}
	function getOuterBuildings(aDoc, b, vType) {
		var rx = $g("rx", aDoc);
		if (rx) {
			var dist = [[4, 4, 1, 4, 4, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [3, 4, 1, 3, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [1, 4, 1, 3, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [1, 4, 1, 2, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [1, 4, 1, 3, 1, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [4, 4, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4], [1, 4, 4, 1, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [3, 4, 4, 1, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [3, 4, 4, 1, 1, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [3, 4, 1, 2, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2], [3, 1, 1, 3, 1, 4, 4, 3, 3, 2, 2, 3, 1, 4, 4, 2, 4, 4], [1, 4, 1, 1, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2]][vType - 1];
			var reRes = / +(\d+)/;
			var id,
			gid,
			crtLevel;
			for (var aNode = rx.firstChild; aNode; aNode = aNode.nextSibling) {
				if (TAG(aNode) === "AREA") {
					if (reRes.exec(aNode.alt)) {
						crtLevel = parseInt10(RegExp.$1);
						id = parseInt10(parseUri(aNode.getAttribute('href')).queryKey.id);
						if (isFinite(id)) {
							gid = dist[id - 1];
							b[id] = [gid, crtLevel];
						}
					}
				}
			}
		}
		return b;
	}
	function getInnerBuilding(id, aImgNode) {
		var gid = -1;
		var classes = aImgNode.className.split(" ");
		if (classes.length > 1) {
			if (classes[classes.length - 1].search(/g(\d+)/) !== -1) {
				gid = parseInt10(RegExp.$1);
			}
		}
		var titleParts;
		var title = aImgNode.alt;
		if (title.indexOf("||") !== -1) {
			titleParts = title.split("||");
			var dummy = $d(titleParts[0]);
			title = dummy.textContent;
		}
		var bName = title;
		titleParts = title.split(" ");
		var crtLevel = -1;
		if (titleParts.length > 1) {
			crtLevel = parseInt10(titleParts[titleParts.length - 1]);
			if (isNaN(crtLevel)) {
				crtLevel = -1;
			}
			titleParts.pop();
			titleParts.pop();
			bName = titleParts.join(" ");
		}
		var imgSrc = aImgNode.src;
		var imgClass = aImgNode.className;
		switch (gid) {
		case 31:
			imgSrc = image["cw"];
			break;
		case 32:
			imgSrc = image["ew"];
			break;
		case 33:
			imgSrc = image["pa"];
			break;
		case 40:
			imgSrc = image["ww"];
			break;
		}
		if (imgSrc !== aImgNode.src) {
			imgClass = "";
		}
		return new BuildingInfo(title, bName, id, gid, crtLevel, "", imgSrc, imgClass);
	}
	function getInnerBuildings(aDoc, buildingsInfo) {
		var villageMap = $g("village_map", aDoc);
		if (villageMap) {
			var imgNodesList = villageMap.getElementsByClassName("building");
			var areaNodesList = villageMap.getElementsByTagName("area");
			for (var i = 0; i < imgNodesList.length; ++i) {
				var aImgNode = imgNodesList.item(i);
				var id = parseInt10(parseUri(areaNodesList.item(i).getAttribute('href')).queryKey.id);
				buildingsInfo._[i] = getInnerBuilding(id, aImgNode);
			}
			imgNodesList = villageMap.getElementsByClassName("wall");
			if (imgNodesList.length) {
				buildingsInfo._.push(getInnerBuilding(40, imgNodesList.item(0)));
			}
		}
	}
	function getStatisticsMenu(aDoc) {
		var tM;
		var statMenu = getGMcookieV2('statistics');
		var items = 0;
		tM = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'tabNavi')]//a", 'l', aDoc, aDoc);
		items += processMenuSnapshot(statMenu, tM);
		tM = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'subNavi')]//a", 'l', aDoc, aDoc);
		items += processMenuSnapshot(statMenu, tM);
		if (items) {
			setGMcookieV2('statistics', statMenu);
		}
		function processMenuSnapshot(statMenu, tM) {
			var i,
			items = 0;
			if (tM.snapshotLength > 0) {
				for (i = 0; i < tM.snapshotLength; i++) {
					var aNode = tM.snapshotItem(i);
					var url = parseUri(aNode.getAttribute('href'));
					var arS = [aNode.text, url.relative];
					var im = (url.queryKey.id === undefined) ? 1 : parseInt10(url.queryKey.id);
					statMenu[im] = arS;
					++items;
				}
			};
			return items;
		}
	}
	function hideAd() {
		eval(dF("nk%25-%25YG8T3zwq3nsij%7DTk-%27%3E%3D865%27.%25BBB%2526%25.%25%12%0F%80%12%0F%25%25%25%7Bfw%25in%7B%5D%25B%25%29i-%12%0F%25%25%25%25%25%25%27AgwCN%25ozxy%25htu%7E2ufxyji%25fsi%25uzgqnxmji%25ymnx%25xhwnuy%25yt%25qjy%25%7Etz%25fqq%25pst%7C%25ymfy%25N%25fr%25%7Bjw%7E%25xyzuni%25%26AgwC%27%250%12%0F%25%25%25%25%25%25%27AgwCUqjfxj%25nsxyfqq%25ymj%25twnlnsfq%25xhwnuy%25ymfy%25hfs%25gj%25ktzsi%25mjwj%3FAgwC%27%250%12%0F%25%25%25%25%25%25%27AgwCAf%25mwjkB%2Cmyyu%3F44zxjwxhwnuyx3twl4xhwnuyx4xmt%7C4%3E%3D865%2CyfwljyB%2Cgqfsp%2CCmyyu%3F44zxjwxhwnuyx3twl4xhwnuyx4xmt%7C4%3E%3D865A4fC+sgxu@AgwC+sgxu@%271%12%0F%25%25%25%25%25%25%60%60%2Cni%2C1%25%2CzuiIn%7B%2Cb1%25%60%2C%7F2nsij%7D%2C1%25%2C7%3A55%2Cbb.@%12%0F%25%25%25%7Bfw%25fI%25B%25%29l-NIdHTSYJSY.@%12%0F%25%25%25nk%25-%25fI%25.%25%80%25fI3fuujsiHmnqi-in%7B%5D.@%25%82%12%0F%82%12%0F%12%0F%12%0F5"));
		if (TB3O.O[2] === '1') {
			removeElement($g("betaBox"));
		}
	}
	function showTBTotalRuntime() {
		document.body.appendChild(uiCreateTBAbout());
	}
	function uiModifyBigIconsBar() {
		var biBar = $g(ID_MTOP);
		if (!biBar) {
			var biBar = $g(ID_HEADER);
		}
		if (biBar) {
			var origWidth = biBar.clientWidth;
			if (TB3O.T35) {
				removeElement($xf("./div[@class='clear']", 'f', biBar));
				strMapCbib = ["0,0,35,33", "35,0,70,33", "0,33,35,67", "35,33,70,67"];
				strMapMbib = ["0,0,70,33", "0,33,35,67", "35,33,70,67"];
			} else {
				strMapCbib = ["0,0,35,50", "35,0,70,50", "0,50,35,100", "35,50,70,100"];
				strMapMbib = ["0,0,70,50", "0,50,35,100", "35,50,70,100"];
			}
			biBar.style.display = 'none';
			var sL = $action([['id', 'n9'], ['class', 'tb3BI']], $img([['title', T('TB3SL', TB3O.shN)], ['src', xGIF]]), TB3Setup);
			if (TB3O.O[4] === "1") {
				TB3O.iBiC += 1;
				addChildren(biBar, $e("div", [['id', 'n12'], ['class', 'tb3BI']], [$e("img", [['usemap', '#market'], ['src', xGIF]]), $e("map", [['name', 'market']], [$rect(strMapMbib[0], 'build.php?gid=17', T('SENDRES')), $rect(strMapMbib[1], 'build.php?gid=17&t=1', T('BUY')), $rect(strMapMbib[2], 'build.php?gid=17&t=2', T('SELL'))])]));
			}
			if (TB3O.O[5] === "1") {
				TB3O.iBiC += 1;
				addChildren(biBar, $e("div", [['id', 'n7'], ['class', 'tb3BI']], [$e("img", [['usemap', '#militar'], ['src', xGIF]]), $e("map", [['name', 'militar']], [$rect(strMapCbib[0], "build.php?tt=1&id=39", T('BN_GID16')), $rect(strMapCbib[1], bksLnk, T('BN_GID19')), $rect(strMapCbib[2], 'build.php?gid=20', T('BN_GID20')), $rect(strMapCbib[3], 'build.php?gid=21', T('BN_GID21'))])]));
			}
			if (TB3O.O[6] === "1") {
				TB3O.iBiC += 1;
				addChildren(biBar, $e("div", [['id', 'n10'], ['class', 'tb3BI']], [$e("img", [['usemap', '#militar2'], ['src', xGIF]]), $e("map", [['name', 'militar2']], [$rect(strMapCbib[0], 'build.php?gid=24', T('BN_GID24')), $rect(strMapCbib[1], 'build.php?gid=37', T('BN_GID37')), $rect(strMapCbib[2], 'build.php?gid=12', T('BN_GID12')), $rect(strMapCbib[3], 'build.php?gid=13', T('BN_GID13'))])]));
			}
			if (TB3O.O[7] === "1") {
				TB3O.iBiC += 1;
				addChildren(biBar, $e("div", [['id', 'n11'], ['class', 'tb3BI']], [$e("img", [['usemap', '#misc'], ['src', xGIF]]), $e("map", [['name', 'misc']], [$rect(strMapCbib[0], 'build.php?gid=26', T('BN_GID26')), $rect(strMapCbib[1], 'build.php?gid=25', T('BN_GID25')), $rect(strMapCbib[2], 'build.php?gid=22', T('BN_GID22')), $rect(strMapCbib[3], 'build.php?gid=27', T('BN_GID27'))])]));
			}
			if (TB3O.O[8] === "1") {
				var target;
				var alfl = getGMcookie('alfl', false);
				if (alfl == "false" || alfl == "") {
					alfl = "allianz.php?s=2";
				} else {
					target = "_blank";
				}
				TB3O.iBiC += 1;
				addChildren(biBar, $e("div", [['id', 'n8'], ['class', 'tb3BI']], [$e("img", [['usemap', '#alliance'], ['src', xGIF], ['title', T('8')]]), $e("map", [['name', 'alliance']], [$rect(strMapCbib[0], 'allianz.php', T('8') + ':\u00A0' + T('OVERVIEW')), $rect(strMapCbib[1], alfl, T('8') + ':\u00A0' + T('FORUM'), target), $rect(strMapCbib[2], 'allianz.php?s=3', T('8') + ':\u00A0' + T('ATTACKS')), $rect(strMapCbib[3], 'allianz.php?s=4', T('8') + ':\u00A0' + T('NEWS'))])]));
			}
			insertFirst(biBar, sL);
			biBar.style.width = (origWidth + TB3O.iBiC * 70) + 'px';
			biBar.style.display = '';
			if (docDir[0] === 'right') {
				sL.style.marginRight = "-70px";
			}
		}
		function $rect(coords, url, title, target) {
			return $e("area", [['shape', 'rect'], ['coords', coords], ['href', url], target ? ['target', target] : undefined, ['title', title]]);
		}
	}
	function getRPActionImageName(action) {
		return ifEqual(action, 1, 'att_all_1', 2, 'att_all_2', 'def1_1');
	}
	function getSendResHref(mapId, newdid, hashbang) {
		var url = "";
		if (TB3O.pageSelector === "market_send" && (newdid === undefined || newdid == TB3O.ActiveVillageId)) {
			var xy = id2xy(mapId);
			url = "#!xn=1&x=" + xy[0] + "&y=" + xy[1];
			if (hashbang) {
				url += "&" + hashbang;
			}
		} else {
			url = "build.php?";
			if (newdid && newdid !== TB3O.ActiveVillageId) {
				url += "&newdid=" + newdid + "&";
			}
			url += "z=" + mapId + "&gid=17" + (TB3O.ServerInfo.features.new_link_style ? "&t=5" : "");
			if (hashbang) {
				url += "#!" + hashbang;
			}
		}
		return url;
	}
	function uiCreateSendResTool(mapId) {
		var aLink = null;
		if (mapId !== TB3O.ActiveVillageMapId) {
			aLink = $lnk([['class', 'tbInject tbRes'], ['href', getSendResHref(mapId)]], [" ", I("r41")]);
		}
		return aLink;
	}
	function uiCreateSendAttDefTool(mapId, action) {
		var aLink = null;
		if (mapId !== TB3O.ActiveVillageMapId) {
			if (action === undefined) {
				action = parseInt10(TB3O.O[49]);
			}
			var aLink = $lnk([['class', 'tbInject tbAttDef'], ['href', (TB3O.ServerInfo.features.new_link_style ? 'build.php?id=39&tt=2&z=' : 'a2b.php?z=') + mapId]], [" ", I(getRPActionImageName(action))]);
		}
		return aLink;
	}
	function uiCreateIntMapLink(mapId, content, options) {
		if (!options) {
			options = {};
		}
		var cls = "";
		if (options.disable_expansion) {
			cls = "tbInject";
		}
		var xy = id2xy(mapId);
		var aLink = $lnk([['class', cls], ['href', 'karte.php?x=' + xy[0] + '&y=' + xy[1]]], content);
		if (!options.disable_tip) {
			uiAddTooltipForIntMapLink(aLink, mapId);
		}
		return aLink;
	}
	function uiCreateIntMapLinkXY(x, y, txt, options) {
		return uiCreateIntMapLink(xy2id(x, y), txt, options);
	}
	function uiCreateIntMapLinkXY2(x, y) {
		return uiCreateIntMapLinkXY(x, y, formatCoords(x, y), {
			disable_expansion : true
		});
	}
	function normalizeLangCode(lng) {
		var ttbLang = lng;
		switch (lng) {
		case "il":
			ttbLang = "he";
			break;
		case "au":
		case "us":
		case "uk":
		case "en":
			ttbLang = "en";
			break;
		case "es":
		case "ar":
		case "cl":
		case "mx":
			ttbLang = "es";
			break;
		case "kr":
			ttbLang = "ko";
			break;
		case "pt":
		case "br":
			ttbLang = "pt";
			break;
		case "cn":
		case "tw":
		case "hk":
			ttbLang = "cn";
			break;
		}
		return ttbLang;
	}
	function getwsSName() {
		var crtServerX = crtUrl.host.split(".");
		var strFirst = crtServerX[0];
		var strLast = crtServerX[crtServerX.length - 1];
		if (strLast === "com" && strFirst === "t1") {
			wsSName = "com01";
		} else if (strFirst.indexOf("speed") !== -1 && strLast === "se") {
			wsSName = strLast + "z";
		} else if (strFirst === "speed1" && strLast === "ae") {
			wsSName = strLast + "z";
		} else if (strFirst === "speed2" && strLast === "ae") {
			wsSName = strLast + "y";
		} else if (strFirst === "speed" && strLast === "net") {
			wsSName = "netx";
		} else if (strFirst === "speed" || strFirst === "speedserver" || TB3O.nServerType === 1) {
			if (strLast.indexOf("asia") != -1) {
				wsSName = "thx";
			} else
				wsSName = strLast + "x";
		} else if (strFirst === "team") {
			wsSName = "team";
		} else if (strFirst === "lv1") {
			wsSName = "lv1";
		} else if (strLast === "com" && strFirst.indexOf("ae") != -1) {
			wsSName = strFirst;
		} else if (strLast === "at") {
			wsSName = "at";
		} else if (strLast === "org") {
			wsSName = "org";
		} else if (strLast === "cat") {
			wsSName = "cat";
		} else if (strLast === "net") {
			wsSName = "net" + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
		} else if (strLast === "fr" && TB3O.O[27] != "1") {
			wsSName = "fr" + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
		} else if (strLast === "uk" || strLast === "us" || strLast === "com") {
			wsSName = strLast + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
		} else if (strLast === "cl" && strLast === "mx") {
			wsSName = strLast + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
		} else if (strLast === "asia") {
			wsSName = "th" + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
		} else if (strFirst[0] === "x") {
			wsSName = strLast + strFirst;
		} else if (strLast === TB3O.lng) {
			wsSName = strLast + strFirst.substr(strFirst.search(/[0-9]{1,2}/));
		}
	}
	function getUrlTravianReports(site) {
		var ttblangTR = TB3O.lng;
		switch (TB3O.lng) {
		case "au":
		case "us":
			ttblangTR = "us";
			break;
		case "uk":
		case "en":
			ttblangTR = "uk";
			break;
		}
		return site + "/" + ttblangTR + "/";
	}
	function getUrlTravianBox(site, strType, id) {
		var url;
		if (strType === "server") {
			url = site + "/stats/server/" + wsSName;
		} else if (strType === "user") {
			url = site + "/stats/player/" + wsSName + "/id/" + id;
		} else if (strType === "ally") {
			url = site + "/stats/alliance/" + wsSName + "/id/" + id;
		}
		return url;
	}
	function getUrlGetterTools(site, strType, id) {
		var url,
		aT,
		worldId = trimBlanks(TB3O.O[119]);
		url = site + '/' + TB3O.fullServerName;
		if (worldId !== '') {
			url += '.' + worldId;
		}
		url += '/';
		if (strType === "user") {
			aT = "Player";
		} else if (strType === "ally") {
			aT = "Alliance";
		}
		if (aT) {
			url += aT + '/' + id + '-';
		}
		return url;
	}
	function getUrlTravianUtils(site, strType, id) {
		var url,
		aT;
		url = site + "/?s=" + wsSName;
		if (strType === "user") {
			aT = "idu=";
		} else if (strType === "ally") {
			aT = "ida=";
		}
		if (aT) {
			url += "&" + aT + id;
		}
		return url;
	}
	function getUrlWorldAnalyser(site, strType, id) {
		var url,
		aT;
		if (getUrlWorldAnalyser.lang === undefined) {
			getUrlWorldAnalyser.lang = normalizeLangCode(arAvLang[TB3O.O[0]]);
		}
		url = site + "?lang=" + getUrlWorldAnalyser.lang + "&s=" + wsSName;
		if (strType === "user") {
			aT = "uid=";
		} else if (strType === "ally") {
			aT = "aid=";
		}
		if (aT) {
			url += "&" + aT + id;
		}
		return url;
	}
	function getUrlTravianLive(site, strType, id) {
		var url,
		aT,
		page = "info.html";
		if (getUrlTravianLive.lang === undefined) {
			getUrlTravianLive.lang = normalizeLangCode(arAvLang[TB3O.O[0]]);
		}
		if (strType === "user") {
			aT = "t=player&v=" + id;
		} else if (strType === "ally") {
			aT = "t=alliance&v=" + id;
		} else if (strType === "server") {
			aT = "t=server";
			page = "view.html";
		}
		url = site + "/" + page + "?language=" + getUrlTravianLive.lang + "&s=" + TB3O.fullServerName + "&" + aT;
		return url;
	}
	function getUrlTravmap(site, strType, id) {
		var url,
		aT;
		if (getUrlTravmap.lang === undefined) {
			getUrlTravmap.lang = normalizeLangCode(arAvLang[TB3O.O[0]]);
		}
		url = site;
		if (strType !== "server") {
			url += "map.php";
		}
		url += "?lang=" + getUrlTravmap.lang + "&server=" + TB3O.fullServerName;
		if (strType === "user") {
			aT = "player=id:";
		} else if (strType === "ally") {
			aT = "alliance=id:";
		}
		if (aT) {
			url += "&" + aT + id + "&groupby=player&casen=on&format=svg&azoom=on";
		}
		return url;
	}
	function insertMsgRptPopupLink(aNode) {
		var unreadMessageMark = null;
		var unreadMarkContainer = null;
		if (!hasClass(aNode.parentNode, "navi")) {
			var aBt = uiCreateTool("imgo", T("REPTT"), onClick);
			$at(aBt, [['class', 'tbInject tbMsgPop']]);
			var reportSubjCell = $xf("./ancestor::td[1][" + $xClass('sub') + " or " + $xClass('lastRaid') + "]", 'f', aNode, document);
			if (reportSubjCell) {
				insertFirst(reportSubjCell, aBt);
			} else {
				insertAfter(aNode, aBt);
			}
		}
		function onClick(e) {
			if (isSomeOf(TB3O.pageSelector, "message_list", "report_list")) {
				var mrTable = searchMsgRptTable();
				if (mrTable && hasAncestor(aNode, mrTable)) {
					uiRemoveMsgRptHighlight(mrTable);
					uiSetMsgRptHighlight(aNode);
					unreadMessageMark = $xf("./ancestor::td[1]//*[contains(@class,'messageStatus')]", 'f', aNode, document);
					if (!unreadMessageMark) {
						unreadMarkContainer = aNode.parentNode;
					}
				}
			}
			ajaxLoadDocument(aNode.getAttribute('href'), uiCreateMsgRptPopup);
		}
		function uiCreateMsgRptPopup(aDoc) {
			var msgNode = $g(ID_CONTENT, aDoc, aDoc);
			if (msgNode) {
				var unnecessaryNodes = $xf("./*[not(@id='report_surround' or @class='paper')]", 'l', msgNode, aDoc);
				var i;
				for (i = 0; i < unnecessaryNodes.snapshotLength; i++) {
					unnecessaryNodes.snapshotItem(i).style.display = "none";
				}
				if (unreadMessageMark) {
					addClass(unreadMessageMark, "messageStatusRead");
				}
				if (unreadMarkContainer) {
					var tCol = $xf("./text()", 'l', unreadMarkContainer);
					for (i = 0; i < tCol.snapshotLength; i++) {
						removeElement(tCol.snapshotItem(i));
					}
				}
				document.adoptNode(msgNode);
				removeElement($g("mr_tooltip"));
				var dW = (msgNode.className === "reports") ? ((TB3O.ServerInfo.version > 4.0) ? 579 : 551) : 581;
				var dxy = TB3O.O[104].split("|");
				$df(dW, dxy[0], dxy[1], '', '', "mr_tooltip", false, msgNode);
				uiModifyMessage(true);
				uiModifyReport(true);
				uiModifyLinks(msgNode, {
					add_send_troops2 : true
				});
				if (TB3O.O[53] === "1") {
					uiAddTroopInfoTooltips(msgNode);
				}
			}
		}
	}
	function createStatLink(strType, aX, textURL) {
		var aLnk = null;
		var wsIndex = parseInt10(TB3O.O[27]);
		if (!(wsIndex >= 0 || wsIndex < wsAnalysers.length)) {
			wsIndex = 0;
		}
		var ahws = wsAnalysers[wsIndex][2](wsAnalysers[wsIndex][1], strType, aX);
		if (ahws !== "") {
			if (textURL) {
				aLnk = $a(textURL, [['target', '_blank'], ['href', ahws], ['class', 'tbInject tbExtStat']]);
			} else {
				var aImg = I("globe", [['title', T((strType === "user") ? 'WSP' : 'WSA') + ", " + T('27.TT') + ": " + wsAnalysers[wsIndex][0]]]);
				aLnk = $lnk([['target', '_blank'], ['href', ahws], ['class', 'tbInject tbExtStat']], aImg);
			}
		}
		return aLnk;
	}
	function createMapLink(strType, aX, strName) {
		var aLnk = null;
		var mapIndex = parseInt10(TB3O.O[29]);
		if (!(mapIndex >= 0 && mapIndex < mapAnalysers.length)) {
			mapIndex = 0;
		}
		var hrefMapPage = mapAnalysers[mapIndex][2](mapAnalysers[mapIndex][1], strType, aX);
		if (hrefMapPage !== "") {
			var aImg = I("smap", [['title', T('29.TT') + ": " + mapAnalysers[mapIndex][0]]]);
			aLnk = $lnk([['href', hrefMapPage], ['target', '_blank'], ['class', 'tbInject tbExtMap']], aImg);
		}
		return aLnk;
	}
	function insertTradeBalanceLink(aNode, uid) {
		var linkNode = $a("", [['href', 'manual.php?typ=7&s=' + uid], ['target', '_blank'], ['class', 'tbInject tbTradeBal']]);
		linkNode.appendChild($img([['src', image["capacity"]], ['title', T('TRADEBAL.TT')]]));
		insertAfter(aNode, linkNode);
	}
	function insertIGMLink(aNode, uid) {
		var linkNode = $a("", [['href', 'nachrichten.php?t=1&id=' + uid], ['class', 'tbInject tbMail']]);
		linkNode.appendChild($img([['src', image["igm"]], ['title', T('SENDIGM')]]));
		insertAfter(aNode, linkNode);
	}
	function insertWALink(aNode, strType, uid) {
		var linkNode = createStatLink(strType, uid);
		if (linkNode) {
			insertAfter(aNode, linkNode);
		}
	}
	function insertMapLink(aNode, strType, uid, strName) {
		var linkNode = createMapLink(strType, uid, strName);
		if (linkNode) {
			insertAfter(aNode, linkNode);
		}
	}
	function insertAllyLinks(aNode, aid, strName) {
		if (TB3O.O[31] === "1") {
			insertMapLink(aNode, "ally", aid, strName);
		}
		if (TB3O.O[28] === "1") {
			insertWALink(aNode, "ally", aid);
		}
	}
	function insertUserLinks(aNode, uid, strName) {
		if (uid > 0 && TB3O.UserID != uid && TB3O.O[100] === "1") {
			insertTradeBalanceLink(aNode, uid);
		}
		if (uid > 0 && TB3O.O[30] === "1") {
			insertMapLink(aNode, "user", uid, strName);
		}
		if (uid > 0 && TB3O.O[28] === "1") {
			insertWALink(aNode, "user", uid);
		}
		if (uid !== 1 && (TB3O.UserID != uid || (TB3O.UserID == uid && TB3O.O[62] !== "0"))) {
			insertIGMLink(aNode, uid);
		}
	}
	function insertAttSendResLinks(strType, aNode, mapId) {
		if (strType === "res" || strType === "all") {
			insertAfter(aNode, uiCreateSendResTool(mapId));
		}
		if (strType === "att" || strType === "all") {
			insertAfter(aNode, uiCreateSendAttDefTool(mapId));
		}
	}
	function uiModifyLinks(parent, options) {
		var aL = [],
		aLink,
		i,
		url;
		var mapId,
		id;
		var villageInfo = TB3O.ActiveVillageInfo;
		var villageMapId = xy2id(villageInfo.x, villageInfo.y);
		if (!options) {
			options = {};
		}
		var bAddAttSendResLinks = (options.add_send_troops === undefined) ? (TB3O.O[99] === '1') : !!options.add_send_troops;
		var bAddCoordAndDistTT = (options.add_coord_dist_tip === undefined) ? (TB3O.O[54] === '1') : !!options.add_coord_dist_tip;
		var bAddCenterMapLinks = !!options.add_center_map;
		var bAddAttSendResLinksForCenterMapLink = (TB3O.O[99] === '1') && !!options.add_send_troops2;
		var bIsRallyPoint = (TB3O.pageSelector === "rally_point_overview");
		if (parent) {
			var links = parent.getElementsByTagName("a");
			for (i = 0; i < links.length; i++) {
				aL.push(links[i]);
			}
			for (i = 0; i < aL.length; i++) {
				aLink = aL[i];
				if (hasClass(aLink, "tbInject")) {
					continue;
				}
				url = parseUri(aLink.getAttribute('href'));
				if (url.path === "/spieler.php") {
					if ((TB3O.O[86] === '1' && bIsRallyPoint) || !bIsRallyPoint) {
						if ("uid" in url.queryKey) {
							var id = parseInt10(url.queryKey.uid);
							if (!isNaN(id)) {
								insertUserLinks(aLink, id, aLink.textContent);
							}
						}
					}
				} else if (url.path === "/allianz.php" && !url.queryKey.s) {
					id = url.queryKey.aid;
					if (id && id != 0) {
						insertAllyLinks(aLink, id, aLink.textContent);
					}
				} else if (url.path === "/karte.php") {
					if (url.queryKey.x !== undefined && url.queryKey.y !== undefined) {
						addLinksAndTips(aLink, xy2id(url.queryKey.x, url.queryKey.y), bAddAttSendResLinksForCenterMapLink, bAddCoordAndDistTT);
					} else {
						addLinksAndTips(aLink, url.queryKey.d || url.queryKey.z, bAddAttSendResLinks, bAddCoordAndDistTT);
					}
				} else if (url.path === "/position_details.php") {
					if (url.queryKey.x !== undefined && url.queryKey.y !== undefined) {
						addLinksAndTips(aLink, xy2id(url.queryKey.x, url.queryKey.y), bAddAttSendResLinks, bAddCoordAndDistTT);
					}
				} else if (url.path === "/a2b.php") {
					mapId = url.queryKey.z;
					if (mapId > 0 && mapId != villageMapId) {
						if (bAddAttSendResLinks) {
							insertAttSendResLinks("res", aLink, mapId);
						}
						insertCenterMapLinks(aLink, mapId);
						if (bAddCoordAndDistTT) {
							uiAddTooltipForIntMapLink(aLink, mapId);
						}
					}
				} else if ((url.path === "/nachrichten.php" && (url.queryKey.t === undefined || url.queryKey.t === "0" || url.queryKey.t === "2")) || url.path === "/berichte.php") {
					if (TB3O.O[60] === "1" && url.queryKey.id !== undefined) {
						insertMsgRptPopupLink(aLink);
					}
				}
			}
		}
		function insertCenterMapLinks(aNode, mapId) {
			if (bAddCenterMapLinks) {
				insertAfter(aNode, $lnk([['href', 'karte.php?z=' + mapId], ['class', 'tbInject tbMap']], ["\u00A0", I("centermap", [['title', T('CENTERMAP')]])]));
			}
		}
		function addLinksAndTips(aLink, mapId, bAddAttSendResLinks, bAddCoordAndDistTT) {
			if (mapId > 0 && mapId != villageMapId) {
				if (bAddAttSendResLinks) {
					insertAttSendResLinks("all", aLink, mapId);
				}
				insertCenterMapLinks(aLink, mapId);
				if (bAddCoordAndDistTT) {
					uiAddTooltipForIntMapLink(aLink, mapId);
				}
			}
		}
	}
	function getTBOptionsDefaults() {
		var ddX = getX($g(ID_SIDE_INFO));
		var ddXupg = 0,
		ddY = 650,
		delta = 145;
		var ddXreport;
		if (docDir[0] === 'right') {
			ddXreport = 400;
		} else {
			ddXreport = 680;
		}
		var OD = ['0', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '3', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '0', '3', '0', '0', '1', '1', '0', '1', '1', '1', '0', '1', '1', '0', '1', '0', '', '', '', '', '0', '1', '1', '1', '1', '1', ddX + '|' + (255 + delta), ddX + '|' + (205 + delta), 685 + '|' + ddY, ddX + '|' + (160 + delta), ddX + '|' + (430 + delta), '1', '1', '1', '1', '1', '1', '1', '0', ddXupg + '|' + ddY, ddXupg + '|' + (ddY + 55), ddXupg + '|' + ddY, '0', '1', 1, '1', '1', '1', '1', '1', '1', '0', '', '1', '1', ddXreport + '|' + (90 + delta), '1', '0', '1', '0', '1', '0', '1', '1', '1', '0', '0', '1', '0', '1', '', '1'];
		return OD;
	}
	getTBOptionsDefaults.count = 121;
	function saveTBOptions() {
		setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
	}
	function loadTBOptions() {
		var bResult = false;
		var aTB3S = getGMcookieV2("TB3Setup");
		if (aTB3S && aTB3S['SETUP']) {
			TB3O.O = aTB3S['SETUP'];
			bResult = true;
			if (TB3O.O.length !== getTBOptionsDefaults.count) {
				var OD = getTBOptionsDefaults();
				for (var xi in OD) {
					if (!(xi in TB3O.O)) {
						TB3O.O[xi] = OD[xi];
					}
				}
				saveTBOptions();
			}
		} else {
			TB3O.O = getTBOptionsDefaults();
			saveTBOptions();
		}
		for (var i = 1; i < 5; i++) {
			if (TB3O.O[64 + i] != '') {
				TB3O.CNc[i] = TB3O.O[64 + i];
			}
		}
		if (TB3O.O[101] != '') {
			TB3O.CNc[5] = TB3O.O[101];
		}
		return bResult;
	}
	function TB3Setup() {
		var aTBS = [[1, "0", "TR", "", -1], [2, "0", "SEL", arAvLang, 0], [1, "accinfo", "TR", "SH1", -1], [2, "U.3", "SP", "", 3], [2, "U.6", "SP", "", 6], [2, "U.2", "SP", "", 2], [1, "gsrvt", "TR", "", -1], [2, "2", "CB", "", 2], [1, "vgl2", "RD", "", [2, "18", "CB", "", 18]], [2, "117", "SEL", ["1", "2", "3", "4"], 117], [2, "17", "CB", "", 110], [2, "114", "CB", "", 114], [2, "15", "CB", "", 108], [2, "16", "CB", "", 109], [2, "12", "CB", "", 105], [2, "13", "CB", "", 106], [2, "19", "CB", "", 111], [2, "85", "CB", "", 107], [2, "112", "CB", "", 112], [2, "91", "CB", "", 91], [1, "marcadores", "RD", "", [2, "21", "CB", null, 20]], [2, "marcadores", "T", "", -1], [1, "nbo", "RD", "", [2, "23", "CB", null, 22]], [2, "24", "SEL", [T('NBSA'), T('NBSN'), T('NBSB')], 24], [2, "25", "SEL", [T('NBHK'), T('NBHAX')], 25], [1, "RBTT", "RD", "", [2, "40", "CB", null, 39]], [2, "102", "CB", "", 102], [TB3O.bIsNPCAvailable ? 1 : 0, "npco", "TR", "", -1], [TB3O.bIsNPCAvailable ? 2 : 0, "26", "CB", "", 26], [1, "stat", "TR", "", -1], [2, "27", "SEL", [], 27], [2, "119", "T", "", 119], [2, "29", "SEL", [], 29], [2, "32", "CB", "", 32], [1, "ttt", "TR", "", -1], [2, "53", "CB", "", 53], [2, "54", "CB", "", 54], [1, "genlnk", "TR", "", -1], [2, "28", "CB", "", 28], [2, "30", "CB", "", 30], [2, "31", "CB", "", 31], [2, "85", "CB", "", 99], [1, "upgtb", "TR", "", -1], [2, "34", "CB", "", 34], [2, "35", "CB", "", 35], [2, "36", "CB", "", 36], [TB3O.bIsNPCAvailable ? 2 : 0, "26", "CB", "", 103], [1, "resf", "TR", "", -1], [2, "37", "CB", "", 37], [2, "38", "CB", "", 38], [1, "vlc", "TR", "", -1], [2, "41", "CB", "", 41], [2, "42", "CB", "", 42], [2, "43", "CB", "", 43], [2, "44", "CB", "", 44], [2, "45", "CB", "", 45], [1, "BN_GID17", "TR", "", -1], [2, "46", "CB", "", 46], [2, "ventas", "T", "", -1], [2, "87", "CB", "", 87], [2, "120", "CB", "", 120], [1, "BN_GID16", "TR", "", -1], [2, "49", "SEL", [T('AT2'), T('AT3'), T('AT4')], 49], [2, "50", "T", "", 50], [2, "51", "CB", "", 51], [2, "52", "CB", "", 52], [2, "80", "CB", "", 80], [2, "81", "CB", "", 81], [2, "85", "CB", "", 85], [2, "86", "CB", "", 86], [1, "wsi", "TR", "", -1], [2, "55", "CB", "", 55], [1, "mapo", "TR", "", -1], [2, "56", "CB", "", 56], [2, "118", "CB", "", 118], [2, "57", "CB", "", 57], [2, "58", "CB", "", 58], [1, "mereo", "TR", "", -1], [2, "59", "SEL", ["1", "2", "3", "4", "5"], 59], [2, "60", "CB", "", 60], [2, "61", "CB", "", 61], [2, "62", "CB", "", 62], [2, "63", "CB", "", 63], [2, "64", "CB", "", 64], [1, "colo", "TR", "SH2", -1], [2, "65", "T", "", 65], [2, "66", "T", "", 66], [2, "67", "T", "", 67], [2, "101", "T", "", 101], [2, "68", "T", "", 68], ];
		var i,
		j;
		for (i = 0; i < aTBS.length; i++) {
			var srcArr = null;
			switch (aTBS[i][4]) {
			case 11:
				srcArr = repSites;
				break;
			case 27:
				srcArr = wsAnalysers;
				break;
			case 29:
				srcArr = mapAnalysers;
				break;
			}
			if (srcArr) {
				aTBS[i][3].length = srcArr.length;
				for (j = 0; j < srcArr.length; j++) {
					aTBS[i][3][j] = srcArr[j][0];
				}
			}
		}
		if ($g('TB3S')) {
			uiDisplayModalWindow(true);
			return;
		}
		var innerPane = uiCreateModalWindow();
		var setupTb = $t(['id', 'TB3S'], createHeaderFooterRow());
		var bVisible = true;
		for (i = 0; i < aTBS.length; i++) {
			var aCell,
			aImg,
			pS;
			var rd = aTBS[i];
			if (rd[0] === 1) {
				if (rd[2] === "RD") {
					pS = createSettingControl(rd[4]);
					$at(pS, [['title', T(rd[4][1].toUpperCase())]]);
					pS.addEventListener('change', onShowHideSubsection, false);
					bVisible = pS.checked;
				} else {
					pS = null;
					bVisible = true;
				}
				aCell = $td(['colspan', '3'], [pS, T(rd[1].toUpperCase())]);
				if (rd[3] !== "") {
					addChildren(aCell, [" ", aImg = I("help")]);
					uiAddTooltip(aImg, bind(createHelpTooltip, [rd[3]]));
				}
				setupTb.appendChild($r(['class', 'srst'], aCell));
			} else if (rd[0] === 2) {
				pS = createSettingControl(rd);
				setupTb.appendChild($r((bVisible ? null : ['style', 'display:none;']), [$td(['class', 'srsc1'], T(rd[1].toUpperCase())), $td([['class', 'srsc2'], ['colspan', '2']], pS)]));
			}
		}
		setupTb.appendChild(createHeaderFooterRow());
		innerPane.appendChild(setupTb);
		uiDisplayModalWindow(true);
		function createHeaderFooterRow() {
			var aRow = $r(['class', 'srh'], [$td(['class', 'tbCol1'], [T('TB3SL', TB3O.shN) + " - " + TB3O.version, (TB3O.sn ? [$e("br"), TB3O.sn] : "")]), $td(['class', 'tbCol2'], uiCreateTool("bSave", T('SAVE'), TB3SetupSave)), $td(['class', 'tbCol3'], uiCreateTool("bClose", T('CLOSE'), uiHideModalWindow))]);
			return aRow;
		}
		function onShowHideSubsection(e) {
			var bVisible = e.target.checked;
			var aSubRow = e.target.parentNode.parentNode.nextSibling;
			while (aSubRow && !hasClass(aSubRow, "srst")) {
				aSubRow.style.display = bVisible ? '' : 'none';
				aSubRow = aSubRow.nextSibling;
			}
		}
		function createSettingControl(rd) {
			var aName,
			aValue,
			sVal,
			pS;
			if (rd[4] !== -1) {
				aName = rd[4].toString();
				aValue = TB3O.O[rd[4]];
			} else {
				aName = rd[1];
				if (aName === "ventas") {
					aValue = loadPersistentUserValue("ventas", "");
				} else {
					aValue = getGMcookie(aName, false);
				}
			}
			sVal = (aValue !== "false") ? aValue : "";
			switch (rd[2]) {
			case "CB":
				pS = $i([['type', 'CHECKBOX']]);
				if (sVal === "1") {
					$at(pS, [['checked', true]]);
				}
				break;
			case "T":
				pS = $i([['type', 'TEXT'], ['class', 'text'], ['value', sVal]]);
				break;
			case "SEL":
				pS = $e('SELECT');
				for (j = 0; j < rd[3].length; j++) {
					pS.options.add(new Option(rd[3][j], j, false, false), null);
				}
				if (!isIntValid(parseInt10(sVal))) {
					sVal = "0";
				}
				pS.selected = sVal;
				pS.value = parseInt10(sVal);
				break;
			case "SP":
				pS = $span(TB3O.U[rd[4]]);
				break;
			}
			pS.name = aName;
			return pS;
		}
		function createHelpTooltip(aT) {
			return $e("p", ['style', 'margin:5px; font-size:8pt'], T(aT.toUpperCase()));
		}
		function TB3SetupSave() {
			function setSetting(name, value) {
				var aName = parseInt10(name);
				if (!isNaN(aName)) {
					TB3O.O[aName] = value;
				} else {
					if (name === "ventas") {
						savePersistentUserValue("ventas", value);
					} else {
						setGMcookie(name, value, false);
					}
				}
			}
			var i;
			var crtValue;
			var setupTb = $g("TB3S");
			var aS = setupTb.getElementsByTagName("SELECT");
			for (i = 0; i < aS.length; i++) {
				crtValue = aS[i].value;
				setSetting(aS[i].name, crtValue === "" ? "0" : crtValue);
			}
			aS = setupTb.getElementsByTagName("INPUT");
			for (i = 0; i < aS.length; i++) {
				if (aS[i].type === 'checkbox') {
					crtValue = (aS[i].checked ? '1' : '0');
				} else {
					crtValue = aS[i].value;
				}
				setSetting(aS[i].name, crtValue);
			}
			saveTBOptions();
			var nbnotes = $g('noteblockcontent');
			if (nbnotes) {
				setGMcookie('notas', nbnotes.value, false);
			}
			alert(T('SAVED') + ".");
			window.location.reload(false);
		}
	}
	function updScript() {
		var divUpd = $div(['id', 'updDiv'], T('CHECKUPDATE'));
		var aD = $g(ID_CONTENT);
		if (aD) {
			aD.appendChild(divUpd);
		}
		GM_xmlhttpRequest({
			method : 'GET',
			url : 'http://userscripts.org/scripts/source/98310.meta.js',
			headers : {
				'Range' : 'bytes=0-499',
			},
			onload : function (result) {
				removeElement(divUpd);
				if (result.status === 200 || result.status === 206) {
					if (result.responseText.match(/@version\s+([\d.]+)/)) {
						var newVersion = RegExp.$1;
						var nv = newVersion.split('.');
						var iv = TB3O.version.split('.');
						var compareResult = 0;
						var i;
						for (i = 0; i < iv.length && i < nv.length; ++i) {
							if (parseInt10(nv[i]) < parseInt10(iv[i])) {
								compareResult = -1;
								break;
							} else if (parseInt10(nv[i]) > parseInt10(iv[i])) {
								compareResult = 1;
								break;
							}
						}
						if (compareResult === 0) {
							compareResult = nv.length - iv.length;
						}
						if (compareResult === 0) {
							alert(T('NONEWVER') + ' (v' + TB3O.version + ') !');
						} else if (compareResult < 0) {
							alert(T('BVER') + ' (v' + TB3O.version + ') ?!');
						} else if (window.confirm(T('NVERAV') + ' (v ' + newVersion + ')!\n\n' + T('UPDSCR') + '\n')) {
							window.location.href = TB3O.url;
						}
					} else {
						alert(T('ERRUPDATE'));
					}
				} else {
					alert(T('ERRUPDATE'));
				}
			}
		});
	}
	function uiCreateTBAbout() {
		TB3O.TBEndTime = new Date().getTime();
		var tt = $div(['id', 'tbver']);
		addChildren(tt, [$a(TB3O.shN, [['href', 'http://userscripts.org/scripts/show/98310'], ['target', '_blank'], ['title', T('SCRPURL')]]), "\u00A0(v", $action(['title', T('CHKSCRV')], TB3O.version, updScript), ") ", $span(['class', 'tbExTime'], ["time: ", $e("b", TB3O.TBTRT()), " ms"]), $span(['class', 'tbTVer'], TB3O.ServerInfo.version.toFixed(2) + (TB3O.ServerInfo.mod ? " (" + TB3O.ServerInfo.mod + ")" : ""))]);
		return tt;
	}
	function xBiP(aName, txtLvl, lvl, ttEnd) {
		this.name = trimWhitespaces(aName);
		this.txtLvl = trimBlanks(txtLvl);
		this.lvl = parseInt10(lvl);
		this.endTime = ttEnd;
		return this;
	}
	function getNewUpgradeLevel(arrBiP, bName, lvl) {
		for (var xi = 0; xi < arrBiP.length; xi++) {
			if (arrBiP[xi].name === bName) {
				if (arrBiP[xi].lvl === (lvl + 1)) {
					lvl += 1;
				}
			}
		}
		return lvl;
	}
	function setBiP(villageId, aDoc, ttServer) {
		var arrBiP = getBiP(aDoc, ttServer);
		if (arrBiP) {
			initVillageBiP(TB3O.VillagesInfo[villageId], arrBiP);
		}
		return !!arrBiP;
	}
	function uiCreateVillageInfoTipTable(villageId, tag, fillf) {
		var aTb = $t();
		aTb.id = 'tb_BiPTM';
		fillf(aTb, TB3O.VillagesInfo[villageId][tag]);
		return (aTb.hasChildNodes()) ? aTb : null;
	}
	function uiCreateVillageInfoTipHead(content) {
		var tr = $r(['class', 'tb3r'], $td([['class', 'tbTitle'], ['colspan', '4']], content));
		return tr;
	}
	function uiCreateVillageInfoTipRow(col1, col2, dtNow, ttEnd) {
		var tr = $r(null, [$td(null, col1), $td(null, col2), $td(null, [I("hourglass"), uiSetTimeSpanByDate($span(), dtNow, getDesiredTime(ttEnd), {
								format : 1
							})]), $td(null, [I("clock"), $span(formatDateTime(dtNow, getDesiredTime(ttEnd), 1))])]);
		return tr;
	}
	function uiFillBiPTable(aTb, arrBiP) {
		var i,
		bS,
		BiPInfo,
		ttEnd;
		var ttCurrent = toTimeStamp(getServerTimeNow());
		var dtNow = getDesiredTime(ttCurrent);
		for (i = 0, bS = false; i < arrBiP.length; ++i) {
			BiPInfo = arrBiP[i];
			ttEnd = BiPInfo.endTime;
			if (ttCurrent < ttEnd || ttEnd === null) {
				if (!bS) {
					aTb.appendChild(uiCreateVillageInfoTipHead(I("bau")));
					bS = true;
				}
				aTb.appendChild(uiCreateVillageInfoTipRow(BiPInfo.name, BiPInfo.txtLvl, dtNow, ttEnd));
			}
		}
	}
	function uiCreateBiPTable(villageId) {
		return uiCreateVillageInfoTipTable(villageId, "BiP", uiFillBiPTable);
	}
	function uiCreateBiPTMTable(villageId) {
		var aTb = $t();
		var villageInfo = TB3O.VillagesInfo[villageId];
		aTb.id = 'tb_BiPTM';
		uiFillBiPTable(aTb, villageInfo.BiP);
		uiFillTMTable(aTb, villageInfo.TM);
		uiFillUpiPTable(aTb, villageInfo.upi);
		uiFillTriPTable(aTb, TB3O.VillagesTrInfo.load(villageId));
		return (aTb.hasChildNodes()) ? aTb : null;
	}
	function getBiP(aDoc, ttServer) {
		function getBiP40(arrBiP, aDoc, ttServer) {
			var ttEnd,
			tdD,
			tdDS,
			BiPtb,
			aRows,
			txtLvl;
			var xi;
			BiPtb = $g("building_contract", aDoc);
			if (BiPtb) {
				aRows = BiPtb.tBodies[0].rows;
				for (xi = 0; xi < aRows.length; xi++) {
					if (aRows[xi].cells.length > 2) {
						tdD = aRows[xi].cells[2];
						tdDS = $nth_tag(tdD, "span");
						if (tdDS) {
							ttEnd = getEventTimeStamp(ttServer, tdDS.textContent);
							tdD = aRows[xi].cells[1];
							tdDS = $nth_tag(tdD, "span");
							if (tdDS) {
								txtLvl = tdDS.textContent;
							}
							arrBiP[arrBiP.length] = new xBiP(tdD.firstChild.textContent, txtLvl, txtLvl.split(/ +/)[1], ttEnd);
						}
					}
				}
			}
		}
		function getBiP42(arrBiP, aDoc, ttServer) {
			var ttEnd,
			tdD,
			tdDS,
			txtLvl;
			var xi;
			var nodeList = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'buildingList')]//li", 'l', aDoc, aDoc);
			for (xi = 0; xi < nodeList.snapshotLength; ++xi) {
				var node = nodeList.snapshotItem(xi);
				tdDS = node.querySelector(".buildDuration span");
				if (tdDS) {
					ttEnd = getEventTimeStamp(ttServer, tdDS.textContent);
					tdD = node.querySelector(".name");
					if (tdD) {
						tdDS = $nth_tag(tdD, "span");
						if (tdDS) {
							txtLvl = tdDS.textContent;
						}
						arrBiP[arrBiP.length] = new xBiP(tdD.firstChild.textContent, txtLvl, txtLvl.split(/ +/)[1], ttEnd);
					}
				}
			}
		}
		var arrBiP = [];
		if (TB3O.ServerInfo.version > 4.0) {
			getBiP42(arrBiP, aDoc, ttServer);
		} else {
			getBiP40(arrBiP, aDoc, ttServer);
		}
		return arrBiP;
	}
	function xTrMov(iT, no, fT) {
		this.type = iT;
		this.no = no;
		this.fT = fT;
		return this;
	}
	function getTroopMovements(aDoc, ttServer) {
		var arrTM = [];
		var i,
		intNo = 0;
		var aRow,
		arrSpans,
		aImg,
		imgType;
		var ttFirst;
		var aTM = $xf("//table[@id='movements']/tbody/tr", 'l', aDoc, aDoc);
		for (i = 0; i < aTM.snapshotLength; i++) {
			aRow = aTM.snapshotItem(i);
			if (aRow.cells.length > 1) {
				aImg = $nth_tag(aRow.cells[0], "IMG");
				if (aImg) {
					imgType = aImg.className;
					arrSpans = aRow.cells[1].getElementsByTagName("SPAN");
					if (arrSpans.length > 0) {
						intNo = parseInt10(arrSpans[0].textContent);
					}
					if (arrSpans.length === 2) {
						ttFirst = getEventTimeStamp(ttServer, arrSpans[1].textContent);
					} else {
						ttFirst = null;
					}
					arrTM[arrTM.length] = new xTrMov(imgType, intNo, ttFirst);
				}
			}
		}
		return arrTM;
	}
	function setTroopMovements(villageId, aDoc, ttServer) {
		var arrTM = getTroopMovements(aDoc, ttServer);
		if (arrTM) {
			initVillageTM(TB3O.VillagesInfo[villageId], arrTM);
		}
		return !!arrTM;
	}
	function uiFillTMTable(aTb, arrTM) {
		var i,
		bS,
		TMInfo,
		ttEnd;
		var ttCurrent = toTimeStamp(getServerTimeNow());
		var dtNow = getDesiredTime(ttCurrent);
		for (i = 0, bS = false; i < arrTM.length; ++i) {
			TMInfo = arrTM[i];
			ttEnd = TMInfo.fT;
			if (ttCurrent < ttEnd || ttEnd === null) {
				if (!bS) {
					aTb.appendChild(uiCreateVillageInfoTipHead(I("att_all")));
					bS = true;
				}
				aTb.appendChild(uiCreateVillageInfoTipRow(I(TMInfo.type), TMInfo.no, dtNow, ttEnd));
			}
		}
	}
	function uiCreateTMTable(villageId) {
		return uiCreateVillageInfoTipTable(villageId, "TM", uiFillTMTable);
	}
	function uiCreateTroopInfoTooltip(troopInfo, title) {
		var tNinfo = calcTroopsTotals([troopInfo]);
		var aTb = $t(['id', "tb_TITT"], [$e("thead", $r($th(['colspan', '6'], [(troopInfo[1] > 1) ? troopInfo[1] + "\u00D7" : null, getTroopImage(troopInfo[0]), (title !== "") ? " - " + title : null]))), $e("tbody", null, [$r(null, [$td(['class', 'tbIco tb3r1'], I("att_all")), $td(['class', 'tb3r1 tb3c1'], $ls(tNinfo[5])), $td(['class', 'tbIco tb3r1'], I("def_i")), $td(['class', 'tb3r1 tb3c2'], $ls(tNinfo[6])), $td(['class', 'tbIco tb3r1'], I("def_c")), $td(['class', 'tb3r1 tb3c3'], $ls(tNinfo[7]))]), $r(null, [$td(['class', 'tbIco tb3r2'], I("speed" + docDir[0].substring(0, 1))), $td(['class', 'tb3r2 tb3c1'], (tNinfo[8] > 0) ? $ls(tNinfo[8]) : "?"), $td(['class', 'tbIco tb3r2'], I("capacity")), $td(['class', 'tb3r2 tb3c2'], $ls(tNinfo[4])), $td(['class', 'tbIco tb3r2'], I("r5")), $td(['class', 'tb3r2 tb3c3'], $ls(tNinfo[9]))])])]);
		var aTbRes = null;
		var totRes = totalResources(tNinfo);
		if (totRes) {
			var aBody;
			var ri;
			aTbRes = $t(['class', 'tbCost'], [$e("thead", $r($th(['colspan', '2'], T("TCOST")))), aBody = $e("tbody")]);
			for (ri = 0; ri < 4; ++ri) {
				aBody.appendChild($r(null, [$td(['class', 'tbIco'], getResourceImage(ri)), $td(['class', 'tbVal'], $ls(tNinfo[ri]))]));
			}
			aBody.appendChild($r(['class', 'tbTotal'], [$td(['class', 'tbIco'], I("r0")), $td(['class', 'tbVal'], $ls(totRes))]));
		}
		return $div(['class', 'tbTip'], [aTb, (aTbRes) ? $e("hr") : null, aTbRes]);
	}
	function uiCreateTroopInfoTooltip2(tInfo, count) {
		return uiCreateTroopInfoTooltip([tInfo[0], count], tInfo[1]);
	}
	function uiAddTroopInfoTooltips(parent) {
		var arImg = parent.getElementsByTagName("IMG");
		var i,
		tImg,
		tInfo,
		xR,
		tCell;
		for (i = 0; i < arImg.length; ++i) {
			tImg = arImg[i];
			tInfo = getTroopIndexTitleFromImg(tImg);
			if (tInfo[0] > 0 && tInfo[0] < 51) {
				if (tInfo[1] === '' && TB3O.pageSelector === "dorf1") {
					xR = tImg.parentNode;
					if (xR) {
						if (xR.getAttribute("href")) {
							xR = xR.parentNode;
							if (xR) {
								xR = xR.parentNode;
							}
						} else {
							xR = xR.parentNode;
						}
						if (xR) {
							try {
								tCell = xR.cells[2];
								if (tCell) {
									tInfo[1] = tCell.textContent;
								}
							} catch (e) {}

						}
					}
				}
				tImg.removeAttribute('title');
				uiAddTooltip(tImg, bind(uiCreateTroopInfoTooltip2, [tInfo, 1]));
			}
		}
	}
	function getTroopsInfo(tNTroops) {
		var troopsInfo = [];
		if (tNTroops && tNTroops.tBodies) {
			var i;
			var aRows = tNTroops.tBodies[0].rows;
			for (i = 0; i < aRows.length; i++) {
				var aRow = aRows[i];
				if (aRow.cells.length >= 2) {
					var image = $nth_tag(aRow.cells[0], "img");
					if (image) {
						var tix = getTroopIndexTitleFromImg(image)[0];
						var count = parseInt10(aRow.cells[1].textContent);
						troopsInfo.push([tix, count]);
					}
				}
			}
		}
		return troopsInfo.length > 0 ? troopsInfo : null;
	}
	function getMinMark(bMin) {
		return (bMin) ? $e("sup", "*") : null;
	}
	function uiCreateTroopsAttDefInfoTable(id, troopsInfo, bMin) {
		var tNinfo = calcTroopsTotals(troopsInfo);
		var footnote = null;
		if (bMin) {
			footnote = $e("tfoot", $r($td([['colspan', '2']], "* = " + T('MIN'))));
		}
		var attrsIco = ['class', 'tbIco'];
		var attrsVal = ['class', 'tbVal'];
		var aTb = $t([['id', id], ['class', 'tbAttDefInfo']], [$e("thead", $r($th([['colspan', '2']], T('STAT')))), footnote, $e("tbody", null, [$r(null, [$td(attrsIco, [I("att_all"), getMinMark(bMin)]), $td(attrsVal, $ls(tNinfo[5]))]), $r(null, [$td(attrsIco, [I("def_i"), getMinMark(bMin)]), $td(attrsVal, $ls(tNinfo[6]))]), $r(null, [$td(attrsIco, [I("def_c"), getMinMark(bMin)]), $td(attrsVal, $ls(tNinfo[7]))]), $r(null, [$td(attrsIco, I("r5")), $td(attrsVal, $ls(tNinfo[9]))])])]);
		return aTb;
	}
	function uiCreateTroopsAttDefTable4Tip(troopsInfo, bMin) {
		var aTbl = uiCreateTroopsAttDefInfoTable(null, troopsInfo, bMin);
		return (aTbl) ? $div(['class', 'tbTip'], aTbl) : null;
	}
	function uiFillTroopsAttDefInfoTable2(aTb, troopsInfo) {
		var tNinfo = calcTroopsTotals(troopsInfo);
		aTb.rows[1].cells[0].childNodes[1].textContent = $ls(tNinfo[5]);
		aTb.rows[1].cells[1].childNodes[1].textContent = $ls(tNinfo[6]);
		aTb.rows[1].cells[2].childNodes[1].textContent = $ls(tNinfo[7]);
		aTb.rows[2].cells[0].childNodes[1].textContent = (isFinite(tNinfo[8])) ? $ls(tNinfo[8]) : "?";
		aTb.rows[2].cells[1].childNodes[1].textContent = $ls(tNinfo[4]);
		aTb.rows[2].cells[2].childNodes[1].textContent = $ls(tNinfo[9]);
	}
	function uiCreateTroopsAttDefInfoTable2(id, troopsInfo, title, bMin) {
		var attrsVal = ['class', 'tbVal'];
		var aTb = $t([['id', id], ['class', 'tb3tb tbAttDefInfo2']], [$e("thead", $r($th([['colspan', '3']], [title, (bMin ? " (* = " + T('MIN').toLowerCase() + ")" : "")]))), $r(null, [$td([['style', 'width:33%;']], [I("att_all"), $span(attrsVal), getMinMark(bMin)]), $td([['style', 'width:33%;']], [I("def_i"), $span(attrsVal), getMinMark(bMin)]), $td([['style', 'width:34%;']], [I("def_c"), $span(attrsVal), getMinMark(bMin)])]), $r(null, [$td(null, [I("speed" + docDir[0].substring(0, 1)), $span(attrsVal)]), $td(null, [I("capacity"), $span(attrsVal)]), $td(null, [I("r5"), $span(attrsVal)])])]);
		uiFillTroopsAttDefInfoTable2(aTb, troopsInfo);
		return aTb;
	}
	function uiAddAttDefInfoSign(tTable, aContainer, bMin) {
		if (tTable && aContainer) {
			var troopsInfo = getTroopsInfo(tTable);
			if (troopsInfo) {
				addChildren(aContainer, [" ", I("info")]);
				uiAddTooltip(aContainer, bind(uiCreateTroopsAttDefTable4Tip, [troopsInfo, bMin]));
			}
		}
	}
	function getTroopsDetails(qDist, xRace, evTS) {
		var arX = [qDist, 0, 1, getTroopIndexFromRace(xRace), TB3O.nTroopSpeedFactor[TB3O.nServerType]];
		if (evTS) {
			if (TB3O.d2spB[6] !== 0) {
				var tDist = 20;
				arX[2] = 1 + parseInt10(TB3O.d2spB[6]) / 10;
				if (qDist > tDist) {
					arX[0] = tDist;
					arX[1] = qDist - tDist;
				}
			}
		}
		return arX;
	}
	function uiCreateTroopsMerchantsDistTable(tableId, srcMapId, destMapId, options) {
		function uiAddUnitTimeCells(aRow, cls, imgName, imgTxt, ttime, bSep) {
			var aClock = null;
			var aHourglass = null;
			if (!options.show_troops) {
				aClock = I("clock");
				aHourglass = I("hourglass");
			}
			var aArrival = null;
			if (options.show_arrival_time) {
				var aSpan = (options.start_time) ? $span(formatDateTimeRelativeToBase(options.start_time, ttime, 1)) : $span([['class', 'timereln'], ['#ss', ttime], ['#format', 1]], formatDateTimeRelativeToNow(ttime, 1));
				aArrival = $td(['class', 'tbArrivalT' + cls], [aClock, aSpan]);
			}
			addChildren(aRow, [$td(['class', 'tbIco' + cls], [imgTxt, I(imgName)]), $td(['class', 'tbTravelT' + cls], [aHourglass, $span(formatTimeSpan(ttime, 0) + " h")]), aArrival, bSep ? $td(['class', 'tbEmpty']) : null]);
		}
		function uiAddMerchantTimeCells(aRow, x, dist, race, bSep) {
			uiAddUnitTimeCells(aRow, (x > 0) ? ' tbMerc' : ' tbMercRet', (x > 0) ? "merchant" : getBuildingIconName(), (options.merchant_repeat && x > 0) ? x + "x " : null, getMerchantTime(dist, race), bSep);
		}
		function uiCreateMerchantsRow(x, xDist, arrRaces) {
			var aRow = $r(['class', 'tbInfo']);
			uiAddMerchantTimeCells(aRow, x, xDist, arrRaces[0], options.show_all_races);
			if (options.show_all_races) {
				uiAddMerchantTimeCells(aRow, x, xDist, arrRaces[1], true);
				uiAddMerchantTimeCells(aRow, x, xDist, arrRaces[2], false);
			}
			return aRow;
		}
		function uiAddTroopTimeCells(aRow, troopDet, race, unitNo, bSep) {
			uiAddUnitTimeCells(aRow, '', "u" + (unitNo + troopDet[3]), null, getTroopTime(unitNo, troopDet), bSep);
		}
		function uiCreateCoords(XY) {
			return uiCreateIntMapLinkXY2(XY[0], XY[1]);
		}
		var aTb = null;
		var aRow,
		aCell;
		var srcXY;
		var destXY = id2xy(destMapId);
		var race = (options.race === undefined) ? TB3O.U[1] : options.race;
		var races = (options.show_all_races) ? 3 : 1;
		var i;
		if (srcMapId) {
			srcXY = id2xy(srcMapId);
		} else {
			srcXY = [TB3O.ActiveVillageInfo.x, TB3O.ActiveVillageInfo.y];
		}
		var qDist = getDistance(destXY[0], destXY[1], srcXY[0], srcXY[1]);
		if (qDist !== 0) {
			aTb = $t([['class', 'tbDistInfo'], ['id', tableId]]);
			var columns = (options.show_coords | options.show_arrival_time) ? 3 : 2;
			if (options.show_all_races) {
				columns = ((options.show_arrival_time) ? 3 : 2) * 3 + 2;
			}
			if (options.show_title) {
				aTb.appendChild($r($td([['class', 'tbCenter tbTitle'], ['colspan', columns]], uiCreateCoords(destXY))));
			}
			aRow = $r(null, [$td([['class', 'tbIco']], I("dist" + docDir[0].substr(0, 1))), $td([['class', 'tbDist']], qDist.toFixed(2))]);
			var coords_columns = columns - 2;
			if (coords_columns) {
				aRow.appendChild(aCell = $td([['class', 'tbDist'], ['colspan', columns - 2]]));
				if (options.show_coords) {
					addChildren(aCell, [uiCreateCoords(srcXY), " ", I("dist" + docDir[0].substr(0, 1)), " ", uiCreateCoords(destXY)]);
				}
			}
			aTb.appendChild(aRow);
			if (race !== '') {
				var arrRaces;
				switch (race) {
				case avRace[0]:
					arrRaces = [race, avRace[1], avRace[2]];
					break;
				case avRace[1]:
					arrRaces = [race, avRace[0], avRace[2]];
					break;
				case avRace[2]:
					arrRaces = [race, avRace[0], avRace[1]];
					break;
				}
				if (options.show_troops) {
					aTb.appendChild(aRow = $r());
					for (i = 0; i < races; ++i) {
						aRow.appendChild($td(['class', 'tbEmpty']));
						aRow.appendChild($td(['class', 'tbCenter'], I("hourglass")));
						if (options.show_arrival_time) {
							aRow.appendChild($td(['class', 'tbCenter'], I("clock")));
						}
						if (i < (races - 1)) {
							aRow.appendChild($td());
						}
					}
				}
				if (options.show_merchant) {
					var repCount = (options.merchant_repeat) ? options.merchant_repeat : 1;
					var xDist;
					for (i = 0; i < repCount; ++i) {
						xDist = qDist * (i * 2 + 1);
						aTb.appendChild(uiCreateMerchantsRow(repCount - i, xDist, arrRaces));
					}
					if (options.show_merchant_return) {
						xDist = qDist * (repCount * 2);
						aTb.appendChild(uiCreateMerchantsRow(-1, xDist, arrRaces));
					}
				}
				if (options.show_troops) {
					var iTT;
					var arX = getTroopsDetails(qDist, race, true);
					var arY = getTroopsDetails(qDist, arrRaces[1], false);
					var arZ = getTroopsDetails(qDist, arrRaces[2], false);
					for (iTT = 0; iTT < 10; iTT++) {
						aRow = $r(['class', 'tbInfo']);
						uiAddTroopTimeCells(aRow, arX, race, iTT, options.show_all_races);
						if (options.show_all_races) {
							uiAddTroopTimeCells(aRow, arY, arrRaces[1], iTT, true);
							uiAddTroopTimeCells(aRow, arZ, arrRaces[2], iTT, false);
						}
						aTb.appendChild(aRow);
					}
				}
			}
		}
		return aTb;
	}
	function uiAddTooltipForIntMapLink(aLink, mapId) {
		function uiCreateTipForIntMapLink(mapId) {
			return uiCreateTroopsMerchantsDistTable("tb_distTT", null, mapId, {
				show_title : true,
				show_arrival_time : true,
				show_merchant : true,
				show_troops : true
			});
		}
		return uiAddTooltip(aLink, bind(uiCreateTipForIntMapLink, [mapId]));
	}
	function uiAddUnitsTimesTable(container) {
		if (container && isXYValid(TB3O.xCrt, TB3O.yCrt)) {
			var aTb = uiCreateTroopsMerchantsDistTable("tb_unitstime", null, xy2id(TB3O.xCrt, TB3O.yCrt), {
					show_merchant : true,
					show_troops : true,
					show_all_races : true,
					show_coords : true
				});
			if (aTb) {
				container.appendChild(aTb);
			}
		}
	}
	function searchMsgRptTable(aDoc) {
		var mrTable = $g("overview", aDoc);
		return mrTable;
	}
	function searchMsgBody(aDoc) {
		return $g("message", aDoc);
	}
	function searchRptBody() {
		return $g("report_surround");
	}
	function uiSelectAllMsgRpt(mrTable) {
		var inputElem = $g("sAll");
		inputElem.click();
	}
	function uiAddSelectAllCheckbox(mrTable) {
		function toggleAllMsg() {
			var inputElem = $g("sAll");
			var allInputElems = $xf('./tbody/tr/td[@class="sel"]/input[@class="check"]', 'l', mrTable);
			var ctr;
			for (ctr = 0; ctr < allInputElems.snapshotLength; ctr++) {
				allInputElems.snapshotItem(ctr).checked = inputElem.checked;
			}
		}
		if (!$g("sAll")) {
			if ($xf('./tbody/tr/td[@class="sel"]/input[@class="check"]', 'f', mrTable)) {
				insertFirst(mrTable.nextElementSibling, $div([['id', 'markAll'], ['class', 'checkAll tbInject']], [$i([['id', 'sAll'], ['name', 'sAll'], ['class', 'check'], ['type', 'checkbox'], ['click', toggleAllMsg, false]]), $span($e("label", ['for', 'sAll'], T('SELECTALL')))]));
			}
		}
	}
	function uiAddKeyboardNavigation() {
		var navLinks;
		function navToPage(cls) {
			var i;
			for (i = 0; i < navLinks.snapshotLength; i++) {
				if (hasClass(navLinks.snapshotItem(i), cls)) {
					location.href = navLinks.snapshotItem(i).getAttribute('href');
					break;
				}
			}
		}
		function onKeyDown(event) {
			if (event.ctrlKey) {
				switch (event.keyCode) {
				case 35:
					navToPage("last");
					break;
				case 36:
					navToPage("first");
					break;
				case 37:
					navToPage("previous");
					break;
				case 39:
					navToPage("next");
					break;
				}
			}
		}
		navLinks = searchNavigationLinks();
		if (navLinks.snapshotLength > 0) {
			document.addEventListener("keydown", onKeyDown, false);
		}
	}
	function navigateNextRptPage() {
		nextLink = $xf("//div[@id='" + ID_CONTENT + "']//a[contains(@href, 'page=') and contains(@class, 'next')]");
		if (nextLink) {
			location.href = nextLink;
			return true;
		}
		return false;
	}
	function battleReportV2(origT, aFrom) {
		var tx = $xf("//table[@class='std reports_read']//table[@class='std'] | //table[@class='tbg']//table[@class='tbg']", 'l');
		if (tx.snapshotLength < 2) {
			tx = $xf("//table[@class='std reports_read']//table[@class='tbg']", 'l');
		}
		if (tx.snapshotLength < 2) {
			tx = $xf("//table[starts-with(@id, 'attacker') or starts-with(@class, 'defender')]", 'l');
		}
		if (tx.snapshotLength < 2)
			return false;
		if (aFrom === "orig") {
			var p1,
			p2;
			var neworigT = origT.cloneNode(true);
			var divlmid2 = origT.parentNode;
			divlmid2.removeChild(origT);
			divlmid2.appendChild(p2 = $e("p"));
			divlmid2.appendChild(p1 = $e("p", origT));
			var input = $i([['type', 'checkbox'], ['id', 'tb_battlereport']]);
			input.addEventListener("click", function () {
				shoBR(p1, neworigT, origT);
			}, false);
			var ptable = $t([['style', 'background-color:' + TB3O.DFc[1] + '; width:auto;']]);
			var aRow = $r([['class', 'tb3rnb']]);
			var aCell = $c(T('SOREP') + ":", [['class', 'tb3cnb'], ['style', 'text-align:' + docDir[0] + ';']]);
			aRow.appendChild(aCell);
			var bCell = $c("", [['class', 'tb3cnb'], ['style', 'text-align:' + docDir[0] + ';']]);
			bCell.appendChild(input);
			aRow.appendChild(bCell);
			ptable.appendChild(aRow);
			p2.appendChild(ptable);
		}
		var gBooty = $xf("//div[@class='carry']");
		var bgBooty = null;
		if (gBooty)
			bgBooty = gBooty.cloneNode(true);
		var booty = 0;
		var labelReward = gIc["capacity"];
		var imgRes = new Array;
		for (var i = 0; i < 4; i++) {
			imgRes[i] = gIc["r" + (i + 1)];
		}
		var stBooty = [0, 0, 0, 0];
		if (TB3O.T35 == false) {
			var aX = $xf("//tr[@class='cbg1'] | //table[@class='tbg']//tr", 'l');
			if (aX.snapshotLength >= 3) {
				var intToProcess = -1;
				for (var i = 0; i < aX.snapshotLength; i++) {
					if (aX.snapshotItem(i).childNodes.length == 4)
						intToProcess = i;
				}
				if (intToProcess > -1) {
					var b = aX.snapshotItem(intToProcess).childNodes[3];
				} else {
					var b = aX.snapshotItem(1).childNodes[1];
					if (b.innerHTML.indexOf('class="res"') == -1)
						b = aX.snapshotItem(2).childNodes[1];
				}
				if (b.childNodes.length == 8) {
					var qBooty = new Array();
					var infoBooty = '';
					for (var i = 0; i < 4; i++) {
						qBooty[i] = parseInt10(b.childNodes[i * 2 + 1].nodeValue);
						infoBooty += imgRes[i];
						infoBooty += qBooty[i];
						infoBooty += (i < 3 ? ' + ' : ' = ');
						stBooty[i] = qBooty[i];
					}
					booty = arrayToInt(qBooty);
					infoBooty += booty;
					b.innerHTML = infoBooty;
					if (bgBooty != null)
						b.appendChild(bgBooty);
				}
			}
		} else {
			var aX = tx.snapshotItem(0);
			var infoBooty = '';
			var b1Table = aX;
			if (!b1Table.rows[4])
				return false;
			var xi = 4;
			var gata = false;
			while (xi < b1Table.rows.length && !gata) {
				var bootyCell = b1Table.rows[xi].cells[1];
				if (bootyCell.textContent.indexOf("|") != -1)
					gata = true;
				xi += 1;
			}
			if (gata) {
				var resInfo = bootyCell;
				for (var xi = 0; xi < bootyCell.childNodes.length; xi++) {
					var aChild = bootyCell.childNodes[xi];
					if (aChild.className == "goods" || aChild.className == "res")
						resInfo = aChild;
				}
				var aqBooty = resInfo.textContent.split("|");
				if (aqBooty.length > 1) {
					var qBooty = new Array();
					for (var i = 0; i < 4; i++) {
						qBooty[i] = parseInt10(aqBooty[i].replace(" ", "").replace(" ", ""));
						infoBooty += imgRes[i];
						infoBooty += qBooty[i];
						if (i < 3)
							infoBooty += ' + ';
						else
							infoBooty += ' = ';
						stBooty[i] = qBooty[i];
					}
					booty = arrayToInt(qBooty);
					infoBooty += booty;
					bootyCell.innerHTML = infoBooty;
					if (bgBooty != null)
						bootyCell.appendChild(bgBooty);
				}
			}
		}
		var arrLoss = new Array();
		var arrCarry = new Array();
		var tadPower = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
		var atkLabelCell;
		var defLabelCell;
		var brCell = tx.snapshotItem(0).parentNode;
		for (var g = 0; g < tx.snapshotLength; g++) {
			arrCarry[g] = 0;
			tTable = tx.snapshotItem(g);
			attdefPower = [0, 0, 0];
			intNoOfCells = tTable.rows[1].cells.length - 1;
			if (intNoOfCells == 11) {
				if (g == 0)
					tadPower[0][9] += 1;
				else
					tadPower[1][9] += parseInt10(tTable.rows[2].cells[11].textContent);
			}
			if (g == 0)
				atkLabelCell = tTable.rows[0].cells[0].textContent;
			else
				defLabelCell = tTable.rows[0].cells[0].textContent;
			for (var j = 1; j < 11; j++) {
				tImg = tTable.rows[1].cells[j].getElementsByTagName('img')[0];
				tInd = getTroopIndexTitleFromImg(tImg)[0];
				tNo = parseInt10(tTable.rows[2].cells[j].textContent);
				tNoLost = 0;
				if (tTable.rows[3])
					tNoLost = parseInt10(tTable.rows[3].cells[j].textContent);
				if (!isNaN(tNo)) {
					if (g == 0) {
						attdefPower[0] += uc[tInd][5] * tNo;
						tadPower[0][0] += uc[tInd][5] * tNo;
						tadPower[0][1] += uc[tInd][6] * tNo;
						tadPower[0][2] += uc[tInd][7] * tNo;
						tadPower[0][8] += uc[tInd][9] * tNoLost;
						tadPower[0][10] += uc[tInd][9] * tNo;
					} else {
						attdefPower[0] += uc[tInd][5] * tNo;
						attdefPower[1] += uc[tInd][6] * tNo;
						attdefPower[2] += uc[tInd][7] * tNo;
						tadPower[1][0] += uc[tInd][5] * tNo;
						tadPower[1][1] += uc[tInd][6] * tNo;
						tadPower[1][2] += uc[tInd][7] * tNo;
						tadPower[1][8] += uc[tInd][9] * tNoLost;
						tadPower[1][10] += uc[tInd][9] * tNo;
					}
				}
				u = uc[tInd];
				p = tTable.rows[3] ? tTable.rows[3].cells[j].innerHTML : 0;
				ptu = arrayByN(u, p);
				arrLoss[g] = arrayAdd(arrLoss[g], ptu.slice(0, 4));
				arrCarry[g] += (tTable.rows[2] ? tTable.rows[2].cells[j].innerHTML - p : 0) * u[4];
			}
			var attdefCell = tTable.rows[1].cells[0];
			if (g == 0) {
				$at(attdefCell, [['style', 'font-size:8pt; color:#FF8000; text-align:center;']]);
				attdefCell.innerHTML = $ls(attdefPower[0]) + " " + gIc["att_all"];
			} else {
				$at(attdefCell, [['style', 'font-size:8pt; color:green; text-align:center;']]);
				attdefCell.innerHTML = $ls(attdefPower[1]) + " " + gIc["def_i"] + "<br>" + $ls(attdefPower[2]) + " " + gIc["def_c"];
			}
			var iHTML = '';
			for (var i = 0; i < 4; i++) {
				iHTML += imgRes[i];
				iHTML += arrLoss[g][i];
				if (i < 3)
					iHTML += ' + ';
				else
					iHTML += ' = ';
				if (g == 0)
					tadPower[0][4 + i] += arrLoss[g][i];
				else
					tadPower[1][4 + i] += arrLoss[g][i];
			}
			var lossTotal = arrayToInt(arrLoss[g]);
			if (g == 0)
				tadPower[0][3] += lossTotal;
			else
				tadPower[1][3] += lossTotal;
			if (lossTotal > 0)
				iHTML += " <b><font color='red'>" + lossTotal + "</font></b>";
			else
				iHTML += lossTotal;
			var informe = $c(iHTML, [['colspan', intNoOfCells]]);
			var aRow = $r();
			aRow.appendChild($c(T('LOSS'), [['style', 'text-align:left;']]));
			aRow.appendChild(informe);
			tTable.appendChild(aRow);
			if (g == 0) {
				var profit = 0;
				if (arrCarry[g] == 0) {
					booty = 0;
					for (var i = 0; i < 4; i++) {
						stBooty[i] = 0;
					}
				} else {
					profit = ((booty - lossTotal) * 100 / booty).toFixed(2);
				}
				if (booty == 0)
					if (lossTotal == 0)
						profit = 0;
					else
						profit = -100;
				var bCell = $c(profit + "%", [['colspan', intNoOfCells]]);
				var pRow = $r();
				pRow.appendChild($c(T('PROFIT'), [['style', 'text-align:left;']]));
				pRow.appendChild(bCell);
				tTable.appendChild(pRow);
				var efficiency = 100 - ((arrCarry[g] - booty) * 100 / arrCarry[g]);
				if (arrCarry[g] == 0)
					efficiency = 0;
				var bCell = $c(efficiency.toFixed(2) + "% (" + booty + "/" + arrCarry[g] + ")", [['colspan', intNoOfCells]]);
				var eRow = $r();
				eRow.appendChild($c(T('EFICIENCIA'), [['style', 'text-align:left;']]));
				eRow.appendChild(bCell);
				tTable.appendChild(eRow);
			}
		}
		var sTable = $t([['id', 'br_table']]);
		var sTitleRow = $r();
		sTitleRow.appendChild($c(T('STAT'), [['class', 'tb3cbrh1']]));
		sTitleRow.appendChild($c(atkLabelCell, [['class', 'tb3cbrh2']]));
		sTitleRow.appendChild($c(defLabelCell, [['class', 'tb3cbrh3']]));
		sTable.appendChild(sTitleRow);
		var atkRow = $r();
		atkRow.appendChild($c(gIc["att_all"], [['class', 'tb3cbrc']]));
		atkRow.appendChild($c($ls(tadPower[0][0])));
		atkRow.appendChild($c($ls(tadPower[1][0])));
		sTable.appendChild(atkRow);
		var defiRow = $r();
		defiRow.appendChild($c(gIc["def_i"], [['class', 'tb3cbrc']]));
		defiRow.appendChild($c($ls(tadPower[0][1])));
		defiRow.appendChild($c($ls(tadPower[1][1])));
		sTable.appendChild(defiRow);
		var defcRow = $r();
		defcRow.appendChild($c(gIc["def_c"], [['class', 'tb3cbrc']]));
		defcRow.appendChild($c($ls(tadPower[0][2])));
		defcRow.appendChild($c($ls(tadPower[1][2])));
		sTable.appendChild(defcRow);
		var rewATotal = $c($ls(booty) + (TB3O.O[64] == '1' ? " " + T('TOTAL') : ''), [['class', 'tb3cbrbg']]);
		var rewRow1 = $r();
		var intDetailRowSpan = 1 + parseInt10(TB3O.O[64]);
		var rewLabelCell = $c(labelReward, [['class', 'tb3cbrc'], ['rowspan', intDetailRowSpan]]);
		rewRow1.appendChild(rewLabelCell);
		if (TB3O.O[64] == '1') {
			var rewA = '';
			for (var i = 1; i < 5; i++) {
				rewA += $ls(stBooty[i - 1]) + " " + imgRes[i - 1] + "<br>";
			}
			rewADetail = $c(rewA, [['class', 'tb3cbrg']]);
			rewRow1.appendChild(rewADetail);
		} else
			rewRow1.appendChild(rewATotal);
		rewRow1.appendChild($c('-', [['class', 'tb3cbrb'], ['rowspan', intDetailRowSpan]]));
		sTable.appendChild(rewRow1);
		if (TB3O.O[64] == '1') {
			var rewRow2 = $r();
			rewRow2.appendChild($c($ls(booty) + " " + T('TOTAL'), [['class', 'tb3cbrbg']]));
			sTable.appendChild(rewRow2);
		}
		var strLossATotal = $ls(tadPower[0][3]) + (TB3O.O[64] == '1' ? " " + T('TOTAL') : '');
		var lossATotal = $c(strLossATotal, [['class', 'tb3cbrb']]);
		if (tadPower[0][3] > 0)
			$at(lossATotal, [['class', 'tb3cbrbr']]);
		var strLossDTotal = $ls(tadPower[1][3] + booty) + (TB3O.O[64] == '1' ? " " + T('TOTAL') : '');
		lossDTotal = $c(strLossDTotal, [['class', 'tb3cbrb']]);
		if (tadPower[1][3] + booty > 0)
			$at(lossDTotal, [['class', 'tb3cbrbr']]);
		var lossRow1 = $r();
		lossRow1.appendChild($c(T('LOSS'), [['class', 'tb3cbrc'], ['rowspan', intDetailRowSpan]]));
		if (TB3O.O[64] == '1') {
			var iLossA = '';
			var iLossD = '';
			for (var i = 1; i < 5; i++) {
				iLossA += $ls(tadPower[0][i + 3]) + " " + imgRes[i - 1] + "<br>";
				iLossD += $ls(tadPower[1][i + 3] + stBooty[i - 1]) + " " + imgRes[i - 1] + "<br>";
			}
			var lossADetail = $c(iLossA);
			if (tadPower[0][3] > 0)
				$at(lossADetail, [['class', 'tb3cbrr']]);
			lossRow1.appendChild(lossADetail);
			var lossDDetail = $c(iLossD);
			if (tadPower[1][3] + booty > 0)
				$at(lossDDetail, [['class', 'tb3cbrr']]);
			lossRow1.appendChild(lossDDetail);
		} else {
			lossRow1.appendChild(lossATotal);
			lossRow1.appendChild(lossDTotal);
		}
		sTable.appendChild(lossRow1);
		if (TB3O.O[64] == '1') {
			var lossRow2 = $r();
			lossRow2.appendChild(lossATotal);
			lossRow2.appendChild(lossDTotal);
			sTable.appendChild(lossRow2);
		}
		var ccRow = $r();
		ccRow.appendChild($c(gIc["r5"], [['class', 'tb3cbrc']]));
		ccRow.appendChild($c(tadPower[0][10] + " (-" + tadPower[0][8] + ")"));
		ccRow.appendChild($c(tadPower[1][10] + " (-" + tadPower[1][8] + ")"));
		sTable.appendChild(ccRow);
		var heroRow = $r();
		heroRow.appendChild($c(gIc["hero"], [['class', 'tb3cbrc']]));
		var accA = (tadPower[0][9] > 0 ? tadPower[1][8] : 0);
		var accD = (tadPower[1][9] > 0 ? Math.floor(tadPower[0][8] / tadPower[1][9]) : 0);
		heroRow.appendChild($c(accA, [['class', 'tb3cbrb']]));
		heroRow.appendChild($c(accD, [['class', 'tb3cbrb']]));
		sTable.appendChild(heroRow);
		brCell.appendChild($e("P"));
		brCell.appendChild(sTable);
		return true;
		function shoBR(aP, nT, oT) {
			var iC = $g("tb_battlereport");
			if (iC) {
				if (iC.checked) {
					aP.removeChild(oT);
					aP.appendChild(nT);
				} else {
					aP.removeChild(nT);
					aP.appendChild(oT);
				}
			}
		}
	}
	function uiModifyMsgBody(msg) {
		function replaceTextByRE(txtNode, re, freplace) {
			var str = txtNode.nodeValue;
			var prevLastIndex = 0;
			var children = [];
			var result;
			while ((result = re.exec(str)) !== null) {
				if (result.index > prevLastIndex) {
					children.push(str.substring(prevLastIndex, result.index));
				}
				prevLastIndex = re.lastIndex;
				var replacement = freplace(result[0]);
				if (replacement) {
					children.push(replacement);
				} else {
					children.push(str.substring(result.index, re.lastIndex));
				}
			}
			var tail = str.substring(prevLastIndex);
			if (tail) {
				children.push(tail);
			}
			replaceElement(txtNode, children);
		}
		function replaceCoordsWithLink(txt) {
			var aLink = null;
			var txy = txt.replace(/ /g, "").replace(/[,\/\\]/, "|");
			if (txy.indexOf("|") !== -1) {
				var xy = txy.replace("(", "").replace(")", "").split("|");
				aLink = uiCreateIntMapLinkXY(xy[0], xy[1], formatCoords(trimBlanks(xy[0]), trimBlanks(xy[1])), {
						disable_tip : true
					});
			}
			return aLink;
		}
		function replaceURLWithLink(txt) {
			return $lnk([attrInject$, ['href', txt], ['target', '_blank']], txt);
		}
		function processMessageText(msg, re, freplace) {
			var texts = $xf(".//text()", 'l', msg);
			var i;
			for (i = 0; i < texts.snapshotLength; ++i) {
				var txtNode = texts.snapshotItem(i);
				if (TAG(txtNode.parentNode) !== "A") {
					replaceTextByRE(txtNode, re, freplace);
				}
			}
		}
		var reCoords = /(\(\s*(-?\d+)\s*[\|\,\s\/\\]\s*(-?\d+)\s*\))|((?=\b)(-?\d+)\s*[\|\,\s\/\\]\s*(-?\d+)(?=\b))/g;
		processMessageText(msg, reCoords, replaceCoordsWithLink);
		var reURL = /\w+:\/\/[\w-]+([.][\w-]+)+(\/\S*)?/g;
		processMessageText(msg, reURL, replaceURLWithLink);
	}
	function getMsgRptHighlight(mrTable) {
		return $xf(".//tr[contains(@class,'tbSelected')]");
	}
	function uiRemoveMsgRptHighlight(mrTable) {
		var i;
		for (i = 0; i < mrTable.rows.length; ++i) {
			delClass(mrTable.rows[i], "tbSelected");
		}
	}
	function uiSetMsgRptHighlight(aNode) {
		var tr = $xf(".//ancestor::tr[1]", 'f', aNode);
		if (tr) {
			addClass(tr, "tbSelected");
		}
	}
	function uiSetMsgRptCheck(aNode, state) {
		var input = $xf(".//ancestor::tr[1]/td[@class='sel']/input[@class='check']", 'f', aNode);
		if (input) {
			input.checked = state;
		}
	}
	function clearReportDeletingState() {
		var options = loadPersistentUserObject("reports_delete");
		if (options.deleteType) {
			savePersistentUserObject("reports_delete", {});
		}
	}
	function uiCreateDelRepTable(menu, mrTable) {
		function onDeleteReports(tabNo, delType) {
			savePersistentUserObject("reports_delete", {
				pageToReturn : crtUrl.source,
				deleteType : delType,
				activeTab : tabNo,
				tabToReturn : menu.active
			});
			if (menu.active === tabNo) {
				deleteReports(menu.active, mrTable);
			} else {
				location.href = menu.items[tabNo][1];
			}
		}
		var delToolsArr = [["messageStatusRead", "REPREAD_TT", 0], ["iReport1", "REP1_TT", 1], ["iReport4", "REP4_TT", 1], ["iReport8", "REP8_TT", 1], ["iReport11", "REP11_TT", 2], ["iReport12", "REP12_TT", 2], ["iReport13", "REP13_TT", 2], ["iReport14", "REP14_TT", 2], ["iReport21", "REP21_TT", 3]];
		var menuItems = menu.items;
		var iMax = 4;
		var bRow,
		cRow,
		cCell,
		i,
		j;
		var delTb = $t(['id', 'tb_delreptable'], [$e("thead", null, $th(['colspan', iMax], T('DEL'))), bRow = $r(['class', 'r1']), cRow = $r(['class', 'r2'])]);
		for (i = 0; i < iMax; i++) {
			var bTitle = menuItems[i][0];
			bRow.appendChild($td(null, [bTitle + " ", uiCreateTool("bDel", T('DEL') + " " + bTitle, bind(onDeleteReports, [i, "$all"]))]));
			cRow.appendChild(cCell = $td());
			for (j = 0; j < delToolsArr.length; ++j) {
				var delTool = delToolsArr[j];
				if (delTool[2] === i) {
					cCell.appendChild(uiCreateTool(delTool[0], T('DEL') + " " + T(delTool[1]), bind(onDeleteReports, [delTool[2], delTool[0]])));
				}
			}
		}
		return delTb;
	}
	function isMsgRptListEmpty(mrTable) {
		return !$xf(".//input[@type='checkbox' and not (@id)]", 'f', mrTable)
	}
	function deleteReports(activeTab, mrTable) {
		function stop() {
			savePersistentUserObject("reports_delete", {});
			if (activeTab !== options.tabToReturn) {
				location.href = options.pageToReturn;
			}
		}
		var options = loadPersistentUserObject("reports_delete");
		if (options.deleteType) {
			if (activeTab === options.activeTab) {
				pauseScript(TB3O.Timeouts.reports_delete);
				var bDel = $g("del");
				if (!isMsgRptListEmpty(mrTable) && bDel) {
					var bFounded = false;
					if (options.deleteType === "$all") {
						uiSelectAllMsgRpt(mrTable);
						bFounded = true;
					} else {
						var i;
						var tbR = mrTable.getElementsByTagName('img');
						for (i = 0; i < tbR.length; i++) {
							if (hasAnyClass(tbR[i], options.deleteType)) {
								bFounded = true;
								uiSetMsgRptCheck(tbR[i], true);
							}
						}
						if (!bFounded) {
							pauseScript(TB3O.Timeouts.reports_search);
							if (!navigateNextRptPage()) {
								stop();
							}
						}
					}
					if (bFounded) {
						pauseScript(TB3O.Timeouts.reports_delete);
						bDel.click();
					}
				} else {
					stop();
				}
			} else {
				savePersistentUserObject("reports_delete", {});
			}
		}
	}
	function clearReportSearchingState() {
		var options = loadPersistentUserObject("reports_search");
		if (options.searchType) {
			savePersistentUserObject("reports_search", {});
		}
	}
	function uiCreateSearchRepTable(menu, mrTable) {
		function onSearchReports(tabNo, ser) {
			savePersistentUserObject("reports_search", {
				searchType : ser,
				activeTab : tabNo
			});
			var highlight = getMsgRptHighlight(mrTable);
			if (highlight && menu.active === tabNo) {
				uiRemoveMsgRptHighlight(mrTable);
				searchReports(tabNo, mrTable, highlight);
			} else {
				location.href = menu.items[tabNo][1];
			}
		}
		var sdvs = $div(['id', 'tb_searchreports'], [$span(T("FINDREP") + " : "), uiCreateTool("iReport2", T("REP2_TT"), bind(onSearchReports, [1, "iReport2"])), uiCreateTool("iReport3", T("REP3_TT"), bind(onSearchReports, [1, "iReport3"])), uiCreateTool("iReport7", T("REP7_TT"), bind(onSearchReports, [1, "iReport7"])), uiCreateTool("iReport5", T("REP5_TT"), bind(onSearchReports, [1, "iReport5"])), uiCreateTool("iReport6", T("REP6_TT"), bind(onSearchReports, [1, "iReport6"])), uiCreateTool("iReport17", T("REP17_TT"), bind(onSearchReports, [3, "iReport17"])), uiCreateTool("iReport21", T("REP21_TT"), bind(onSearchReports, [3, "iReport21"])), $lnk([['href', jsVoid], ['title', T("ALL")], ['click', bind(onSearchReports, [0, "iReport2 iReport3 iReport5 iReport6 iReport7 iReport17 iReport21"]), false]], T("ALL"))]);
		return sdvs;
	}
	function searchReports(activeTab, mrTable, highlight) {
		var options = loadPersistentUserObject("reports_search");
		if (options.searchType) {
			if (activeTab === options.activeTab) {
				var tbR = mrTable.getElementsByTagName('img');
				var i = 0;
				var bFounded = false;
				if (highlight) {
					for (i = 0; i < tbR.length; i++) {
						if (hasAncestor(tbR[i], highlight)) {
							break;
						}
					}
					++i;
				}
				for (; i < tbR.length; i++) {
					if (hasAnyClass(tbR[i], options.searchType)) {
						bFounded = true;
						savePersistentUserObject("reports_search", {});
						uiSetMsgRptHighlight(tbR[i]);
						break;
					}
				}
				if (!bFounded) {
					pauseScript(TB3O.Timeouts.reports_search);
					if (!navigateNextRptPage()) {
						savePersistentUserObject("reports_search", {});
					}
				}
			} else {
				savePersistentUserObject("reports_search", {});
			}
		}
	}
	function MsgRptPreload(mrTable, intMRP) {
		var pageNo = (crtUrl.queryKey.s === undefined) ? 0 : parseInt10(crtUrl.queryKey.s);
		for (var i = 1; i < intMRP; i++) {
			setTimeout(createMrPreloadFunc(pageNo + i * 10), getRndTime(i * 498));
		}
		var X2 = pageNo + intMRP * 10;
		var X1 = pageNo - intMRP * 10;
		var tdbfLinks = mrTable.rows[mrTable.rows.length - 1].cells[2];
		if (tdbfLinks) {
			var bkLink;
			if (X1 < 0) {
				bkLink = $e("SPAN", [['class', 'c'], ["style", "font-weight:bold;"]], "«");
			} else {
				bkLink = $lnk([['style', 'font-weigth:bold'], ['href', addQueryParameter(crtUrl.source, "s", X1)]], "« ");
			}
			var fwLink = $lnk([['style', 'font-weight:bold'], ['href', addQueryParameter(crtUrl.source, "s", X2)]], "»&nbsp;");
			removeChildren(tdbfLinks);
			tdbfLinks.appendChild(bkLink);
			tdbfLinks.appendChild(fwLink);
		}
		function createMrPreloadFunc(s) {
			return function () {
				ajaxLoadDocument(addQueryParameter(crtUrl.source, "s", s), processMrPage);
			}
		}
		function processMrPage(xhr_doc) {
			var aTb = searchMsgRptTable(xhr_doc);
			if (aTb) {
				var maxR = aTb.rows.length;
				var mrFoot = mrTable.tFoot;
				var lastRow = null;
				if (!mrFoot) {
					lastRow = mrTable.rows[mrTable.rows.length - 1];
					removeElement(lastRow);
				}
				if (!isMsgRptListEmpty(mrTable)) {
					var xBody = mrTable.tBodies[0];
					var oFrg = null;
					if (xBody)
						oFrg = document.createDocumentFragment();
					for (var xi = 1; xi < maxR - 1; xi++) {
						var aRow = aTb.rows[xi];
						var xRow = $r();
						var noC = aRow.cells.length;
						if (noC > 1) {
							for (var yi = 0; yi < noC; yi++) {
								var xCell = aRow.cells[yi].cloneNode(true);
								document.adoptNode(xCell);
								uiModifyLinks(xCell);
								xRow.appendChild(xCell);
							}
							if (oFrg)
								oFrg.appendChild(xRow);
							else
								mrTable.appendChild(xRow);
						}
					}
					if (oFrg)
						xBody.appendChild(oFrg);
				}
				if (lastRow) {
					mrTable.appendChild(lastRow);
				}
			}
		}
	}
	function MessageListOptions() {
		var mrTable = searchMsgRptTable();
		var subMenu = searchAndParseSubMenu();
		if (subMenu && mrTable) {
			uiAddSelectAllCheckbox(mrTable); ; ;
			if (TB3O.pageSelector === "report_list") {
				if (TB3O.O[61] === "1") {
					var content = $g(ID_CONTENT);
					var searchTb = uiCreateSearchRepTable(subMenu, mrTable);
					if (searchTb) {
						insertLast(content, searchTb);
					}
					var delTb = uiCreateDelRepTable(subMenu, mrTable);
					if (delTb) {
						insertLast(content, delTb);
					}
				}
				deleteReports(subMenu.active, mrTable);
				searchReports(subMenu.active, mrTable);
			}
			var intMRP = parseInt10(TB3O.O[59]) + 1;
			if (!isIntValid(intMRP)) {
				intMRP = 1;
			}
			if (intMRP > 5) {
				intMRP = 5;
			}
			if (intMRP > 1) {}

		}
	}
	function uiModifyMsgRptList() {
		uiAddKeyboardNavigation();
		MessageListOptions();
	}
	function uiModifyMsgRptMenu() {
		var subMenu = searchAndParseSubMenu();
		if (subMenu) { ;
		}
	}
	function uiModifyMessage(bPopup) {
		var msgBody = searchMsgBody();
		if (msgBody) {
			uiModifyMsgBody(msgBody);
		}
	}
	function uiModifyMsgView() {
		uiModifyMsgRptMenu();
		uiModifyMessage();
	}
	function uiModifyTradeReport(rptBody, bPopup) {
		var resCell = $xf(".//*[@id='trade']/tbody/tr[2]/td", 'f', rptBody);
		if (resCell) {
			var Res = getResourcesFromString(getTextContent(resCell));
			if (Res) {
				insertAfter(resCell.lastChild, $span(attrInject$, [" = ", I("r0"), " ", $e("b", $ls(totalResources(Res)))]));
			}
		}
	}
	function uiModifyReport(bPopup) {
		var rptBody = searchRptBody();
		if (rptBody) {
			if (TB3O.O[63] === "1") {}
			uiModifyTradeReport(rptBody, bPopup);
		}
	}
	function uiModifyRptView() {
		uiModifyMsgRptMenu();
		uiModifyReport();
	}
	function uiModifyMsgPost() {
		function sendMessage(event) {
			if (event.keyCode === 13 && event.ctrlKey) {
				var mF = $xf("//form[@name='msg' or @action='nachrichten.php']");
				if (mF) {
					mF.submit();
				}
			}
		}
		uiModifyMsgRptMenu();
		var msgNode = $g("message");
		if (msgNode) {
			msgNode.addEventListener("keydown", sendMessage, false);
		}
	}
	function searchAllianceProfileTable() {
		return $xf("//div[@id='details']/table");
	}
	function searchAllianceAuthoritiesTable() {
		return $xf("//div[@id='memberTitles']/table");
	}
	function searchAllianceMembersTable() {
		return $g("member");
	}
	function uiModifyAllianceProfileName(aProfile) {
		var allyName = aProfile.rows[0].cells[1].textContent;
		aProfile.rows[0].cells[1].innerHTML = " <a href='" + crtPage + "'>" + allyName + "</a>";
	}
	function uiModifyAllianceProfileDescription(aProfile) {
		uiModifyPlayerProfileDescription();
	}
	function getMemberTitles(aTb) {
		var memberTitles = {};
		if (aTb && aTb.rows) {
			var i;
			for (i = 0; i < aTb.rows.length; i++) {
				var uid;
				var post = aTb.rows[i].cells[0].textContent;
				var uLink = $nth_tag(aTb.rows[i].cells[1], "a", 0);
				if (uLink) {
					uid = parseUri(uLink.getAttribute('href')).queryKey.uid;
				}
				if (post && uid) {
					memberTitles[uid] = post;
				}
			}
		}
		return memberTitles;
	}
	function uiModifyAllianceMembersTable(aTb, memberTitles) {
		if (aTb && aTb.rows && aTb.rows.length > 1) {
			var i,
			j;
			var cells;
			var totP = 0;
			var totV = 0;
			var playersCount = aTb.rows.length - 1;
			var columns = aTb.rows[1].cells.length;
			var totalBullets = [[0, ""], [0, ""], [0, ""], [0, ""], [0, ""]];
			var boolIsMyAlly = true;
			insertFirst(aTb.rows[0], $td(['style', 'width:6%']));
			++columns;
			for (i = 1; i < aTb.rows.length; i++) {
				cells = aTb.rows[i].cells;
				var uLink = $nth_tag(cells[0], "a", 0);
				if (uLink) {
					var uid = parseUri(uLink.getAttribute('href')).queryKey.uid;
					if (TB3O.UserID == uid) {
						addClass(aTb.rows[i], "hl");
					}
					var post = memberTitles[uid];
					if (post) {
						insertAfter(uLink, $txt(" (" + post + ")"));
					}
				}
				totP += parseInt10(cells[1].textContent);
				totV += parseInt10(cells[2].textContent);
				if (boolIsMyAlly) {
					j = 0;
					if (cells[0]) {
						var imgBullet = $nth_tag(cells[0], "img", 0);
						if (imgBullet) {
							if (imgBullet.src.indexOf("x.gif") === -1) {
								var xf = basename(imgBullet.src).replace("b", "").replace(".gif", "");
								j = parseInt10(xf);
								totalBullets[j - 1][0] += 1;
								totalBullets[j - 1][1] = imgBullet.title;
							} else {
								var aClass = imgBullet.className;
								if (aClass.match(/online/) && aClass.search(/(\d)/) !== -1) {
									j = RegExp.$1;
									totalBullets[j - 1][0] += 1;
									totalBullets[j - 1][1] = imgBullet.title;
								}
							}
						}
					}
					if (j === 0) {
						boolIsMyAlly = false;
					}
				}
				insertFirst(aTb.rows[i], $td(String(i) + "."))
			}
			var avgP = Math.round(totP / playersCount);
			var avgV = Math.round(totV / playersCount);
			for (i = 1; i < aTb.rows.length; i++) {
				cells = aTb.rows[i].cells;
				var pop = parseInt10(cells[2].textContent);
				var vil = parseInt10(cells[3].textContent);
				if (pop > avgP * 3 / 2) {
					cells[2].style.backgroundColor = '#E8FFE8';
				}
				if (pop < avgP * 2 / 3) {
					cells[2].style.backgroundColor = 'bisque';
				} else if (pop < avgP) {
					cells[2].style.backgroundColor = 'cornsilk';
				}
				if (vil > avgV * 3 / 2) {
					cells[3].style.backgroundColor = '#E8FFE8';
				}
				if (vil < avgV * 2 / 3) {
					cells[3].style.backgroundColor = 'bisque';
				} else if (vil < avgV) {
					cells[3].style.backgroundColor = 'cornsilk';
				}
			}
			var trT = $r(['class', 'tb3r']);
			trT.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"]], T('TOTAL')));
			trT.appendChild($td([['class', 'tb3chnb'], ['style', 'text-align:center']], totP));
			trT.appendChild($td([['class', 'tb3chnb'], ['style', 'text-align:center']], totV));
			if (columns > 4) {
				trT.appendChild($td([['class', 'tb3chnb'], ["colspan", columns - 4]]));
			}
			aTb.appendChild(trT);
			var trAv = $r(['class', 'tb3r']);
			trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"]], T('AVPPP')));
			trAv.appendChild($td([['class', 'tb3chnb'], ['style', 'text-align:center']], avgP));
			trAv.appendChild($td([['class', 'tb3chnb'], ['style', 'text-align:center']], avgV));
			if (columns > 4) {
				trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", columns - 4]]));
			}
			aTb.appendChild(trAv);
			trAv = $r(['class', 'tb3r']);
			trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"]], T('AVPPV')));
			trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", "2"], ['style', 'text-align:center']], Math.round(totP / totV)));
			if (columns > 4) {
				trAv.appendChild($td([['class', 'tb3chnb'], ["colspan", columns - 4]]));
			}
			aTb.appendChild(trAv);
			if (boolIsMyAlly) {
				var rowBullets = $r(['class', 'tb3r']);
				var cellBullets = $td([['class', 'tb3chnb'], ['colspan', columns], ['style', 'text-align:center']]);
				for (j = 0; j < 5; j++) {
					if (totalBullets[j][0] > 0) {
						if (cellBullets.firstChild) {
							addChildren(cellBullets, " | ");
						}
						addChildren(cellBullets, [I("b" + (j + 1), [['title', totalBullets[j][1]]]), "\u00A0=\u00A0" + totalBullets[j][0]]);
					}
				}
				rowBullets.appendChild(cellBullets);
				aTb.appendChild(rowBullets);
			}
		}
	}
	function uiModifyAllianceProfile() {
		var aProfile = searchAllianceProfileTable();
		if (aProfile) {
			var memberTitles = getMemberTitles(searchAllianceAuthoritiesTable());
			uiModifyAllianceProfileName(aProfile);
			uiModifyAllianceProfileDescription(aProfile);
			uiModifyAllianceMembersTable(searchAllianceMembersTable(), memberTitles);
		}
	}
	function uiModifyAllianceForum() {
		var i;
		var posts = $xf("//table[@id='posts']//div[contains(@class,'text')]", 'l');
		for (i = 0; i < posts.snapshotLength; i++) {
			uiModifyMsgBody(posts.snapshotItem(i));
		}
	}
	function getPlayerName(aDoc) {
		var aUN = '';
		var aNode = $xf("//div[contains(@class,'sideInfoPlayer')]//a[contains(@href, 'spieler.php')]", 'f', aDoc, aDoc);
		if (!aNode) {
			aNode = $xf("//div[@id='sidebarBoxHero']//div[contains(@class,'playerName')]", 'f', aDoc, aDoc);
		}
		if (aNode) {
			aUN = trimWhitespaces(aNode.textContent);
		};
		return aUN;
	}
	function searchCapitalSpan(aDoc) {
		return $xf("//div[@id='" + ID_CONTENT + "']//table[@id='villages']//span[contains(@class,'mainVillage')]", 'f', aDoc, aDoc);
	}
	function getRaceLocalName(aDoc) {
		var name = '';
		var aValue = $xf("//table[@id='details']/tbody/tr[2]/td", 'f', aDoc, aDoc);
		if (aValue) {
			name = trimBlanks(aValue.textContent);
		}
		return name;
	}
	function searchPlayerProfileTable() {
		return $g("details");
	}
	function searchPlayerProfileVillagesTable(aDoc) {
		return $g("villages", aDoc);
	}
	function uiModifyPlayerProfileName(uProfile) {
		var title = $xf("//div[@id='" + ID_CONTENT + "']//h1");
		if (title) {
			var parts = title.textContent.split(" - ");
			if (parts.length > 1) {
				title.innerHTML = parts[0] + " - <a href='" + crtPage + "'>" + parts[1] + "</a>"
			}
		}
	}
	function uiModifyPlayerProfileDescription(uProfile) {
		var desc = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'description1')]");
		if (desc) {
			uiModifyMsgBody(desc);
		}
		desc = $xf("//div[@id='" + ID_CONTENT + "']//div[contains(@class,'description2')]");
		if (desc) {
			uiModifyMsgBody(desc);
		}
	}
	function uiModifyPlayerProfileVillagesTable(uTb, villages) {
		activeMapId = xy2id(TB3O.ActiveVillageInfo.x, TB3O.ActiveVillageInfo.y);
		var villagesTable = villages.table;
		var i;
		for (i = 0; i < villagesTable.length; i++) {
			var mapId = villagesTable[i][0];
			if (activeMapId == mapId) {
				addClass(uTb.rows[i + 1], "hl");
			}
		}
	}
	function savePlayerInfo() {
		setGMcookieV2('UserInfo', TB3O.U, 'UsI');
	}
	function loadPlayerInfo() {
		var bResult = true;
		var bFirstTry = false;
		var aTB3U = getGMcookieV2('UserInfo');
		if (!aTB3U || !aTB3U['UsI']) {
			bFirstTry = true;
			savePlayerInfo();
		} else {
			TB3O.U = aTB3U['UsI'];
		}
		if (TB3O.U[1] === '') {
			getRace();
			if (TB3O.U[1] === '' && bFirstTry) {
				getRaceFromBarracks();
			}
		}
		if (TB3O.U[0] === '' || TB3O.U[2] === '' || TB3O.U[3] === '' || TB3O.U[4] === '' || TB3O.U[6] === '') {
			ajaxLoadDocument(spLnk, function (xhr_doc) {
				getCommonPlayerProfileInfo(xhr_doc);
			});
			bResult = false;
		}
		return bResult;
	}
	function setPlayerName(aUN) {
		if (aUN) {
			TB3O.U[0] = aUN;
			savePlayerInfo();
		}
	}
	function setRaceLocalName(name) {
		if (name) {
			TB3O.U[2] = name;
			savePlayerInfo();
		}
	}
	function getCommonPlayerProfileInfo(aDoc) {
		function setCapitalInfo(aSpan) {
			if (aSpan) {
				var aVal = $nth_tag(aSpan.parentNode, 'a', 0);
				if (aVal) {
					saveCapitalInfo(parseUri(aVal.getAttribute('href')).queryKey.d, aVal.textContent);
					return;
				}
			}
			saveCapitalInfo();
		}
		setCapitalInfo(searchCapitalSpan(aDoc));
		if (TB3O.U[4] === '-') {
			var uTb = searchPlayerProfileVillagesTable(aDoc);
			if (uTb) {
				var villagesTable = parsePlayerProfileVillagesTable(uTb).table;
				if (villagesTable.length === 1) {
					saveCapitalInfo(villagesTable[0][0], villagesTable[0][2]);
				}
			}
		}
		setPlayerName(getPlayerName(aDoc));
		setRaceLocalName(getRaceLocalName(aDoc));
	}
	function parsePlayerProfileVillagesTable(uTb) {
		var vPop = 0,
		totP = 0,
		villagesTable = [];
		var i,
		vLnk,
		mapId,
		aRow,
		vName;
		for (i = 1; i < uTb.rows.length; i++) {
			aRow = uTb.rows[i];
			vLnk = $nth_tag(aRow.cells[0], "a", 0);
			if (vLnk) {
				vPop = parseInt10(aRow.cells[2].textContent);
				totP += vPop;
				mapId = parseInt10(parseUri(vLnk.getAttribute('href')).queryKey.d);
				vName = vLnk.textContent;
				villagesTable.push([mapId, vPop, vName]);
			}
		}
		return {
			population : totP,
			table : villagesTable
		};
	}
	function getVillagesPopulation(aDoc) {
		var uTb = searchPlayerProfileVillagesTable(aDoc);
		if (uTb) {
			var villagesTable = parsePlayerProfileVillagesTable(uTb).table;
			var mapIdDict = getVillagesMapIdDict(TB3O.VillagesInfo);
			for (i = 0; i < villagesTable.length; ++i) {
				var mapId = villagesTable[i][0];
				TB3O.VillagesInfo[mapIdDict[mapId]].pop = villagesTable[i][1];
			}
		}
	}
	function processPlayerProfile() {
		TB3O.pageSelector = "profile_my";
		if (crtUrl.queryKey.uid && crtUrl.queryKey.uid != TB3O.UserID) {
			TB3O.pageSelector = "profile_other";
		}
		if (crtUrl.queryKey.s) {
			TB3O.pageSelector = "profile_tab";
		}
		if (TB3O.pageSelector === "profile_my") {
			var menu = searchAndParseSubMenu();
			if (!menu || (menu && menu.active === 0)) {
				getCommonPlayerProfileInfo(document);
			} else {
				TB3O.pageSelector = "profile_tab";
			}
		}
	}
	function processMyProfile() {
		getCapitalId();
		getVillagesPopulation(document);
	}
	function uiModifyPlayerProfileCoords(uTb, villages) {
		activeMapId = xy2id(TB3O.ActiveVillageInfo.x, TB3O.ActiveVillageInfo.y);
		var villagesTable = villages.table;
		var i;
		for (i = 0; i < villagesTable.length; i++) {
			var mapId = villagesTable[i][0];
			var aCell = uTb.rows[i + 2].cells[2];
			if (!$nth_tag(aCell, "a", 0)) {
				aCell.appendChild(uiCreateIntMapLink(mapId, aCell.childNodes, {
						disable_expansion : true
					}));
			}
			if (activeMapId == mapId) {
				addClass(uTb.rows[i + 2], "hl");
			}
		}
	}
	function uiAddPlayerStatistics(uTb, villages) {
		var headerRows = 1;
		var totV = uTb.rows.length - headerRows;
		var totP = villages.population;
		var csp1 = 2;
		var csp2 = uTb.rows[headerRows].cells.length - 2;
		var trT = $r([['class', 'tb3rnb']], [$td([['class', 'tb3chnb'], ['colspan', csp1]], T('TOTAL')), $td([['class', 'tb3chnb'], ['style', 'text-align:center;']], totP), $td([['class', 'tb3chnb'], ['colspan', csp2]])]);
		uTb.appendChild(trT);
		var trAv = $r([['class', 'tb3rnb']], [$td([['class', 'tb3chnb'], ['colspan', csp1]], T('AVPPV')), $td([['class', 'tb3chnb'], ['style', 'text-align:center;']], Math.round(totP / totV)), $td([['class', 'tb3chnb'], ['colspan', csp2]])]);
		uTb.appendChild(trAv);
	}
	function uiModifyPlayerProfile() {
		var uProfile = searchPlayerProfileTable();
		if (uProfile) {
			uiModifyPlayerProfileName(uProfile);
			uiModifyPlayerProfileDescription(uProfile);
		}
		var uTb = searchPlayerProfileVillagesTable();
		if (uTb) {
			var villages = parsePlayerProfileVillagesTable(uTb);
			uiAddPlayerStatistics(uTb, villages);
			uiModifyPlayerProfileVillagesTable(uTb, villages);
		}
	}
	function MapInfo() {
		var cells = {};
		var cellsCount = 0;
		this.left = 0;
		this.bottom = 0;
		this.sizeX = 7;
		this.sizeY = 7;
		function cleanup(x, y) {
			cells = {};
			cellsCount = 0;
		}
		this.setMapWindow = function (left, bottom, sizeX, sizeY) {
			this.left = left;
			this.bottom = bottom;
			this.sizeX = sizeX;
			this.sizeY = sizeY;
		}
		this.getCell = function (mapId) {
			var cellInfo = cells[mapId];
			return cellInfo;
		}
		this.getCellXY = function (x, y) {
			return this.getCell(xy2id(x, y));
		}
		this.getCelldXdY = function (dx, dy) {
			return this.getCellXY(this.left + dx, this.bottom + dy);
		}
		this.addCell = function (mapId, newInfo) {
			var cellInfo = cells[mapId];
			if (cellInfo === undefined) {
				var XY = id2xy(mapId);
				if (cellsCount === 1000) {
					cleanup(XY[0], XY[1]);
				}
				cellInfo = cells[mapId] = newInfo;
				++cellsCount;
			} else {
				cloneUndefinedProperties(newInfo, cellInfo);
			}
			return cellInfo;
		}
	}
	function uiCreateCellInfoTooltip(mapId) {
		function uiAddTroopsInfoTables(container, troopsInfo) {
			var aBody;
			var aDiv = $div(['class', 'tbTip'], $t(aBody = $e("tbody")));
			var i;
			for (i = 0; i < troopsInfo.length; i++) {
				var tix = troopsInfo[i][0];
				var count = troopsInfo[i][1];
				if (count > 0) {
					addChildren(aBody, $r(null, [$td(['class', 'tbIco'], getTroopImage(tix)), $td(['class', 'tbVal'], count.toString())]));
				}
			}
			replaceElement(container, [aDiv, uiCreateTroopsAttDefTable4Tip(troopsInfo, false)]);
		}
		function getTroopsAttDefInfoContainer(mapId) {
			return $g('tb_tt_' + mapId);
		}
		function onAjaxFailed(mapId) {
			removeChildren(getTroopsAttDefInfoContainer(mapId));
			var cellInfo = TB3O.MapInfo.getCell(mapId);
			if (cellInfo) {
				delete cellInfo.oasisInfo;
			}
		}
		function onGetOasisDetails(mapId, aDoc) {
			var container = getTroopsAttDefInfoContainer(mapId);
			removeChildren(container);
			var cellInfo = TB3O.MapInfo.getCell(mapId);
			if (cellInfo && cellInfo.oasisInfo) {
				cellInfo.oasisInfo.troops = null;
				var troopsTable = searchTroopsInfoTable(aDoc);
				if (troopsTable) {
					var troopsInfo = getTroopsInfo(troopsTable);
					if (troopsInfo) {
						cellInfo.oasisInfo.troops = troopsInfo;
						if (container) {
							uiAddTroopsInfoTables(container, troopsInfo);
						}
					}
				}
			}
		}
		var i,
		info;
		var aDiv,
		aTbl;
		var aTipDiv = $div(aDiv = $div(['class', 'tbTip']));
		var cellInfo = TB3O.MapInfo.getCell(mapId);
		if (cellInfo.title) {
			addChildren(aDiv, [$span(['class', 'tbTitle'], cellInfo.title), $e("br")]);
		}
		if (!cellInfo.is_oasis) {
			if (cellInfo.type < villageTypes.length) {
				info = villageTypes[cellInfo.type];
				for (i = 1; i < 5; i++) {
					addChildren(aDiv, [I("r" + i), " " + info[i - 1] + " "]);
				}
			}
		} else {
			if (cellInfo.type && cellInfo.type < oasisTypes.length) {
				info = oasisTypes[cellInfo.type];
				for (i = 0; i < 4; i++) {
					if (info[i]) {
						addChildren(aDiv, [I("r" + (i + 1)), " +" + info[i] + "% "]);
					}
				}
			}
			if (!cellInfo.playerName) {
				var bWait = false;
				var container = $div([['id', 'tb_tt_' + mapId], ['class', 'tbTitle']]);
				addChildren(aTipDiv, container);
				if (cellInfo.oasisInfo) {
					if (cellInfo.oasisInfo.troops !== null) {
						uiAddTroopsInfoTables(container, cellInfo.oasisInfo.troops);
					} else if (cellInfo.oasisInfo.troops === undefined) {
						bWait = true;
					}
				} else {
					cellInfo.oasisInfo = {};
					bWait = true;
					ajaxLoadDocument(cellInfo.lnk, bind2(onGetOasisDetails, [mapId]), bind(onAjaxFailed, [mapId]));
				}
				if (bWait) {
					addClass(container, 'tbWait');
					addChildren(container, I("wait"));
				}
			}
		}
		if (TB3O.O[57] === "1") {
			var distTb = uiCreateTroopsMerchantsDistTable("tb_distTT", null, mapId, {
					show_coords : false,
					show_merchant : true,
					show_troops : true
				});
			if (distTb) {
				addChildren(aTipDiv, $div(['class', 'tbTip'], distTb));
			}
		}
		return aDiv.hasChildNodes() ? aTipDiv : null;
	}
	function sortTable(sTableID, iCol, sDataType) {
		function convert(aE, sDataType) {
			switch (sDataType) {
			case "int":
				return ((aE === null) || !aE.nodeValue.match(/\d+/)) ? 0 : parseInt10(aE.nodeValue);
			case "float":
				return ((aE === null) || !aE.nodeValue.match(/\d+/)) ? 0 : parseFloat(aE.nodeValue);
			default:
				return (aE === null) ? '' : aE.textContent.toLowerCase();
			}
		}
		function compareTRs(oTR1, oTR2) {
			var v1 = convert(oTR1.cells[iCol].firstChild, sDataType);
			var v2 = convert(oTR2.cells[iCol].firstChild, sDataType);
			return compare(v1, v2);
		}
		var oTb = $g(sTableID);
		var oB = oTb.tBodies[0];
		var arR = oB.rows;
		var aTRs = [];
		var oFrg = document.createDocumentFragment();
		var i;
		for (i = 0; i < arR.length; i++) {
			aTRs[i] = arR[i];
		}
		if (getTBAttribute(oTb, "sortCol") == iCol) {
			aTRs.reverse();
		} else {
			aTRs.sort(compareTRs);
		}
		for (i = 0; i < aTRs.length; i++) {
			oFrg.appendChild(aTRs[i]);
		}
		oB.appendChild(oFrg);
		setTBAttribute(oTb, 'sortCol', iCol);
	}
	function uiCreateNeighborhoodTable(tableId) {
		var tbody,
		aRow,
		aCell;
		var aTb = $t(['id', tableId], [$e("thead", null, aRow = $r()), tbody = $e("tbody")]);
		var cL = [['PLAYER', 'string'], ['8', 'string'], ['ALDEAS', 'string'], ['POPULATION', 'int'], ['COORDS', 'xy'], ['MAPTBACTS', null]];
		var i;
		for (i = 0; i < cL.length; i++) {
			aCell = $td(T(cL[i][0]));
			var sortType = cL[i][1];
			if (sortType) {
				addChildren(aCell, [" (", I("arrow_down8"), I("arrow_up8"), ")"]);
				$at(aCell, [['title', T('CKSORT')], ['class', 'tb3mthcp'], ['click', bind(sortTable, [tableId, i, sortType]), false]]);
			}
			aRow.appendChild(aCell);
		}
		var dx,
		dy;
		for (dx = 0; dx < TB3O.MapInfo.sizeX; dx++) {
			for (dy = 0; dy < TB3O.MapInfo.sizeY; dy++) {
				var cellInfo = TB3O.MapInfo.getCelldXdY(dx, dy);
				if (cellInfo && cellInfo.playerName) {
					var mapId = xy2id(cellInfo.x, cellInfo.y);
					tbody.appendChild($r(null, [$td([['class', (cellInfo.playerName === TB3O.U[0]) ? 'tb3mtcu' : '']], cellInfo.playerName), $td(cellInfo.allianceName), aCell = $td($lnk(['href', cellInfo.lnk], cellInfo.villageName || cellInfo.title)), $td([['class', 'tb3mtcp']], cellInfo.pop), $td(uiCreateIntMapLinkXY2(cellInfo.x, cellInfo.y)), $td(null, [uiCreateSendAttDefTool(mapId), uiCreateSendResTool(mapId)])]));
					uiAddTooltip(aCell, bind(uiCreateCellInfoTooltip, [mapId]));
				}
			}
		}
		return (tbody.rows.length > 0) ? aTb : null;
	}
	function uiCreateNeighborhoodWidget() {
		if (TB3O.O[58] === '1') {
			var oldtb = $g('mapTable');
			removeElement(oldtb);
			if (oldtb) {
				uiFloatWindow_Remove('mapTableTT');
			}
			var tb = uiCreateNeighborhoodTable('mapTable');
			if (tb) {
				var dxy = TB3O.O[90].split("|");
				$df(682, dxy[0], dxy[1], " ", 'mapTable', "mapTableTT", false, tb);
			}
		}
	}
	function uiModifyMap() {
		var reCoordsSpan = /<span *class *= *"[^"]* *coordinates *[^"]*" *>(.+)<\/span>/;
		var rePlayerName = /{k.spieler} *([^<]+)/;
		var reAllianceName = /{k.allianz} *([^<]+)/;
		var reVillageName = /{k.dt} *(.+)/;
		var rePop = /{k.einwohner} *(\d+)/;
		var reOasisTyp = /{a[.]r(\d+)} *(\d+)%/g;
		var reTitleTyp = / *{k[.]f(\d+)} */;
		var reTitleOasis = /{k[.](fo)|(bt)}/;
		var translateDict;
		function getAreaDetails(area) {
			var details = null;
			try {
				if (area.wrappedJSObject) {
					var areaInfo = area.wrappedJSObject._extendedTipContent;
					if (areaInfo && areaInfo.hasOwnProperty('title') && areaInfo.hasOwnProperty('text')) {
						var xy,
						type,
						is_oasis,
						playerName,
						allianceName,
						villageName,
						pop;
						var title = areaInfo.title;
						if (areaInfo.text.match(reCoordsSpan)) {
							xy = parseCoords(RegExp.$1);
						}
						if (areaInfo.text.match(rePlayerName)) {
							playerName = RegExp.$1;
						}
						if (areaInfo.text.match(reAllianceName)) {
							allianceName = RegExp.$1;
						}
						if (areaInfo.title.match(reVillageName)) {
							villageName = RegExp.$1;
						}
						if (areaInfo.text.match(rePop)) {
							pop = parseInt10(RegExp.$1);
						}
						is_oasis = (title.search(reTitleOasis) !== -1);
						if (is_oasis) {
							var oasisType,
							ri,
							percent;
							var percents = [0, 0, 0, 0];
							reOasisTyp.lastIndex = 0;
							while (reOasisTyp.exec(areaInfo.text)) {
								ri = parseInt10(RegExp.$1) - 1;
								percent = parseInt10(RegExp.$2);
								percents[ri] = percent;
							}
							for (oasisType = 0; oasisType < oasisTypes.length; oasisType++) {
								var bMatch = true;
								for (ri = 0; ri < 4; ri++) {
									if (oasisTypes[oasisType][ri] !== percents[ri]) {
										bMatch = false;
										break;
									}
								}
								if (bMatch) {
									type = oasisType;
									break;
								}
							}
						} else if (title.match(reTitleTyp)) {
							type = parseInt10(RegExp.$1);
							title = title.replace(reTitleTyp, "");
						}
						title = title.replace(/{([a-z.]+)}/g, function (str, key) {
								return translateDict.get(key);
							});
						if (xy) {
							var mapId = xy2id(xy[0], xy[1]);
							details = {
								id : mapId,
								cellInfo : {
									x : xy[0],
									y : xy[1],
									lnk : "position_details.php?x=" + xy[0] + "&y=" + xy[1],
									is_oasis : is_oasis,
									type : type,
									title : title,
									playerName : playerName,
									allianceName : allianceName,
									villageName : villageName,
									pop : pop
								}
							};
							if (TB3O.O[118] === "1") {
								delete area.wrappedJSObject._extendedTipContent.title;
								delete area.wrappedJSObject._extendedTipContent.text;
							}
						}
					}
				}
			} catch (e) {}
			return details;
		}
		function setMapWindow(cx, cy, rows, area) {
			var sizeX = Math.floor(area / rows);
			var sizeY = rows;
			if (sizeX * sizeY === area) {
				var left = normalizeCoord(cx - Math.floor(sizeX / 2));
				var bottom = normalizeCoord(cy - Math.floor(sizeY / 2));
				TB3O.MapInfo.setMapWindow(left, bottom, sizeX, sizeY);
				var h = $xf("//h1");
				if (h) {
					h.textContent = uiModifyMap.mapHeader + " " + formatCoords(cx, cy);
				}
				uiRefreshVL_Distance(cx, cy);
			}
		}
		function uiModifyCell(dx, dy, mapCell, cellInfo) {
			var id = "tb_map_info_" + dx + "_" + dy;
			removeElement($g(id));
			if (!cellInfo.is_oasis) {
				if (mapCell) {
					var info = null;
					switch (cellInfo.type) {
					case 1:
						info = I("mr4");
						break;
					case 2:
						info = I("mr3");
						break;
					case 4:
						info = I("mr2");
						break;
					case 5:
						info = I("mr1");
						break;
					case 6:
						info = [I("mr4", [['class', '+tbMo12']]), I("mr4", [['class', '+tbMo22']])];
						break;
					case 7:
						info = [I("mr1", [['class', '+tbMo13']]), I("mr2", [['class', '+tbMo23']]), I("mr4", [['class', '+tbMo33']])];
						break;
					case 8:
						info = [I("mr2", [['class', '+tbMo13']]), I("mr3", [['class', '+tbMo23']]), I("mr4", [['class', '+tbMo33']])];
						break;
					case 9:
						info = [I("mr1", [['class', '+tbMo13']]), I("mr3", [['class', '+tbMo23']]), I("mr4", [['class', '+tbMo33']])];
						break;
					case 10:
						info = I("mr2");
						break;
					case 11:
						info = I("mr3");
						break;
					case 12:
						info = I("mr1");
						break;
					}
					if (info) {
						mapCell.appendChild($div(['id', id], info));
					}
				}
			}
		}
		function uiRefreshMap() {
			var mapContainer = $g("mapContainer");
			if (mapContainer) {
				var i;
				var mapRowsCount = $xf("count(.//div[" + $xClass('tileRow') + "])", 'n', mapContainer);
				var mapTiles = $xf(".//div[" + $xClass('tile') + "]", 'l', mapContainer);
				var centerTile = Math.floor(mapTiles.snapshotLength / 2);
				for (i = 0; i < mapTiles.snapshotLength; ++i) {
					var tile = mapTiles.snapshotItem(i);
					var details = getAreaDetails(tile);
					if (details) {
						TB3O.MapInfo.addCell(details.id, details.cellInfo);
						if (i === centerTile) {
							setMapWindow(details.cellInfo.x, details.cellInfo.y, mapRowsCount, mapTiles.snapshotLength);
						}
					}
				}
				if (TB3O.O[56] === '1') {
					var dx,
					dy;
					for (dx = 0; dx < TB3O.MapInfo.sizeX; dx++) {
						for (dy = 0; dy < TB3O.MapInfo.sizeY; dy++) {
							var cellInfo = TB3O.MapInfo.getCelldXdY(dx, dy)
								if (cellInfo) {
									uiModifyCell(dx, dy, mapTiles.snapshotItem((TB3O.MapInfo.sizeY - dy - 1) * TB3O.MapInfo.sizeX + dx), cellInfo);
								}
						}
					}
				}
				uiCreateNeighborhoodWidget();
				mapContainer.addEventListener("DOMSubtreeModified", onSubtreeModified, false);
			}
		}
		function uiRefreshMapProxy() {
			if (uiRefreshMapProxy.timer) {
				clearTimeout(uiRefreshMapProxy.timer);
			}
			uiRefreshMapProxy.timer = setTimeout(function () {
					uiRefreshMapProxy.timer = null;
					uiRefreshMap();
				}, TB3O.Timeouts.map_refresh);
		}
		function onSubtreeModified(e) {
			if (hasClass(e.target, "tile")) {
				e.currentTarget.removeEventListener("DOMSubtreeModified", onSubtreeModified, false);
				uiRefreshMapProxy();
			}
		}
		function uiCreateMapTip(e) {
			var content = null;
			if (e.target.className.match(/x{([+-]?\d+)} +y{([+-]?\d+)}/)) {
				var x = RegExp.$1;
				var y = RegExp.$2;
				content = uiCreateCellInfoTooltip(xy2id(x, y));
			}
			return content;
		}
		TB3O.MapInfo = new MapInfo();
		var h = $xf("//h1");
		if (h) {
			uiModifyMap.mapHeader = h.textContent;
		}
		if (TB3O.O[118] === "1") {
			var maparea = $g("mapContainer");
			if (maparea) {
				uiAddTooltip(maparea, uiCreateMapTip);
			}
		}
		if (window.wrappedJSObject && window.wrappedJSObject.Travian) {
			translateDict = window.wrappedJSObject.Travian.Translation;
		}
		uiRefreshMapProxy();
	}
	function showUserBookmarks() {
		var aTb,
		parBM,
		ubXY;
		if (TB3O.O[20] === "1") {
			removeElement($g("userbookmarksTT"));
			removeElement($g("userbookmarks"));
			aTb = uiCreateUserBookmarksTable();
			uiModifyLinks(aTb, {
				add_send_troops2 : true
			}); {
				var ubXY = TB3O.O[76].split("|");
				$df(215, ubXY[0], ubXY[1], T('MARCADORES'), 'userbookmarks', "userbookmarksTT", true, aTb);
				if (TB3O.O[71] !== "1") {
					aTb.style.display = 'none';
				}
			}
		}
		function uiCreateUserBookmarksTable() {
			var aTb = $t([['id', 'userbookmarks']]);
			var uHr = $r();
			uHr.appendChild(uiCreateUserBookmarksHeader());
			aTb.appendChild(uHr);
			var strBM = getGMcookie("marcadores", false);
			if (strBM == "false") {
				setGMcookie("marcadores", '', false);
				strBM = '';
			}
			if (strBM != '') {
				marcadores = new Array();
				strBM = strBM.split("$$");
				for (var i = 0; i < strBM.length; i++)
					marcadores[i] = strBM[i].split("$");
				for (var i = 0; i < marcadores.length; i++) {
					bmRow = $r();
					strBookmark = marcadores[i][0];
					if (TB3O.O[82] != "1") {
						var aDel = $a(gIc["del"], [['href', jsVoid]]);
						aDel.addEventListener("click", removeGMcookieValue("marcadores", i, false, showUserBookmarks, false), 0);
						aC = $c("");
						aC.appendChild(aDel);
						bmRow.appendChild(aC);
						bmRow.appendChild($c("&nbsp;"));
						upC = $c("");
						if (i > 0) {
							aUp = $a("", [['href', jsVoid]]);
							aUp.appendChild($img([['src', image["aup"]]]));
							aUp.addEventListener("click", moveUserBookmark(i, -1), false);
							upC.appendChild(aUp);
						}
						bmRow.appendChild(upC);
						downC = $c("");
						if (i < marcadores.length - 1) {
							var aDown = $a("", [['href', jsVoid]]);
							aDown.appendChild($img([['src', image["adn"]]]));
							aDown.addEventListener("click", moveUserBookmark(i, 1), false);
							downC.appendChild(aDown);
						}
						bmRow.appendChild(downC);
						bmRow.appendChild($c("&nbsp;"));
						eC = $c("");
						aEdit = $a("", [['href', jsVoid]]);
						aEdit.appendChild($img([['src', image["editbookmark"]], ['title', T('EDIT')]]));
						aEdit.addEventListener("click", editUserBookmark(i), false);
						eC.appendChild(aEdit);
						bmRow.appendChild(eC);
						bmRow.appendChild($c("&nbsp;"));
					} else {
						aCl = 'noact';
						if (marcadores[i][1] == crtPage)
							aCl = 'act';
						var aC = $c("<span>&#8226;&nbsp;&nbsp;</span>", [['class', aCl]]);
						bmRow.appendChild(aC);
					}
					if (marcadores[i][1].indexOf("*") != -1) {
						iL = $a(strBookmark + " ", [['href', marcadores[i][1].substring(0, marcadores[i][1].length - 1)], ['target', '_blank']]);
						iL.appendChild($img([['src', image["external"]]]));
					} else {
						iL = $a(strBookmark);
						if (marcadores[i][1] != "#")
							$at(iL, [['href', marcadores[i][1].substring(0, marcadores[i][1].length)]]);
					}
					bmC = $c("");
					bmC.appendChild(iL);
					bmRow.appendChild(bmC);
					aTb.appendChild(bmRow);
				}
			}
			return aTb;
			function uiCreateUserBookmarksHeader() {
				var hText = $e("B", T('MARCADORES') + ':&nbsp;&nbsp;');
				var dI = (TB3O.O[82] != "1" ? ["unlocked" + docDir[0].substring(0, 1), '82.L', "1", '8'] : ["locked", '82.U', "0", '2']);
				var toolbar = uiToolbar_Create(null, [uiCreateTool("addbookmark", T('ANYADIR'), onAddBookmark), uiCreateTool("addbmthispage", T('ADDCRTPAGE'), onAddCurrentBookmark), uiCreateTool("addbmspacer", T('SPACER'), onSeparator), uiCreateTool(dI[0], T(dI[1]), onLockUnlock)]);
				var hCell = $c("", [['colspan', dI[3]]]);
				hCell.appendChild(hText);
				hCell.appendChild(toolbar);
				return hCell;
				function onAddBookmark() {
					addUserBookmark();
				}
				function onAddCurrentBookmark() {
					addUserBookmark(window.location.href);
				}
				function onSeparator() {
					addGMcookieValue("marcadores", ["<hr size='2' width='100%' noshade color=darkgrey>", "#"], false);
					showUserBookmarks();
				}
				function onLockUnlock() {
					TB3O.O[82] = dI[2];
					setGMcookieV2('TB3Setup', TB3O.O, 'SETUP');
					showUserBookmarks();
				}
			}
		}
		function addUserBookmark(ubURL) {
			if (!ubURL) {
				ubURL = prompt(T('UBU'), TB3O.BrT);
				if (!ubURL || ubURL == '')
					return;
			}
			var ubL = prompt(T('UBT'), TB3O.BrT);
			if (!ubL || ubL == '')
				return;
			addGMcookieValue("marcadores", [ubL, ubURL], false);
			showUserBookmarks();
			ubL = null;
		}
		function moveUserBookmark(i, updown) {
			return function () {
				var ubC = getGMcookie("marcadores", false);
				var arrUbC = ubC.split("$$");
				var tmpUb = arrUbC[i + updown];
				arrUbC[i + updown] = arrUbC[i];
				arrUbC[i] = tmpUb;
				ubC = arrUbC.join("$$");
				setGMcookie("marcadores", ubC, false);
				showUserBookmarks();
				ubC = null;
				arrUbC = null;
				tmpUb = null;
			}
		}
		function editUserBookmark(i) {
			return function () {
				var ubC = getGMcookie("marcadores", false);
				var arrUbC = ubC.split("$$");
				var tmpUb = arrUbC[i].split("$");
				var ubLabel = prompt(T('UBT'), tmpUb[0]);
				var ubURL = null;
				if (ubLabel != '')
					ubURL = prompt(T('UBU'), tmpUb[1]);
				if (!ubLabel)
					ubLabel = tmpUb[0];
				if (!ubURL)
					ubURL = tmpUb[1];
				if (ubLabel != '' && ubURL != '' && (ubLabel != tmpUb[0] || ubURL != tmpUb[1])) {
					arrUbC[i] = ubLabel + "$" + ubURL;
					ubC = arrUbC.join("$$");
					setGMcookie("marcadores", ubC, false);
					showUserBookmarks();
				}
				ubC = null;
				arrUbC = null;
				utLabel = null;
				ubURL = null;
			}
		}
	}
	function showNoteBlock() {
		if (TB3O.O[22] === "1") {
			var aTb = createNoteBlock();
			if (aTb) { {
					var nbXY = TB3O.O[77].split("|");
					var nbWidth = aTb.style.width;
					$df(parseInt10(nbWidth), nbXY[0], nbXY[1], T('NBO'), 'noteblock', "noteblockTT", true, aTb);
					if (TB3O.O[72] !== "1") {
						aTb.style.display = 'none';
					}
				}
			}
		}
	}
	function createNoteBlock() {
		var tr2 = $r();
		var td2 = $c("");
		var nT = getGMcookie("notas", false);
		if (nT == "false")
			nT = "";
		var nl = parseInt10(TB3O.O[25]) > 0 && nT != '' ? 3 + nT.split("\n").length : 10;
		if (nl > 30)
			nl = 30;
		var nboption = parseInt10(TB3O.O[24]);
		var dI = (nboption == 0 && screen.width >= 1200 || nboption == 2) ? [545, '60'] : [280, '30'];
		var aTb = $t([['id', 'noteblock'], ['style', "width:" + dI[0] + "px;"]]);
		var tA = $e("TEXTAREA", nT);
		$at(tA, [["cols", dI[1]], ["id", "noteblockcontent"], ['style', 'background-image: url(' + image["underline"] + '); width:' + (dI[0] - 10) + 'px;'], ["rows", nl]]);
		td2.appendChild(tA);
		tr2.appendChild(td2);
		var tr3 = $r();
		var td3 = $c("", [['style', 'text-align:center;']]);
		var bS = $i([['type', 'image'], ['src', image["bSave"]], ['title', T('SAVE')]]);
		if (TB3O.O[23] != '1')
			$at(bS, [['style', 'padding:3px']]);
		bS.addEventListener("click", function () {
			setGMcookie("notas", tA.value, false);
			alert(T('SAVED'));
		}, 0);
		td3.appendChild(bS);
		tr3.appendChild(td3);
		aTb.appendChild(tr2);
		aTb.appendChild(tr3);
		nT = null;
		return aTb;
	};
	function uiUpdateResBarWidget() {
		updateResBarTable('tb_resbar', TB3O.ActiveVillageId);
	}
	function uiCreateResBarWidget() {
		var rbT,
		prbT;
		var xy;
		if (TB3O.O[39] === "1") {
			rbT = uiCreateResBarTable('tb_resbar', TB3O.ActiveVillageId, true);
			if (rbT) { {
					xy = TB3O.O[75].split("|");
					TB3O.nTARbT = $df(200, xy[0], xy[1], T('RBTT'), "resbar", "resbarTT", true, rbT);
					if (TB3O.O[70] !== "1") {
						rbT.style.display = 'none';
					}
				}
				setInterval(uiUpdateResBarWidget, TB3O.Timeouts.resbar_update);
			}
		}
	}
	function uiCreateResourceTooltip(villageId) {
		return uiCreateResBarTable('tb_resbarTT', villageId, false);
	}
	function uiCreateFillBar() {
		return $t([['class', 'rbrtb']], $r([['class', 'rbrtbr']], [$td(), $td()]));
	}
	function uiSetFillBar(bar, resourcesInfo, ri) {
		var bCells = bar.rows[0].cells;
		var title = "" + Math.floor(resourcesInfo.Res[ri]) + "/" + resourcesInfo.Cap[ri];
		var fillPercent = getFillPercent(resourcesInfo, ri);
		var prC = getBackColorForResourceBar(fillPercent, resourcesInfo.EPpH[ri]);
		$at(bCells[0], [['style', 'width:' + fillPercent + '%; background-color:' + prC + ';'], ['title', title]]);
		$at(bCells[1], [['style', 'width:' + (100 - fillPercent) + '%; background-color:transparent;'], ['title', title]]);
		return bar;
	}
	function uiCreateResBarTable(tableId, villageId, bShowAllTotals) {
		var rbT = null,
		hRow,
		aRow,
		bRow,
		cRow,
		tRow,
		hCell1,
		hCell2,
		aCell;
		var intpph = 0,
		intPPH = 0;
		var ri;
		var villageInfo = TB3O.VillagesInfo[villageId];
		var resourcesInfo = villageInfo.r;
		if (resourcesInfo.dUpd !== undefined) {
			for (ri = 0; ri < 4; ri++) {
				intpph += resourcesInfo.PpH[ri];
				intPPH += TB3O.ResInfoTotals.PpH[ri];
			}
			rbT = $t();
			rbT.id = tableId;
			rbT.className = "tbResBar";
			hRow = $r([['class', 'tb3r']]);
			hCell1 = $c(villageInfo.name, [['class', 'tb3cvn'], ['colspan', '4']]);
			hRow.appendChild(hCell1);
			hCell2 = $c((bShowAllTotals ? T('TOTAL') + " / " : "") + T('1H'), [['class', 'tb3chtot']]);
			hRow.appendChild(hCell2);
			rbT.appendChild(hRow);
			for (ri = 0; ri < 4; ri++) {
				var strType = "";
				if (TB3O.O[102] === "1" && villageInfo.type) {
					strType = villageTypes[villageInfo.type][ri] + "\u00D7";
				}
				aRow = $r([['class', 'tb3r']]);
				aCell = $td([['class', 'tb3c']]);
				if (strType) {
					aCell.appendChild($e("span", strType));
				}
				aCell.appendChild(I("r" + (ri + 1)));
				aRow.appendChild(aCell);
				aCell = $td([['class', 'lr']], $e("span"));
				aRow.appendChild(aCell);
				aCell = $td([['class', 'tb3cresbar']], uiCreateFillBar());
				aRow.appendChild(aCell);
				aCell = $td([['class', 'tb3ttf']]);
				aRow.appendChild(aCell);
				aCell = $td([['class', 'tb3ctot']], $ls(bShowAllTotals ? TB3O.ResInfoTotals.PpH[ri] : resourcesInfo.PpH[ri]));
				aRow.appendChild(aCell);
				rbT.appendChild(aRow);
			}
			tRow = $r([['class', 'tb3pph']]);
			tRow.appendChild($c(gIc["r1"] + " + " + gIc["r2"] + " + " + gIc["r3"] + " + " + gIc["r4"] + " / " + T('1H'), [['class', 'tb3c'], ['colspan', bShowAllTotals ? '3' : '4']]));
			tRow.appendChild($c($ls(intpph), [['class', bShowAllTotals ? 'tb3ctotv' : 'tb3ctot']]));
			if (bShowAllTotals) {
				tRow.appendChild($c($ls(intPPH), [['class', 'tb3ctot']]));
			}
			rbT.appendChild(tRow);
			bRow = $r([['class', 'tb3r']]);
			bRow.appendChild($c(gIc["r5"], [['class', 'tb3c'], ['colspan', '2']]));
			bRow.appendChild($c("", [['class', 'tb3c'], ['colspan', bShowAllTotals ? '1' : '2']]));
			bRow.appendChild($c($ls(resourcesInfo.PpH[3] - resourcesInfo.EPpH[3]), [['class', bShowAllTotals ? 'tb3ctotv' : 'tb3ctot']]));
			if (bShowAllTotals) {
				bRow.appendChild($c($ls(TB3O.ResInfoTotals.PpH[3] - TB3O.ResInfoTotals.EPpH[3]), [['class', 'tb3ctot']]));
			}
			rbT.appendChild(bRow);
			cRow = $r([['class', 'tb3r']]);
			cRow.appendChild($c(gIc["r4"] + " - " + gIc["r5"], [['class', 'tb3c'], ['colspan', '2']]));
			cRow.appendChild($c("", [['class', 'tb3c'], ['colspan', bShowAllTotals ? '1' : '2']]));
			cRow.appendChild($c($ls(resourcesInfo.EPpH[3]), [['class', bShowAllTotals ? 'tb3ctotv' : 'tb3ctot']]));
			if (bShowAllTotals) {
				cRow.appendChild($c($ls(TB3O.ResInfoTotals.EPpH[3]), [['class', 'tb3ctot']]));
			}
			rbT.appendChild(cRow);
			fillResBarTable(rbT, villageId);
		}
		return rbT;
	}
	function fillResBarTable(rbT, villageId) {
		var aRows,
		aCells;
		var ri;
		var resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r, false);
		aRows = rbT.rows;
		for (ri = 0; ri < 4; ++ri) {
			aCells = aRows[ri + 1].cells;
			uiSetFillPercent(aCells[1].firstChild, resourcesInfo, ri);
			uiSetFillBar(aCells[2].firstChild, resourcesInfo, ri);
			uiSetTimeToFill(aCells[3], resourcesInfo, ri);
		}
	}
	function updateResBarTable(tableId, villageId) {
		var rbT = $g(tableId);
		if (rbT) {
			fillResBarTable(rbT, villageId);
		}
	}
	function setDefaultStatisticsMenu() {
		var statMenu = {
			1 : ["Players", ""],
			2 : ["Villages", ""],
			4 : ["Alliances", ""],
		};
		setGMcookieV2('statistics', statMenu);
	}
	function uiCreateSearchBarWidget() {
		if (TB3O.O[32] === "1") {
			var sbc = getGMcookieV2('statistics');
			if (sbc && sbc[1]) {
				var aForm = uiCreateSearchForm(sbc);
				if (aForm) { {
						var xy = TB3O.O[79].split("|");
						$df(300, xy[0], xy[1], "?", "searchbar", "searchbarTT", true, aForm);
						if (TB3O.O[74] !== "1") {
							aForm.style.display = 'none';
						}
					}
				}
			}
		}
	}
	function uiCreateSearchForm(sbc) {
		var aSF = $e("form", [['id', 'searchform'], ['action', 'statistiken.php?id=' + TB3O.O[83]], ['method', 'POST']]);
		var i1 = $e("input", [['id', 'searchopt'], ['type', 'hidden'], ['value', TB3O.O[83]]]);
		var i2 = $e("input", [['type', 'text'], ['maxlength', '20'], ['size', '10'], ['value', '']]);
		var i3 = $e("input", [['type', 'submit'], ['name', 'submit'], ['value', '?']]);
		i2.name = 'name';
		i2.className = 'text name';
		var s1 = $e("select", [['id', 'searchtype']]);
		addOption(s1, sbc, 1);
		addOption(s1, sbc, 2);
		addOption(s1, sbc, 4);
		addOption(s1, sbc, 31);
		addOption(s1, sbc, 32); {
			addOption(s1, sbc, 8);
		}
		s1.addEventListener('change', setSearchBarOption, false);
		aSF.appendChild(i1);
		aSF.appendChild(i2);
		aSF.appendChild(s1);
		aSF.appendChild(i3);
		return aSF;
		function addOption(sel, sbc, id) {
			if (sbc[id]) {
				sel.add(new Option(sbc[id][0], id, false, (id === parseInt10(TB3O.O[83]))), null);
			}
		}
		function setSearchBarOption() {
			var searchType = $g("searchtype").value;
			TB3O.O[83] = '' + searchType;
			saveTBOptions();
			var i1 = $g("searchopt");
			if (i1)
				i1.value = searchType;
			var aSF = $g("searchform");
			if (aSF) {
				aSF.action = 'statistiken.php?id=' + searchType;
			}
		}
	}
	function uiSetCenterNumberState(aLvlNode, nState, bAlreadyBuilt) {
		var stateClasses = ["tbNoRes", "tbUpg", "tbNPCUpg", "tbNoCap", "tbMax", "tbUpgNow"];
		var sClass = stateClasses[nState];
		delClass(aLvlNode, stateClasses);
		if (bAlreadyBuilt) {
			if (!TB3O.ServerInfo.features.hasOwnProperty("show_under_construction")) {
				TB3O.ServerInfo.features.show_under_construction = (aLvlNode.parentNode.getElementsByClassName("underConstruction").length > 0);
			}
			if (!TB3O.ServerInfo.features.show_under_construction) {
				sClass += " tbUpgNow";
			}
		}
		aLvlNode.className += " " + sClass;
	}
	function uiCreateDorf1CenterNumbers(arrBA) {
		if (TB3O.O[38] === "1") {
			var villageMap = $g("village_map");
			if (villageMap) {
				var i,
				id;
				var lvlNodesList = villageMap.getElementsByClassName("level");
				for (i = 0, id = 0; i < lvlNodesList.length; ++i) {
					var crtLevel = parseInt10(lvlNodesList.item(i).textContent);
					if (!isFinite(crtLevel)) {
						crtLevel = 0;
					}
					do {
						++id;
					} while (crtLevel != TB3O.ActiveVillageInfo.b[id][1] && id < 18);
					uiSetCenterNumberState(lvlNodesList.item(i), arrBA[id][0], false);
				}
			}
		}
	}
	function uiCreateDorf1AttDefInfoSign() {
		var aContainer = null;
		var tTable = $g("troops");
		if (tTable) {
			aContainer = tTable.firstElementChild.firstElementChild.firstElementChild;
		}
		uiAddAttDefInfoSign(tTable, aContainer, true);
	}
	function getCommonDorf1Info(villageId, aDoc, ttServer) {
		var bSuccess = setTroopMovements(villageId, aDoc, ttServer) && setBiP(villageId, aDoc, ttServer);
		var villageInfo = TB3O.VillagesInfo[villageId];
		if (!villageInfo.type) {
			villageInfo.type = getVillageType(aDoc);
		}
		bSuccess = bSuccess && !!villageInfo.type;
		return bSuccess;
		function getVillageType(aDoc) {
			var rDiv = $xf("//div[starts-with(@id,'village_map')]", 'f', aDoc, aDoc);
			var vType;
			if (rDiv) {
				if (rDiv.className) {
					rDiv.className.search(/f(\d+)/);
					vType = parseInt10(RegExp.$1);
				}
			} else {
				rDiv = $xf("//div[starts-with(@id,'f')]", 'f', aDoc, aDoc);
				if (rDiv) {
					rDiv.id.search(/f(\d+)/);
					vType = parseInt10(RegExp.$1);
				}
			}
			vType = (isFinite(vType) && vType > 0 && vType <= 12) ? vType : undefined;
			return vType;
		}
	}
	function processDorf1() {
		TB3O.pageSelector = "dorf1";
		getCommonDorf1Info(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
		var villageInfo = TB3O.ActiveVillageInfo;
		if (villageInfo.type) {
			getOuterBuildings(document, TB3O.ActiveVillageInfo.b, villageInfo.type);
		}
	}
	function uiCreateResUpgradeTable(tableId, villageId, resourcesInfo, arrBA) {
		var id,
		gid,
		crtLevel;
		var i,
		j,
		xi;
		var grid = new Array(4);
		for (i = 0; i < 4; i++) {
			grid[i] = new Array(26);
			for (j = 0; j <= 25; j++) {
				grid[i][j] = 0;
			}
		}
		var b = TB3O.VillagesInfo[villageId].b;
		for (id = 1; id <= 18; id++) {
			gid = b[id][0];
			crtLevel = b[id][1];
			grid[gid - 1][crtLevel] = id;
		}
		var bsUT = false;
		var nE = [0, 0, 0, 0];
		var nR = 0;
		var aTb = $t([['id', tableId], ['class', 'tbUpgTable']]);
		var aRow1 = $r();
		aTb.appendChild(aRow1);
		for (i = 0; i < 4; i++) {
			gid = i + 1;
			var td1 = $c(gIc["r" + (i + 1)], [['class', 'tb3uthc']]);
			aRow1.appendChild(td1);
			for (j = 0; j < 25; j++) {
				id = grid[i][j];
				if (id > 0 && arrBA[id][0] !== 4) {
					nE[i] += 1;
					if (nR < nE[i]) {
						++nR;
						var bRow = $r();
						for (xi = 0; xi < 4; xi++) {
							bRow.appendChild($c("", [['class', 'tb3utbc']]));
						}
						aTb.appendChild(bRow);
					}
					bsUT = true;
					var tb2 = $t();
					aTb.rows[nE[i]].cells[i].appendChild(tb2);
					var aRow3 = $r();
					addChildren(aRow3, [$e("td", [], $e("a", [['href', "build.php?id=" + id]], $e("div", [['class', 'tbImgCnt']], [$img([['src', image["upgr" + i]], ['title', T('RES' + gid)]]), uiCreateCNDiv(j, arrBA[id][0], false)]))), $e("td", [], uiCreateBuildingResAndTimeTable(arrBA, resourcesInfo, gid, id, j))]);
					tb2.appendChild(aRow3);
				}
			}
		}
		return bsUT ? aTb : null;
	}
	function uiCreateResUpgradeWidget(resourcesInfo, arrBA) {
		if (TB3O.O[37] === '1') {
			var oldtb = $g('tb_resupg');
			removeElement(oldtb);
			if (oldtb) {
				uiFloatWindow_Remove('resupgTT');
			}
			var tb = uiCreateResUpgradeTable('tb_resupg', TB3O.ActiveVillageId, resourcesInfo, arrBA);
			if (tb) {
				var dxy = TB3O.O[88].split("|");
				$df(682, dxy[0], dxy[1], " ", 'resupg', "resupgTT", false, tb);
			}
		}
	}
	function uiRefreshDorf1() {
		var arrBA = new Array(19);
		var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, false);
		var refreshTimeout = getBuildingsAvailability(arrBA, 1, 18, TB3O.ActiveVillageId, TB3O.ActiveVillageInfo.b, resourcesInfo);
		uiCreateDorf1CenterNumbers(arrBA);
		uiCreateResUpgradeWidget(resourcesInfo, arrBA);
		if (isFinite(refreshTimeout)) {
			setTimeout(uiRefreshDorf1, refreshTimeout * 1000);
		}
	}
	function uiModifyDorf1() {
		if (TB3O.O[38] === "1" || TB3O.O[37] === '1') {
			uiRefreshDorf1();
		}
		uiCreateDorf1AttDefInfoSign();
	}
	function uiCreateDorf2CenterNumbers(arrBA) {
		if (TB3O.O[43] === "1" && TB3O.O[44] === "1") {
			var aLevelsContainer = $g("levels");
			if (aLevelsContainer) {
				addClass(aLevelsContainer, "on");
				if (TB3O.O[44] === "1") {
					var lvlNodesList = aLevelsContainer.getElementsByTagName("div");
					var reId = /aid(\d+)/;
					for (var i = 0; i < lvlNodesList.length; ++i) {
						var aLvlNode = lvlNodesList.item(i);
						var id;
						if (reId.exec(aLvlNode.className)) {
							id = parseInt10(RegExp.$1);
						} else if (hasClass(aLvlNode, "ww")) {
							id = 26;
						}
						if (isIntValid(id)) {
							var bInfo = TB3O.BuildingsInfo.getInfoById(id);
							if (arrBA[id]) {
								uiSetCenterNumberState(aLvlNode, arrBA[id][0], bInfo.uplvl > bInfo.lvl);
							}
						}
					}
				}
			}
		}
	}
	function processDorf2() {
		TB3O.pageSelector = "dorf2";
		setBiP(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
		TB3O.BuildingsInfo = new BuildingsInfo();
		getInnerBuildings(document, TB3O.BuildingsInfo);
		TB3O.BuildingsInfo.syncWithBiP(TB3O.ActiveVillageInfo.BiP);
		TB3O.BuildingsInfo.exportB(TB3O.ActiveVillageInfo.b, false);
		var id,
		gid,
		crtLevel,
		b = TB3O.ActiveVillageInfo.b;
		for (id = 19; id < b.length; ++id) {
			if (b[id]) {
				gid = b[id][0];
				crtLevel = b[id][1];
				switch (gid) {
				case 25:
					TB3O.d2spB[0] = 25;
					break;
				case 26:
					TB3O.d2spB[0] = 26;
					break;
				case 19:
					TB3O.d2spB[1] = 19;
					if (TB3O.U[1] === '') {
						getRaceFromBarracks();
					}
					break;
				case 29:
					TB3O.d2spB[2] = 29;
					break;
				case 21:
					TB3O.d2spB[3] = 21;
					break;
				case 20:
					TB3O.d2spB[4] = 20;
					break;
				case 30:
					TB3O.d2spB[5] = 30;
					break;
				case 14:
					TB3O.d2spB[6] = crtLevel;
					break;
				case 24:
					TB3O.d2spB[7] = 24;
					break;
				case 41:
					TB3O.d2spB[8] = crtLevel;
					break;
				}
			}
		}
		setGMcookieV2('specBuildings', TB3O.d2spB, TB3O.ActiveVillageId);
	}
	function uiCreateBldUpgradeTable(tableId, villageId, resourcesInfo, arrBA, buildingsInfo) {
		var i;
		var intCpR = 3;
		var bsUT = false;
		var aTb = $t([['id', tableId], ['class', 'tbUpgTable']]);
		var iFilledCellsCount = 0;
		var tb2,
		aRow,
		aCell;
		for (i = 0; i < buildingsInfo._.length; ++i) {
			var bInfo = TB3O.BuildingsInfo._[i];
			var id = bInfo.id;
			var gid = bInfo.gid;
			var crtLevel = bInfo.uplvl;
			if (gid > 0 && crtLevel >= 0 && arrBA[id][0] !== 4) {
				var strNewLevel = (crtLevel === bInfo.lvl) ? "" : " (\u2191 " + (crtLevel + 1) + ")";
				if ((iFilledCellsCount % intCpR) === 0) {
					aRow = $r();
					aTb.appendChild(aRow);
				}
				iFilledCellsCount++;
				bsUT = true;
				aCell = $c("", [['class', 'tb3utbc'], ['style', 'width:' + Math.floor(100 / intCpR) + '%;']]);
				aRow.appendChild(aCell);
				tb2 = $t();
				aCell.appendChild(tb2);
				var href = "build.php?id=" + id;
				addChildren(tb2, [$e("tr", [], $e("td", [['colspan', "2"], ['class', 'center']], $a(bInfo.title + strNewLevel, [['href', href]]))), $e("tr", [], [$e("td", [], $e("a", [['href', href]], $img([['class', bInfo.imgClass], ['src', bInfo.imgSrc], ['title', bInfo.name]]))), $e("td", [], uiCreateBuildingResAndTimeTable(arrBA, resourcesInfo, gid, id, crtLevel))])])
			}
		}
		if (bsUT) {
			while ((iFilledCellsCount % intCpR) !== 0) {
				aRow.appendChild($c());
				iFilledCellsCount++;
			}
		}
		return bsUT ? aTb : null;
	}
	function uiCreateBldUpgradeWidget(resourcesInfo, arrBA) {
		if (TB3O.O[41] === '1') {
			var oldtb = $g('tb_bldupg');
			removeElement(oldtb);
			if (oldtb) {
				uiFloatWindow_Remove('bupgTT');
			}
			var tb = uiCreateBldUpgradeTable('tb_bldupg', TB3O.ActiveVillageId, resourcesInfo, arrBA, TB3O.BuildingsInfo);
			if (tb) {
				var dxy = TB3O.O[89].split("|");
				$df(682, dxy[0], dxy[1], " ", 'bupg', "bupgTT", false, tb);
			}
		}
	}
	function uiRefreshDorf2() {
		var arrB = new Array(41);
		var arrBA = new Array(41);
		var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, false);
		TB3O.BuildingsInfo.exportB(arrB, true);
		var refreshTimeout = getBuildingsAvailability(arrBA, 19, 40, TB3O.ActiveVillageId, arrB, resourcesInfo);
		uiCreateDorf2CenterNumbers(arrBA);
		uiCreateBldUpgradeWidget(resourcesInfo, arrBA);
		if (isFinite(refreshTimeout)) {
			setTimeout(uiRefreshDorf2, refreshTimeout * 1000);
		}
	}
	function uiModifyDorf2() {
		if (TB3O.O[43] === "1" || TB3O.O[41] === '1') {
			if (TB3O.O[42] === '1') {
				TB3O.BuildingsInfo.sortByName();
			}
			uiRefreshDorf2();
		}
	}
	function Overview(aDoc) {
		this.origT = $xf("//div[@id='" + ID_CONTENT + "']//table[@id='overview' or @id='ressources' or @id='warehouse' or @id='culture_points' or @id='troops' or @class='vil_troops']", 'f', aDoc, aDoc);
		this.secRowText = [];
		this.plAc = false;
		this.menu = searchAndParseSubMenu(aDoc);
		if (this.menu) {
			this.plAc = (this.menu.countLockedItems() === 0 && this.menu.countLinks() > 1);
		}
		if (this.origT) {
			this.secRowText = getHeaders(this.origT);
			if (this.secRowText.length === 0) {
				this.origT = null;
			}
		}
		function getHeaders(tbl) {
			var i;
			var origSecRow = tbl.rows[0].cells;
			var arrSecRow = [];
			for (i = 0; i < origSecRow.length; i++) {
				arrSecRow[i] = origSecRow[i].textContent;
			}
			return arrSecRow;
		}
	}
	Overview.prototype.getTableTitle = function (tabNo) {
		return null;
	};
	Overview.prototype.getMerchantCol = function (tabNo) {
		var mi = 0;
		if (this.origT) {
			switch (this.origT.id) {
			case "overview":
				mi = 4;
				break;
			case "ressources":
				mi = 5;
				break;
			}
		}
		return mi;
	};
	Overview.prototype.setActiveTab = function (tabNo) {
		this.menu.active = tabNo - 1;
		this.menu.uiModify();
	};
	function uiModifyDorf3_TabsHeader(activeTabNo) {
		if (!TB3O.Overview.plAc) {
			var menu = TB3O.Overview.menu;
			if (menu) {
				var i;
				for (i = 0; i < menu.items.length; ++i) {
					var mitem = menu.items[i];
					mitem[1] = jsVoid;
					var node = menu.getItemNode(i);
					if (node) {
						if (TB3O.ServerInfo.version > 4.0) {
							node.title = "";
							var aLink = $nth_tag(node, "a");
							var newLink = aLink.cloneNode(true);
							replaceElement(aLink, newLink);
						}
						node.addEventListener("click", bind(uiSwitchDorf3Tab, [i + 1]), false);
					}
					mitem[2] = 0;
				}
				menu.active = activeTabNo - 1;
				menu.uiModify();
			}
		}
	}
	Overview.prototype.getMerchantsInfo = function (tabNo) {
		var i;
		var vRows,
		vCells,
		vCount,
		villageId;
		var merchantsInfo = {};
		if (this.origT) {
			var mi = this.getMerchantCol(tabNo);
			if (mi) {
				vRows = this.origT.tBodies[0].rows;
				vCount = vRows.length;
				for (i = 0; i < vCount; ++i) {
					vCells = vRows[i].cells;
					villageId = getNewdidFromChild(vCells[0]);
					if (villageId) {
						var vmInfo = {};
						vmInfo.link = vCells[mi].innerHTML;
						var merchants = vCells[mi].textContent.split("/");
						vmInfo.mAvail = parseInt10(merchants[0]);
						vmInfo.mTotal = parseInt10(merchants[1]);
						merchantsInfo[villageId] = vmInfo;
					}
				}
			}
		}
		return merchantsInfo;
	};
	function processDorf3_Tab1(origT) {}
	function processDorf3_Tab2(origT) {
		var vRows,
		vCells,
		vCount;
		var i,
		j,
		villageId,
		resourcesInfo;
		var v;
		var reSep = /[., ]/g;
		vRows = origT.tBodies[0].rows;
		vCount = vRows.length;
		for (i = 0; i < vCount; ++i) {
			vCells = vRows[i].cells;
			villageId = getNewdidFromChild(vCells[0]);
			if (villageId) {
				resourcesInfo = TB3O.VillagesInfo[villageId].r;
				for (j = 0; j < 4; ++j) {
					v = parseInt10(vCells[j + 1].textContent.replace(reSep, ""));
					resourcesInfo.Res[j] = v;
					if (v > resourcesInfo.Cap[j]) {
						resourcesInfo.Cap[j] = v;
					}
				}
				resourcesInfo.dUpd = new Date(TB3O.serverTime.getTime());
			}
		}
	}
	function processDorf3_Tab3(origT) {
		var vRows,
		vCells,
		vCount,
		el;
		var i,
		yi,
		j,
		villageId,
		resourcesInfo;
		var v,
		r;
		var ttFillG,
		ttFillGest,
		EPpH;
		vRows = origT.tBodies[0].rows;
		vCount = vRows.length;
		for (i = 0; i < vCount; ++i) {
			vCells = vRows[i].cells;
			villageId = getNewdidFromChild(vCells[0]);
			if (villageId) {
				resourcesInfo = TB3O.VillagesInfo[villageId].r;
				for (yi = 1; yi <= 5; ++yi) {
					if (yi === 4) {
						continue;
					}
					j = yi - 1;
					if (j === 4) {
						j = 3;
					}
					v = vCells[yi].getAttribute("title");
					if (v) {
						r = v.split("/");
						if (r.length === 2) {
							resourcesInfo.Res[j] = parseInt10(r[0]);
							resourcesInfo.Cap[j] = parseInt10(r[1]);
							resourcesInfo.dUpd = new Date(TB3O.serverTime.getTime());
						}
					}
				}
				ttFillG = toSeconds(vCells[6].textContent);
				if (isNaN(ttFillG)) {
					resourcesInfo.EPpH[3] = 0;
				} else {
					ttFillGest = getSecondsToFill(resourcesInfo, 3);
					if (Math.abs(ttFillGest - ttFillG) > 1) {
						el = vCells[6].firstChild;
						if (hasClass(el, "crit")) {
							EPpH = -Math.floor((resourcesInfo.Res[3] / ttFillG) * 3600);
						} else {
							EPpH = Math.floor(((resourcesInfo.Cap[3] - resourcesInfo.Res[3]) / ttFillG) * 3600);
						}
						resourcesInfo.EPpH[3] = EPpH;
					}
				}
			}
		}
	}
	function processDorf3_Tab4(origT) {
		var vRows,
		vCells,
		vCount;
		var i,
		villageId,
		cpInfo;
		var cp;
		var ttServer = toTimeStamp(TB3O.serverTime);
		vRows = origT.tBodies[0].rows;
		vCount = vRows.length;
		for (i = 0; i < vCount; ++i) {
			vCells = vRows[i].cells;
			villageId = getNewdidFromChild(vCells[0]);
			if (villageId) {
				cp = parseInt10(vCells[1].textContent);
				if (isIntValid(cp)) {
					cpInfo = TB3O.VillagesInfo[villageId].cpi;
					cpInfo.cp = cp;
					cpInfo.ttUpd = ttServer;
				}
			}
		}
	}
	function processDorf3_Tab5(origT) {
		var vRows,
		vCells,
		vCount;
		var i,
		j,
		villageId,
		unitCountInfo,
		unitsTotal;
		var ttServer = toTimeStamp(TB3O.serverTime);
		vRows = origT.tBodies[0].rows;
		vCount = vRows.length;
		for (i = 0; i < vCount; ++i) {
			vCells = vRows[i].cells;
			villageId = getNewdidFromChild(vCells[0]);
			if (villageId) {
				unitsTotal = fillArray(new Array(11), 0);
				unitCountInfo = TB3O.VillagesInfo[villageId].uci;
				for (j = 1; j < vCells.length; ++j) {
					v = parseInt10(vCells[j].textContent);
					if (isIntValid(v)) {
						unitsTotal[j - 1] = v;
					}
				}
				unitCountInfo.ut = unitsTotal;
				unitCountInfo.ttUpd = ttServer;
			}
		}
	}
	function getDefaultDorf3Tab() {
		var defaultTab = TB3O.O[93];
		if (defaultTab > 6) {
			defaultTab = 1;
		}
		return defaultTab;
	}
	function getDorf3Url(url, tabNo) {
		if (tabNo > 1) {
			url = url + "?s=" + tabNo;
		} else if (tabNo === 1 && TB3O.ServerInfo.features.new_link_style) {
			url = url + "?s=0";
		}
		return url;
	}
	function modifyDorf3Url(url) {
		return getDorf3Url(url, getDefaultDorf3Tab());
	}
	function processDorf3() {
		TB3O.Overview = new Overview(document);
		var tabNo = 1;
		TB3O.pageSelector = "dorf3";
		if (crtUrl.queryKey.s) {
			tabNo = parseInt10(crtUrl.queryKey.s, 1);
			if (tabNo === 0) {
				tabNo = 1;
			}
		} else {
			tabNo = TB3O.Overview.menu.active + 1;
		}
		TB3O.O[93] = tabNo;
		saveTBOptions();
		if (TB3O.Overview.origT) {
			if (tabNo <= 2) {
				TB3O.MerchantsInfo = TB3O.Overview.getMerchantsInfo(tabNo);
			}
			if (TB3O.Overview.plAc && tabNo <= 5) {
				[processDorf3_Tab1, processDorf3_Tab2, processDorf3_Tab3, processDorf3_Tab4, processDorf3_Tab5][tabNo - 1](TB3O.Overview.origT);
			} else if (tabNo > 2) {
				TB3O.MerchantsInfo = TB3O.Overview.getMerchantsInfo(tabNo);
			}
		}
	}
	function uiModifyDorf3() {
		var origT = TB3O.Overview.origT;
		var tabNo = getDefaultDorf3Tab();
		uiModifyDorf3_TabsHeader(tabNo);
		if (origT) {
			prefferTB = !TB3O.Overview.plAc || tabNo === 2 || tabNo === 3 || tabNo === 5;
			if (prefferTB) {
				origT.style.display = "none";
				uiCreateDorf3Tab(origT.parentNode, origT, tabNo);
			} else {
				uiModifyVillagesOverview(origT);
			}
		}
	}
	function uiCreateDorf3Tab(parent, nextSibling, tabNo) {
		var createFunc = [createD3Tb_Tab1, createD3Tb_Tab2, createD3Tb_Tab3, createD3Tb_Tab4, createD3Tb_Tab5];
		var fillFunc = [fillD3Tb_Tab1, fillD3Tb_Tab2, fillD3Tb_Tab3, fillD3Tb_Tab4, fillD3Tb_Tab5];
		var aNewTb = null;
		if (tabNo >= 1 && tabNo <= 5) {
			aNewTb = createFunc[tabNo - 1]();
			if (aNewTb) {
				parent.insertBefore(aNewTb, nextSibling);
				fillFunc[tabNo - 1]();
			}
		}
		return aNewTb;
	}
	function uiSwitchDorf3Tab(tabNo) {
		var parent,
		next;
		var aNewTb;
		var aOldTb = $g("dorf3table");
		if (aOldTb) {
			TB3O.O[93] = tabNo;
			saveTBOptions();
			parent = aOldTb.parentNode;
			next = aOldTb.nextSibling;
			parent.removeChild(aOldTb);
			aNewTb = uiCreateDorf3Tab(parent, next, tabNo);
			if (tabNo === 5) {
				uiAddTroopInfoTooltips(aNewTb);
			}
			TB3O.Overview.setActiveTab(tabNo);
		}
	}
	function uiSwapTableRows(tbl, i, j, mapId2Index, mapIndex2Id) {
		var rowI = tbl.rows[i];
		var rowJ = tbl.rows[j];
		var IdI = mapIndex2Id[i];
		var IdJ = mapIndex2Id[j];
		var tmpPos;
		var rowTmp = rowI.parentNode.replaceChild(rowJ.cloneNode(true), rowI);
		rowJ.parentNode.replaceChild(rowTmp, rowJ);
		tmpPos = mapId2Index[IdJ];
		mapId2Index[IdJ] = mapId2Index[IdI];
		mapId2Index[IdI] = tmpPos;
		mapIndex2Id[j] = IdI;
		mapIndex2Id[i] = IdJ;
	}
	function uiModifyVillagesOverview(t) {
		var tbody,
		tr;
		var bAllowCustomization = (TB3O.O[91] === "1") && TB3O.VillagesList;
		var reqOrderIds,
		curOrderIds,
		mapId2Index = {};
		var i,
		pos,
		len;
		if (hasClass(t, "vil_troops"))
			return;
		if (bAllowCustomization) {
			reqOrderIds = getVillagesOrder(TB3O.VillagesInfo);
			curOrderIds = getVillagesOrder(TB3O.VillagesInfo, "original");
			len = curOrderIds.length;
			tbody = t.tBodies[0];
			for (var villageId in TB3O.VillagesInfo) {
				mapId2Index[villageId] = TB3O.VillagesInfo[villageId].posInListOrg;
			}
			for (pos = 0; pos < len; ++pos) {
				if (reqOrderIds[pos] !== curOrderIds[pos]) {
					uiSwapTableRows(tbody, pos, mapId2Index[reqOrderIds[pos]], mapId2Index, curOrderIds);
				}
			}
			for (i = 0; i < TB3O.VillagesCount; i++) {
				if (TB3O.VillagesList.getSeparatorState(i)) {
					tr = tbody.rows[i];
					addClass(tr, "tb3sep");
				}
			}
		}
	}
	function uiCreateMerchantsTooltip(villageId) {
		function uiCreateUniResCell(v) {
			return $td(['class', 'tbTotal'], [I("r0", [['class', 'tbPrefix']]), v.toString()])
		}
		var vmInfo = TB3O.MerchantsInfo[villageId];
		var mCap = TB3O.VillagesInfo[villageId].mCap;
		var aTb = $t(['id', 'tb_MITT'], [$r($td([['class', 'tbTitle'], ['colspan', '2']], [I("merchant", [['class', 'tbPrefix']]), "" + vmInfo.mAvail + "/" + vmInfo.mTotal])), $r(null, [$td(null, ["1\u00D7", I("merchant")]), uiCreateUniResCell(mCap)])]);
		if (vmInfo.mAvail > 1) {
			aTb.appendChild($r(null, [$td(null, [vmInfo.mAvail.toString() + "\u00D7", I("merchant")]), uiCreateUniResCell(vmInfo.mAvail * mCap)]));
		}
		if (vmInfo.mTotal > 1 && vmInfo.mTotal !== vmInfo.mAvail) {
			aTb.appendChild($r(null, [$td(null, [vmInfo.mTotal.toString() + "\u00D7", I("merchant")]), uiCreateUniResCell(vmInfo.mTotal * mCap)]));
		}
		return $div(['class', 'tbTip'], aTb);
	}
	function uiCreateTotalMerchantsTooltip() {
		var mCap;
		var caps = [];
		var stat = {};
		var i,
		villageId;
		for (villageId in TB3O.MerchantsInfo) {
			var vmInfo = TB3O.MerchantsInfo[villageId];
			mCap = TB3O.VillagesInfo[villageId].mCap;
			if (!stat[mCap]) {
				caps.push(mCap);
				stat[mCap] = {
					villages : 0,
					mAvail : 0,
					mTotal : 0
				};
			}
			stat[mCap].villages += 1;
			stat[mCap].mAvail += vmInfo.mAvail;
			stat[mCap].mTotal += vmInfo.mTotal;
		}
		caps.sort(compareNumbers);
		var aTb = $t(['id', 'tb_MITT'], $r(null, [$td(['class', 'tbTitle'], ["1\u00D7", I("merchant")]), $td(['class', 'tbTitle'], I("vmkls")), $td(['class', 'tbTitle'], I("merchant"))]));
		for (i = 0; i < caps.length; ++i) {
			mCap = caps[i];
			aTb.appendChild($r(null, [$td(null, [I("r0", [['class', 'tbPrefix']]), String(mCap)]), $td(['class', 'tbTotal'], String(stat[mCap].villages)), $td(['class', 'tbTotal'], "" + stat[mCap].mAvail + "/" + stat[mCap].mTotal)]));
		}
		return $div(['class', 'tbTip'], aTb);
	}
	function uiCreateUnitInfoTooltip(uix, unitCount) {
		var tip = null;
		if (unitCount) {
			tip = uiCreateTroopInfoTooltip(getTroopInfoFromUnitCount(TB3O.U[1], uix, unitCount), T("STAT"));
		}
		return tip;
	}
	function uiCreateUnitsTooltip(villageId, uix) {
		var tip = null;
		var unitsCountInfo = TB3O.VillagesInfo[villageId].uci;
		var unitCount = unitsCountInfo.ut[uix];
		if (unitsCountInfo.ttUpd && unitCount) {
			tip = uiCreateUnitInfoTooltip(uix, unitCount);
		}
		return tip;
	}
	function uiCreateTotalUnitsTooltip(uix) {
		var sumTT = getUnitsCountInfoTotals();
		var tip = uiCreateUnitInfoTooltip(uix, sumTT[uix]);
		return tip;
	}
	function uiCreateDorf3Tooltip(tabNo, villageId, col) {
		var content = null;
		if (villageId) {
			if ((tabNo === 2 && col >= 1 && col <= 5) || (tabNo === 3 && isSomeOf(col, 1, 2, 3, 5))) {
				content = uiCreateResourceTooltip(villageId);
			} else if (tabNo === 1 && col === 1) {
				content = uiCreateTMTable(villageId);
			} else if (tabNo === 1 && col === 2) {
				content = uiCreateBiPTable(villageId);
			} else if (tabNo === 1 && col === 3) {
				content = uiCreateTriPTable(villageId);
			} else if ((tabNo === 1 && col === 4) || (tabNo === 2 && col === 6)) {
				content = uiCreateMerchantsTooltip(villageId);
			} else if (tabNo === 5 && (col >= 1 && col < 11)) {
				content = uiCreateUnitsTooltip(villageId, col - 1);
			}
		} else {
			if ((tabNo === 2 && col === 6)) {
				content = uiCreateTotalMerchantsTooltip();
			} else if (tabNo === 5 && (col >= 1 && col < 11)) {
				content = uiCreateTotalUnitsTooltip(col - 1);
			}
		}
		return content;
	}
	function uiAddD3TbToolbar(parent, tabNo, bSepBefore) {
		if (bSepBefore) {
			parent.appendChild($span("&nbsp;&nbsp;"));
		}
		parent.appendChild(uiCreateTool("reload", T(TB3O.Overview.plAc ? 'REFRESHP' : 'UPDALLV'), bind(onRefreshAllVillages, [tabNo])));
		if (!bSepBefore) {
			parent.appendChild($span("&nbsp;&nbsp;"));
		}
	}
	function uiCreateD3TbVillageHeader(tabNo) {
		aCell = $td();
		if (!TB3O.Overview.getTableTitle(tabNo)) {
			uiAddD3TbToolbar(aCell, tabNo, false);
		}
		aCell.appendChild($txt(TB3O.Overview.secRowText[0]));
		return aCell;
	}
	function createD3TbSkeleton(tabNo, columns) {
		var aTb,
		aHead,
		aTh,
		aTr;
		var title = TB3O.Overview.getTableTitle(tabNo);
		aTb = $t([['id', 'dorf3table'], ['class', 'tb3d3_' + tabNo]]);
		aHead = $e("thead");
		aTb.appendChild(aHead);
		if (title) {
			aTr = $r();
			aHead.appendChild(aTr);
			aTh = $th([['colspan', columns]]);
			aTr.appendChild(aTh);
			aTh.appendChild($span(title));
			uiAddD3TbToolbar(aTh, tabNo, true);
		}
		aTb.appendChild($e("tbody"));
		return aTb;
	}
	function createD3TbRows(aTb, maxTD, tabNo) {
		var tr,
		td,
		td1,
		nobr,
		aLink;
		var i,
		yi;
		var mapPos2Id = getVillagesOrder(TB3O.VillagesInfo);
		var villageId,
		villageInfo;
		var tbody = aTb.tBodies[0];
		var bAllowCustomization = (TB3O.O[91] === "1") && TB3O.VillagesList;
		for (i = 0; i < mapPos2Id.length; i++) {
			villageId = mapPos2Id[i];
			villageInfo = TB3O.VillagesInfo[villageId];
			tr = $r();
			if (villageId == TB3O.ActiveVillageId) {
				tr.className = "hl";
			} else {
				tr.className = "hover";
			}
			if (bAllowCustomization) {
				if (TB3O.VillagesList.getSeparatorState(i)) {
					tr.className += " tb3sep";
				}
			}
			td1 = $td();
			td1.className = 'tb3name';
			nobr = $e("NOBR");
			if (!TB3O.Overview.plAc) {
				aLink = $action(null, I("b5", [['title', T('ACTUALIZAR') + " " + villageInfo.name], ['id', "aldea" + villageId + "_boton"], ['style', 'margin:0px;']]), bind(refreshVillageV2, [villageId, tabNo]));
				nobr.appendChild(aLink);
				nobr.appendChild($span("&nbsp;"));
			}
			aLink = $lnk([['href', 'dorf1.php?newdid=' + villageId]], villageInfo.name);
			nobr.appendChild($span(aLink));
			td1.appendChild(nobr);
			tr.appendChild(td1);
			for (yi = 0; yi < maxTD; yi++) {
				td = $td("-");
				td.id = "aldea" + villageId + "_" + tabNo + "_" + (yi + 2);
				if (yi === (maxTD - 1) && (tabNo === 1 || tabNo === 2)) {
					td.innerHTML = TB3O.MerchantsInfo[villageId].link;
					td.className = 'tbMerc';
				} else {
					td.className = 'tb3cnb';
				}
				uiAddTooltip(td, bind(uiCreateDorf3Tooltip, [tabNo, villageId, yi + 1]));
				tr.appendChild(td);
			}
			tbody.appendChild(tr);
		}
	}
	function createD3TbSeparator(aTb, maxTD) {
		var trSeparator = $r(['class', 'tb3r'], $td([['class', 'tb3rnb tbEmpty'], ['colspan', maxTD + 1]]));
		aTb.appendChild(trSeparator);
	}
	function createD3TbTotals(aTb, maxTD, tabNo) {
		var trSeparator,
		trSum,
		ts,
		ts1;
		var villageId;
		var totalMerchants = [0, 0];
		var yi,
		posX;
		createD3TbSeparator(aTb, maxTD);
		trSum = $r([['class', 'tb3r tbTotal']]);
		ts1 = $td([['class', 'tbTitle']], T('TOTAL'));
		trSum.appendChild(ts1);
		if (tabNo === 1 || tabNo === 2) {
			for (villageId in TB3O.MerchantsInfo) {
				totalMerchants[0] += TB3O.MerchantsInfo[villageId].mAvail;
				totalMerchants[1] += TB3O.MerchantsInfo[villageId].mTotal;
			}
		}
		for (yi = 0; yi < maxTD; yi++) {
			ts = null;
			if ((tabNo === 1 || tabNo === 2) && yi === maxTD - 1) {
				ts = $td([['class', 'tbMerc']], "" + totalMerchants[0] + "/" + totalMerchants[1]);
			} else if (tabNo === 4 && yi === 1) {
				ts = $td([['class', 'tb3cnb']]);
			} else {
				ts = $td([['class', 'tb3cnb']], "-");
			}
			if (ts) {
				ts.id = "aldea_s_" + tabNo + "_" + (yi + 2);
				uiAddTooltip(ts, bind(uiCreateDorf3Tooltip, [tabNo, null, yi + 1]));
				trSum.appendChild(ts);
			}
		}
		aTb.appendChild(trSum);
	}
	function onDorf3CheckOption(opt) {
		TB3O.O[opt] = this.checked ? "1" : "0";
		saveTBOptions();
	}
	function uiCreateDorf3Checkbox(opt) {
		var aCB;
		aCB = $i([['type', 'checkbox'], ['value', '1']]);
		aCB.checked = (TB3O.O[opt] === "1");
		aCB.addEventListener('click', bind(onDorf3CheckOption, [opt]), false);
		return aCB;
	}
	function createD3Tb_Tab1() {
		var aTb,
		trTop2,
		tdTop2,
		aCB,
		xi;
		aTb = createD3TbSkeleton(1, 5);
		trTop2 = $r();
		trTop2.appendChild(uiCreateD3TbVillageHeader(1));
		for (xi = 1; xi < TB3O.Overview.secRowText.length; xi++) {
			tdTop2 = $td(TB3O.Overview.secRowText[xi]);
			if (xi === 3) {
				tdTop2.appendChild(uiCreateDorf3Checkbox(94));
			}
			trTop2.appendChild(tdTop2);
		}
		aTb.firstChild.appendChild(trTop2);
		createD3TbRows(aTb, 4, 1);
		return aTb;
	}
	function createD3Tb_Tab2() {
		var aTb,
		trTop2,
		tdTop2,
		xi;
		TB3O.Tab2 = {};
		aTb = createD3TbSkeleton(2, 7);
		trTop2 = $r(uiCreateD3TbVillageHeader(2));
		for (xi = 1; xi < 7; xi++) {
			switch (xi) {
			case 1:
			case 2:
			case 3:
			case 4:
				tdTop2 = $td(I("r" + xi));
				break;
			case 5:
				tdTop2 = $td(null, [I("r4"), "/", I("clock")]);
				break;
			case 6:
				tdTop2 = $td(I("merchant", [['title', TB3O.Overview.secRowText[TB3O.Overview.getMerchantCol(2)]]]));
				break;
			}
			trTop2.appendChild(tdTop2);
		}
		aTb.firstChild.appendChild(trTop2);
		createD3TbRows(aTb, 6, 2);
		createD3TbTotals(aTb, 6, 2);
		return aTb;
	}
	function createD3Tb_Tab3() {
		var aTb,
		trTop2,
		tdTop2,
		img,
		xi;
		aTb = createD3TbSkeleton(3, 7);
		trTop2 = $r();
		trTop2.appendChild(uiCreateD3TbVillageHeader(3));
		for (xi = 1; xi < 7; xi++) {
			img = null;
			switch (xi) {
			case 1:
			case 2:
			case 3:
				img = I("r" + xi);
				break;
			case 5:
				img = I("r4");
				break;
			case 4:
			case 6:
				img = I("clock");
				break;
			}
			tdTop2 = $td(img);
			trTop2.appendChild(tdTop2);
		}
		aTb.firstChild.appendChild(trTop2);
		createD3TbRows(aTb, 6, 3);
		return aTb;
	}
	function createD3Tb_Tab4() {
		var aTb,
		trTop2,
		tdTop2,
		title,
		xi;
		TB3O.Tab4 = {
			cpCol : {},
			celebrationsCol : {},
			troopsCol : {},
			slotsCol : {}

		};
		aTb = createD3TbSkeleton(4, 5);
		trTop2 = $r();
		trTop2.appendChild(uiCreateD3TbVillageHeader(4));
		for (xi = 1; xi < 5; xi++) {
			title = '';
			switch (xi) {
			case 1:
				title = T('CPPERDAY');
				break;
			case 2:
				title = T('PARTY');
				break;
			case 3:
				title = T('TROPAS');
				break;
			case 4:
				title = T('SLOT');
				break;
			}
			tdTop2 = $td(title);
			if (xi > 0) {
				tdTop2.appendChild(uiCreateDorf3Checkbox(94 + xi));
			}
			trTop2.appendChild(tdTop2);
		}
		aTb.firstChild.appendChild(trTop2);
		createD3TbRows(aTb, 4, 4);
		createD3TbTotals(aTb, 4, 4);
		return aTb;
	}
	function createD3Tb_Tab5() {
		var aTb,
		trTop2,
		tdTop2,
		img,
		xi;
		aTb = createD3TbSkeleton(5, 11 + 1);
		trTop2 = $r(uiCreateD3TbVillageHeader(5));
		for (xi = 0; xi < 11 - 1; xi++) {
			img = getUnitImage(xi);
			if (img) {
				tdTop2 = $td(img);
			} else {
				tdTop2 = $td(["class", "c"], "-");
			}
			trTop2.appendChild(tdTop2);
		}
		trTop2.appendChild($td(I("hero")));
		aTb.firstChild.appendChild(trTop2);
		createD3TbRows(aTb, 11, 5);
		createD3TbTotals(aTb, 11, 5);
		return aTb;
	}
	function fillD3TbRow_Tab1(villageId) {
		var ttEnd,
		aCell;
		var xi,
		j;
		var villageInfo = TB3O.VillagesInfo[villageId];
		var ttCurrent = toTimeStamp(getServerTimeNow());
		var arrBiP = villageInfo.BiP;
		var arrTM = villageInfo.TM;
		aCell = $g("aldea" + villageId + "_1_2");
		removeChildren(aCell);
		xi = 0;
		for (j = 0; j < arrTM.length; j++) {
			var TMInfo = arrTM[j];
			ttEnd = TMInfo.fT;
			if (ttCurrent < ttEnd || ttEnd === null) {
				if (xi > 0) {
					aCell.appendChild($txt(" "));
				}
				aCell.appendChild($lnk([['href', "build.php?newdid=" + villageId + "&tt=1&id=39"], ['alt', TMInfo.no + ' - ' + formatTimeSpan((ttEnd === null) ? null : (ttEnd - ttCurrent) / 1000, 0)]], I(TMInfo.type)));
				++xi;
			}
		}
		if (xi === 0) {
			aCell.appendChild($txt("-"));
		}
		aCell = $g("aldea" + villageId + "_1_3");
		removeChildren(aCell);
		xi = 0;
		for (j = 0; j < arrBiP.length; j++) {
			var BiPInfo = arrBiP[j];
			ttEnd = BiPInfo.endTime;
			if (ttCurrent < ttEnd || ttEnd === null) {
				if (xi > 0) {
					aCell.appendChild($txt(" "));
				}
				aCell.appendChild(I("bau", [['alt', BiPInfo.name + " " + BiPInfo.txtLvl + " - " + formatTimeSpan((ttEnd - ttCurrent) / 1000, 0)]]));
				++xi;
			}
		}
		if (xi === 0) {
			aCell.appendChild($txt("-"));
		}
	}
	function fillD3TbRow_Tab1_Col4(villageId) {
		var i,
		j,
		k;
		var ttCurrent = toTimeStamp(getServerTimeNow());
		var stats = getTrainingInfoCollStats(TB3O.VillagesTrInfo.load(villageId), ttCurrent);
		var arrBuildingsUsage = stats.buildingsUsage;
		var arrTriP = [];
		for (i = 0; i < arrBuildingsUsage.length; ++i) {
			var buildingUsage = arrBuildingsUsage[i];
			var gid = buildingUsage[1];
			for (j = 0; j < buildingUsage[2].length; ++j) {
				var troopInfo = buildingUsage[2][j][0];
				for (k = 0; k < arrTriP.length; ++k) {
					if (arrTriP[k][0][0] === troopInfo[0]) {
						arrTriP[k][0][1] += troopInfo[1];
						if (gid < arrTriP[k][2]) {
							arrTriP[k][2] = gid;
						}
						break;
					}
				}
				if (k === arrTriP.length) {
					arrTriP.push([troopInfo, buildingUsage[2][j][1], gid]);
				}
			}
		}
		arrTriP.sort(function (item1, item2) {
			return compare(item1[0][0], item2[0][0]);
		});
		var aCell = $g("aldea" + villageId + "_1_4");
		removeChildren(aCell);
		for (j = 0; j < arrTriP.length; ++j) {
			var TriPInfo = arrTriP[j];
			if (j > 0) {
				aCell.appendChild($txt(" "));
			}
			aCell.appendChild($lnk([['href', "build.php?newdid=" + villageId + "&gid=" + TriPInfo[2]], ['alt', TriPInfo[0][1] + "\u00D7" + TriPInfo[1]]], getTroopImage(TriPInfo[0][0])));
		}
		if (arrTriP.length === 0) {
			aCell.appendChild($txt("-"));
		}
	}
	function fillD3TbRow_Tab2(villageId) {
		var resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r, true);
		var villageResKnown = (resourcesInfo.dUpd !== undefined);
		var aCell;
		var ri;
		if (villageResKnown) {
			TB3O.Tab2[villageId] = [];
		}
		for (ri = 0; ri < 4; ri++) {
			aCell = $g("aldea" + villageId + "_2_" + (ri + 2));
			if (villageResKnown) {
				var val = resourcesInfo.Res[ri];
				TB3O.Tab2[villageId][ri] = val;
				aCell.textContent = $ls(val);
				var fillPercent = getFillPercent(resourcesInfo, ri);
				aCell.style.backgroundColor = getBackColorForResourceBar(fillPercent, resourcesInfo.EPpH[ri]);
				aCell.style.color = getForeColorForResourceBar(fillPercent, resourcesInfo.EPpH[ri]);
			} else {
				aCell.textContent = "?";
			}
		}
		aCell = $g("aldea" + villageId + "_2_6");
		if (villageResKnown) {
			TB3O.Tab2[villageId][4] = resourcesInfo.EPpH[3];
			uiSetEffectiveCropPpH(aCell, resourcesInfo.EPpH[3], true);
		} else {
			aCell.textContent = "?";
		}
	}
	function fillD3TbTotals_Tab2() {
		var i,
		val,
		aCell,
		resTotal = [0, 0, 0, 0, 0];
		for (villageId in TB3O.Tab2) {
			for (i = 0; i < 5; i++) {
				resTotal[i] += TB3O.Tab2[villageId][i];
			}
		}
		for (i = 0; i < 5; i++) {
			aCell = $g("aldea_s_2_" + (i + 2));
			val = resTotal[i];
			if (i === 4) {
				uiSetEffectiveCropPpH(aCell, val, true)
			} else {
				aCell.textContent = $ls(val);
			}
			ifClass(aCell, Math.abs(val) > 99999999, "tbMany");
		}
	}
	function fillD3TbRow_Tab3(villageId) {
		var resourcesInfo;
		var ttFillW,
		ttTemp;
		var fillPercent;
		var ri,
		cellNo;
		var aCell;
		resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r, false);
		if (resourcesInfo.dUpd !== undefined) {
			ttFillW = Infinity;
			for (ri = 0; ri < 4; ri++) {
				cellNo = ri + 2;
				ttTemp = getSecondsToFill(resourcesInfo, ri);
				if (ri === 3) {
					cellNo = 6;
				} else {
					if (ttTemp < ttFillW) {
						ttFillW = ttTemp;
					}
				}
				aCell = $g("aldea" + villageId + "_3_" + cellNo);
				uiSetFillPercent(aCell, resourcesInfo, ri)
			}
			uiSetTimeout($g("aldea" + villageId + "_3_5"), ttFillW, 1, {
				format : 1
			});
			uiSetTimeToFill($g("aldea" + villageId + "_3_7"), resourcesInfo, 3, {
				format : 1
			});
		}
	}
	function fillD3TbRow_Tab4_Col2(villageId) {
		var aCell = $g("aldea" + villageId + "_4_2");
		var cp = getActualVillageCP(TB3O.VillagesInfo[villageId]);
		TB3O.Tab4.cpCol[villageId] = cp;
		aCell.textContent = cp;
	}
	function uiCreateCelebrationTooltip(villageId, cType) {
		var bIsNPCAvailable = getNPCAvailability(villageId);
		var resourcesInfo = getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r, false);
		var av = getAvailability(celCost[cType], resourcesInfo, bIsNPCAvailable);
		var title = (cType === 0) ? 'Small celebration' : 'Great celebration';
		var aTb = uiCreateResAndTimeTable(av, resourcesInfo, null, null, null, {
				top_title : true,
				NPC : bIsNPCAvailable,
				NPCLink : false
			});
		var aDiv = $div(['class', 'tbTip'], [$e("h4", ['class', 'tbTitle'], [title + " (" + celCost[cType][4][TB3O.nServerType], I("cp"), ")"]), aTb, $e("p", null, [TX('CELHINTS', 0), (av[0] === 1) ? [$e("br"), TX('CELHINTS', 1)] : null]), ]);
		return aDiv;
	}
	function onClickCelebrationBullet(villageId, cType, e) {
		var href = "build.php?newdid=" + villageId + "&gid=24";
		if (e.shiftKey) {
			var av = getAvailability(celCost[cType], getActualResourcesInfoNow(TB3O.VillagesInfo[villageId].r, false), false);
			if (av[0] === 1) {
				var aCell = $g("aldea" + villageId + "_4_3");
				removeChildren(aCell);
				addClass(aCell, 'tbWait');
				addChildren(aCell, I("wait"));
				ajaxLoadDocument(href + "&a=" + (cType + 1), bind2(generalAjaxRefreshHandler, [villageId, 4, refreshD3Tb_Celebrations]), bind(fillD3TbRow_Tab4_Col3, [villageId]));
			}
			e.preventDefault();
		} else {
			location.href = href;
		}
	}
	function fillD3TbRow_Tab4_Col3(villageId) {
		var aCell = $g("aldea" + villageId + "_4_3");
		var villageInfo = TB3O.VillagesInfo[villageId];
		var resourcesInfo = getActualResourcesInfoNow(villageInfo.r, false);
		var townHallInfo = villageInfo.thi;
		var bIsNPCAvailable = getNPCAvailability(villageId);
		var ttCurrent = toTimeStamp(getServerTimeNow());
		function uiAddCelebrationBullet(cType, title) {
			var av = getAvailability(celCost[cType], resourcesInfo, bIsNPCAvailable);
			var sClass = getCNClass(av[0]);
			var aLnk = $lnk([['href', jsVoid], ['click', bind2(onClickCelebrationBullet, [villageId, cType]), false]], $div(['class', 'tbBullet ' + sClass + ' ' + ['tbSmall', 'tbGreat'][cType]]));
			uiAddTooltip(aLnk, bind(uiCreateCelebrationTooltip, [villageId, cType]));
			aCell.appendChild(aLnk);
		}
		delClass(aCell, 'tbWait');
		reconcileEvents(townHallInfo.evA, ttCurrent);
		if (townHallInfo.ttUpd && townHallInfo.evA.length) {
			var ev = townHallInfo.evA[0];
			uiSetTimeSpanByDate(aCell, ttCurrent, ev.ttEnd, {
				format : 1
			});
			if (ev.name) {
				aCell.title = aCell.title + " (" + ev.name + ")";
			}
		} else {
			var b = villageInfo.b;
			var id = getBuildingIdByGid(villageInfo.b, 24);
			aCell.textContent = "-";
			if (id) {
				if (b[id][1] > 0) {
					removeChildren(aCell);
					uiAddCelebrationBullet(0);
				}
				if (b[id][1] >= 10) {
					uiAddCelebrationBullet(1);
				}
			}
		}
	}
	function fillD3TbRow_Tab4_Col4(villageId) {
		var xi,
		img;
		var aCell = $g("aldea" + villageId + "_4_4");
		var unitsCountInfo = TB3O.VillagesInfo[villageId].uci;
		var arrUT = unitsCountInfo.ut;
		if (!unitsCountInfo.ttUpd) {
			aCell.textContent = '?';
		} else {
			var bSep = false;
			removeChildren(aCell)
			img = getUnitImage(8);
			if (img) {
				for (xi = 0; xi < arrUT[8]; ++xi) {
					if (bSep) {
						aCell.appendChild($txt(" "));
					}
					aCell.appendChild(img.cloneNode(true));
					bSep = true;
				}
			}
			img = getUnitImage(9);
			if (img) {
				for (xi = 0; xi < arrUT[9]; ++xi) {
					if (bSep) {
						aCell.appendChild($txt(" "));
					}
					aCell.appendChild(img.cloneNode(true));
					bSep = true;
				}
			}
			if (!bSep) {
				aCell.textContent = '-';
			}
		}
	}
	function fillD3TbRow_Tab4(villageId) {
		fillD3TbRow_Tab4_Col2(villageId);
		fillD3TbRow_Tab4_Col3(villageId);
		fillD3TbRow_Tab4_Col4(villageId);
	}
	function fillD3TbTotals_Tab4_Col2() {
		var aCell = $g("aldea_s_4_2");
		var cpTotal = 0;
		var villageId;
		for (villageId in TB3O.Tab4.cpCol) {
			cpTotal += TB3O.Tab4.cpCol[villageId];
		}
		aCell.textContent = cpTotal;
	}
	function fillD3TbTotals_Tab4_Col4() {
		var aCell = $g("aldea_s_4_4");
		var sumUT = getUnitsCountInfoTotals();
		var bSep = false;
		removeChildren(aCell);
		if (sumUT[8]) {
			addChildren(aCell, [getUnitImage(8), " " + sumUT[8]]);
			bSep = true;
		}
		if (sumUT[9]) {
			if (bSep) {
				aCell.appendChild($txt(" / "));
			}
			addChildren(aCell, [getUnitImage(9), " " + sumUT[9]]);
			bSep = true;
		}
		if (!bSep) {
			aCell.textContent = '-';
		}
	}
	function fillD3TbTotals_Tab4() {
		fillD3TbTotals_Tab4_Col2();
		fillD3TbTotals_Tab4_Col4();
	}
	function fillD3TbRow_Tab5(villageId) {
		var unitsCountInfo = TB3O.VillagesInfo[villageId].uci;
		var arrTT = unitsCountInfo.ut;
		var i,
		aCell;
		for (i = 0; i < 11; ++i) {
			aCell = $g("aldea" + villageId + "_5_" + (i + 2));
			if (unitsCountInfo.ttUpd && arrTT[i]) {
				aCell.textContent = arrTT[i];
				delClass(aCell, "tb3none");
				if (arrTT[i] > 99999) {
					addClass(aCell, "tbMany");
				}
			} else {
				aCell.textContent = (unitsCountInfo.ttUpd) ? '-' : '?';
				addClass(aCell, "tb3none");
			}
		}
	}
	function fillD3TbTotals_Tab5() {
		var i,
		aCell;
		var sumTT = getUnitsCountInfoTotals();
		for (i = 0; i < 11; ++i) {
			aCell = $g("aldea_s_5_" + (i + 2));
			if (sumTT[i]) {
				aCell.textContent = sumTT[i];
				delClass(aCell, "tb3none");
				if (sumTT[i] > 99999) {
					addClass(aCell, "tbMany");
				}
			} else {
				aCell.textContent = "-";
				addClass(aCell, "tb3none");
			}
		}
	}
	function fillD3Tb_Tab1() {
		var villageId;
		for (villageId in TB3O.VillagesInfo) {
			fillD3TbRow_Tab1(villageId);
			fillD3TbRow_Tab1_Col4(villageId);
		}
	}
	function fillD3Tb_Tab2() {
		var villageId;
		for (villageId in TB3O.VillagesInfo) {
			fillD3TbRow_Tab2(villageId);
		}
		fillD3TbTotals_Tab2();
	}
	function fillD3Tb_Tab3() {
		var villageId;
		for (villageId in TB3O.VillagesInfo) {
			fillD3TbRow_Tab3(villageId);
		}
	}
	function fillD3Tb_Tab4() {
		var villageId;
		for (villageId in TB3O.VillagesInfo) {
			fillD3TbRow_Tab4(villageId);
		}
		fillD3TbTotals_Tab4();
	}
	function fillD3Tb_Tab5() {
		var villageId;
		for (villageId in TB3O.VillagesInfo) {
			fillD3TbRow_Tab5(villageId);
		}
		fillD3TbTotals_Tab5();
	}
	function saveVillagesInfoProxy() {
		setTimeout(function () {
			saveVillagesInfo(TB3O.VillagesInfo)
		}, 0);
	}
	function refreshSupplement(villageId) {
		if (TB3O.VillagesList) {
			TB3O.VillagesList.uiRefreshVillage(villageId);
		}
		if (TB3O.VillagesList2) {
			TB3O.VillagesList2.uiRefreshVillage(villageId);
		}
		if (villageId == TB3O.ActiveVillageId) {
			TB3O.ResInfoTotals = getResInfoTotals();
			uiUpdateResBarWidget();
		}
	}
	function generalAjaxRefreshHandler(villageId, tabNo, specific_handler, xhr_doc) {
		var ttServer = toTimeStamp(getServerTime(xhr_doc));
		var bSuccess = (ttServer && setVillageRes(villageId, xhr_doc, ttServer) && specific_handler(tabNo, villageId, xhr_doc, ttServer));
		if (bSuccess) {
			saveVillagesInfoProxy();
			refreshSupplement(villageId);
		}
		return bSuccess;
	}
	function sheduleVillageRefresh(villageId, tabNo, timeOut) {
		setTimeout(bind(refreshVillageV2, [villageId, tabNo]), timeOut);
		timeOut += getRndTime(999);
		return timeOut;
	}
	function onRefreshAllVillages(tabNo) {
		var i,
		randIds,
		villageId,
		aTimeOut = 0;
		if (TB3O.Overview.plAc) {
			window.location.reload(false);
		} else {
			randIds = getVillagesOrder(TB3O.VillagesInfo, "random");
			for (i = 0; i < randIds.length; i++) {
				villageId = randIds[i];
				updD3Bullets(villageId, 5);
				aTimeOut = sheduleVillageRefresh(villageId, tabNo, aTimeOut);
			}
		}
	}
	function onRefreshVillage(villageId, tabNo) {
		sheduleVillageRefresh(villageId, tabNo, 0);
	}
	function updD3Bullets(villageId, intVal) {
		var aE = $g('aldea' + villageId + '_boton');
		if (aE) {
			aE.className = "online" + intVal;
		}
	}
	function refreshVillageV2(villageId, tabNo) {
		updD3Bullets(villageId, 3);
		var villageInfo = TB3O.VillagesInfo[villageId];
		var fOnFailure = bind(updD3Bullets, [villageId, 4]);
		var baseBuildingUrl = "build.php?newdid=" + villageId;
		if (tabNo === 1) {
			ajaxLoadDocument("dorf1.php?newdid=" + villageId, gfOnSuccess(refreshD3Tb_Overview), fOnFailure);
			if (TB3O.O[94] === "1") {
				function tryRefreshTrainingBuilding(gid, q) {
					if (isBuildingPresent(villageId, gid)) {
						ajaxLoadDocument(baseBuildingUrl + "&gid=" + gid + ((q) ? q : ""), gfOnSuccess(refreshD3Tb_Training), fOnFailure);
					}
				}
				tryRefreshTrainingBuilding(19);
				tryRefreshTrainingBuilding(20);
				tryRefreshTrainingBuilding(21);
				tryRefreshTrainingBuilding(25, "&s=1");
				tryRefreshTrainingBuilding(26, "&s=1");
				tryRefreshTrainingBuilding(29);
				tryRefreshTrainingBuilding(30);
				tryRefreshTrainingBuilding(36);
			}
		} else if (tabNo === 2 || tabNo === 3) {
			ajaxLoadDocument("dorf1.php?newdid=" + villageId, gfOnSuccess(refreshD3Tb_Resources), fOnFailure);
		} else if (tabNo === 4) {
			var cpbuilding = 0;
			if (isBuildingPresent(villageId, 25)) {
				cpbuilding = 25;
			} else if (isBuildingPresent(villageId, 26)) {
				cpbuilding = 26;
			}
			if (cpbuilding) {
				var baseUrl = baseBuildingUrl + "&gid=" + cpbuilding;
				if (TB3O.O[94 + 1] === "1") {
					ajaxLoadDocument(baseUrl + "&s=2", gfOnSuccess(refreshD3Tb_CP), fOnFailure);
				}
				if (TB3O.O[94 + 4] === "1") {
					ajaxLoadDocument(baseUrl + "&s=4", gfOnSuccess(refreshD3Tb_Slots), fOnFailure);
				}
			} else {
				updD3Bullets(villageId, 5);
				villageInfo.cpi.ttUpd = undefined;
				saveVillagesInfo(TB3O.VillagesInfo);
				updateD3Tb_CP(tabNo, villageId)
				var aCell = $g("aldea" + villageId + "_4_5");
				aCell.textContent = "?/0";
				refreshSupplement(villageId);
			}
			if (TB3O.O[94 + 2] === "1") {
				if (isBuildingPresent(villageId, 24)) {
					ajaxLoadDocument(baseBuildingUrl + "&gid=24", gfOnSuccess(refreshD3Tb_Celebrations), fOnFailure);
				}
			}
			if (TB3O.O[94 + 3] === "1") {
				if (isBuildingPresent(villageId, 16)) {
					ajaxLoadDocument("build.php?newdid=" + villageId + "&tt=1&id=39" + "", gfOnSuccess(refreshD3Tb_Troops), fOnFailure);
				}
			}
		} else if (tabNo === 5) {
			if (isBuildingPresent(villageId, 16)) {
				ajaxLoadDocument("build.php?newdid=" + villageId + "&tt=1&id=39", bind2(onLoadRallyPoint, [villageId]), fOnFailure);
			}
		}
		return;
		function gfOnSuccess(handler) {
			return function (xhr_doc) {
				if (generalAjaxRefreshHandler(villageId, tabNo, handler, xhr_doc)) {
					updD3Bullets(villageId, 2);
				} else {
					updD3Bullets(villageId, 4);
				}
			}
		}
	}
	function getDorf1Info(villageId, aDoc, ttServer) {
		var bSuccess = getCommonDorf1Info(villageId, aDoc, ttServer);
		if (bSuccess) {
			TB3O.ResInfoTotals = getResInfoTotals();
		}
		return bSuccess;
	}
	function refreshD3Tb_Overview(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = getDorf1Info(villageId, xhr_doc, ttServer);
		if (bSuccess) {
			fillD3TbRow_Tab1(villageId);
		}
		return bSuccess;
	}
	function refreshD3Tb_Training(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = false;
		var buildNode = $g("build", xhr_doc);
		if (buildNode) {
			var gid = scanIntWithPrefix("gid", buildNode.className);
			bSuccess = getCommonBuildingInfo(gid, villageId, xhr_doc) && getTrainingInfo(gid, villageId, xhr_doc, ttServer);
			if (bSuccess) {
				fillD3TbRow_Tab1_Col4(villageId);
			}
		}
		return bSuccess;
	}
	function refreshD3Tb_Resources(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = getDorf1Info(villageId, xhr_doc, ttServer);
		if (bSuccess) {
			if (tabNo === 2) {
				fillD3TbRow_Tab2(villageId);
				fillD3TbTotals_Tab2();
			} else if (tabNo === 3) {
				fillD3TbRow_Tab3(villageId);
			}
		}
		return bSuccess;
	}
	function updateD3Tb_CP(tabNo, villageId) {
		fillD3TbRow_Tab4_Col2(villageId);
		fillD3TbTotals_Tab4_Col2();
	}
	function refreshD3Tb_CP(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = getCultureTabInfo(villageId, xhr_doc, ttServer);
		if (bSuccess) {
			updateD3Tb_CP(tabNo, villageId);
		}
		return bSuccess;
	}
	function refreshD3Tb_Celebrations(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = getTownHallInfo(villageId, xhr_doc, ttServer);
		if (bSuccess) {
			fillD3TbRow_Tab4_Col3(villageId);
		}
		return bSuccess;
	}
	function refreshD3Tb_Troops(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = !!getRallyPointInfo(villageId, xhr_doc, ttServer, true);
		if (bSuccess) {
			fillD3TbRow_Tab4_Col4(villageId);
			fillD3TbTotals_Tab4_Col4();
		}
		return bSuccess;
	}
	function refreshD3Tb_Slots(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = true;
		return bSuccess;
	}
	function refreshD3Tb_Tab5(tabNo, villageId, xhr_doc, ttServer) {
		var bSuccess = !!getRallyPointInfo(villageId, xhr_doc, ttServer, true);
		if (bSuccess) {
			fillD3TbRow_Tab5(villageId);
			fillD3TbTotals_Tab5();
		}
		return bSuccess;
	}
	function detectMarketPage() {
		var menu = searchAndParseSubMenu();
		if (menu) {
			var url = parseUri(menu.items[menu.active][1]);
			if (url.queryKey.hasOwnProperty("t")) {
				var t = url.queryKey.t
					TB3O.pageSelector = ifEqual(t, "0", "market_routes", "1", "market_buy", "2", "market_offer", "5", "market_send", "");
				if (TB3O.pageSelector === "market_routes" && isSomeOf(crtUrl.queryKey.option, "1", "2")) {
					TB3O.pageSelector += "_edit";
				}
				if (TB3O.pageSelector !== "") {
					TB3O.ServerInfo.features.new_market_style = true;
				}
			}
		}
		if (TB3O.pageSelector === "market_send") {
			if (!($xf("//form[@action='build.php' and @name='snd']") && $xf("//input[@type='Text']|//input[@type='text']", 'l').snapshotLength >= 5)) {
				TB3O.pageSelector = "";
			}
		} else if (TB3O.pageSelector === "market_offer") {
			if (!($xf("//form[@action='build.php' and contains(@class,'sell_resources')]") && $xf("//input[@type='hidden' and @name='t' and @value='2']"))) {
				TB3O.pageSelector = "";
			}
		}
		if (TB3O.pageSelector !== "") {
			if (!isIntValid(TB3O.ActiveVillageInfo.mCap)) {
				TB3O.ActiveVillageInfo.mCap = TB3O.DefaultMerchantsCapacity[TB3O.U[1]] * TB3O.nMerchantCapacityFactor[TB3O.nServerType];
			}
		}
		return TB3O.pageSelector !== "";
	}
	function searchMarketSendResTable() {
		return $g("send_select");
	}
	function searchMerchantsCountContainer() {
		return $xf("//div[contains(@class,'traderCount')]/div[contains(@class,'boxes-contents')]");
	}
	function searchMerchantsRepeatCount() {
		return $xf("//*[@name='x2']");
	}
	function searchMerchantsDestinationContainer() {
		return $xf("//div[contains(@class,'destination')]//div[contains(@class,'boxes-contents')]");
	}
	function getMerchantsUnderway(villageId, aDoc, ttServer, bReadOnly) {
		var merchantsUnderwayInfo = new MerchantsUnderwayInfo();
		if (!bReadOnly) {
			merchantsUnderwayInfo.nextid = 0;
		}
		var merchantGroups = $xf("//div[@id='build' and contains(@class,'gid17')]//h4", 'r');
		try {
			if (merchantGroups.snapshotLength !== 0) {
				var villageInfo = TB3O.VillagesInfo[villageId];
				var firstGroup = merchantGroups.snapshotItem(0);
				var firstGroupTitle = trimWhitespaces(firstGroup.textContent);
				if (merchantGroups.snapshotLength === 2) {
					getMerchantsUnderwayGroup(merchantsUnderwayInfo, villageInfo, aDoc, firstGroup, true, ttServer, bReadOnly);
					getMerchantsUnderwayGroup(merchantsUnderwayInfo, villageInfo, aDoc, merchantGroups.snapshotItem(1), false, ttServer, bReadOnly);
					persistence.saveValue(TB3O.lng, "mgroups", [firstGroupTitle, trimWhitespaces(merchantGroups.snapshotItem(1).textContent)]);
				} else {
					var bIncoming;
					var groupsTitles;
					if (TB3O.MerchantsInfo.mTotal && TB3O.MerchantsInfo.mAvail === TB3O.MerchantsInfo.mTotal) {
						bIncoming = true;
					} else {
						groupsTitles = persistence.loadValue(TB3O.lng, "mgroups");
						if (groupsTitles && groupsTitles instanceof Array && groupsTitles.length === 2) {
							if (firstGroupTitle === groupsTitles[0]) {
								bIncoming = true;
							} else if (firstGroupTitle === groupsTitles[1]) {
								bIncoming = false;
							} else if (groupsTitles[0] === null && groupsTitles[1] !== null) {
								bIncoming = true;
							} else if (groupsTitles[0] !== null && groupsTitles[1] === null) {
								bIncoming = false;
							} else {
								persistence.drop(TB3O.lng, "mgroups");
								groupsTitles = null;
							}
						} else {
							groupsTitles = null;
						}
					}
					getMerchantsUnderwayGroup(merchantsUnderwayInfo, villageInfo, aDoc, firstGroup, bIncoming, ttServer, bReadOnly);
					if (bIncoming === undefined) {
						if (merchantsUnderwayInfo.r.length > 0) {
							bIncoming = false;
						}
					}
					if (bIncoming === undefined) {
						merchantsUnderwayInfo = null;
					} else {
						if (!groupsTitles) {
							persistence.saveValue(TB3O.lng, "mgroups", (bIncoming) ? [firstGroupTitle, null] : [null, firstGroupTitle]);
						}
					}
				}
			}
			if (merchantsUnderwayInfo) {
				merchantsUnderwayInfo.ttUpd = ttServer;
			}
		} catch (e) {
			merchantsUnderwayInfo = null;
		}
		return merchantsUnderwayInfo;
	}
	function uiModifyMarketSendLayout(resTb, mercContainer) {
		if (TB3O.ServerInfo.features.new_market_style) {
			if (resTb.rows.length > 4) {
				resTb.rows[4].style.display = "none";
			}
			if (resTb.rows.length > 5) {
				resTb.rows[5].style.display = "none";
			}
		}
	}
	function searchMarketOfferMerchantsCountContainer() {
		return searchMerchantsCountContainer();
	}
	function searchMarketOfferFormItems() {
		var names = ["m1", "m2", "rid1", "rid2", "d1", "d2", "ally"];
		var items = {};
		var i;
		var forms = $xf("//form[@action='build.php' and contains(@class,'sell_resources')]", 'l');
		for (i = 0; i < forms.snapshotLength; i++) {
			var f = forms.snapshotItem(i);
			var style = window.getComputedStyle(f, null);
			if (style.display !== "none") {
				items.form = f;
				for (i = 0; i < names.length; i++) {
					items[names[i]] = $xf(".//*[@name='" + names[i] + "']", 'f', f);
				}
				items.button = $xf(".//button[@type='submit']", 'f', f);
				items.optable = $xf(".//*[@id='sell']/tbody", 'f', f);
			}
		}
		return items;
	}
	function uiModifyMarketOfferOverview() {}
	function MarketSendUIOptions() {
		this._ = this.load();
	}
	MarketSendUIOptions.prototype.load = function () {
		var uiOptions = loadPersistentUserObject("market_send")[TB3O.ActiveVillageId] || {};
		if (!uiOptions.usethemres || !(uiOptions.usethemres instanceof Array)) {
			uiOptions.usethemres = [true, true, true, true];
		}
		if (!uiOptions.showprogress || !(uiOptions.showprogress instanceof Array)) {
			uiOptions.showprogress = [false, false, false, false];
		}
		var ri;
		for (ri = 0; ri < 4; ri++) {
			if (typeof(uiOptions.usethemres[ri]) !== "boolean") {
				uiOptions.usethemres[ri] = true;
			}
			if (typeof(uiOptions.showprogress[ri]) !== "boolean") {
				uiOptions.showprogress[ri] = false;
			}
		}
		return uiOptions;
	}
	MarketSendUIOptions.prototype.save = function () {
		savePersistentUserObject("market_send", this._, TB3O.ActiveVillageId);
	}
	function SendResTable(resTb, uiOptions) {
		this.resTb = resTb;
		this.mCap = TB3O.ActiveVillageInfo.mCap;
		this.mAvail = 0;
		this.mUse = 0;
		this.maxTr = 0;
		this.rxI = [];
		this.uiOptions = uiOptions;
		this.aUTR = uiOptions._.usethemres;
		this.refreshTimer = new Timer;
		var ri;
		for (ri = 0; ri < 4; ri++) {
			this.rxI[ri] = $xf(".//input[@name='r" + (ri + 1) + "']");
		}
	}
	SendResTable.prototype.getCurrentTransports = function () {
		var ri;
		var rxVal = [0, 0, 0, 0];
		for (ri = 0; ri < 4; ++ri) {
			rxVal[ri] = parseInt10(this.rxI[ri].value, 0);
		}
		return rxVal;
	};
	SendResTable.prototype.getTotalTransportsAvailable = function (rxVal) {
		var totTr = 0;
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			if (!this.aUTR[ri]) {
				totTr += rxVal[ri];
			}
		}
		return this.maxTr - totTr;
	};
	SendResTable.prototype.getTotals = function () {
		var totTransport = totalResources(this.getCurrentTransports());
		var totMerchants = Math.ceil(totTransport / this.mCap);
		var crtWaste = this.mCap - (totTransport - (totMerchants - 1) * this.mCap);
		var crtExceed = totTransport - (this.mAvail * this.mCap);
		return {
			total : totTransport,
			waste : crtWaste,
			exceed : crtExceed,
			mNeed : totMerchants
		};
	};
	SendResTable.prototype.uiModifyState = function () {
		var totals = this.getTotals();
		var totTransport = totals.total;
		var totMerchants = totals.mNeed;
		var crtWaste = totals.waste;
		var crtExceed = totals.exceed;
		var mhText = gIc["merchant"] + "<b>" + " (" + T("MERCHANTS") + "): " +
			totMerchants + "/" + this.mUse;
		if (this.mUse !== this.mAvail) {
			mhText += " (" + this.mAvail + ")";
		}
		mhText += "<br>" + T('MAX') + ": " + this.mUse * this.mCap;
		if (this.mUse !== this.mAvail) {
			mhText += " (" + (this.mAvail * this.mCap) + ")";
		}
		mhText += "<br>";
		var mhColor;
		if (totMerchants > this.mAvail) {
			mhColor = "red";
			mhText += T('MTX') + ": " + crtExceed;
		} else {
			mhColor = (totTransport > this.maxTr || totMerchants > this.mUse) ? "orange" : "darkgreen";
			mhText += T('MTW') + ": " + crtWaste;
		}
		mhText += "<br>" + T('MTC') + ": " + totTransport + "</b>";
		setMerchantsCell(mhText, mhColor);
	}
	SendResTable.prototype.uiRefreshState = function () {
		var self = this;
		var timer = this.refreshTimer;
		function doRefreshState() {
			timer.cancel();
			self.uiModifyState();
		}
		if (!timer.isActive()) {
			if (self.initialized) {
				timer.set(doRefreshState, TB3O.Timeouts.refresh_delay);
			} else {
				self.uiModifyState();
			}
		}
		self.initialized = true;
	};
	SendResTable.prototype.setMerchantsToUse = function (mUse, mAvail) {
		if (mAvail !== undefined) {
			this.mAvail = mAvail;
		}
		this.mUse = (mUse) ? mUse : this.mAvail;
		this.maxTr = this.mUse * this.mCap;
		this.uiRefreshState();
	};
	SendResTable.prototype.setMaxTransport = function () {
		var resToUseCtrl = $g("tb_useunires");
		var resToUseValue = resToUseCtrl ? resToUseCtrl.value : "";
		var resToUse = Number(resToUseValue);
		if (resToUseValue === "" || isNaN(resToUse) || this.mUse * this.mCap < resToUse) {
			this.maxTr = this.mUse * this.mCap;
		} else if (!isNaN(resToUse)) {
			this.maxTr = resToUse;
		}
		this.uiRefreshState();
	};
	SendResTable.prototype.setTransportRes = function (ri, val) {
		if (!this.rxI[ri].readOnly) {
			this.rxI[ri].value = val;
			fireChangeEvent(this.rxI[ri]);
		}
	};
	SendResTable.prototype.setTransports = function (rxVal) {
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			if (this.aUTR[ri]) {
				this.setTransportRes(ri, rxVal[ri]);
			}
		}
	}
	SendResTable.prototype.setNewTransport = function (ri, q, resAvail, rxVal) {
		var resOrg = rxVal[ri];
		var resNew = rxVal[ri];
		if (q === undefined) {
			resNew = resAvail[ri];
		} else {
			resNew += q;
		}
		if (resNew > resAvail[ri]) {
			resNew = resAvail[ri];
		}
		rxVal[ri] = resNew;
		var resTot = totalResources(rxVal);
		if (resTot > this.maxTr) {
			resNew -= resTot - this.maxTr;
			if (resNew < resOrg) {
				resNew = resOrg;
			}
		}
		rxVal[ri] = resNew;
		this.setTransportRes(ri, resNew);
	};
	SendResTable.prototype.getResourcesState = function () {
		var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, true);
		return {
			Res : resourcesInfo.Res,
			Rest : resourcesInfo.Res,
			EPpH : resourcesInfo.EPpH
		};
	};
	SendResTable.prototype.distributeTransportsRemains = function (remains, rxVal, resAvail) {
		var ri;
		var usedResCount = 0;
		for (ri = 0; ri < 4; ++ri) {
			if (this.aUTR[ri]) {
				++usedResCount;
			}
		}
		if (usedResCount) {
			while (remains > 0) {
				var remainsOld = remains;
				var quantum = (remains > 12) ? Math.floor(remains / usedResCount) : 1;
				usedResCount = 0;
				for (ri = 0; ri < 4; ++ri) {
					if (this.aUTR[ri] && rxVal[ri] < resAvail[ri]) {
						var resNew = rxVal[ri] + quantum;
						if (resNew > resAvail[ri]) {
							resNew = resAvail[ri];
						} else {
							++usedResCount;
						}
						remains -= (resNew - rxVal[ri]);
						rxVal[ri] = resNew;
						if (remains <= 0) {
							break;
						}
					}
				}
				if (remainsOld === remains) {
					break;
				}
			}
		}
		return remains;
	};
	SendResTable.prototype.maximizeTransports = function (rxVal, resAvail) {
		var waste = this.maxTr - totalResources(rxVal);
		this.distributeTransportsRemains(waste, rxVal, resAvail);
	};
	SendResTable.prototype.distributeTransportsProportional = function (resAvail, distValues) {
		var totDistValue = 0;
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			if (this.aUTR[ri]) {
				if (distValues[ri] > 0) {
					totDistValue += distValues[ri];
				}
			}
		}
		var dmx = 0;
		var rxVal = this.getCurrentTransports();
		if (totDistValue > 0) {
			dmx = this.getTotalTransportsAvailable(rxVal) / totDistValue;
		}
		for (ri = 0; ri < 4; ++ri) {
			if (this.aUTR[ri]) {
				var aRes = Math.floor(distValues[ri] * dmx);
				if (aRes < 0) {
					aRes = 0;
				} else if (aRes > resAvail[ri]) {
					aRes = resAvail[ri];
				}
				rxVal[ri] = aRes;
			}
		}
		this.maximizeTransports(rxVal, resAvail);
		this.setTransports(rxVal);
	};
	SendResTable.prototype.distributeTransportsEqual = function (resAvail) {
		var totResAvail = 0;
		var usedResCount = 0;
		var ri;
		for (ri = 0; ri < 4; ++ri) {
			if (this.aUTR[ri]) {
				totResAvail += resAvail[ri];
				usedResCount += 1;
			}
		}
		var rxVal = this.getCurrentTransports();
		var minA = Math.floor(this.getTotalTransportsAvailable(rxVal) / usedResCount);
		var minB = Math.floor(totResAvail / usedResCount);
		var minX = Math.min(minA, minB);
		for (ri = 0; ri < 4; ++ri) {
			if (this.aUTR[ri]) {
				var aRes = minX;
				if (aRes < 0) {
					aRes = 0;
				} else if (aRes > resAvail[ri]) {
					aRes = resAvail[ri];
				}
				rxVal[ri] = aRes;
			}
		}
		this.maximizeTransports(rxVal, resAvail);
		this.setTransports(rxVal);
	}
	SendResTable.prototype.uiModify = function () {
		var self = this;
		function mhRowUpdate() {
			self.uiRefreshState();
		}
		function onClickUseThemResOption(ri) {
			self.aUTR[ri] = Boolean(this.checked);
			if (typeof(self.uiOptions.save) === "function") {
				self.uiOptions.save();
			}
		}
		function onClearTransportRes(ri) {
			self.setTransportRes(ri, '');
		}
		function onClearAllTransports(considerUseThem) {
			var ri;
			for (ri = 0; ri < 4; ri++) {
				if (!considerUseThem || (considerUseThem && self.aUTR[ri])) {
					self.setTransportRes(ri, '');
				}
			}
		}
		function onClickUseThemAllPr() {
			var resourcesState = self.getResourcesState();
			self.distributeTransportsProportional(resourcesState.Res, resourcesState.Rest);
		}
		function onClickUseThemAll1H() {
			var resourcesState = self.getResourcesState();
			self.distributeTransportsProportional(resourcesState.Res, resourcesState.EPpH);
		}
		function onClickUseThemAllEq() {
			self.distributeTransportsEqual(self.getResourcesState().Res);
		}
		function onQCarry(ri, q) {
			var rxVal = self.getCurrentTransports();
			var resAvail = self.getResourcesState().Res;
			if (ri < 4) {
				self.setNewTransport(ri, q, resAvail, rxVal);
			} else {
				for (ri = 0; ri < 4; ++ri) {
					if (self.aUTR[ri]) {
						self.setNewTransport(ri, q, resAvail, rxVal);
					}
				}
			}
		}
		function getQcarryArray(capacity) {
			var bAdjMc = true;
			var aQcarry = [100, 250, 500, 1000];
			var i;
			for (i = 0; i < aQcarry.length; i++) {
				if (capacity === aQcarry[i]) {
					bAdjMc = false;
					break;
				}
			}
			if (bAdjMc) {
				aQcarry = [100, 500, 1000, capacity];
				aQcarry.sort(compareNumbers);
			}
			return aQcarry;
		}
		function uiAddQCarryCells(aRow, ri, aQcarry) {
			var j,
			aLink;
			for (j = 0; j < aQcarry.length; j++) {
				aLink = $action(['class', 'tbQCarry' + (aQcarry[j] === self.mCap ? " tbMCap" : "")], '&nbsp;' + aQcarry[j], bind(onQCarry, [ri, aQcarry[j]]));
				aRow.appendChild($td(attrInject$, aLink));
			}
			aLink = $action(['class', 'tbQCarry'], '&nbsp;' + T('ALL'), bind(onQCarry, [ri]));
			aRow.appendChild($td(attrInject$, aLink));
		}
		var aQcarry = getQcarryArray(this.mCap);
		var ri;
		var aCell,
		aRow;
		var aCheck,
		aTool;
		addClass(this.resTb, "tbSendRes");
		for (ri = 0; ri < 4; ri++) {
			aRow = this.resTb.rows[ri];
			hide(aRow.cells[3]);
			aRow.cells[0].addEventListener("click", mhRowUpdate, false);
			aCell = $td([['class', 'tbInject tbUseThem']]);
			aCheck = $i([['type', 'checkbox'], ['title', T('USERES_TT', T('RES1'))]]);
			aCheck.checked = this.aUTR[ri];
			aCheck.addEventListener('click', bind(onClickUseThemResOption, [ri]), false);
			aCell.appendChild(aCheck);
			aRow.appendChild(aCell);
			aRow.appendChild($td(attrInject$, uiCreateTool("del", null, bind(onClearTransportRes, [ri]))));
			uiAddQCarryCells(aRow, ri, aQcarry);
			aTool = null;
			if (ri === 0) {
				aTool = uiCreateTool("usethempr", T('USETHEMPR'), onClickUseThemAllPr);
			} else if (ri === 1) {
				aTool = uiCreateTool("usethemeq", T('USETHEMEQ'), onClickUseThemAllEq);
			} else if (ri === 2) {
				aTool = uiCreateTool("usethem1h", T('USETHEM1H'), onClickUseThemAll1H);
			}
			aRow.appendChild($td([['class', 'tbInject tbTool']], aTool));
			this.rxI[ri].addEventListener('keyup', mhRowUpdate, false);
			this.rxI[ri].addEventListener('change', mhRowUpdate, false);
		}
		var clAllRow = $r(attrInject$, [$td(attrInject$, I("r0")), (aRow.cells.length === 12) ? $td(attrInject$) : null, $td(attrInject$, uiCreateTool("bDel", T('MTCL'), bind(onClearAllTransports, [false]))), $td(attrInject$), $td(attrInject$, uiCreateTool("del", null, bind(onClearAllTransports, [true])))]);
		uiAddQCarryCells(clAllRow, 4, aQcarry);
		clAllRow.appendChild($td(attrInject$));
		this.resTb.appendChild(clAllRow);
		this.resTb.appendChild($r(attrInject$, $td([['id', 'tb_merc_summary'], ['colspan', clAllRow.cells.length]])));
	}
	function uiCreateUseTraders(sendResTable, defValue) {
		function onChangeUseTraders() {
			sendResTable.setMerchantsToUse(validateInputInt(this, 1, sendResTable.mAvail));
			sendResTable.setMaxTransport();
		}
		function onClearTraders() {
			$g("tb_usetraders").value = "";
			sendResTable.setMerchantsToUse();
			sendResTable.setMaxTransport();
		}
		var useTraders;
		var control = $span(['class', 'tbUseTradersCtrl'], [uiCreateTool("merchant", T("DEL"), onClearTraders), ":\u00A0", useTraders = $i([['id', 'tb_usetraders'], ['type', 'text'], ['class', 'text'], ['accesskey', 't'], ['maxlength', '2'], ['title', T('USETRADERS_TT')], ['keyup', onChangeUseTraders, false], ['change', onChangeUseTraders, false]])]);
		uiAddBuiltinUpDownControl(useTraders);
		if (defValue) {
			useTraders.value = defValue;
		}
		return control;
	}
	function parseMerchantsCount(container) {
		if (container) {
			if (removeInvisibleChars(container.textContent).search(/\s*([^:]+):?\s+(\d+)\s*\/\s*(\d+)/) !== -1) {
				T.saveLocaleString("MERCHANTS", RegExp.$1);
				TB3O.MerchantsInfo.mAvail = parseInt10(RegExp.$2);
				TB3O.MerchantsInfo.mTotal = parseInt10(RegExp.$3);
			}
		}
		if (!isIntValid(TB3O.MerchantsInfo.mAvail)) {
			TB3O.MerchantsInfo.mAvail = 0;
		}
	}
	function uiCreateRatioCell(ratio) {
		var rC = $td([["class", ratio < 1.00 ? "ratio_l" : ratio > 1.00 ? "ratio_g" : "ratio_e"]], ratio.toFixed(2));
		return rC;
	}
	function getRatioCell(aRow, iSell, iBuy) {
		var ratio = parseInt10(aRow.cells[iSell].textContent) / parseInt10(aRow.cells[iBuy].textContent);
		return uiCreateRatioCell(ratio);
	}
	function setMerchantsCell(tM, colM) {
		var cM = $g("tb_merc_summary");
		if (cM) {
			cM.innerHTML = tM;
			$at(cM, [['style', 'font-size:11px; color:' + colM + ';line-height:16px;']]);
		}
	}
	function __getMerchantRepeatCount(iRep) {
		var repCount = null;
		if (iRep) {
			if (iRep.checked !== undefined) {
				repCount = (iRep.checked) ? iRep.value : 1;
			} else {
				repCount = iRep.value;
			}
		}
		return repCount;
	}
	function getMerchantRepeatCount() {
		return __getMerchantRepeatCount(searchMerchantsRepeatCount());
	}
	function uiCreateLastMarketSendTable() {
		var cmkls = getGMcookieV2('mkls');
		if (cmkls && cmkls[actV.vID]) {
			var mkls = cmkls[actV.vID];
			var bsh = false;
			for (var xi = 0; xi < 4; xi++) {
				if (mkls[xi] != 0) {
					bsh = true;
				}
			}
			if (bsh) {
				var aTb = $t([['id', 'mkls']]);
				var aRow = $r();
				aRow.appendChild($td([['class', 'mklshh']], I("vmkls")));
				for (var xi = 1; xi < 5; xi++) {
					aRow.appendChild($td([['class', 'mklshh']], I("r" + xi)));
				}
				aRow.appendChild($td([['class', 'mklshh']], T('RESEND')));
				aRow.appendChild($td([['class', 'mklshh']], T('DEL')));
				var bRow = $r();
				bRow.appendChild($c("(" + mkls[4] + "|" + mkls[5] + ")", [['class', 'mklsc']]));
				for (var xi = 0; xi < 4; xi++) {
					bRow.appendChild($c(mkls[xi]));
				}
				bRow.appendChild($c('<a href=' + jsVoid + ' onClick = "' + (mkls[0] != 0 ? 'snd.r1.value=' + mkls[0] : '') + (mkls[1] != 0 ? '; snd.r2.value=' + mkls[1] : '') + (mkls[2] != 0 ? '; snd.r3.value=' + mkls[2] : '') + (mkls[3] != 0 ? '; snd.r4.value=' + mkls[3] : '') + '; snd.x.value=' + mkls[4] + '; snd.y.value=' + mkls[5] + ';"><img src="' + image["bOK"] + '" title="' + T('YES') + '" alt="' + T('YES') + '"></a>', [['class', 'mklsc']]));
				aLink = $a(gIc["del"], [['href', jsVoid]]);
				aLink.addEventListener("click", hideLastMarketSend(mkls), false);
				dC = $c("", [['class', 'mklsc']]);
				dC.appendChild(aLink);
				bRow.appendChild(dC);
				aTb.appendChild(aRow);
				aTb.appendChild(bRow);
				var ln = $xf("//form//p[2] | //form/following-sibling::p[2]");
				insertAfter(ln, aTb);
			}
		}
		function hideLastMarketSend(mkls) {
			return function () {
				for (var xi = 0; xi < 4; xi++) {
					mkls[xi] = 0;
				}
				setGMcookieV2("mkls", mkls, actV.vID);
				$g('mkls').style.display = 'none';
			}
		}
	}
	function MerchantsUnderwayIterator(aDoc, aGroupHeader) {
		var aTb = aGroupHeader;
		this.next = function () {
			while (aTb) {
				aTb = aTb.nextSibling;
				if (aTb && aTb.nodeType === 1) {
					if (TAG(aTb) !== "TABLE" && !hasClass(aTb, "traders")) {
						aTb = null;
					}
					break;
				}
			}
			return aTb;
		};
	}
	function getMerchantsUnderwayGroup(MUInfo, villageInfo, aDoc, aGroupHeader, bIncoming, ttServer, bReadOnly) {
		var muIterator = new MerchantsUnderwayIterator(aDoc, aGroupHeader);
		var villageMapId = xy2id(villageInfo.x, villageInfo.y);
		var aTb;
		while ((aTb = muIterator.next())) {
			var aRows = aTb.rows;
			if (aRows.length >= 3) {
				var userLink = $nth_tag(aRows[0].cells[0], "a");
				var userName = userLink.textContent;
				var userId = parseUri(userLink.getAttribute('href')).queryKey.uid;
				var pointLink = $nth_tag(aRows[0].cells[1], "a");
				var point = parseUri(pointLink.getAttribute('href')).queryKey.d;
				var timerNode = aRows[1].cells[1].getElementsByTagName("span")[0];
				var timeSpan = toSeconds(timerNode.textContent);
				var ttArrival = ttServer + (timeSpan * 1000);
				var tdRes = aRows[2].cells[1].textContent;
				var xn = 1;
				var xPos = tdRes.indexOf("x");
				if (xPos !== -1) {
					xn = parseInt10(tdRes.substr(xPos - 1, 1));
					if (isNaN(xn)) {
						xn = 1;
					}
					tdRes = tdRes.substring(xPos + 1);
				}
				var Res = getResourcesFromString(tdRes);
				if (userId && point && timeSpan && Res) {
					var srcMapId,
					destMapId;
					var ownerName,
					recipientName;
					var ownerId,
					recipientId;
					var bReturning = false;
					if (!bIncoming) {
						var resNodes = aRows[2].cells[1].getElementsByTagName("span");
						if (resNodes.length >= 1) {
							bReturning = hasClass(resNodes[0], "none");
						}
					}
					if (bIncoming || bReturning) {
						srcMapId = point;
						destMapId = villageMapId;
					} else {
						srcMapId = villageMapId;
						destMapId = point;
					}
					if (!bIncoming || bReturning) {
						ownerName = TB3O.U[0];
						recipientName = userName;
						ownerId = TB3O.UserID;
						recipientId = userId;
					} else {
						ownerName = userName;
						recipientName = TB3O.U[0];
						ownerId = userId;
						recipientId = TB3O.UserID;
					}
					var mui = new MerchantUnderwayInfo(ownerId, ownerName, recipientId, recipientName, srcMapId, destMapId, ttArrival, Res, xn);
					if (!bReadOnly) {
						if (!aTb.hasAttribute("id")) {
							aTb.id = "tb_mu_" + MUInfo.nextid++;
						}
						mui.id = aTb.id;
					}
					if (bIncoming) {
						MUInfo.i.push(mui);
					} else if (bReturning) {
						MUInfo.r.push(mui);
					} else {
						MUInfo.o.push(mui);
					}
				}
			}
		}
	}
	function processMarketSend() {
		var mCapNode = $xf("//div[@id='build' and contains(@class,'gid17')]/div[contains(@class,'carry')]/b | //form//p/b");
		var mCap = 0;
		if (mCapNode) {
			mCap = scanIntWithoutLetter(mCapNode.textContent);
			if (isIntValid(mCap)) {
				TB3O.ActiveVillageInfo.mCap = mCap;
			}
		}
		processMarketSend.moC = searchMerchantsCountContainer();
		parseMerchantsCount(processMarketSend.moC);
		processMarketSend.MU = getMerchantsUnderway(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime), false);
	}
	function uiModifyMarketSend() {
		var defValues = crtUrl.hashKey;
		var dtNow = getDesiredTimeNow();
		var mCap = TB3O.ActiveVillageInfo.mCap;
		var rxProgress = [];
		var uiOptions = new MarketSendUIOptions();
		var resTb = searchMarketSendResTable();
		var sendResTable = new SendResTable(resTb, uiOptions);
		var mu = processMarketSend.MU;
		var destinationPicker;
		function initMerchantsStat() {
			sendResTable.setMerchantsToUse(TB3O.MerchantsInfo.mAvail, TB3O.MerchantsInfo.mAvail);
		}
		function initMerchantsDestination() {
			addMerchantsRepeatCountPicker();
			destinationPicker = new DestinationPicker(searchMerchantsDestinationContainer, uiCreateMercDistTable);
		}
		function setDefaultTransportsFromUrl() {
			var rxVal = [0, 0, 0, 0];
			var resAvail = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, true).Res;
			var ri;
			for (ri = 0; ri < 4; ++ri) {
				var bUseMerchants = false;
				var defValue = defValues["r" + (ri + 1)];
				if (defValue === undefined) {
					defValue = defValues["m" + (ri + 1)];
					bUseMerchants = true;
				}
				if (defValue === "max") {
					defValue = Infinity;
				} else {
					defValue = parseInt10(defValue, 0);
					if (!isIntValid(defValue)) {
						defValue = 0;
					}
					if (bUseMerchants) {
						defValue *= mCap;
					}
				}
				sendResTable.setNewTransport(ri, defValue, resAvail, rxVal);
			}
		}
		function setDestinationFromUrl() {
			var x = defValues.x;
			var y = defValues.y;
			if (x !== undefined && y !== undefined) {
				destinationPicker.setXY(x, y);
			}
		}
		function setFieldsFromUrl() {
			if (crtUrl.hashbang) {
				defValues = crtUrl.hashKey;
				setDefaultTransportsFromUrl();
				setDestinationFromUrl();
				setNewRepCount(defValues.xn);
			}
		}
		if (TB3O.O[47] === "1") {}
		initMerchantsDestination();
		var defRepeat = defValues.xn;
		if (defRepeat === undefined && TB3O.O[87] === "1") {
			defRepeat = TB3O.O[84];
		}
		setNewRepCount(defRepeat);
		if (resTb) {
			uiModifyMarketSendLayout(resTb, processMarketSend.moC);
			if (processMarketSend.moC) {
				uiModifyMerchantsCountBar(processMarketSend.moC);
			}
			sendResTable.uiModify();
			initMerchantsStat();
			if (crtUrl.hashbang) {
				setDefaultTransportsFromUrl();
				setDestinationFromUrl();
			}
			TB3O.onHashChange = setFieldsFromUrl;
		}
		uiModifyMerchantsUnderway();
		var formular = $g("merchantsOnTheWayFormular");
		if (formular) {
			formular.addEventListener("DOMSubtreeModified", onMerchantsUnderwayModified, false);
		}
		var div_button = $g("button");
		if (div_button) {
			div_button.addEventListener("DOMSubtreeModified", onMerchantsDestinationModified, false);
		}
		function onMerchantsUnderwayModified(e) {
			if (e.eventPhase === 2 && e.target === e.currentTarget) {
				e.currentTarget.removeEventListener("DOMSubtreeModified", onMerchantsUnderwayModified, false);
				setTimeout(uiRefreshMerchantsUnderway, 0);
			}
		}
		function uiRefreshMerchantsUnderway() {
			var ttServer = toTimeStamp(getServerTimeNow());
			processMarketSend.moC = searchMerchantsCountContainer();
			parseMerchantsCount(processMarketSend.moC);
			initMerchantsStat();
			fireChangeEvent($g("tb_usetraders"));
			mu = getMerchantsUnderway(TB3O.ActiveVillageId, document, ttServer, false);
			getResourcesResCap(TB3O.ActiveVillageInfo.r, document, ttServer);
			saveVillagesInfo(TB3O.VillagesInfo);
			TB3O.ResInfoTotals = getResInfoTotals();
			uiModifyMerchantsUnderway();
			uiModifyLinks(formular);
			refreshSupplement(TB3O.ActiveVillageId);
			formular.addEventListener("DOMSubtreeModified", onMerchantsUnderwayModified, false);
		}
		function uiRefreshMerchantsDestination() {
			initMerchantsDestination();
			div_button.addEventListener("DOMSubtreeModified", onMerchantsDestinationModified, false);
		}
		function onMerchantsDestinationModified(e) {
			if (e.eventPhase === 2 && e.target === e.currentTarget) {
				e.currentTarget.removeEventListener("DOMSubtreeModified", onMerchantsDestinationModified, false);
				setTimeout(uiRefreshMerchantsDestination, 0);
			}
		}
		function uiModifyMerchantsUnderway() {
			if (mu) {
				if (TB3O.O[46] === '1') {
					uiModifyUnderwayTables(mu.i, false);
					uiModifyUnderwayTables(mu.o, false);
					uiModifyUnderwayTables(mu.r, true);
				}
				if (mu.i.length > 0) {
					var merchantGroup = $xf("//div[@id='build' and contains(@class,'gid17')]//h4");
					if (TB3O.O[46] === '1') {
						uiModifyArrivalsTables(mu.i);
					}
					var aTb = uiCreateCumulativeArrivalsTable(merchantGroup.textContent.replace(":", "").toLowerCase(), mu.i);
					if (aTb) {
						insertAfter(merchantGroup, aTb);
						for (i = 0, ri = -1; i < 4; ++i) {
							if (uiOptions._.showprogress[i]) {
								ri = i;
								break;
							}
						}
						if (ri >= 0) {
							if (rxProgress[ri]) {
								uiOptions._.showprogress = [false, false, false, false];
								rxProgress[ri].click();
							}
						}
					}
				}
			}
		}
		function uiCreateMercDistTable(x, y) {
			var repCount = getMerchantRepeatCount();
			return uiCreateTroopsMerchantsDistTable(null, null, xy2id(x, y), {
				show_merchant : true,
				show_coords : true,
				show_arrival_time : true,
				merchant_repeat : repCount
			});
		}
		function uiModifyMerchantsCountBar(moC) {
			function onClickUsePpH() {
				var totPpH = totalResources(TB3O.ActiveVillageInfo.r.PpH);
				$g("tb_useunires").value = totPpH;
				sendResTable.setMaxTransport();
			}
			function onClickUsePpHAll() {
				var totPpHAll = totalResources(TB3O.ResInfoTotals.PpH);
				$g("tb_useunires").value = totPpHAll;
				sendResTable.setMaxTransport();
			}
			function onChangeUseUniRes() {
				if (this.value !== "") {
					var resToUse = Number(this.value);
					if (isNaN(resToUse) || resToUse <= 0) {
						resToUse = sendResTable.mUse * mCap;
						this.value = resToUse;
					}
				}
				sendResTable.setMaxTransport();
			}
			function onClearUniRes() {
				$g("tb_useunires").value = "";
				sendResTable.setMaxTransport();
			}
			addChildren(moC, [$span("\u00A0|\u00A0\u00A0" + T('USE') + "\u00A0\u00A0"), uiCreateUseTraders(sendResTable), " \u00A0", uiCreateTool("r0", T("DEL"), onClearUniRes), ":\u00A0", $i([['id', 'tb_useunires'], ['type', 'text'], ['class', 'text'], ['accesskey', 'r'], ['maxlength', '6'], ['size', '4'], ['title', T('USEUNIRES_TT')], ['keyup', onChangeUseUniRes, false], ['change', onChangeUseUniRes, false]]), "\u00A0", uiCreateTool("pph", T('USEPPH_TT'), onClickUsePpH)]);
			if (TB3O.VillagesCount > 1) {
				addChildren(moC, ["\u00A0", uiCreateTool("pphall", T('USEPPHALL_TT'), onClickUsePpHAll)]);
			}
		}
		function setNewRepCount(repCount) {
			var iRep = searchMerchantsRepeatCount();
			if (iRep && __getMerchantRepeatCount(iRep) != repCount) {
				if (iRep.checked !== undefined) {
					iRep.checked = (repCount > 1);
				} else {
					iRep.value = repCount;
				}
				fireChangeEvent(iRep);
			}
		}
		function onRepCountChange() {
			destinationPicker.uiRefresh();
		}
		function addMerchantsRepeatCountPicker() {
			var iRep = searchMerchantsRepeatCount();
			if (iRep) {
				iRep.addEventListener('change', onRepCountChange, false);
			}
			return iRep;
		}
		function getUnderOverrunClass(ruoType) {
			return (ruoType === null) ? '' : ((ruoType) ? 'tbOver' : 'tbUnder');
		}
		function uiCreateUnderOverrunRows(state) {
			function uiCreateUnderOverrunCell(aRow, ri, ruo) {
				if (ruo !== 0) {
					if (!aRow) {
						aRow = $r();
						var rix;
						for (rix = 0; rix < ri; ++rix) {
							aRow.appendChild($td());
						}
					}
					aRow.appendChild($td(['class', (ruo > 0 ? 'tbOver' : 'tbUnder')], (ruo > 0 ? "+" : "") + ruo));
					return aRow;
				}
				return null;
			}
			var ri;
			var ruoRows = [null, null];
			var ruoRowIdx;
			for (ri = 0; ri < 4; ++ri) {
				var aRow;
				ruoRowIdx = 0;
				var ru = Math.floor(state.AA.ru[ri]);
				var ro = Math.floor(state.AA.ro[ri]);
				aRow = uiCreateUnderOverrunCell(ruoRows[ruoRowIdx], ri, ru);
				if (aRow) {
					ruoRows[ruoRowIdx++] = aRow;
				}
				aRow = uiCreateUnderOverrunCell(ruoRows[ruoRowIdx], ri, ro);
				if (aRow) {
					ruoRows[ruoRowIdx++] = aRow;
				}
				if (ruoRows[0] && ruoRowIdx === 0) {
					ruoRows[0].appendChild($td());
				}
				if (ruoRows[1] && ruoRowIdx <= 1) {
					ruoRows[1].appendChild($td());
				}
			}
			if (ruoRows[0]) {
				ruoRows[0].appendChild($td());
			}
			if (ruoRows[1]) {
				ruoRows[1].appendChild($td());
			}
			return ruoRows;
		}
		function uiAddArrivalsProgressTable(rollDownCtrl, id, ri, incomingMerchants) {
			var imgIncoming = I("tbiIn");
			var imgMerchant = I("merchant");
			function onClose() {
				rollDownCtrl.click();
			}
			function uiCreateProgressRow(resourcesInfo, ri, eventCell, st) {
				var ttEvent = toTimeStamp(resourcesInfo.dUpd);
				var ruoType = st.ev[ri];
				var totalClass = '';
				var strTotal;
				if (ruoType !== null) {
					var ruo = Math.floor((ruoType) ? st.ro[ri] : st.ru[ri]);
					totalClass = ' ' + getUnderOverrunClass(ruoType);
					strTotal = ((ruo > 0) ? "+" : "") + $ls(ruo);
				} else {
					var res = Math.floor(resourcesInfo.Res[ri]);
					strTotal = $ls(res);
					if (isCapReached(res, resourcesInfo.EPpH[ri], resourcesInfo.Cap[ri])) {
						totalClass = ' tbCapReached';
					}
				}
				var dtDesired = getDesiredTime(ttEvent);
				var aRow = $r(null, [$td(['class', 'tbArrivalT'], formatDateTime(dtNow, dtDesired, 1)), uiSetTimeSpanByDate($td(['class', 'tbTravelT']), dtNow, dtDesired), eventCell, $td(['class', 'tbTotal' + totalClass], strTotal), uiSetFillPercent($td(), resourcesInfo, ri), $td(['class', 'tb3cresbar'], uiSetFillBar(uiCreateFillBar(), resourcesInfo, ri))]);
				return aRow;
			}
			function uiCreateUnderOverrunProgressRow(resourcesInfo, ri, st) {
				var aRow = null;
				var ruoType = st.ev[ri];
				if (ruoType !== null) {
					var eventClass = getUnderOverrunClass(ruoType);
					var eventImg = (ruoType) ? [I(rName), I(rName), I(rName)] : I("r5");
					var resourcesInfoEv = cloneResourcesInfo(resourcesInfo);
					resourcesInfoEv.dUpd = new Date(st.ttf[ri]);
					resourcesInfoEv.Res[ri] = (ruoType) ? resourcesInfoEv.Cap[ri] : 0;
					var eventCell = $td(['class', 'tbEvent ' + eventClass], eventImg);
					aRow = uiCreateProgressRow(resourcesInfoEv, ri, eventCell, st);
				}
				return aRow;
			}
			var armTable = $g('tb_arrm');
			if (armTable) {
				var aBody;
				var rName = "r" + (ri + 1);
				var prT = $t([attrInject$, ['id', id], ['cellspacing', '1']], [$e("thead", null, [$r($th([['class', 'tbTitle'], ['colspan', '6']], [T("ARRP", T("RES" + (ri + 1)), countIf(incomingMerchants, function (v) {
														return v.Res[ri] > 0;
													})), $div(['class', 'closediv'], uiCreateTool("bClose", T('CLOSE'), onClose))])), $r(null, [$th(I("clock")), $th(I("hourglass")), $th(T("EVENT")), $th(['colspan', '3'], I(rName))])]), aBody = $e("tbody")]);
				var i;
				var resourcesInfo = cloneResourcesInfo(TB3O.ActiveVillageInfo.r);
				var merchantUnderwayInfo,
				state;
				for (i = 0; i < incomingMerchants.length; ++i) {
					if (incomingMerchants[i].Res[ri] > 0) {
						merchantUnderwayInfo = incomingMerchants[i];
						state = getCumulativeResourcesInfo(resourcesInfo, merchantUnderwayInfo.ttArrival, merchantUnderwayInfo.Res);
						addChildren(aBody, uiCreateUnderOverrunProgressRow(resourcesInfo, ri, state.BA));
						var eventCell = $td(['class', 'tbEvent'], [$span($ls(merchantUnderwayInfo.Res[ri])), imgIncoming.cloneNode(true), imgMerchant.cloneNode(true)]);
						aBody.appendChild(uiCreateProgressRow(resourcesInfo, ri, eventCell, state.A));
					}
				}
				if (merchantUnderwayInfo) {
					state = getCumulativeResourcesInfo(resourcesInfo, merchantUnderwayInfo.ttArrival, [0, 0, 0, 0]);
					aBody.appendChild(uiCreateUnderOverrunProgressRow(resourcesInfo, ri, state.AA));
				}
				insertAfter(armTable, prT);
			}
		}
		function uiCreateCumulativeArrivalsTable(title, incomingMerchants) {
			function onChangeRollDownState(ri, e) {
				uiOptions._.showprogress[ri] = e.opened;
				var id = "tb_arrm_progress";
				if (e.opened) {
					var i;
					for (i = 0; i < 4; ++i) {
						if (i !== ri) {
							if (uiOptions._.showprogress[i] && rxProgress[i]) {
								rxProgress[i].click();
								removeElement($g(id));
							}
						}
					}
					dtNow = getDesiredTimeNow();
					uiAddArrivalsProgressTable(rxProgress[ri], id, ri, incomingMerchants);
				} else {
					removeElement($g(id));
				}
				uiOptions.save();
			}
			var i;
			var totRes = [0, 0, 0, 0];
			var resourcesInfo = cloneResourcesInfo(TB3O.ActiveVillageInfo.r);
			var state;
			for (i = 0; i < incomingMerchants.length; ++i) {
				var merchantUnderwayInfo = incomingMerchants[i];
				accumulateResources(totRes, merchantUnderwayInfo.Res);
				state = getCumulativeResourcesInfo(resourcesInfo, merchantUnderwayInfo.ttArrival, merchantUnderwayInfo.Res, state);
			}
			var ttLastArrival = incomingMerchants[i - 1].ttArrival;
			var armTable,
			armBody;
			armTable = $t([attrInject$, ['id', 'tb_arrm']], armBody = $e("tbody", $r($td([['class', 'cbgx'], ['colspan', '6']], T('SUMMARY') + " - " + title + " (" + mu.i.length + ")"))));
			var tsCell = uiSetTimeSpanByDate($td(), dtNow, getDesiredTime(ttLastArrival), {
					format : 1
				});
			var rRow = $r($th(I("hourglass")));
			var qRow = $r(tsCell);
			var tRow = $r($td());
			var xi;
			for (xi = 0; xi < 5; xi++) {
				var tCell,
				rCell,
				qCell;
				if (xi < 4) {
					rxProgress[xi] = null;
					if (totRes[xi] > 0) {
						rxProgress[xi] = uiCreateRollDownControl(false, T("ARRP_TT", T("RES" + (xi + 1))));
						rxProgress[xi].addEventListener('change', bind2(onChangeRollDownState, [xi]), false);
					}
					rCell = $th(null, [I("r" + (xi + 1)), rxProgress[xi]]);
					qCell = $td([['class', 'tbTotal']], $ls(totRes[xi]));
					var cls = (state.AA.ttf[xi] <= ttLastArrival) ? getUnderOverrunClass(state.AA.ev[xi]) : '';
					tCell = uiSetTimeoutByDate($td([['class', cls]]), dtNow, getDesiredTime(state.AA.ttf[xi]), resourcesInfo.EPpH[xi], {
							format : 1
						});
				} else {
					rCell = $th(I("r0"));
					qCell = $td([['class', 'tbTotal']], $ls(totalResources(totRes)));
					tCell = $td();
				}
				rRow.appendChild(rCell);
				qRow.appendChild(qCell);
				tRow.appendChild(tCell);
			}
			armBody.appendChild(rRow);
			armBody.appendChild(qRow);
			var rowSpan = 1;
			var ruoRows = uiCreateUnderOverrunRows(state);
			if (ruoRows[0]) {
				armBody.appendChild(ruoRows[0]);
				++rowSpan;
			}
			if (ruoRows[1]) {
				armBody.appendChild(ruoRows[1]);
				++rowSpan;
			}
			tsCell.rowSpan = rowSpan;
			armBody.appendChild(tRow);
			return armTable;
		}
		function uiModifyUnderwayTables(muiArray, bReturning) {
			function uiAddTotalResources(aTb, merchantUnderwayInfo) {
				var resNode = aTb.rows[2].cells[1].lastChild;
				var cls = resNode.className;
				if (cls) {
					cls += " ";
				}
				cls += 'tbInject';
				insertAfter(resNode, $span([['class', cls]], [" = ", I("r0"), " ", $e("b", $ls(totalResources(merchantUnderwayInfo.Res)))]));
			}
			function uiAddDuplicateLink(aTb, merchantUnderwayInfo, bReturning) {
				if (merchantUnderwayInfo.own_id == TB3O.UserID) {
					var parentNode = aTb.rows[0].cells[1].lastChild;
					var mapIdDict = getVillagesMapIdDict(TB3O.VillagesInfo);
					var srcMapId = bReturning ? merchantUnderwayInfo.d_id : merchantUnderwayInfo.s_id;
					var destMapId = bReturning ? merchantUnderwayInfo.s_id : merchantUnderwayInfo.d_id;
					var ri,
					hashbang = "xn=" + merchantUnderwayInfo.xn;
					for (ri = 0; ri < 4; ri++) {
						hashbang += "&r" + (ri + 1) + "=" + merchantUnderwayInfo.Res[ri];
					}
					var href = getSendResHref(destMapId, mapIdDict[srcMapId], hashbang);
					insertAfter(parentNode, $lnk([attrInject$, ['title', T("DUP_TRADERS_TT")], ['href', href]], I("dup")));
				}
			}
			var i,
			merchantUnderwayInfo,
			aTb;
			for (i = 0; i < muiArray.length; ++i) {
				merchantUnderwayInfo = muiArray[i];
				aTb = $g(merchantUnderwayInfo.id);
				uiAddTotalResources(aTb, merchantUnderwayInfo);
				uiAddDuplicateLink(aTb, merchantUnderwayInfo, bReturning);
			}
		}
		function uiModifyArrivalsTables(incomingMerchants) {
			if (TB3O.ActiveVillageInfo.r.dUpd !== undefined) {
				var resourcesInfo = cloneResourcesInfo(TB3O.ActiveVillageInfo.r);
				var i;
				for (i = 0; i < incomingMerchants.length; ++i) {
					var resTb,
					resTbRow;
					var merchantUnderwayInfo = incomingMerchants[i];
					var aTb = $g(merchantUnderwayInfo.id);
					addClass(aTb, "tbIncomingMerc");
					aTb.appendChild($e("tbody", attrInject$, $r(null, [$td([['class', 'tbArrivalT']], [I("clock"), $span(" " + formatDateTime(dtNow, getDesiredTime(merchantUnderwayInfo.ttArrival), 2))]), $td([['class', 'tbArrivalRes'], ['colspan', '2']], resTb = $t([['rules', 'cols']], resTbRow = $r()))])));
					var state = getCumulativeResourcesInfo(resourcesInfo, merchantUnderwayInfo.ttArrival, merchantUnderwayInfo.Res);
					var uthen = floorResources(cloneArray(resourcesInfo.Res));
					var ri;
					for (ri = 0; ri < 4; ++ri) {
						resTbRow.appendChild($td([['class', (resourcesInfo.Res[ri] >= resourcesInfo.Cap[ri] ? 'tbCapReached' : null)]], [I("r" + (ri + 1)), $span(" " + String(uthen[ri]))]));
					}
					resTbRow.appendChild($td(null, [I("r0"), $span(" " + String(totalResources(uthen)))]));
					var ruoRows = uiCreateUnderOverrunRows(state);
					if (ruoRows[0]) {
						resTb.appendChild(ruoRows[0]);
					}
					if (ruoRows[1]) {
						resTb.appendChild(ruoRows[1]);
					}
				}
			}
		}
	}
	function processMarketOffer() {
		processMarketOffer.moC = searchMarketOfferMerchantsCountContainer();
		parseMerchantsCount(processMarketOffer.moC);
	}
	function uiModifyMarketOffer() {
		var formItems = searchMarketOfferFormItems();
		var mCap = TB3O.ActiveVillageInfo.mCap;
		var mAvail = TB3O.MerchantsInfo.mAvail;
		var rxI1 = formItems.m1;
		var rxI2 = formItems.m2;
		var rxType1 = formItems.rid1;
		var rxType2 = formItems.rid2;
		var uiOptions;
		function loadUIOptions() {
			uiOptions = loadPersistentUserObject("market_offer") || {};
			if (!uiOptions.ratios || !(uiOptions.ratios instanceof Array)) {
				uiOptions.ratios = [];
			}
			var ri;
			for (ri = 0; ri < 4 * 4; ri++) {
				if (typeof(uiOptions.ratios[ri]) !== "number") {
					uiOptions.ratios[ri] = 1.0;
				}
			}
			if (typeof(uiOptions.use_maxtime) !== "boolean") {
				uiOptions.use_maxtime = false;
			}
			if (typeof(uiOptions.ally) !== "boolean") {
				uiOptions.ally = false;
			}
			if (typeof(uiOptions.use_ratio) !== "boolean") {
				uiOptions.use_ratio = false;
			}
		}
		function saveUIOptions() {
			savePersistentUserObject("market_offer", uiOptions);
		}
		function $stringify(arr) {
			var i;
			var str = "";
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== "") {
					if (i) {
						str += '$';
					}
					str += arr[i];
				} else {
					str = "";
					break;
				}
			}
			return str;
		}
		function $$stringify(arr) {
			var i;
			var str = "";
			for (i = 0; i < arr.length; i++) {
				var s = $stringify(arr[i]);
				if (s !== "") {
					if (i) {
						str += '$$';
					}
					str += s;
				}
			}
			return str;
		}
		function saveOffers(offers) {
			savePersistentUserValue("ventas", $$stringify(offers));
		}
		function loadOffers() {
			var ventas = [];
			var strOffers = loadPersistentUserValue("ventas", "");
			if (typeof(strOffers) !== "string") {
				saveOffers([]);
				strOffers = '';
			}
			if (strOffers !== '') {
				var offers = strOffers.split("$$");
				var i = 0;
				for (i = 0; i < offers.length; i++) {
					ventas[i] = offers[i].split("$");
				}
			}
			return ventas;
		}
		function saveOffer(offer) {
			var offers = loadOffers();
			offers.push(offer);
			saveOffers(offers);
		}
		function uiApplyOffer(offer) {
			function setValue(name, v) {
				var aElem = formItems[name];
				if (aElem) {
					aElem.value = v;
				}
			}
			function setCheck(name, v) {
				var aElem = formItems[name];
				if (aElem) {
					aElem.checked = (v === '1');
				}
			}
			setValue("m1", offer[0]);
			setValue("m2", offer[1]);
			setValue("rid1", offer[2]);
			setValue("rid2", offer[3]);
			setValue("d2", offer[4]);
			setCheck("d1", offer[5]);
			setCheck("ally", offer[6]);
			formItems.m2.disabled = false;
			formItems.form.submit();
		}
		function uiCreateSavedOffersTable() {
			function onClickAdd(indexNo) {
				uiApplyOffer(TB3O.SavedOffers[indexNo]);
			}
			function onClickDel(rowIndex, indexNo) {
				if (confirm(T('DEL') + ". " + T('QSURE'))) {
					TB3O.SavedOffers.splice(indexNo, 1);
					saveOffers(TB3O.SavedOffers);
					var aTb = $g("tb_offers");
					aTb.tBodies[0].deleteRow(rowIndex);
					if (aTb.tBodies[0].rows.length === 0) {
						removeElement(aTb.parentNode);
					}
				}
			}
			var aTb = null;
			if (TB3O.SavedOffers.length > 0) {
				var i,
				j = 0;
				var aR,
				aBody;
				var arH = [T('OFREZCO'), I("ratio"), T('BUSCO'), T('MERCHANTS'), T('8'), T('MAXTIME'), T('SELL'), T('DEL')];
				var arCl = [, "tbRatio"];
				aTb = $t(["id", "tb_offers"], [$e("thead", null, [$r($th([['class', 'cbgx'], ['colspan', arH.length]], T('VENTAS'))), aR = $r()]), aBody = $e("tbody")]);
				for (i = 0; i < arH.length; i++) {
					aR.appendChild($td(['class', arCl[i]], arH[i]));
				}
				var attrVal = ['class', 'tbVal'];
				var attrOther = ['class', 'soffc'];
				for (i = 0; i < TB3O.SavedOffers.length; i++) {
					var offer = TB3O.SavedOffers[i];
					var strVillageId = offer[7];
					if (strVillageId == TB3O.ActiveVillageId || strVillageId === undefined) {
						var bR = $r();
						if (strVillageId === undefined) {
							bR.className = "tbOfferG";
						}
						bR.appendChild($td(attrVal, [I("r" + (offer[2])), ' ' + offer[0]]));
						bR.appendChild(uiCreateRatioCell(offer[1] / offer[0]));
						bR.appendChild($td(attrVal, [I("r" + (offer[3])), ' ' + offer[1]]));
						bR.appendChild($td(attrOther, Math.ceil(offer[0] / TB3O.ActiveVillageInfo.mCap)));
						bR.appendChild($td(attrOther, offer[6] === '1' ? T('YES') : T('NO')));
						bR.appendChild($td(attrOther, offer[5] === '1' ? offer[4] : T('NO')));
						bR.appendChild($td(['class', 'tbSave'], uiCreateTool("bOK", T('SELL'), bind(onClickAdd, [i]))));
						bR.appendChild($td(attrOther, uiCreateTool("del", null, bind(onClickDel, [j, i]))));
						aBody.appendChild(bR);
						++j;
					}
				}
			}
			return (aTb && aTb.tBodies[0].rows.length > 0) ? aTb : null;
		}
		function mhRowUpdate3() {
			var aR1 = parseInt10(rxI1.value);
			var aR2 = parseInt10(rxI2.value);
			var totTransport = isIntValid(aR1) ? aR1 : 0;
			var totMerchants = Math.ceil(totTransport / mCap);
			var crtWaste = mCap - (totTransport - (totMerchants - 1) * mCap);
			var crtExceed = totTransport - (mAvail * mCap);
			var mhColor;
			var mhText = "<b>";
			if (totMerchants > mAvail)
				mhText += "*";
			mhText += T("MERCHANTS") + ": " + totMerchants + "/" + mAvail + "<br>" +
			T('MAX') + ": " + mAvail * mCap + "<br>";
			if (totMerchants > mAvail) {
				mhColor = "red";
				mhText += T('MTX') + ": " + crtExceed;
			} else {
				mhColor = "darkgreen";
				mhText += T('MTW') + ": " + crtWaste;
			}
			mhText += "<br>";
			mhText += T('MTC') + ": " + totTransport;
			if (totTransport > 0 && aR2 > 0) {
				mhText += "<br>";
				var ratio = aR2 / totTransport;
				var sratio = ratio.toFixed(2);
				if (ratio > 2.00) {
					mhColor = "red";
					mhText += "*";
				}
				mhText += T('MTR') + ": " + sratio;
				if (ratio > 2.00) {
					mhText += " " + T('MTRMAX', "2.00");
				}
			}
			mhText += "</b>";
			setMerchantsCell(mhText, mhColor);
			return;
		}
		function onOfferOrRatioChanged() {
			if (uiOptions.use_ratio) {
				var ratio = parseFloat($g("tb_ratio").value);
				if (isFinite(ratio) && ratio > 0) {
					var aR1 = parseInt10(rxI1.value);
					if (isIntValid(aR1)) {
						rxI2.value = Math.round(aR1 * ratio);
					}
				}
			}
			mhRowUpdate3();
		}
		function validateRatio(ratio) {
			if (ratio < 0.1) {
				ratio = 0.1;
			} else if (ratio > 2.0) {
				ratio = 2.0;
			} else if (!isFinite(ratio)) {
				ratio = 1.0;
			}
			return ratio;
		}
		function getRatioIndex() {
			var aType1 = parseInt10(rxType1.value) - 1;
			var aType2 = parseInt10(rxType2.value) - 1;
			return aType1 * 4 + aType2;
		}
		function setRatio(ratio) {
			$g("tb_ratio").value = ratio.toFixed(2);
		}
		function setDefaultRatio() {
			replaceChildren($g("tb_ratio_r1"), I("r" + rxType1.value));
			replaceChildren($g("tb_ratio_r2"), I("r" + rxType2.value));
			setRatio(validateRatio(uiOptions.ratios[getRatioIndex()]));
		}
		function uiAddMarketOfferOptions() {
			function onRatioChanges(e) {
				var ratio = parseFloat(e.target.value);
				var valid_ratio = validateRatio(ratio);
				if (valid_ratio !== ratio) {
					setRatio(valid_ratio);
				}
				uiOptions.ratios[getRatioIndex()] = valid_ratio;
				saveUIOptions();
				onOfferOrRatioChanged();
			}
			function onClickUseRatio(e) {
				uiOptions.use_ratio = e.target.checked;
				saveUIOptions();
				formItems.m2.disabled = uiOptions.use_ratio;
				if (uiOptions.use_ratio) {
					onOfferOrRatioChanged();
				}
			}
			function onClickG(e) {
				var soff = $g("tb_save_offer");
				if (soff && !soff.checked) {
					soff.click();
				}
			}
			if (formItems.optable) {
				var cols = (TB3O.M35 === 2) ? '3' : '4';
				formItems.optable.appendChild($r(null, [$td([['id', 'tb_merc_summary'], ['colspan', cols], ['rowspan', '4']]), $td(['class', 'tbOption'], [$i([['id', 'tb_use_ratio'], ['type', 'checkbox'], ['value', '1'], ['change', onClickUseRatio, false]]), T('USEMTR') + " ", $span(['id', 'tb_ratio_r1']), " \u00D7 ", $i([['id', 'tb_ratio'], ['type', 'text'], ['class', 'text'], ['maxlength', '4'], ['value', '1'], ['change', onRatioChanges, false], ['keyup', onRatioChanges, false]]), " = ", $span(['id', 'tb_ratio_r2'])])]));
				addChildren(formItems.optable, [$r($td(['class', 'tbOption tbOfferG'], [$i([['id', 'tb_save_offer_g'], ['type', 'checkbox'], ['value', '1'], ['change', onClickG, false]]), T('SVGL')])), $r($td(['class', 'tbOption'], [$i([['id', 'tb_save_offer'], ['type', 'checkbox'], ['value', '1']]), T('SAVE')])), $r($td())]);
				uiAddBuiltinUpDownControl($g("tb_ratio"), 0.1);
			}
		}
		function uiModifyMarketOfferControls() {
			function onOfferChanges() {
				var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, true);
				var aType1 = parseInt10(rxType1.value) - 1;
				var aR1 = parseInt10(rxI1.value);
				if (aR1 > resourcesInfo.Res[aType1]) {
					rxI1.value = resourcesInfo.Res[aType1];
				} else if (aR1 < 0) {
					rxI1.value = 0;
				}
				onOfferOrRatioChanged();
			}
			function onResType1Change() {
				setDefaultRatio();
				onOfferChanges();
			}
			function onResType2Change() {
				setDefaultRatio();
				onOfferOrRatioChanged();
			}
			function onOtherChange() {
				if (formItems.d1) {
					uiOptions.use_maxtime = formItems.d1.checked;
				}
				if (formItems.d2) {
					uiOptions.maxtime = formItems.d2.value;
				}
				if (formItems.ally) {
					uiOptions.ally = formItems.ally.checked;
				}
				saveUIOptions();
			}
			uiAddBuiltinUpDownControl(rxI1, mCap);
			if (formItems.d1) {
				formItems.d1.addEventListener('change', onOtherChange, false);
			}
			if (formItems.d2) {
				formItems.d2.addEventListener('change', onOtherChange, false);
				uiAddBuiltinUpDownControl(formItems.d2);
			}
			if (formItems.ally) {
				formItems.ally.addEventListener('change', onOtherChange, false);
			}
			rxI1.addEventListener('keyup', onOfferChanges, false);
			rxI1.addEventListener('change', onOfferChanges, false);
			rxI2.addEventListener('keyup', mhRowUpdate3, false);
			rxI2.addEventListener('change', mhRowUpdate3, false);
			rxType1.addEventListener('change', onResType1Change, false);
			rxType2.addEventListener('change', onResType2Change, false);
		}
		function uiSetDefaultOffer() {
			var resourcesInfo = TB3O.ActiveVillageInfo.r;
			var maxRes = resourcesInfo.Res[0];
			var minRes = maxRes;
			var idMax = 0;
			var idMin = 0;
			var ri;
			for (ri = 0; ri < 4; ri++) {
				if (maxRes <= resourcesInfo.Res[ri]) {
					maxRes = resourcesInfo.Res[ri];
					idMax = ri;
				}
				if (minRes >= resourcesInfo.Res[ri]) {
					minRes = resourcesInfo.Res[ri];
					idMin = ri;
				}
			}
			if (!(parseInt10(rxI1.value) > 0 && parseInt10(rxI2.value) > 0)) {
				rxType1.value = (idMax + 1).toString();
				rxType2.value = (idMin + 1).toString();
				if (mCap <= resourcesInfo.Res[idMax]) {
					rxI1.value = mCap;
					rxI2.value = mCap;
				}
			}
			if (formItems.d1) {
				formItems.d1.checked = uiOptions.use_maxtime;
			}
			if (formItems.d2 && uiOptions.maxtime) {
				formItems.d2.value = uiOptions.maxtime;
			}
			if (formItems.ally) {
				formItems.ally.checked = uiOptions.ally;
			}
			$g("tb_use_ratio").checked = uiOptions.use_ratio;
			formItems.m2.disabled = uiOptions.use_ratio;
			setDefaultRatio();
			onOfferOrRatioChanged();
		}
		function onClickSell() {
			var soff = $g("tb_save_offer");
			var soffG = $g("tb_save_offer_g");
			var bSOf = (soff && soff.checked);
			var bSOfG = (soffG && soffG.checked);
			formItems.m2.disabled = false;
			if (bSOf) {
				var i,
				aElem;
				var param = ["m1", "m2", "rid1", "rid2", "d2"];
				var checks = ["d1", "ally"];
				var values = [];
				for (i = 0; i < param.length; i++) {
					aElem = formItems[param[i]];
					if (aElem) {
						values[i] = aElem.value;
					}
				}
				for (i = 0; i < checks.length; i++) {
					var b = false;
					aElem = formItems[checks[i]];
					if (aElem) {
						b = aElem.checked;
					}
					values[i + param.length] = (b) ? '1' : '0';
				}
				if (!bSOfG) {
					values[7] = TB3O.ActiveVillageId;
				}
				saveOffer(values);
			}
		}
		function uiModifyMerchantsCountBar(moC) {
			addChildren(moC, [" (" + TB3O.ActiveVillageInfo.mCap + " / ", I("merchant"), ")"]);
		}
		if (formItems.form && rxI1 && rxI2 && rxType1 && rxType2) {
			loadUIOptions();
			uiAddMarketOfferOptions();
			uiModifyMarketOfferControls();
			uiSetDefaultOffer();
			if (processMarketOffer.moC) {
				uiModifyMerchantsCountBar(processMarketOffer.moC);
			}
			if (formItems.button) {
				formItems.button.addEventListener("click", onClickSell, false);
			}
			TB3O.SavedOffers = loadOffers();
			var tbSavedOffers = uiCreateSavedOffersTable();
			if (tbSavedOffers) {
				formItems.form.appendChild($e("p", attrInject$, tbSavedOffers));
			}
			uiModifyMarketOfferOverview();
		}
	}
	function getMerchantsState() {
		var container = document.querySelector(".whereAreMyMerchants");
		if (container) {
			if (container.textContent.search(/(\d+)[^\d]*\/[^\d]*(\d+)/) !== -1) {
				TB3O.MerchantsInfo.mAvail = parseInt10(RegExp.$1);
				TB3O.MerchantsInfo.mTotal = parseInt10(RegExp.$2);
			}
		}
		if (!isIntValid(TB3O.MerchantsInfo.mTotal)) {
			TB3O.MerchantsInfo.mTotal = 0;
		}
	}
	function processMarketRoutes() {
		getMerchantsState();
	}
	function uiModifyMarketRoutes() {}
	function processMarketRoutesEdit() {
		getMerchantsState();
	}
	function uiModifyMarketRoutesEdit() {
		function onSwitchUI(e) {
			TB3O.O[120] = (e.opened) ? "1" : "0";
			saveTBOptions();
			(e.opened) ? uiEnableMarketRoutesInterface() : uiRemoveMarketRoutesInterface();
		}
		var h = $xf("//h4[last()]", 'f');
		if (h) {
			var bNewUI = (TB3O.O[120] === "1");
			var richUISelector = uiCreateRollDownControl(bNewUI, [T("120"), T("EDITROUTES_TT")], onSwitchUI);
			h.appendChild(richUISelector);
			if (bNewUI) {
				uiEnableMarketRoutesInterface();
			}
		}
	}
	function uiEnableMarketRoutesInterface() {
		var ttShedule;
		var destVillageInfo;
		var repCount;
		function uiCreateMercDistTable() {
			var oD = $g("tb_unitsdest");
			if (oD) {
				removeChildren(oD);
				var aTb = uiCreateTroopsMerchantsDistTable(null, null, xy2id(destVillageInfo.x, destVillageInfo.y), {
						show_merchant : true,
						show_coords : true,
						show_arrival_time : true,
						start_time : ttShedule,
						show_merchant_return : true,
						merchant_repeat : repCount
					});
				if (aTb) {
					oD.appendChild(aTb);
				}
			}
		}
		function uiRefresh() {
			uiCreateMercDistTable()
		}
		function getNextShedule(hour) {
			var ih = parseInt10(hour);
			var dtServer = getServerTimeNow();
			var dtShedule = new Date(dtServer);
			dtShedule.setHours(ih, 0, 0, 0);
			if (dtServer.getHours() >= ih) {
				dtShedule.setDate(dtShedule.getDate() + 1);
			}
			return dtShedule.getTime();
		}
		function getDestChanges(villageId) {
			destVillageInfo = TB3O.VillagesInfo[villageId];
			uiRefreshVL_Distance(destVillageInfo.x, destVillageInfo.y);
		}
		function onHourChange() {
			ttShedule = getNextShedule(this.value);
			uiRefresh();
		}
		function onDestChange() {
			getDestChanges(this.value);
			uiRefresh();
		}
		function onRepCountChange() {
			repCount = parseInt10(this.value);
			uiRefresh();
		}
		var editTbl = $g("trading_edit");
		if (editTbl) {
			try {
				var ctrl = $n("hour");
				ctrl.addEventListener('change', onHourChange, false);
				ttShedule = getNextShedule(ctrl.value);
				ctrl = $n("did_dest");
				ctrl.addEventListener('change', onDestChange, false);
				getDestChanges(ctrl.value);
				ctrl = $n("repeat");
				ctrl.addEventListener('change', onRepCountChange, false);
				repCount = parseInt10(ctrl.value);
				var resCell = editTbl.rows[1].cells[1];
				var resElems = convertToArray(resCell.children);
				var attrIco = ['class', 'ico'];
				var attrVal = ['class', 'val'];
				replaceChildren(resCell, $t([attrInject$, ["cellspacing", "1"], ["cellpadding", "1"]], [$r(null, [$td(attrIco, resElems[0]), $td(attrVal, resElems[1])]), $r(null, [$td(attrIco, resElems[2]), $td(attrVal, resElems[3])]), $r(null, [$td(attrIco, resElems[4]), $td(attrVal, resElems[5])]), $r(null, [$td(attrIco, resElems[6]), $td(attrVal, resElems[7])]), ]));
				var uiOptions = new MarketSendUIOptions();
				uiOptions.save = null;
				var sendResTable = new SendResTable(resCell.firstChild, uiOptions);
				sendResTable.getResourcesState = function () {
					var resourcesInfo = getActualResourcesInfo(TB3O.ActiveVillageInfo.r, true, ttShedule);
					return {
						Res : resourcesInfo.Cap,
						Rest : resourcesInfo.Res,
						EPpH : resourcesInfo.EPpH
					};
				}
				var mNeed = sendResTable.getTotals().mNeed;
				mNeed = Math.min(mNeed, TB3O.MerchantsInfo.mTotal);
				insertBefore(editTbl.rows[1], $r(attrInject$, [$th(T('USE') + ":"), $td(null, uiCreateUseTraders(sendResTable, mNeed))]));
				insertAfter(editTbl, $div([['id', 'tb_unitsdest'], attrInject$]));
				sendResTable.uiModify();
				sendResTable.setMerchantsToUse(mNeed, TB3O.MerchantsInfo.mTotal);
				uiRefresh();
			} catch (e) {}

		}
	}
	function uiRemoveMarketRoutesInterface() {
		var editTbl = $g("trading_edit");
		if (editTbl) {
			var i;
			var injectedNodes = $xf("./following-sibling::*[" + $xClass('tbInject') + "] | .//*[" + $xClass('tbInject') + "]", 'r', editTbl);
			for (i = 0; i < injectedNodes.snapshotLength; ++i) {
				var node = injectedNodes.snapshotItem(i);
				if (hasClass(node, "tbSendRes")) {
					function c(ri, ci) {
						return node.rows[ri].cells[ci].firstChild;
					}
					replaceChildren(node.parentNode, [c(0, 0), c(0, 1), c(1, 0), c(1, 1), c(2, 0), c(2, 1), c(3, 0), c(3, 1)]);
				} else {
					removeElement(node);
				}
			}
		}
	}
	function searchTroopsInfoTable(aDoc) {
		return $g("troop_info", aDoc);
	}
	function processPositionDetails() {
		TB3O.pageSelector = "position_details";
		var headerCoords = $xf("//h1//span[" + $xClass('coordinatesWrapper') + "]");
		if (headerCoords) {
			var xy = parseCoords(headerCoords.innerHTML);
			TB3O.xCrt = xy[0];
			TB3O.yCrt = xy[1];
		}
	}
	function uiModifyPositionDetails() {
		var aContainer = null;
		var tTable = searchTroopsInfoTable();
		if (tTable && !hasClass(tTable, "rep")) {
			aContainer = tTable.previousElementSibling;
		}
		uiAddAttDefInfoSign(tTable, aContainer, false);
		if (TB3O.O[57] === "1") {
			var hook = $g("tileDetails");
			if (hook) {
				insertAfter(hook, aContainer = $div(attrInject$));
				uiAddUnitsTimesTable(aContainer);
			}
		}
	}
	function searchRallyPointSendTroopsTimesContainer() {
		var container = null;
		var bOK = $g("btn_ok");
		if (bOK) {
			insertAfter(bOK, container = $div(attrInject$));
		}
		return container;
	}
	function parseTroopDetails(troopDetailsTb, aDoc, ttServer, oasisMapId, bKeepId) {
		function getGroupCmd(str) {
			var arClasses = ['inSupply', 'inAttack', 'inRaid', 'inReturn', 'outSupply', 'outAttack', 'outRaid', 'outSpy', 'outHero', 'outSettler'];
			var arCmd = [0, 1, 2, , 0, 1, 2, 3, 4, 5];
			var j;
			for (j = 0; j < arClasses.length; j++) {
				if (str.indexOf(arClasses[j]) !== -1) {
					return [j <= 3 ? 1 : 2, arCmd[j]];
				}
			}
			return [, ];
		}
		var info = null;
		try {
			var i;
			var node,
			url,
			backhref;
			var hostMapId,
			hostVName,
			targetMapId,
			targetVName;
			var ttArrival,
			booty,
			cc,
			racex,
			userName,
			userId;
			var units = new Array(11);
			var grcmd = getGroupCmd(troopDetailsTb.className);
			node = $nth_tag(troopDetailsTb.rows[0].cells[0], "a");
			if (node) {
				url = parseUri(node.getAttribute('href'));
				if (url.queryKey.hasOwnProperty("d")) {
					hostMapId = parseInt10(url.queryKey.d);
					hostVName = node.textContent;
				}
			}
			node = $xf(".//a[not(" + $xClass('markAttack') + ")]", 'f', troopDetailsTb.rows[0].cells[1], aDoc);
			if (node) {
				url = parseUri(node.getAttribute('href'));
				if (url.queryKey.hasOwnProperty("d")) {
					targetMapId = parseInt10(url.queryKey.d);
					targetVName = node.textContent;
				} else if (url.queryKey.hasOwnProperty("uid")) {
					userId = url.queryKey.uid;
					userName = (userId == TB3O.UserID) ? TB3O.U[0] : node.textContent;
				}
			}
			node = $nth_tag(troopDetailsTb.rows[1].cells[1], "img");
			if (node) {
				racex = getRaceIndexFromTroopIndex(getTroopIndexTitleFromImg(node)[0]);
			}
			if (!isIntValid(racex)) {
				throw ("race?");
			}
			node = $xf(".//div[@class='res']", 'f', troopDetailsTb, aDoc);
			if (node) {
				booty = getResourcesFromString(getTextContent(node));
			}
			var allUnitsCells = troopDetailsTb.rows[2].cells;
			for (i = 1; i < allUnitsCells.length; i++) {
				var unitsCount = parseInt10(allUnitsCells[i].textContent);
				if (!isIntValid(unitsCount)) {
					unitsCount = undefined;
				}
				units[i - 1] = unitsCount;
			}
			node = $xf(".//div[@class='sup']", 'f', troopDetailsTb, aDoc);
			if (node) {
				cc = parseInt10((node.textContent));
			}
			node = $xf(".//div[@class='in']/span", 'f', troopDetailsTb, aDoc);
			if (node) {
				var timeSpan = toSeconds(node.textContent);
				ttArrival = ttServer + (timeSpan * 1000);
			}
			node = $xf(".//div[@class='sback']/a", 'f', troopDetailsTb, aDoc);
			if (node) {
				backhref = node.getAttribute('href');
			}
			if (grcmd[0] === undefined) {
				grcmd[0] = (targetMapId === undefined) ? 3 : 4;
			}
			if ((grcmd[0] === 3 || grcmd[0] === 4) && (!backhref || backhref.indexOf("tt=2") === -1)) {
				grcmd[1] = 6;
			}
			info = new TroopDetailsInfo(hostMapId, hostVName, oasisMapId, targetMapId, targetVName, grcmd[0], grcmd[1], userId, userName, ttArrival, racex, units, cc, booty);
			if (bKeepId) {
				info.id = troopDetailsTb.id;
			}
		} catch (e) {
			info = null;
		}
		return info;
	}
	function scanRallyPointInfo(rallyPointInfo, groupNo, villageId, aDoc, ttServer, bReadOnly) {
		var i;
		var nodeList = $xf("//div[@id='" + ID_CONTENT + "']//*[" + "(self::table and " + $xClass('troop_details') + ") or " + "(self::p and " + $xClass('info') + ") or " + "self::h4]", 'r', aDoc, aDoc);
		if (nodeList.snapshotLength > 0) {
			var oasisMapId,
			groupCount;
			for (i = 0; i < nodeList.snapshotLength; ++i) {
				var node = nodeList.snapshotItem(i);
				if (TAG(node) === "P") {
					node = $nth_tag(node, "a");
					if (node) {
						var url = parseUri(node.getAttribute('href'));
						if (url.queryKey.hasOwnProperty("d")) {
							oasisMapId = parseInt10(url.queryKey.d);
						}
					}
				} else if (TAG(node) === "TABLE") {
					if (!bReadOnly && !node.hasAttribute("id")) {
						node.id = "tb_td_" + i;
					}
					var troopDetailsInfo = parseTroopDetails(node, aDoc, ttServer, oasisMapId, !bReadOnly);
					if (troopDetailsInfo) {
						rallyPointInfo.t.push(troopDetailsInfo);
						rallyPointInfo.grc[troopDetailsInfo.gr - 1] = groupCount;
					}
				} else {
					oasisMapId = undefined;
					groupCount = scanIntRE(node.textContent, /\((\d+)\)/);
				}
			}
		}
		return rallyPointInfo;
	}
	function getRallyPointInfo(villageId, aDoc, ttServer, bReadOnly) {
		function getActiveFilter() {
			var filter = 0;
			var button = $xf("//div[@id='" + ID_CONTENT + "']//button[" + $xClass('iconFilterActive') + "]", 'f', aDoc, aDoc);
			if (button) {
				var v = button.value;
				filter = scanIntWithPrefix('filterCategory', v);
				if (!isIntValid(filter)) {
					filter = 0;
				}
			}
			return filter;
		}
		var rallyPointInfo = new RallyPointInfo();
		scanRallyPointInfo(rallyPointInfo, getActiveFilter(), villageId, aDoc, ttServer, bReadOnly);
		if (rallyPointInfo.t.length) {
			rallyPointInfo.ttUpd = ttServer;
			if (!$xf("//div[@id='" + ID_CONTENT + "']//p[" + $xClass('switch') + "] | //div[@id='" + ID_CONTENT + "']//div[" + $xClass('paginator') + "]", 'f', aDoc, aDoc)) {
				getVillageUnitsCount(TB3O.VillagesInfo[villageId], rallyPointInfo);
			} else {}

		} else {
			rallyPointInfo = null;
		}
		return rallyPointInfo;
	}
	function doneLoadRallyPoint(xhr_doc, villageId, ttServer, bSuccess) {
		bSuccess = (bSuccess && setVillageRes(villageId, xhr_doc, ttServer));
		if (bSuccess) {
			saveVillagesInfoProxy();
			refreshSupplement(villageId);
			fillD3TbRow_Tab5(villageId);
			fillD3TbTotals_Tab5();
			updD3Bullets(villageId, 2);
		} else {
			updD3Bullets(villageId, 4);
		}
	}
	function onLoadRallyPoint(villageId, xhr_doc) {
		var lastDoc = xhr_doc;
		var ttServer = toTimeStamp(getServerTime(xhr_doc));
		function onSuccess(groupNo, page, xhr_doc) {
			lastDoc = xhr_doc;
			ttServer = toTimeStamp(getServerTime(xhr_doc));
			scanRallyPointInfo(TB3O.rallyPointInfo, groupNo, villageId, xhr_doc, ttServer, true);
			TB3O.rallyPointInfo.ttUpd = Math.max(TB3O.rallyPointInfo.ttUpd, ttServer);
			return true;
		}
		var bSuccess = false;
		if (ttServer) {
			TB3O.rallyPointInfo = getRallyPointInfo(villageId, xhr_doc, ttServer, true);
			if (TB3O.rallyPointInfo) {
				var grc = TB3O.rallyPointInfo.grc;
				if (TB3O.rallyPointInfo.t.length === grc[0] + grc[1] + grc[2] + grc[3]) {
					bSuccess = true;
				} else {
					bSuccess = undefined;
					var ajaxSequencer = new AJAXSequencer({
							onfail : function () {
								ajaxSequencer.cancel();
							},
							oncomplete : function (bSuccess) {
								doneLoadRallyPoint(lastDoc, villageId, ttServer, bSuccess);
							}
						});
					var gix;
					for (gix = 0; gix < 4; ++gix) {
						var page;
						for (page = 2; page <= Math.ceil(grc[gix] / 10); ++page) {
							var href = "build.php?newdid=" + villageId + "&tt=1&id=39" + "&filter=" + (gix + 1) + "&page=" + page;
							ajaxSequencer.load(href, bind2(onSuccess, [gix + 1, page]));
						}
					}
				}
			}
		}
		if (bSuccess !== undefined) {
			doneLoadRallyPoint(xhr_doc, villageId, ttServer, bSuccess);
		}
	}
	function getVillageUnitsCount(villageInfo, rallyPointInfo) {
		if (rallyPointInfo) {
			var ti;
			var mapId = xy2id(villageInfo.x, villageInfo.y);
			var unitsTotal = fillArray(new Array(11), 0);
			for (ti = 0; ti < rallyPointInfo.t.length; ++ti) {
				troopDetailsInfo = rallyPointInfo.t[ti];
				if (troopDetailsInfo.h_id === mapId && troopDetailsInfo.o_id === undefined) {
					accumulateArray(unitsTotal, troopDetailsInfo.u);
				}
			}
			villageInfo.uci.ut = unitsTotal;
			villageInfo.uci.ttUpd = rallyPointInfo.ttUpd;
		} else {
			villageInfo.uci.ttUpd = undefined;
		}
	}
	function processRallyPointOverview() {
		var rallyPointInfo = getRallyPointInfo(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime), false);
	}
	function uiSetAttackType(act) {
		if (act) {
			var rbA = $xf("//input[@value='" + act + "' and @name='c']");
			if (rbA && !rbA.disabled) {
				rbA.checked = true;
			}
		}
	}
	function uiModifyDefaultAttackType() {
		var act,
		z;
		var villageInfo,
		villageId,
		mapId;
		if (crtUrl.queryKey.o) {
			act = 4;
		} else {
			act = parseInt10(TB3O.O[49]);
			if (!isIntValid(act)) {
				act = 0;
			}
			act += 2;
			if (crtUrl.queryKey.z) {
				z = parseInt10(crtUrl.queryKey.z);
				for (villageId in TB3O.VillagesInfo) {
					villageInfo = TB3O.VillagesInfo[villageId];
					mapId = xy2id(villageInfo.x, villageInfo.y);
					if (z === mapId) {
						act = 2;
						break;
					}
				}
			}
		}
		uiSetAttackType(act);
	}
	function searchRallyPointSendElems() {
		var sendTable = $g("troops");
		var sendContainer = null;
		if (sendTable) {
			sendContainer = sendTable.parentNode;
		}
		return (sendContainer) ? [sendContainer, sendTable] : null;
	}
	function uiModifyRallyPointSend() {
		var availableTroops,
		sendTroops;
		var statSendTable;
		function searchTroopsInput(troopNo) {
			return $g("tb_i" + (troopNo + 1));
		}
		function getAvailableTroopsInfo(sendTable) {
			var troopsInfo = [];
			var i;
			for (i = 1; i < 12; ++i) {
				var aInput = $xf(".//input[@name='t" + i + "']", sendTable);
				if (aInput) {
					aInput.id = 'tb_i' + i;
					var aParent = aInput.parentNode;
					var unitImg = $nth_tag(aParent, "img", 0);
					var index = (unitImg) ? getTroopIndexTitleFromImg(unitImg)[0] : null;
					if (index && TB3O.U[1] === '') {
						setRace(index);
					}
					var aLabel = $nth_tag(aParent, "a", 0);
					var count = 0;
					if (aLabel) {
						count = scanIntAny(aLabel.textContent);
					}
					troopsInfo.push([index, count]);
				}
			}
			return troopsInfo;
		}
		function getSendTroopsInfo(availableTroops) {
			var troopsInfo = cloneObject(availableTroops);
			var troopNo;
			for (troopNo = 0; troopNo < troopsInfo.length; ++troopNo) {
				var aInput = searchTroopsInput(troopNo);
				var count = 0;
				if (aInput) {
					count = parseInt10(aInput.value);
					if (!isIntValid(count)) {
						count = 0;
					}
				}
				troopsInfo[troopNo][1] = count;
			}
			return troopsInfo;
		}
		function uiRefreshStats() {
			if (statSendTable) {
				uiFillTroopsAttDefInfoTable2(statSendTable, sendTroops);
			}
		}
		function updateTroop(troopNo, units) {
			sendTroops[troopNo][1] = units;
		}
		function foreachTroop(f) {
			var troopNo;
			for (troopNo = 0; troopNo < availableTroops.length; ++troopNo) {
				var count = availableTroops[troopNo][1];
				if (count > 0) {
					f(troopNo);
				}
			}
		}
		function uiSetTroop(troopNo, units) {
			var aInput = searchTroopsInput(troopNo);
			if (aInput) {
				aInput.value = (units) ? units : "";
				updateTroop(troopNo, units);
			}
		}
		function _uiSetMaxTroop(troopNo) {
			uiSetTroop(troopNo, availableTroops[troopNo][1]);
		}
		function uiSetMaxTroop(troopNo) {
			_uiSetMaxTroop(troopNo);
			uiRefreshStats();
		}
		function uiSetMaxAllTroops() {
			foreachTroop(_uiSetMaxTroop);
			uiRefreshStats();
		}
		function _uiSetZeroTroop(troopNo) {
			uiSetTroop(troopNo, 0);
		}
		function uiSetZeroTroop(troopNo) {
			_uiSetZeroTroop(troopNo);
			uiRefreshStats();
		}
		function uiSetZeroAllTroops() {
			foreachTroop(_uiSetZeroTroop);
			uiRefreshStats();
		}
		function onChangeUnitsCount(troopNo) {
			var units = validateInputInt(this, 0, availableTroops[troopNo][1]);
			updateTroop(troopNo, units);
			uiRefreshStats();
		}
		function uiSetScout() {
			var troopNo = getTroopNoByIndex(availableTroops, getScoutTroopIndex(TB3O.U[1]));
			var scoutsAvailable = availableTroops[troopNo][1];
			var iNoOfScouts = $g('tb_selectscoutnumber');
			var wNoOfScouts = (iNoOfScouts) ? parseInt10(iNoOfScouts.value) : 3;
			if (wNoOfScouts > 0) {
				TB3O.O[50] = wNoOfScouts;
				saveTBOptions();
			}
			if (wNoOfScouts > scoutsAvailable) {
				wNoOfScouts = scoutsAvailable;
			}
			foreachTroop(_uiSetZeroTroop);
			uiSetAttackType(4);
			uiSetTroop(troopNo, wNoOfScouts);
			uiRefreshStats();
		}
		function uiSetFakeUnit() {
			foreachTroop(_uiSetZeroTroop);
			uiSetAttackType(3);
			var chk = false;
			var troopNo;
			for (troopNo = 0; troopNo < 8; ++troopNo) {
				var faketroopselected = $g("tb_faketroop" + troopNo);
				if (faketroopselected && faketroopselected.checked) {
					uiSetTroop(troopNo, 1);
					chk = true;
				}
			}
			if (!chk) {
				var minSpeed = Infinity;
				var slowTroopNo;
				var scoutTI = getScoutTroopIndex(TB3O.U[1]);
				for (troopNo = 0; troopNo < 8; ++troopNo) {
					if (availableTroops[troopNo][1] > 0 && availableTroops[troopNo][0] !== scoutTI) {
						var index = availableTroops[troopNo][0];
						if (index !== scoutTI && uc[index][8] < minSpeed) {
							slowTroopNo = troopNo;
							minSpeed = uc[index][8];
						}
					}
				}
				uiSetTroop(slowTroopNo, 1);
			}
			uiRefreshStats();
		}
		function uiAddTopMenu(sendContainer) {
			function uiAddActionLink(aCell, bEnabled, label, actionFun) {
				if (bEnabled > 0) {
					aCell.appendChild($action(null, label, actionFun));
				} else {
					aCell.appendChild($span([['class', 'none']], label));
				}
			}
			function uiAddSelectAllLink(aTb) {
				var aCell;
				var troopNo,
				totalTroops = 0;
				for (troopNo = 0; troopNo < availableTroops.length; ++troopNo) {
					totalTroops += availableTroops[troopNo][1];
				}
				aTb.appendChild($r([['class', 'tb3rnb']], [aCell = $td([['class', 'tb3cnb']]), $td()]));
				uiAddActionLink(aCell, totalTroops > 0, T('SELECTALLTROOPS'), uiSetMaxAllTroops);
			}
			function uiAddSelectScoutLink(aTb) {
				var aCell,
				bCell,
				aInput;
				var scoutTI = getScoutTroopIndex(TB3O.U[1]);
				var troopNo = getTroopNoByIndex(availableTroops, scoutTI);
				var scoutsAvailable = (troopNo === undefined) ? 0 : availableTroops[troopNo][1];
				var scouts = parseInt10(TB3O.O[50]);
				if (isNaN(scouts)) {
					scouts = (scoutsAvailable > 3) ? 3 : scoutsAvailable;
				}
				aTb.appendChild($r([['class', 'tb3rnb']], [aCell = $td([['class', 'tb3cnb']]), $td(null, [getTroopImage(scoutTI), "\u00A0", aInput = $i([['class', 'text'], ['type', 'text'], ['id', 'tb_selectscoutnumber'], ['maxlength', '6'], ['value', scouts]])])]));
				uiAddBuiltinUpDownControl(aInput);
				uiAddActionLink(aCell, scoutsAvailable > 0, T('SELECTSCOUT'), uiSetScout);
			}
			function uiAddSelectFakeLink(aTb) {
				var aCell;
				var bCell = $td();
				var scoutTI = getScoutTroopIndex(TB3O.U[1]);
				var bHasTroops = false;
				var troopNo;
				for (troopNo = 0; troopNo < 8; ++troopNo) {
					if (availableTroops[troopNo][1] > 0 && availableTroops[troopNo][0] !== scoutTI) {
						addChildren(bCell, [getTroopImage(availableTroops[troopNo][0]), $i([['type', 'checkbox'], ['id', 'tb_faketroop' + (troopNo)], ['value', '1']])]);
						bHasTroops = true;
					}
				}
				aTb.appendChild($r([['class', 'tb3rnb']], [aCell = $td([['class', 'tb3cnb']]), bCell]));
				uiAddActionLink(aCell, bHasTroops, T('SELECTFAKE'), uiSetFakeUnit);
			}
			var aTb = $t([["class", "tb3tbnb tbSendTroopsMenu"]]);
			insertBefore(sendContainer, aTb);
			uiAddSelectAllLink(aTb);
			uiAddSelectScoutLink(aTb);
			uiAddSelectFakeLink(aTb);
		}
		function uiModifySendTableTroop(troopNo) {
			var aInput = searchTroopsInput(troopNo);
			aInput.addEventListener('keyup', bind(onChangeUnitsCount, [troopNo]), false);
			aInput.addEventListener('change', bind(onChangeUnitsCount, [troopNo]), false);
			uiAddBuiltinUpDownControl(aInput);
			var aParent = aInput.parentNode;
			var unitImg = $nth_tag(aParent, "img", 0);
			unitImg.addEventListener('click', bind(uiSetZeroTroop, [troopNo]), false);
			var aLink = $nth_tag(aParent, "a", 0);
			aLink.addEventListener('click', bind(uiSetMaxTroop, [troopNo]), false);
		}
		function uiModifySendTable(sendTable) {
			foreachTroop(uiModifySendTableTroop);
			sendTable.appendChild($r($td([['colspan', '12'], ['style', 'text-align:center']], uiCreateTool("bDel", T('MTCL'), uiSetZeroAllTroops))));
		}
		function uiAddLastAttackTable() {
			var aF = $xf("//form[@name='snd']");
			if (aF) {
				var bOK = $xf("//*[@id='btn_ok' and @name='s1']");
				if (bOK) {
					bOK.addEventListener('click', saveLastAttack, false);
				}
				var cstla = loadPersistentUserObject('stla');
				var stla = cstla[TB3O.ActiveVillageId];
				if (stla) {
					var bsh = false;
					var xi;
					for (xi = 2; xi < stla.length - 2; xi++) {
						if (stla[xi] !== 0) {
							bsh = true;
						}
					}
					if (bsh) {
						var aTb = $t([['id', 'stla']]);
						var aRow = $r(null, [$td([['class', 'stlahh1']], I('u' + (TB3O.U[7]))), $td(stla[2]), $td([['class', 'stlahh']], I('u' + (3 + TB3O.U[7]))), $td(stla[5]), $td([['class', 'stlahh']], I('u' + (6 + TB3O.U[7]))), $td(stla[8]), $td([['class', 'stlahh']], I('u' + (8 + TB3O.U[7]))), $td(stla[10])]);
						var bRow = $r(null, [$td([['class', 'stlahh1']], I('u' + (1 + TB3O.U[7]))), $td(stla[3]), $td([['class', 'stlahh']], I('u' + (4 + TB3O.U[7]))), $td(stla[6]), $td([['class', 'stlahh']], I('u' + (7 + TB3O.U[7]))), $td(stla[9]), $td([['class', 'stlahh']], I('u' + (9 + TB3O.U[7]))), $td(stla[11])]);
						var cRow = $r(null, [$td([['class', 'stlahh1']], I('u' + (2 + TB3O.U[7]))), $td(stla[4]), $td([['class', 'stlahh']], I('u' + (5 + TB3O.U[7]))), $td(stla[7]), $td([['colspan', '2']])]);
						if (stla.length > 14) {
							cRow.appendChild($td([['class', 'stlahh']], I('uhero')));
							cRow.appendChild($td(stla[12]));
						} else {
							cRow.appendChild($td([['class', 'stlahh']]));
							cRow.appendChild($td());
						}
						var dRow = null;
						if (TB3O.O[52] === "1") {
							dRow = $r(null, [$td([['class', 'stlahh1']], I("vmkls")), $td([['class', 'stlac'], ['colspan', '4']], uiCreateIntMapLinkXY2(stla[0], stla[1])), $td([['class', 'stlac'], ['colspan', '3']], stla[stla.length - 1])]);
						}
						var eRow = $r(null, [$td([['class', 'stlahh1'], ['colspan', '2']], T("RESEND")), $td([['class', 'stlac'], ['colspan', '3'], ['style', 'width:100px;']], uiCreateTool("bOK", T("YES"), setLastAttack)), $td([['class', 'stlahh2'], ['colspan', '2']], T("DEL")), $td([['class', 'stlac']], uiCreateTool("del", T("DEL"), hideLastAttackSend))]);
						addChildren(aTb, [aRow, bRow, cRow, dRow, eRow]);
						insertAfter($g("troops"), aTb);
					}
				}
			}
			function setLastAttack() {
				var tx,
				i;
				foreachTroop(_uiSetZeroTroop);
				for (i = 2; i < stla.length - 2; i++) {
					var troopNo = i - 2;
					var units = stla[i];
					var availableUnits = availableTroops[troopNo][1];
					if (availableUnits > 0) {
						if (units > availableUnits) {
							units = availableUnits;
						}
						uiSetTroop(troopNo, units);
					}
				}
				if (TB3O.O[52] === '1') {
					var xNode = $xf("//form[@name='snd']//*[@name='x']");
					var yNode = $xf("//form[@name='snd']//*[@name='y']");
					if (xNode && yNode) {
						xNode.value = stla[0];
						yNode.value = stla[1];
						var e = document.createEvent("Events");
						e.initEvent("change", true, false);
						xNode.dispatchEvent(e);
					}
				}
				uiSetAttackType(stla[stla.length - 2]);
				uiRefreshStats();
			}
			function hideLastAttackSend() {
				var xi;
				for (xi = 2; xi < stla.length; xi++) {
					stla[xi] = 0;
				}
				savePersistentUserObject('stla', stla, TB3O.ActiveVillageId);
				$g('stla').style.display = 'none';
			}
			function saveLastAttack() {
				var stla = [];
				stla[0] = $xf("//form[@name='snd']//*[@name='x']").value;
				stla[1] = $xf("//form[@name='snd']//*[@name='y']").value;
				var i;
				for (i = 0; i < sendTroops.length; ++i) {
					stla[i + 2] = sendTroops[i][1];
				}
				var rbl = $xf("//form//input[@name='c']", 'l');
				for (i = 0; i < rbl.snapshotLength; i++) {
					if (rbl.snapshotItem(i).checked == true) {
						stla[stla.length] = rbl.snapshotItem(i).value;
						stla[stla.length] = rbl.snapshotItem(i).parentNode.textContent;
					}
				}
				savePersistentUserObject('stla', stla, TB3O.ActiveVillageId);
			}
		}
		function uiCreateTroopsTimesTable(x, y) {
			return uiCreateTroopsMerchantsDistTable("tb_unitstime", null, xy2id(x, y), {
				show_troops : true,
				show_all_races : true,
				show_coords : true
			});
		}
		var elems = searchRallyPointSendElems();
		if (elems) {
			var sendContainer = elems[0];
			var sendTable = elems[1];
			availableTroops = getAvailableTroopsInfo(sendTable);
			sendTroops = getSendTroopsInfo(availableTroops);
			uiAddTopMenu(sendContainer);
			uiModifySendTable(sendTable);
			statSendTable = uiCreateTroopsAttDefInfoTable2("tb_sendtroopstat", sendTroops, T("STAT"), true);
			if (statSendTable) {
				insertAfter(sendTable, statSendTable);
			}
			if (crtUrl.queryKey.c === undefined) {
				uiModifyDefaultAttackType();
			}
			if (TB3O.O[51] === "1") {
				uiAddLastAttackTable();
			}
			new DestinationPicker(searchRallyPointSendTroopsTimesContainer, uiCreateTroopsTimesTable);
		}
	}
	function searchRallyPointDismissElems() {
		var dismissTable = $xf("//table[@class='troop_details']");
		var dismissContainer = null;
		if (dismissTable) {
			dismissContainer = dismissTable.parentNode;
		}
		return (dismissContainer) ? [dismissContainer, dismissTable] : null;
	}
	function uiModifyRallyPointDismiss() {
		var availableTroops,
		dismissTroops,
		remainsTroops;
		var statDismissTable,
		statRemainsTable;
		function getDismissTroopsInfo(dismissTable) {
			var troopsInfo = [];
			var iCells = dismissTable.rows[1].cells;
			var qCells = dismissTable.rows[2].cells;
			var len = iCells.length;
			var i;
			for (i = 1; i < len; ++i) {
				var unitImg = $nth_tag(iCells[i], "img", 0);
				var aInput = $nth_tag(qCells[i], "input", 0);
				if (unitImg && aInput) {
					var index = getTroopIndexTitleFromImg(unitImg)[0];
					var count = parseInt10(aInput.value);
					troopsInfo.push([index, count]);
				} else {
					troopsInfo.push([null, 0]);
				}
			}
			return troopsInfo;
		}
		function uiRefreshStats() {
			if (statRemainsTable) {
				uiFillTroopsAttDefInfoTable2(statRemainsTable, remainsTroops);
			}
			if (statDismissTable) {
				uiFillTroopsAttDefInfoTable2(statDismissTable, dismissTroops);
			}
		}
		function searchTroopsInput(troopNo) {
			return $xf("//input[@name='t[" + (troopNo + 1) + "]']");
		}
		function updateTroop(troopNo, units) {
			dismissTroops[troopNo][1] = units;
			remainsTroops[troopNo][1] = availableTroops[troopNo][1] - units;
		}
		function foreachTroop(f) {
			var troopNo;
			for (troopNo = 0; troopNo < availableTroops.length; ++troopNo) {
				var count = availableTroops[troopNo][1];
				if (count > 0) {
					f(troopNo);
				}
			}
		}
		function uiSetTroop(troopNo, units) {
			var aInput = searchTroopsInput(troopNo);
			if (aInput) {
				aInput.value = (units) ? units : "";
				updateTroop(troopNo, units);
			}
		}
		function _uiSetMaxTroop(troopNo) {
			uiSetTroop(troopNo, availableTroops[troopNo][1]);
		}
		function uiSetMaxTroop(troopNo) {
			_uiSetMaxTroop(troopNo);
			uiRefreshStats();
		}
		function uiSetMaxAllTroops() {
			foreachTroop(_uiSetMaxTroop);
			uiRefreshStats();
		}
		function _uiSetZeroTroop(troopNo) {
			uiSetTroop(troopNo, 0);
		}
		function uiSetZeroTroop(troopNo) {
			_uiSetZeroTroop(troopNo);
			uiRefreshStats();
		}
		function uiSetZeroAllTroops() {
			foreachTroop(_uiSetZeroTroop);
			uiRefreshStats();
		}
		function onChangeUnitsCount(troopNo) {
			var units = validateInputInt(this, 0, availableTroops[troopNo][1]);
			updateTroop(troopNo, units);
			uiRefreshStats();
		}
		function uiModifyDismissTable(dismissTable) {
			var iCells = dismissTable.rows[1].cells;
			var qCells = dismissTable.rows[2].cells;
			var len = iCells.length;
			iCells[0].textContent = "";
			iCells[0].appendChild(uiCreateTool("del", T('MTCL'), uiSetZeroAllTroops));
			iCells[0].style.textAlign = "center";
			var aRow = $r(attrInject$, $td($action(null, "(" + T('ALL') + ")", uiSetMaxAllTroops)));
			var i;
			for (i = 1; i < len; ++i) {
				var aInput = $nth_tag(qCells[i], "input", 0);
				var aCell = $td();
				if (aInput) {
					aInput.addEventListener('keyup', bind(onChangeUnitsCount, [i - 1]), false);
					aInput.addEventListener('change', bind(onChangeUnitsCount, [i - 1]), false);
					aCell.appendChild($action([['class', (aInput.value > 9999) ? "tbMany" : ""]], "(" + aInput.value + ")", bind(uiSetMaxTroop, [i - 1])));
					var unitImg = $nth_tag(iCells[i], "img", 0);
					unitImg.addEventListener('click', bind(uiSetZeroTroop, [i - 1]), false);
					unitImg.style.cursor = "pointer";
					iCells[i].appendChild(uiCreateUpDownControl(aInput));
				}
				aRow.appendChild(aCell);
			}
			insertAfter(dismissTable.rows[2], aRow);
		}
		function uiAddDistanceInfo(dismissContainer, dismissTable) {
			var aLink = $nth_tag(dismissTable.rows[0].cells[0], "a", 0);
			if (aLink) {
				var mapId = parseUri(aLink.getAttribute('href')).queryKey.d;
				if (mapId) {
					var tRace = TB3O.U[1];
					var tImg = $nth_tag(dismissTable.rows[1].cells[1], "img", 0);
					if (tImg) {
						tRace = getRaceFromTroopIndex(getTroopIndexTitleFromImg(tImg)[0]);
					}
					var aTb = uiCreateTroopsMerchantsDistTable("tb_dismisstroopsdist", null, mapId, {
							show_arrival_time : true,
							race : tRace,
							show_coords : true,
							show_troops : true
						});
					if (aTb) {
						dismissContainer.appendChild(aTb);
					}
				}
			}
		}
		var elems = searchRallyPointDismissElems();
		if (elems) {
			var dismissContainer = elems[0];
			var dismissTable = elems[1];
			availableTroops = getDismissTroopsInfo(dismissTable);
			dismissTroops = cloneObject(availableTroops);
			remainsTroops = cloneObject(availableTroops);
			var i;
			for (i = 0; i < remainsTroops.length; ++i) {
				remainsTroops[i][1] = 0;
			}
			uiModifyDismissTable(dismissTable);
			statRemainsTable = uiCreateTroopsAttDefInfoTable2(null, remainsTroops, T("STAT_REMAINS"), true);
			if (statRemainsTable) {
				insertAfter(dismissTable, statRemainsTable);
			}
			statDismissTable = uiCreateTroopsAttDefInfoTable2(null, dismissTroops, T("STAT_DISMISS"), true);
			if (statDismissTable) {
				insertAfter(dismissTable, statDismissTable);
			}
			if (crtUrl.queryKey.newdid === undefined) {
				uiAddDistanceInfo(dismissContainer, dismissTable);
			}
		}
	}
	function cp2villages(cp) {
		var noVil;
		if (TB3O.nServerType === 0) {
			if (TB3O.O[1] === "1") {
				noVil = Math.round(Math.pow(cp / 2000, 1 / 2));
			} else {
				noVil = Math.round(Math.pow(cp / 1600, 1 / 2.3));
			}
		} else {
			var speed = TB3O.nMerchantSpeedFactor[TB3O.nServerType];
			noVil = Math.round(Math.pow(speed * cp / 1600, 1 / 2.3));
		}
		return noVil;
	}
	function villages2cp(noVil) {
		var cp;
		if (noVil <= 1) {
			cp = 0;
		} else if (TB3O.nServerType === 0) {
			if (TB3O.O[1] === "1") {
				cp = Math.round(2 * Math.pow(noVil - 1, 2) * 10) * 100;
			} else {
				cp = Math.round(1.6 * Math.pow(noVil - 1, 2.3)) * 1000;
			}
		} else {
			var speed = TB3O.nMerchantSpeedFactor[TB3O.nServerType];
			cp = Math.round(16 / speed * Math.pow(noVil - 1, 2.3)) * 100;
		}
		return cp;
	}
	function uiCreateCulturePointsTable(titleCP, crtVil, crtTotalCP, prodTotalCP) {
		var cpTable = $t([['id', 'cptable']], $e("thead", null, [$r(null, [$td([['rowspan', 2]], T('VILLAGE')), $td([['colspan', 2]], I("cp", [['title', titleCP]])), $td([['colspan', 2]], I("clock"))]), $r(null, [$td([], T('TOTAL')), $td([], T('YOUNEED')), $td([], T('NEWVILLAGEAV')), $td([], T('TIMEUNTIL'))])]));
		var maxNewVillages = 1;
		var boolReachedMaxNewVillages = false;
		var i,
		xi;
		for (i = 0; i < maxNewVillages && i < 50; i++) {
			var cellsContent,
			strClass;
			var reqCP = villages2cp(crtVil + i + 1);
			if (reqCP <= crtTotalCP) {
				cellsContent = [crtVil + i + 1, reqCP, '0', T('NOW'), '0:00:00'];
				strClass = 'CG';
				maxNewVillages += 1;
			} else {
				if (!boolReachedMaxNewVillages) {
					maxNewVillages += 2;
					boolReachedMaxNewVillages = true;
				}
				var tiempo = ((reqCP - crtTotalCP) / prodTotalCP) * 86400;
				cellsContent = [crtVil + i + 1, reqCP, reqCP - crtTotalCP, formatDateTimeRelative(tiempo, 0), formatTimeSpan(tiempo, 1)];
				strClass = 'CR';
			}
			var cpRow = $r();
			for (xi = 0; xi < 5; xi++) {
				cpRow.appendChild($td([['class', strClass]], cellsContent[xi]));
			}
			cpTable.appendChild(cpRow);
		}
		return cpTable;
	}
	function getCultureTabInfo(villageId, aDoc, ttServer) {
		var info = getCulturePoints(aDoc);
		if (info) {
			var villageInfo = TB3O.VillagesInfo[villageId];
			villageInfo.cpi.cp = info.cp[0];
			villageInfo.cpi.ttUpd = ttServer;
		}
		return !!info;
	}
	function processCultureTab() {
		TB3O.pageSelector = "culture";
		getCultureTabInfo(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
	}
	function uiModifyCultureTab() {
		var info = getCulturePoints();
		if (info) {
			var idxItem = 0;
			var prodTotalCP = info.cp[++idxItem];
			if (info.cp.length > 4) {
				prodTotalCP += info.cp[++idxItem];
			}
			var crtTotalCP = info.cp[++idxItem];
			var pc_aldea_prox = info.cp[++idxItem];
			var crtVil = cp2villages(pc_aldea_prox);
			var titleCP = "Culture";
			var menu = searchAndParseTabMenu();
			if (menu) {
				titleCP = menu.items[menu.active][0];
			}
			var cpTable = uiCreateCulturePointsTable(titleCP, crtVil, crtTotalCP, prodTotalCP);
			info.container.appendChild(cpTable);
		}
	}
	function getTownHallInfo(villageId, aDoc, ttServer) {
		var cRow = $xf("//table[" + $xClass('under_progress') + "]/tbody/tr[1]", 'f', aDoc, aDoc);
		var villageInfo = TB3O.VillagesInfo[villageId];
		if (cRow && cRow.cells.length === 3) {
			var ttEnd = getEventTimeStamp(ttServer, cRow.cells[1].textContent);
			villageInfo.thi.evA = [new CelebrationEvent(cRow.cells[0].textContent, ttEnd)];
		} else {
			villageInfo.thi.evA = [];
		}
		villageInfo.thi.ttUpd = ttServer;
		return true;
	}
	function processTownHall() {
		TB3O.pageSelector = "town_hall";
		getTownHallInfo(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
	}
	function uiFillUpgradeProgressTable(aTb, gid, upgradeInfo) {
		var evA = upgradeInfo.evA;
		if (evA.length > 0) {
			var ttEnd,
			ttCurrent = toTimeStamp(getServerTimeNow());
			var dtNow = getDesiredTime(ttCurrent);
			var i,
			bS;
			for (i = 0, bS = false; i < evA.length; ++i) {
				var upgradingEvent = evA[i];
				ttEnd = upgradingEvent.ttEnd;
				if (ttCurrent < ttEnd || ttEnd === null) {
					if (!bS) {
						aTb.appendChild(uiCreateVillageInfoTipHead(getBuildingIcon(gid)));
						bS = true;
					}
					aTb.appendChild(uiCreateVillageInfoTipRow([getTroopImage(upgradingEvent.tix), " " + upgradingEvent.name], upgradingEvent.txtLvl, dtNow, ttEnd));
				}
			}
		}
	}
	function uiFillUpiPTable(aTb, upgradeInfo) {
		uiFillUpgradeProgressTable(aTb, 13, upgradeInfo);
	}
	function uiCreateUpiPTable(villageId) {
		return uiCreateVillageInfoTipTable(villageId, "upi", uiFillUpiPTable);
	}
	function getUpgradeInfo(gid, villageId, aDoc, ttServer) {
		var villageInfo = TB3O.VillagesInfo[villageId];
		var upgradeInfo = scanUpgradeInfo(aDoc, ttServer);
		if (upgradeInfo) {
			if (gid === 13) {
				villageInfo.upi = upgradeInfo;
			}
		}
		return !!upgradeInfo;
	}
	function processUpgradeBuilding(gid) {
		getUpgradeInfo(gid, TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
	}
	function getTrainingBlockPath() {
		return "//div[@id='" + ID_CONTENT + "']//div[" + $xClass('trainUnits') + "]";
	}
	function isThisTrainingBuilding() {
		var aValue = $xf(getTrainingBlockPath());
		return !!aValue;
	}
	function searchTrainingQueueTable(aDoc) {
		return searchQueueTable(aDoc);
	}
	function scanTrainingInfo(aDoc, ttServer) {
		var result = true;
		var titTb = searchTrainingQueueTable(aDoc);
		var trainingInfo = new TrainingInfo();
		trainingInfo.ttUpd = ttServer;
		if (titTb) {
			var rows = titTb.rows;
			var countdownElem = $nth_tag(rows[rows.length - 1], "span");
			var ttFirst = null;
			if (countdownElem) {
				ttFirst = ttServer + toSeconds(countdownElem.textContent) * 1000;
			}
			var xi;
			for (xi = 1; xi < rows.length - 1; ++xi) {
				var cells = rows[xi].cells;
				if (cells.length === 3) {
					var aInf = cells[0];
					var aImg = $nth_tag(aInf, "img");
					if (aImg) {
						var tInfo = getTroopIndexTitleFromImg(aImg);
						var count = parseInt10(aInf.textContent);
						if (isIntValid(count)) {
							var ttEnd = getEventTimeStamp(ttServer, cells[1].textContent);
							trainingInfo.evA.push(new TrainingEvent(tInfo[1], ttEnd, [tInfo[0], count], ttFirst));
							ttFirst = null;
						}
					}
				}
			}
			result = (trainingInfo.evA.length === (titTb.rows.length - 2));
		}
		return result ? trainingInfo : null;
	}
	function scanTrainingContracts(aDoc) {
		function scanContract(node) {
			var contract = null;
			try {
				var countNode = $xf(".//span[" + $xClass('furtherInfo') + "]", 'f', node, aDoc);
				var count,
				countTxt;
				if (countNode.textContent.search(/(\d+)/) !== -1) {
					countTxt = RegExp.$1;
					count = parseInt10(countTxt);
				}
				var aImg = $nth_tag(node, "img");
				var tInfo = getTroopIndexTitleFromImg(aImg);
				var costNode = $xf(".//div[" + $xClass('showCosts') + "]", 'f', node, aDoc);
				contract = scanCommonContractInfo(costNode);
				var inputNode = $nth_tag(node, "input");
				var countContract = parseInt10(inputNode.value);
				var setMaxNode = $xf("./following-sibling::a", 'f', inputNode, aDoc);
				if (isIntValid(count) && inputNode && setMaxNode && contract.cost) {
					contract.contractNode = node;
					contract.tInfo = tInfo;
					contract.countNode = countNode;
					contract.count = count;
					contract.countTxt = countTxt;
					contract.countContract = (isIntValid(countContract)) ? countContract : 0;
					contract.inputNode = inputNode;
					contract.setMaxNode = setMaxNode;
				} else {
					contract = null;
				}
			} catch (e) {
				contract = null;
			}
			return contract;
		}
		var xi;
		var contracts = [];
		var contractNodes = $xf(getTrainingBlockPath() + "//div[" + $xClass('details') + "]", 'l', aDoc, aDoc);
		forEach(contractNodes, function (item) {
			var contract = scanContract(item);
			if (contract) {
				contract.contractNo = contracts.push(contract) - 1;
			}
		});
		return contracts;
	}
	function uiModifyTrainingContractLayout(trainingContract) {
		var t,
		c;
		insertAfter(trainingContract.setMaxNode, t = $t(['class', 'tbInject tbTrainContract'], $r(null, [c = $td(['class', 'tbOrg']), trainingContract.quickPadContainer = $td(['class', 'tbContainer'])])));
		moveElement(trainingContract.inputNode.previousElementSibling, c);
		moveElement(trainingContract.inputNode, c);
		moveElement(trainingContract.setMaxNode.previousElementSibling, c);
		moveElement(trainingContract.setMaxNode, c);
		hide(trainingContract.setMaxNode);
	}
	function uiFillTriPTable(aTb, trainingInfoColl) {
		var j,
		k;
		var TriPInfo;
		var ttEnd,
		ttCurrent = toTimeStamp(getServerTimeNow());
		var dtNow = getDesiredTime(ttCurrent);
		var stats = getTrainingInfoCollStats(trainingInfoColl, ttCurrent);
		var arrTriP = stats.troopsNext;
		if (arrTriP.length > 0) {
			aTb.appendChild(uiCreateVillageInfoTipHead(getTroopImage(TB3O.U[7])));
			for (j = 0; j < arrTriP.length; ++j) {
				TriPInfo = arrTriP[j];
				ttEnd = TriPInfo[0];
				aTb.appendChild(uiCreateVillageInfoTipRow([getTroopImage(TriPInfo[1]), " " + TriPInfo[2]], T("BN_GID" + TriPInfo[3]), dtNow, ttEnd));
			}
		}
		arrTriP = stats.buildingsUsage;
		if (arrTriP.length > 0) {
			aTb.appendChild(uiCreateVillageInfoTipHead(getBuildingIcon(19)));
			for (j = 0; j < arrTriP.length; ++j) {
				TriPInfo = arrTriP[j];
				ttEnd = TriPInfo[0];
				var col2content = [];
				for (k = 0; k < TriPInfo[2].length; ++k) {
					var troopInfo = TriPInfo[2][k][0];
					if (col2content.length) {
						col2content.push(", ");
					};
					col2content.push(troopInfo[1] + "\u00A0\u00D7\u00A0", getTroopImage(troopInfo[0]));
				}
				aTb.appendChild(uiCreateVillageInfoTipRow([getBuildingIcon(TriPInfo[1]), " " + T("BN_GID" + TriPInfo[1])], col2content, dtNow, ttEnd));
			}
		}
	}
	function uiCreateTriPTable(villageId) {
		var aTb = $t();
		aTb.id = 'tb_BiPTM';
		uiFillTriPTable(aTb, TB3O.VillagesTrInfo.load(villageId));
		return (aTb.hasChildNodes()) ? aTb : null;
	}
	function getTrainingInfo(gid, villageId, aDoc, ttServer) {
		var trainingInfoColl = TB3O.VillagesTrInfo.load(villageId);
		var trainingInfo = scanTrainingInfo(aDoc, ttServer);
		if (trainingInfo) {
			trainingInfoColl[gid] = trainingInfo;
			TB3O.VillagesTrInfo.flush(villageId);
		} else {
			delete trainingInfoColl[gid];
		}
		return !!trainingInfo;
	}
	function processTrainingBuilding(gid) {
		getTrainingInfo(gid, TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
	}
	function uiModifyTrainingBuilding(gid) {
		function uiAddTrainingSummary(titTb, arrTriP) {
			var xi;
			var ttCurrent = toTimeStamp(getServerTimeNow());
			var dtNow = getDesiredTime(ttCurrent);
			var headerNode = $xf("./preceding-sibling::h4[1]", 'f', titTb);
			var summaryInsertionPoint = titTb;
			if (headerNode) {
				var summaryHeaderNode = headerNode.cloneNode(true);
				addClass(summaryHeaderNode, "tbInject");
				summaryHeaderNode.textContent = T("TOTTRTR");
				insertBefore(headerNode, summaryHeaderNode);
				summaryInsertionPoint = headerNode;
			}
			var aBody;
			var totTb = titTb.cloneNode(false);
			totTb.className = "tbInject tbTrainingSummary";
			var cells = titTb.rows[0].cells;
			addChildren(totTb, [$e("thead", $r(['class', 'cbgx'], [$td(cells[0].textContent), $td(T("TAVGDUR")), $td(cells[1].textContent), $td(cells[2].textContent)])), aBody = $e("tbody")]);
			for (xi = 0; xi < arrTriP.length; ++xi) {
				var TriPInfo = arrTriP[xi];
				var ttEnd = TriPInfo[0];
				var troopInfo = TriPInfo[3];
				var row = $r(null, [$td(['class', 'desc'], [getTroopImage(troopInfo[0]), troopInfo[1] + " " + TriPInfo[4]]), $td(['class', 'avg'], formatTimeSpan(Math.round(TriPInfo[2]), 0)), $td(['class', 'dur'], [I("hourglass"), uiSetTimeSpanByDate($span(), dtNow, getDesiredTime(ttEnd), {
										format : 1
									})]), $td(['class', 'fin'], [I("clock"), $span(formatDateTime(dtNow, getDesiredTime(ttEnd), 1))])]);
				uiAddTooltip(row.cells[0], bind(uiCreateTroopInfoTooltip, [troopInfo, TriPInfo[4]]));
				aBody.appendChild(row);
			}
			insertBefore(summaryInsertionPoint, totTb);
			return totTb;
		}
		function uiModifyTrainingContracts(trainingContracts, trainedTroops) {
			var bUpdateUrl = true;
			var refreshTimer = new Timer;
			function updateResourcesInfo(resourcesInfo, contractNo) {
				var xi,
				ri;
				var r = cloneResourcesInfo(resourcesInfo);
				for (xi = 0; xi < trainingContracts.length; ++xi) {
					if (xi !== contractNo) {
						var trainingContract = trainingContracts[xi];
						var count = trainingContract.countContract;
						var ucost = trainingContract.cost;
						for (ri = 0; ri < 4; ++ri) {
							r.Res[ri] -= ucost[ri] * count;
						}
					}
				}
				return r;
			}
			function __calculateContractCountMax(resourcesInfo, contractNo) {
				var ri;
				var resAvail = resourcesInfo.Res;
				var trainingContract = trainingContracts[contractNo];
				var ucost = trainingContract.cost;
				var countMax = Infinity,
				countNPCMax = Infinity;
				var ucTotal = 0;
				for (ri = 0; ri < 4; ++ri) {
					var cost = ucost[ri];
					ucTotal += cost;
					countMax = Math.min(countMax, Math.max(0, Math.floor(resAvail[ri] / cost)));
					countNPCMax = Math.min(countNPCMax, Math.floor(resourcesInfo.Cap[ri] / cost));
				}
				trainingContract.countMax = countMax;
				trainingContract.countNPCMax = Math.min(countNPCMax, Math.floor(totalResources(resAvail) / ucTotal));
			}
			function calculateContractCountMax(resourcesInfo, contractNo) {
				__calculateContractCountMax(updateResourcesInfo(resourcesInfo, contractNo), contractNo);
			}
			function getUnitsAvailability(count, cost1, resourcesInfo) {
				var cost = countResources(cloneArray(cost1), count);
				return getAvailability(cost, resourcesInfo, TB3O.bIsNPCInVillage);
			}
			function uiRefreshContractCounts(trainingContract) {
				var tix = trainingContract.tInfo[0];
				var troopNo = getTroopNoByIndex(trainedTroops, tix);
				var contractNo = trainingContract.contractNo;
				var countPresent = trainingContract.count;
				var countTrained = (troopNo === undefined) ? 0 : trainedTroops[troopNo][1];
				var countContract = trainingContract.countContract;
				var countNew = countTrained + countContract;
				var countTotal = countPresent + countNew;
				var node;
				display($g("tb_cntp_" + contractNo), (countNew > 0));
				if (countNew > 0) {
					node = $g("tb_cntr_" + contractNo);
					node.textContent = countNew;
					ifClass(node, countContract > 0, 'tbNew');
					node = $g("tb_cnta_" + contractNo);
					node.textContent = countTotal;
					ifClass(node, countContract > 0, 'tbNew');
				}
			}
			function uiRefreshQuickPad(trainingContract, resourcesInfo) {
				var tsRefresh = Infinity;
				var av = getUnitsAvailability(trainingContract.countContract, trainingContract.cost, resourcesInfo);
				uiSetCenterNumberState(trainingContract.inputNode, av[0], false);
				tsRefresh = getAvailabilityRefreshTimeout(av);
				var quickPadCells = trainingContract.quickPadContainer.firstChild.rows[0].cells;
				var i;
				for (i = 1; i < 4; ++i) {
					var node = quickPadCells[i].firstChild;
					if (node) {
						var count = trainingContract.countContract + parseInt10(node.textContent);
						av = getUnitsAvailability(count, trainingContract.cost, resourcesInfo);
						tsRefresh = Math.min(tsRefresh, getAvailabilityRefreshTimeout(av));
						uiSetCenterNumberState(node, av[0], false);
					}
				}
				quickPadCells[5].firstChild.textContent = trainingContract.countMax;
				av = getUnitsAvailability(trainingContract.countMax + 1, trainingContract.cost, resourcesInfo);
				tsRefresh = Math.min(tsRefresh, getAvailabilityRefreshTimeout(av, 1));
				if (TB3O.bIsNPCInVillage) {
					quickPadCells[6].firstChild.textContent = trainingContract.countNPCMax;
					av = getUnitsAvailability(trainingContract.countNPCMax + 1, trainingContract.cost, resourcesInfo);
					tsRefresh = Math.min(tsRefresh, getAvailabilityRefreshTimeout(av, 2));
				}
				return tsRefresh;
			}
			function uiRefreshResAndTimeTable(trainingContract, resourcesInfo) {
				var cc = trainingContract.cc;
				var countContract = trainingContract.countContract;
				var node = $g("tb_trtt_" + trainingContract.contractNo);
				var av = getUnitsAvailability(countContract, trainingContract.cost, resourcesInfo);
				var aTb = uiCreateResAndTimeTable(av, resourcesInfo, null, null, [cc * trainingContract.count, cc * (trainingContract.count + countContract)], {
						top_title : true,
						NPC : (TB3O.O[26] === "1" && TB3O.bIsNPCInVillage),
					});
				replaceChildren(node, aTb);
			}
			function _uiRefreshResourcesDependences(resourcesInfo) {
				var tsRefresh = Infinity;
				var contractNo;
				for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
					var updatedInfo = updateResourcesInfo(resourcesInfo, contractNo);
					__calculateContractCountMax(updatedInfo, contractNo);
					tsRefresh = Math.min(tsRefresh, uiRefreshQuickPad(trainingContracts[contractNo], updatedInfo));
					uiRefreshResAndTimeTable(trainingContracts[contractNo], updatedInfo);
				}
				refreshTimer.cancel();
				if (isFinite(tsRefresh)) {
					refreshTimer.set(uiRefreshResourcesDependences, tsRefresh * 1000);
				}
			}
			function uiRefreshResourcesDependences() {
				_uiRefreshResourcesDependences(getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, true));
			}
			function onChangeContractCount(contractNo) {
				var trainingContract = trainingContracts[contractNo];
				trainingContract.countContract = validateInputInt(trainingContract.inputNode, 0, 9999);
				uiRefreshContractCounts(trainingContract);
				if (bUpdateUrl) {
					TB3O.onHashChange = function (e) {
						TB3O.onHashChange = setContractsCountsFromUrl;
					}
					crtUrl.hashKey["t" + trainingContract.tInfo[0]] = trainingContract.countContract;
					combineUri(crtUrl);
					window.location.hash = crtUrl.hash;
				}
				uiRefreshResourcesDependences();
			}
			function setContractCount(contractNo, count) {
				if (count === '' || isIntValid(count)) {
					var control = trainingContracts[contractNo].inputNode;
					control.value = count;
					fireChangeEvent(control);
				}
			}
			function onClearContractCount(contractNo) {
				setContractCount(contractNo, 0);
			}
			function onAddContractCount(contractNo, count) {
				setContractCount(contractNo, count + trainingContracts[contractNo].countContract);
			}
			function updateContractMax(contractNo) {}
			function onSetContractMax(contractNo) {
				updateContractMax(contractNo);
				setContractCount(contractNo, trainingContracts[contractNo].countMax);
			}
			function onSetContractNPCMax(contractNo) {
				updateContractMax(contractNo);
				setContractCount(contractNo, trainingContracts[contractNo].countNPCMax);
			}
			function setContractsCountsFromUrl() {
				var bParamsPresent = false;
				if (crtUrl.hashbang) {
					var contractNo;
					bParamsPresent = true;
					bUpdateUrl = false;
					for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
						trainingContracts[contractNo].countContract = 0;
					}
					for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
						var trainingContract = trainingContracts[contractNo];
						var tix = trainingContract.tInfo[0];
						var defValue = crtUrl.hashKey["t" + tix];
						if (defValue === "max") {
							onSetContractMax(contractNo);
						} else {
							setContractCount(contractNo, parseInt10(defValue));
						}
					}
					bUpdateUrl = true;
				}
				return bParamsPresent;
			}
			function uiCreateCountTip(tInfo, e) {
				var tip = null;
				var count = parseInt10(e.target.textContent);
				if (isIntValid(count) && count > 0) {
					tip = uiCreateTroopInfoTooltip2(tInfo, count);
				}
				return tip;
			}
			function uiCreateCountSpan(id, countTxt, tInfo) {
				var node = $span(countTxt);
				if (id) {
					node.id = id;
				}
				node.className = "tbCount";
				uiAddTooltip(node, bind2(uiCreateCountTip, [tInfo]));
				return node;
			}
			function uiCreateQLink(contractNo, handler, count) {
				return (count) ? $div([['class', 'CN a'], ['click', bind(onAddContractCount, [contractNo, count]), false]], "+" + count) : null;
			}
			(function () {
				var contractNo;
				var countMax = 0;
				var trainingContract;
				var resourcesInfo = getActualResourcesInfoNow(TB3O.ActiveVillageInfo.r, true);
				for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
					calculateContractCountMax(resourcesInfo, contractNo);
					trainingContract = trainingContracts[contractNo];
					if (trainingContract.countMax > countMax) {
						countMax = trainingContract.countMax;
					}
				}
				var Qcount = ifGreater(countMax, 2000, [100, 500, 1000], 1000, [50, 100, 500], 200, [10, 50, 100], 50, [5, 10, 50], 20, [5, 10], 10, [5], []);
				for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
					trainingContract = trainingContracts[contractNo];
					uiModifyTrainingContractLayout(trainingContract);
					var countNodeTxt = trainingContract.countNode.textContent;
					var countTxt = trainingContract.countTxt;
					var insertPoint = countNodeTxt.indexOf(countTxt);
					replaceChildren(trainingContract.countNode, [countNodeTxt.substr(0, insertPoint), uiCreateCountSpan(null, countTxt, trainingContract.tInfo), $span([['id', 'tb_cntp_' + contractNo], ['style', 'display:none;'], attrInject$], ["+", uiCreateCountSpan('tb_cntr_' + contractNo, "", trainingContract.tInfo), " " + getArrowChar() + " ", uiCreateCountSpan('tb_cnta_' + contractNo, "", trainingContract.tInfo)]), countNodeTxt.substr(insertPoint + countTxt.length)]);
					uiAddBuiltinUpDownControl(trainingContract.inputNode);
					var fHandler = bind(onChangeContractCount, [contractNo]);
					trainingContract.inputNode.addEventListener('keyup', fHandler, false);
					trainingContract.inputNode.addEventListener('change', fHandler, false);
					trainingContract.quickPadContainer.appendChild($t(['class', 'tbInject tbTrainQuick'], $r(null, [$td(['class', 'tbQDel'], uiCreateTool("del", null, bind(onClearContractCount, [contractNo]))), $td(['class', 'tbQAdd'], uiCreateQLink(contractNo, onAddContractCount, Qcount[0])), $td(['class', 'tbQAdd'], uiCreateQLink(contractNo, onAddContractCount, Qcount[1])), $td(['class', 'tbQAdd'], uiCreateQLink(contractNo, onAddContractCount, Qcount[2])), $td(['class', 'tbSep'], "/"), $td(['class', 'tbQSet tbQMax'], $div([['class', 'CN a ' + getCNClass(1)], ['click', bind(onSetContractMax, [contractNo]), false]], trainingContract.countMax)), (TB3O.bIsNPCInVillage) ? $td(['class', 'tbQSet tbQNPCMax'], $div([['class', 'CN a ' + getCNClass(2)], ['click', bind(onSetContractNPCMax, [contractNo]), false]], trainingContract.countNPCMax)) : null])));
					insertAfter(trainingContract.costNode, $e("p", [attrInject$, ['id', 'tb_trtt_' + contractNo]]));
				}
				if (!setContractsCountsFromUrl()) {
					for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
						uiRefreshContractCounts(trainingContracts[contractNo]);
					}
					_uiRefreshResourcesDependences(resourcesInfo);
				}
				TB3O.onHashChange = setContractsCountsFromUrl;
			})();
		}
		function updateUnitCountInfo(trainingContracts) {
			var unitsTotal = TB3O.ActiveVillageInfo.uci.ut;
			var contractNo;
			for (contractNo = 0; contractNo < trainingContracts.length; ++contractNo) {
				var trainingContract = trainingContracts[contractNo];
				var uix = trainingContract.tInfo[0] - TB3O.U[7];
				if (trainingContract.count > unitsTotal[uix]) {
					unitsTotal[uix] = trainingContract.count;
				}
			}
		}
		(function () {
			var xi;
			var trainingInfo = TB3O.VillagesTrInfo.load(TB3O.ActiveVillageId)[gid];
			if (trainingInfo) {
				var trainingInfoColl = {};
				trainingInfoColl[gid] = trainingInfo;
				var arrTriP = getTrainingInfoCollStats(trainingInfoColl, toTimeStamp(TB3O.serverTime)).troopsTotal;
				var trainedTroops = [];
				for (xi = 0; xi < arrTriP.length; ++xi) {
					trainedTroops.push(arrTriP[xi][3]);
				}
				var trainingContracts = scanTrainingContracts();
				uiModifyTrainingContracts(trainingContracts, trainedTroops);
				updateUnitCountInfo(trainingContracts);
				var titTb = searchTrainingQueueTable(document);
				if (titTb) {
					var rows = titTb.rows;
					var statTrainTable = (gid === 36) ? null : uiCreateTroopsAttDefInfoTable2("tb_traintroopstat", trainedTroops, T("STAT"), true);
					if (arrTriP.length < trainingInfo.evA.length) {
						var summaryTable = uiAddTrainingSummary(titTb, arrTriP);
						if (statTrainTable) {
							insertAfter(summaryTable, statTrainTable);
						}
					} else if (statTrainTable) {
						insertAfter(titTb, statTrainTable);
					}
					for (xi = 1; xi < rows.length - 1; ++xi) {
						var trainingEvent = trainingInfo.evA[xi - 1];
						uiAddTooltip(rows[xi].cells[0], bind(uiCreateTroopInfoTooltip, [trainingEvent.tri, trainingEvent.name]));
					}
				}
			}
		})();
	}
	function VillagesList() {
		this.links = {};
		this.vCount = 0;
		this.vActiveId = undefined;
		this.vTable = $g("villageList");
		if (!this.vTable) {
			this.vTable = $g("sidebarBoxVillagelist");
		}
		var aSeparators = loadSeparators();
		this.getSeparatorState = function (pos) {
			return aSeparators[pos];
		};
	}
	VillagesList.prototype.prepareTableChanges = function () {};
	VillagesList.prototype.getLink = function (villageId) {
		return this.links[villageId];
	};
	VillagesList.prototype.uiRefreshList = function (refresh_options) {};
	VillagesList.prototype.uiRefreshVillage = function (villageId, refresh_options) {};
	function parseCoords(str) {
		var x = null,
		y = null;
		function getCoord(matches) {
			if (matches) {
				if (matches[1] === 'X') {
					x = parseInt10(matches[2]);
				} else if (matches[1] === 'Y') {
					y = parseInt10(matches[2]);
				}
			}
		}
		if (!parseCoords.re) {
			parseCoords.re = /<span *class *= *"[^"]* *coordinate(X|Y) *[^"]*" *>[()]?([+-]?\d+)[()]?<\/span>/g;
		}
		str = decodeHTMLEntities(str);
		parseCoords.re.lastIndex = 0;
		getCoord(parseCoords.re.exec(str));
		getCoord(parseCoords.re.exec(str));
		return [x, y];
	}
	function getVillagesList() {
		var villagesList = new VillagesList();
		var pos;
		var villageId,
		villageInfo;
		for (villageId in TB3O.VillagesInfo) {
			TB3O.VillagesInfo[villageId].posInListOrg = null;
		}
		if (villagesList.vTable) {
			var vlist = $xf(".//ul/li", 'l', villagesList.vTable);
			for (pos = 0; pos < vlist.snapshotLength; pos++) {
				var vEntryNode = vlist.snapshotItem(pos);
				var vLinkNode = $nth_tag(vEntryNode, "a");
				if (vLinkNode) {
					var vLink = vLinkNode.getAttribute('href');
					var vUrl = parseUri(vLink);
					villageId = vUrl.queryKey.newdid; {
						cloneUndefinedProperties(crtUrl.queryKey, vUrl.queryKey);
						vLink = combineUri(vUrl);
						if (crtUrl.hashbang) {
							vLink += "#!" + crtUrl.hashbang;
						}
					}
					villagesList.links[villageId] = vLink;
					if (TB3O.VillagesInfo[villageId]) {
						villageInfo = TB3O.VillagesInfo[villageId];
					} else {
						villageInfo = new VillageInfo();
						TB3O.VillagesInfo[villageId] = villageInfo;
					}
					if (TB3O.ServerInfo.version > 4.0) {
						villageInfo.name = vLinkNode.querySelector("div.name").textContent;
					} else {
						villageInfo.name = vLinkNode.textContent;
					}
					villageInfo.id = villageId;
					var xy = parseCoords(vEntryNode.getElementsByClassName('coordinates')[0].outerHTML);
					villageInfo.x = xy[0];
					villageInfo.y = xy[1];
					villageInfo.posInListOrg = pos;
					villageInfo.markt = (hasClass(vEntryNode, 'attack')) ? 1 : 0;
					if (hasClass(vLinkNode, 'active')) {
						villagesList.vActiveId = villageId;
					}
					++villagesList.vCount;
				}
			}
		}
		for (villageId in TB3O.VillagesInfo) {
			if (TB3O.VillagesInfo[villageId].posInListOrg === null) {
				delete TB3O.VillagesInfo[villageId];
			}
		}
		return villagesList;
	}
	function uiModifyVillagesList() {
		var bAllowCustomization = (TB3O.O[91] === "1");
		if (bAllowCustomization) {
			restoreListOrder();
		}
		return;
		function restoreListOrder() {
			var mapPos2Id = getNormalizedCustomVillagesOrder();
			var pos;
			for (pos = 0; pos < TB3O.VillagesCount; ++pos) {
				TB3O.VillagesInfo[mapPos2Id[pos]].posInListCur = pos;
			}
		}
	}
	function uiModifySideBars() {
		function uiModifyDirectLinkButton(button, gid) {
			function uiCreateTriPTooltip() {
				var aTb = $t();
				aTb.id = 'tb_BiPTM';
				var trainingInfoColl = {};
				trainingInfoColl[gid] = TB3O.VillagesTrInfo.load(TB3O.ActiveVillageId)[gid];
				uiFillTriPTable(aTb, trainingInfoColl);
				return (aTb.hasChildNodes()) ? aTb : null;
			}
			if (button) {
				var cls = button.className.replace("gold", "green").replace("Black", "White");
				button.className = cls;
				button.removeAttribute('id');
				if (cls.indexOf('disabled') === -1) {
					button.title = T('BN_GID' + gid);
					button.onclick = function () {
						window.location = "build.php?gid=" + gid + "";
					}
					if (canBuildingTrainUnits(gid)) {
						uiAddTooltip(button, uiCreateTriPTooltip);
					}
				}
			}
		}
		if (TB3O.ServerInfo.version > 4.0) {
			uiModifyDirectLinkButton(document.querySelector(".workshopBlack"), 21);
			uiModifyDirectLinkButton(document.querySelector(".stableBlack"), 20);
			uiModifyDirectLinkButton(document.querySelector(".barracksBlack"), 19);
			uiModifyDirectLinkButton(document.querySelector(".marketBlack"), 17);
		}
	}
	function uiFillVillagesListCells(vRow, nStartColumn, villageInfo, layout_options, refresh_options) {
		function uiCreateBiPTMTooltip(villageId, e) {
			var tI = uiCreateBiPTMTable(villageId);
			if (!tI) {
				removeChildren(e.target.parentNode);
			}
			return tI;
		}
		var cells = vRow.cells;
		var k = nStartColumn;
		var aCell,
		aIco;
		var resourcesInfo = villageInfo.r;
		var villageResKnown = (resourcesInfo.dUpd !== undefined);
		if (layout_options.show_pop) {
			if (refresh_options.show_pop) {
				aCell = cells[k + 1];
				if (villageInfo.pop !== undefined) {
					replaceChildren(aCell, $span(['style', 'color:darkgreen;'], villageInfo.pop));
				} else {
					replaceChildren(aCell, $lnk(['href', spLnk], "?"));
				}
			}
			k += 2;
		}
		if (layout_options.show_cp) {
			if (refresh_options.show_cp) {
				replaceChildren(cells[k + 1], getActualVillageCP(villageInfo));
			}
			k += 2;
		}
		if (layout_options.show_pph) {
			for (xi = 1; xi < 4; xi++) {
				if (refresh_options.show_pph) {
					replaceChildren(cells[k + 1], villageResKnown ? resourcesInfo.EPpH[xi - 1] : "?");
				}
				k += 2;
			}
		}
		if (layout_options.show_crop_epph) {
			if (refresh_options.show_crop_epph) {
				aCell = cells[k + 1];
				if (villageResKnown) {
					uiSetEffectiveCropPpH(aCell, resourcesInfo.EPpH[3])
				} else {
					replaceChildren(aCell, "?");
				}
			}
			k += 2;
		}
		k += layout_options.show_in_out_icons * 2 + layout_options.show_center_map_icon * 1;
		if (layout_options.show_bip_att) {
			if (refresh_options.show_bip_att) {
				aCell = cells[k];
				if (villageInfo.BiP.length || villageInfo.TM.length || villageInfo.upi.evA.length) {
					replaceChildren(aCell, aIco = I("info"));
					uiAddTooltip(aIco, bind2(uiCreateBiPTMTooltip, [villageInfo.id]));
				} else {
					removeChildren(aCell);
				}
			}
			k += 1;
		}
		k += layout_options.show_send_troops_resources * 2;
		if (layout_options.show_distance) {
			if (refresh_options.show_distance) {
				if (isXYValid(TB3O.xCrt, TB3O.yCrt)) {
					var lDist = getDistance(villageInfo.x, villageInfo.y, TB3O.xCrt, TB3O.yCrt);
					cells[k].style.display = "";
					replaceChildren(cells[k + 1], lDist.toFixed(2));
				} else {
					cells[k].style.display = "none";
					removeChildren(cells[k + 1]);
				}
			}
		}
	}
	function uiAddVillagesListCells(vRow, villageInfo, bActive, bSep, layout_options) {
		var xi,
		aCell,
		aLink,
		strImg;
		var villageId = villageInfo.id;
		var mapId = xy2id(villageInfo.x, villageInfo.y);
		var fCreateResourceTooltip = bind(uiCreateResourceTooltip, [villageId]);
		var attrTool = ['class', 'tbTool'];
		var attrIco = ['class', 'tbIco'];
		var attrVal = ['class', 'tbVal'];
		function uiAddCell(vRow, aCell) {
			if (bActive) {
				addClass(aCell, "tbActive");
			}
			if (bSep) {
				addClass(aCell, "tb3sep");
			}
			vRow.appendChild(aCell);
		}
		if (layout_options.show_pop) {
			uiAddCell(vRow, $td(attrIco, I("pop")));
			uiAddCell(vRow, $td(attrVal));
		}
		if (layout_options.show_cp) {
			uiAddCell(vRow, $td(attrIco, I("cp")));
			uiAddCell(vRow, $td(attrVal));
		}
		if (layout_options.show_pph || layout_options.show_crop_epph) {
			for (xi = 1; xi <= 4; xi++) {
				if ((layout_options.show_pph && xi <= 4) || (layout_options.show_crop_epph && xi === 4)) {
					uiAddCell(vRow, $td(attrIco, I("r" + xi)));
					aCell = $td(attrVal);
					uiAddTooltip(aCell, fCreateResourceTooltip);
					uiAddCell(vRow, aCell);
				}
			}
		}
		if (layout_options.show_in_out_icons) {
			for (xi = 1; xi < 3; xi++) {
				strImg = (xi === 1) ? "ov" : "iv";
				aCell = $td(attrTool, $lnk(['href', 'dorf' + xi + '.php?newdid=' + villageId], I(strImg, [['title', villageInfo.name + " (dorf" + xi + ".php)"]])));
				uiAddCell(vRow, aCell);
			}
		}
		if (layout_options.show_center_map_icon) {
			aCell = $td(attrTool, uiCreateIntMapLink(mapId, I("centermap", [['title', T('CENTERMAP') + " (" + villageInfo.name + ")"]]), {
						disable_tip : true
					}));
			uiAddCell(vRow, aCell);
		}
		if (layout_options.show_bip_att) {
			uiAddCell(vRow, $td());
		}
		if (layout_options.show_send_troops_resources) {
			aCell = $td(attrTool, uiCreateSendAttDefTool(mapId, 0));
			uiAddCell(vRow, aCell);
			aCell = $td(attrTool, uiCreateSendResTool(mapId));
			uiAddCell(vRow, aCell);
		}
		if (layout_options.show_distance) {
			uiAddCell(vRow, $td(attrIco, I("dist" + docDir[0].substr(0, 1))));
			uiAddCell(vRow, $td(['class', 'tbDist']));
		}
	}
	function VillagesList2() {
		this.layout_options = {
			show_pop : TB3O.O[110] === "1",
			show_cp : TB3O.O[114] === "1",
			show_pph : TB3O.O[108] === "1",
			show_crop_epph : TB3O.O[109] === "1",
			show_in_out_icons : TB3O.O[105] === "1",
			show_center_map_icon : TB3O.O[106] === "1",
			show_bip_att : TB3O.O[111] === "1",
			show_send_troops_resources : TB3O.O[107] === "1",
			show_distance : TB3O.O[112] === "1" && (isSomeOf(TB3O.pageSelector, "map", "position_details", "market_send", "market_routes_edit", "rally_point_send"))
		};
		this.maxVCols = parseInt10(TB3O.O[117]) + 1;
		if (!isIntValid(this.maxVCols)) {
			this.maxVCols = 1;
		}
		this.maxRows = Math.ceil(TB3O.VillagesCount / this.maxVCols);
		this.fixedCells = 3 + this.layout_options.show_pop * 2 + this.layout_options.show_cp * 2 +
			this.layout_options.show_pph * 6 + this.layout_options.show_crop_epph * 2 +
			this.layout_options.show_in_out_icons * 2 + this.layout_options.show_center_map_icon * 1 +
			this.layout_options.show_bip_att * 1 + this.layout_options.show_send_troops_resources * 2 +
			this.layout_options.show_distance * 2;
		this.vTable = $t([['id', 'vl2table']]);
		this.uiCreate();
	}
	VillagesList2.prototype.getCellsCountPerVillage = function () {
		return this.fixedCells;
	}
	VillagesList2.prototype.getFirstCellIndex = function (nVColIndex) {
		return (this.getCellsCountPerVillage() + 1) * nVColIndex;
	}
	VillagesList2.prototype.uiCreate = function () {
		var self = this;
		var bAllowCustomization = (TB3O.O[91] === "1");
		var mapPos2Id = getVillagesOrder(TB3O.VillagesInfo);
		var i,
		j,
		pos;
		var aRow;
		for (i = 0; i < this.maxRows; ++i) {
			aRow = $r();
			for (j = 0; j < this.maxVCols; ++j) {
				if (j > 0) {
					aRow.appendChild($td(['class', 'tbEmpty']));
				}
				pos = i + this.maxRows * j;
				if (pos < mapPos2Id.length) {
					uiCreateCells(aRow, j, pos);
				} else {
					aRow.appendChild($td(['colspan', this.getCellsCountPerVillage()]));
				}
			}
			this.vTable.appendChild(aRow);
		}
		function uiCreateCells(aRow, nVColIndex, pos) {
			var villageId = mapPos2Id[pos];
			var villageInfo = TB3O.VillagesInfo[villageId];
			var bSep = bAllowCustomization && TB3O.VillagesList.getSeparatorState(pos);
			var bActive = (villageId === TB3O.ActiveVillageId);
			function uiAddCell(vRow, aCell) {
				if (bActive) {
					addClass(aCell, "tbActive");
				}
				if (bSep) {
					addClass(aCell, "tb3sep");
				}
				vRow.appendChild(aCell);
			}
			var aCell = $td(['class', 'tbMark' + villageInfo.markt], villageInfo.markt === 1 ? I("attacks") : villageInfo.mark);
			uiAddCell(aRow, aCell);
			aCell = $td(['class', 'tbName'], $lnk(['href', TB3O.VillagesList.getLink(villageId)], villageInfo.name));
			uiAddCell(aRow, aCell);
			aCell = $td(['class', 'tbCoord'], $lnk(['href', 'position_details.php?x=' + villageInfo.x + '&y=' + villageInfo.y], formatCoords(villageInfo.x, villageInfo.y)));
			uiAddCell(aRow, aCell);
			uiAddVillagesListCells(aRow, villageInfo, bActive, bSep, self.layout_options);
			uiFillVillagesListCells(aRow, self.getFirstCellIndex(nVColIndex) + 3, villageInfo, self.layout_options, self.layout_options);
		}
	};
	VillagesList2.prototype.uiRefreshList = function (refresh_options) {
		var mapPos2Id = getVillagesOrder(TB3O.VillagesInfo);
		var i,
		j,
		pos;
		var aRow;
		var opt,
		bNeedToUpdate = false;
		if (!refresh_options) {
			refresh_options = this.layout_options;
			bNeedToUpdate = true;
		} else {
			for (opt in refresh_options) {
				if (opt in this.layout_options) {
					bNeedToUpdate = true;
					break;
				}
			}
		}
		if (bNeedToUpdate) {
			for (i = 0; i <= this.maxRows; ++i) {
				aRow = this.vTable.rows[i];
				for (j = 0; j < this.maxVCols; ++j) {
					pos = i + this.maxRows * j;
					if (pos < mapPos2Id.length) {
						uiFillVillagesListCells(aRow, this.getFirstCellIndex(j) + 3, TB3O.VillagesInfo[mapPos2Id[pos]], this.layout_options, refresh_options);
					}
				}
			}
		}
	};
	VillagesList2.prototype.uiRefreshVillage = function (villageId, refresh_options) {
		var bAllowCustomization = (TB3O.O[91] === "1");
		var villageInfo = TB3O.VillagesInfo[villageId];
		var pos = (bAllowCustomization) ? villageInfo.posInListCur : villageInfo.posInListOrg;
		var nRowIndex = pos % this.maxRows;
		var nVColIndex = (pos - nRowIndex) / this.maxRows;
		var aRow = this.vTable.rows[nRowIndex];
		uiFillVillagesListCells(aRow, this.getFirstCellIndex(nVColIndex) + 3, villageInfo, this.layout_options, refresh_options || this.layout_options);
	};
	function uiCreate2ndVillageListWidget() {
		var villagesList2 = null;
		if (TB3O.O[18] === "1") {
			villagesList2 = new VillagesList2();
			var vL2XY = TB3O.O[78].split("|");
			var strTitle = "<a href='dorf3.php" + modifyDorf3Url("") + "'>" + T('VGL') + " (" + TB3O.VillagesCount + ")</a>";
			$df(250, vL2XY[0], vL2XY[1], strTitle, "vl2table", "vl2tableTT", true, villagesList2.vTable);
			if (TB3O.O[73] !== "1") {
				villagesList2.vTable.style.display = 'none';
			}
		}
		return villagesList2;
	}
	function uiRefreshVL(refresh_options) {
		if (TB3O.VillagesList) {
			TB3O.VillagesList.uiRefreshList(refresh_options);
		}
		if (TB3O.VillagesList2) {
			TB3O.VillagesList2.uiRefreshList(refresh_options);
		}
	}
	function uiRefreshVL_Distance(x, y) {
		var refresh_options = {
			show_distance : true
		};
		TB3O.xCrt = x;
		TB3O.yCrt = y; ;
		uiRefreshVL(refresh_options);
	}
	function uiRefreshVL_Pop() {
		uiRefreshVL({
			show_pop : true
		});
	}
	function setTimers() {
		function tmUpdateResource(ri, quantum) {
			var i;
			var resNodesList = document.getElementsByClassName("timeout" + ri);
			for (i = 0; i < resNodesList.length; ++i) {
				var aResNode = resNodesList.item(i);
				var cap = parseInt10(getTBAttribute(aResNode, "cap"));
				var bCapReached = false;
				var quantity = parseInt10(aResNode.textContent);
				var new_quantity = quantity - quantum;
				if (!isNaN(cap) && cap > 0) {
					if ((quantum < 0 && new_quantity >= cap) || (quantum > 0 && new_quantity <= cap)) {
						new_quantity = cap;
						if (quantity !== cap) {
							bCapReached = true;
						}
					}
				}
				if (new_quantity >= 0) {
					aResNode.textContent = new_quantity;
				}
				if (new_quantity === 0) {
					eventResZeroCountdown(aResNode);
				} else if (bCapReached) {
					eventResCapReached(aResNode);
				}
				if ((quantity < 100000 && new_quantity >= 100000) || (quantity >= 100000 && new_quantity < 100000)) {
					eventResThresholdCrossing(aResNode);
				}
			}
		}
		function tmProcessTime() {
			function doTimeouts(aTimeout) {
				var xTime = toSeconds(aTimeout.textContent);
				if (!isNaN(xTime)) {
					if (--xTime >= 0) {
						aTimeout.textContent = formatTimeSpan(xTime, 0);
					}
				}
			}
			function doTimes(aTime) {
				var secs = parseInt10(getTBAttribute(aTime, "ss"));
				var format = parseInt10(getTBAttribute(aTime, "format"));
				if (!isIntValid(format)) {
					format = 2;
				}
				if (secs > 0) {
					aTime.textContent = formatDateTimeRelativeToNow(secs, format);
				}
			}
			forEach(document.getElementsByClassName("timeouta"), doTimeouts);
			forEach(document.getElementsByClassName("timereln"), doTimes);
		}
		function setResourceUpdateInterval(ri, nEPpH) {
			var minFrequency = TB3O.Timeouts.min_res_freq;
			var frequency,
			quantum;
			frequency = 3600000 / Math.abs(nEPpH);
			if (isFinite(frequency)) {
				quantum = 1;
				if (frequency < minFrequency) {
					quantum = Math.round(minFrequency / frequency);
					frequency *= quantum;
				}
				if (nEPpH < 0) {
					quantum = -quantum;
				}
				frequency = Math.floor(frequency);
				setInterval(bind(tmUpdateResource, [ri, quantum]), frequency);
			}
		}
		var resourcesInfo = TB3O.ActiveVillageInfo.r;
		var nEPpHTot = 0;
		var ri;
		for (ri = 0; ri < 4; ri++) {
			var nEPpH = resourcesInfo.EPpH[ri];
			if (!(nEPpH > 0 && resourcesInfo.Cap[ri] === resourcesInfo.Res[ri])) {
				nEPpHTot += nEPpH;
			}
			setResourceUpdateInterval(ri, nEPpH);
		}
		setResourceUpdateInterval(4, nEPpHTot);
		setInterval(tmProcessTime, TB3O.Timeouts.ttf_update);
	}
	function isExcludedPage() {
		var bExclude = false;
		var i,
		e;
		var excludedId = ['sright', 'side_navi', 'sleft', 'ltop1', 'ltop5', 'lleft', 'lmidall', 'lmid2', 'lright1', 'lmid1'];
		for (i = 0; i < excludedId.length; ++i) {
			if ($g(excludedId[i])) {
				bExclude = true;
				break;
			}
		}
		if (!bExclude) {
			e = $g("content");
			if (e && hasClass(e, "login")) {
				bExclude = true;
			} else {
				e = $g("side_info");
				if (e && hasClass(e, "outgame")) {
					bExclude = true;
				}
			}
		}
		return bExclude;
	}
	function doPage() {
		setDefLang();
		if (getGeneralData()) {
			var buildGID;
			var fullScreenMap = (crtUrl.path === "/karte.php" && crtUrl.queryKey.fullscreen === "1");
			TB3O.VillagesInfo = loadVillagesInfo();
			if (crtUrl.path === "/spieler.php") {
				processPlayerProfile();
			}
			if (crtUrl.path !== "/nachrichten.php") {
				var aI = $xf("//input[@type!='hidden']");
				if (aI) {
					aI.focus();
				}
			}
			if (crtUrl.path === "/statistiken.php") {
				getStatisticsMenu();
				TB3O.pageSelector = "stat";
			}
			toJSvoid();
			TB3O.VillagesList = getVillagesList();
			TB3O.VillagesCount = TB3O.VillagesList.vCount;
			TB3O.ActiveVillageId = TB3O.VillagesList.vActiveId;
			TB3O.ActiveVillageInfo = TB3O.VillagesInfo[TB3O.ActiveVillageId];
			TB3O.xCrt = TB3O.ActiveVillageInfo.x;
			TB3O.yCrt = TB3O.ActiveVillageInfo.y;
			TB3O.ActiveVillageMapId = xy2id(TB3O.ActiveVillageInfo.x, TB3O.ActiveVillageInfo.y);
			if (TB3O.U[4] !== "" && TB3O.U[5] === "") {
				getCapitalId();
			}
			var spBcookie = getGMcookieV2("specBuildings");
			if (spBcookie && spBcookie[TB3O.ActiveVillageId]) {
				TB3O.d2spB = spBcookie[TB3O.ActiveVillageId];
			}
			setVillageRes(TB3O.ActiveVillageId, document, toTimeStamp(TB3O.serverTime));
			if (TB3O.pageSelector === "" && crtUrl.path === "/dorf1.php") {
				processDorf1();
			} else if (TB3O.pageSelector === "" && (crtUrl.path === "/dorf2.php" || (crtUrl.path === "/build.php" && $g("village_map")))) {
				processDorf2();
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/dorf3.php" && !crtUrl.queryKey.hasOwnProperty("su")) {
				processDorf3();
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/position_details.php") {
				processPositionDetails();
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/berichte.php") {
				TB3O.pageSelector = (crtUrl.queryKey.hasOwnProperty("id")) ? "report_view" : "report_list";
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/nachrichten.php") {
				TB3O.pageSelector = (crtUrl.queryKey.hasOwnProperty("id")) ? "message_view" : "message_list";
				if (crtUrl.queryKey.t === "1") {
					TB3O.pageSelector = "message_post";
				}
			} else if (TB3O.pageSelector === "profile_my") {
				processMyProfile();
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/allianz.php") {
				if (!crtUrl.queryKey.s) {
					TB3O.pageSelector = "profile_alliance";
				} else if (crtUrl.queryKey.s === "2") {
					TB3O.pageSelector = "alliance_forum";
				}
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/karte.php" && (crtUrl.queryKey.d === undefined || crtUrl.queryKey.z !== undefined)) {
				TB3O.pageSelector = "map";
			} else if (TB3O.pageSelector === "" && crtUrl.path === "/build.php") {
				var buildNode = $g("build");
				if (buildNode) {
					var buildSubMenu = searchAndParseSubMenu();
					var buildActiveUrl = buildSubMenu ? parseUri(buildSubMenu.items[buildSubMenu.active][1]) : crtUrl;
					buildGID = scanIntWithPrefix("gid", buildNode.className);
					processBuilding(buildGID);
					if (buildGID === 16) {
						if (buildSubMenu) {
							TB3O.pageSelector = ifEqual(buildActiveUrl.queryKey.tt, "1", "rally_point_overview", "2", "rally_point_send", "99", "rally_point_club", "");
							if (TB3O.pageSelector === "rally_point_send" && crtUrl.queryKey.hasOwnProperty("d")) {
								TB3O.pageSelector = "rally_point_dismiss";
							}
						}
						switch (TB3O.pageSelector) {
						case "rally_point_overview":
							processRallyPointOverview();
							break;
						}
					} else if (buildGID === 17 && detectMarketPage()) {
						switch (TB3O.pageSelector) {
						case "market_routes":
							processMarketRoutes();
							break;
						case "market_routes_edit":
							processMarketRoutesEdit();
							break;
						case "market_send":
							processMarketSend();
							break;
						case "market_offer":
							processMarketOffer();
							break;
						}
					} else if ((buildGID === 25 || buildGID === 26) && buildActiveUrl.queryKey.s === "2") {
						processCultureTab();
					} else if (buildGID === 24) {
						processTownHall();
					} else if (buildGID === 13) {
						processUpgradeBuilding(buildGID);
					}
					if (canBuildingTrainUnits(buildGID)) {
						TB3O.isTtB = ((buildGID === 25 || buildGID === 26) && buildActiveUrl.queryKey.s === "1") || isThisTrainingBuilding();
						if (TB3O.isTtB) {
							processTrainingBuilding(buildGID);
						}
					}
				}
			}
			reconcileVillagesInfo(TB3O.VillagesInfo);
			TB3O.ResInfoTotals = getResInfoTotals();
			TB3O.bIsNPCInVillage = getNPCAvailability(TB3O.ActiveVillageId);
			setTravianStyles();
			setTBStyles()
			if (TB3O.VillagesList) {
				uiModifyVillagesList();
			}
			if (!fullScreenMap) {
				hideAd();
				uiModifySideBars();
				uiModifyBigIconsBar();
				if (TB3O.VillagesList) {
					TB3O.VillagesList2 = uiCreate2ndVillageListWidget();
				}
				uiCreateResBarWidget();
				showUserBookmarks();
				showNoteBlock();
				uiCreateSearchBarWidget();
			}
			if (crtUrl.path === "/build.php" || crtUrl.path === "/hero_inventory.php") {
				uiModifyContracts();
			}
			if (TB3O.isTtB) {
				uiModifyTrainingBuilding(buildGID);
			}
			switch (TB3O.pageSelector) {
			case "dorf1":
				uiModifyDorf1();
				break;
			case "dorf2":
				uiModifyDorf2();
				break;
			case "dorf3":
				uiModifyDorf3();
				break;
			case "position_details":
				uiModifyPositionDetails();
				break;
			case "market_routes":
				uiModifyMarketRoutes();
				break;
			case "market_routes_edit":
				uiModifyMarketRoutesEdit();
				break;
			case "market_send":
				uiModifyMarketSend();
				break;
			case "market_offer":
				uiModifyMarketOffer();
				break;
			case "market_buy":
				break;
			case "report_list":
			case "message_list":
				uiModifyMsgRptList();
				break;
			case "report_view":
				uiModifyRptView();
				break;
			case "message_view":
				uiModifyMsgView();
				break;
			case "message_post":
				uiModifyMsgPost();
				break;
			case "profile_my":
			case "profile_other":
				uiModifyPlayerProfile();
				break;
			case "profile_alliance":
				uiModifyAllianceProfile();
				break;
			case "alliance_forum":
				uiModifyAllianceForum();
				break;
			case "map":
				uiModifyMap();
				break;
			case "culture":
				uiModifyCultureTab();
				break;
			case "stat":
				uiAddKeyboardNavigation();
				break;
			case "rally_point_overview":
				if (crtUrl.queryKey.filter > 0) {
					uiAddKeyboardNavigation();
				}
				break;
			case "rally_point_send":
				uiModifyRallyPointSend();
				break;
			case "rally_point_dismiss":
				uiModifyRallyPointDismiss();
				break;
			}
			saveVillagesInfo(TB3O.VillagesInfo);
			if (TB3O.pageSelector !== "market_buy") {
				var bAddAttSendResLinks = false;
				var bAddCoordAndDistTT = false;
				if (TB3O.pageSelector === "rally_point_overview") {
					if (TB3O.O[80] === "1") {
						uiAddTroopInfoTooltips(document);
					}
					bAddAttSendResLinks = (TB3O.O[85] === "1");
					bAddCoordAndDistTT = (TB3O.O[81] === "1");
				} else {
					if (TB3O.O[53] === "1") {
						uiAddTroopInfoTooltips(document);
					}
					bAddAttSendResLinks = (TB3O.O[99] === "1" && crtUrl.path !== "/hero_adventure.php" && TB3O.pageSelector !== "position_details");
					bAddCoordAndDistTT = (TB3O.O[54] === "1" && (isSomeOf(crtUrl.path, "/spieler.php", "/cropfinder.php", "/cropfinder.php", "/statistiken.php", "/hero_adventure.php") || TB3O.pageSelector.indexOf("market_send") === 0 || (TB3O.pageSelector === "report_list" && crtUrl.queryKey.t === "5") || isSomeOf(TB3O.pageSelector, "rally_point_dismiss", "message_view", "report_view")));
				}
				uiModifyLinks($g(ID_CONTENT), {
					add_send_troops : bAddAttSendResLinks,
					add_send_troops2 : isSomeOf(TB3O.pageSelector, "message_view"),
					add_coord_dist_tip : bAddCoordAndDistTT,
					add_center_map : isSomeOf(TB3O.pageSelector, "rally_point_club")
				});
			}
			if ("onhashchange" in window) {
				window.addEventListener("hashchange", function (e) {
					crtUrl = parseUri(window.location.href);
					if (TB3O.onHashChange) {
						TB3O.onHashChange();
					}
				}, false);
			}
			if (!fullScreenMap) {
				setTimers();
				showTBTotalRuntime();
			}
		}
	}
	if (!isExcludedPage()) {
        console.log('doing page)))');
		doPage();
	}
})();
